{"version":3,"file":"3001.4a7e3e45.iframe.bundle.js","mappings":"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","sources":["webpack://foreldrepengesoknad/./src/app/utils/hooks/useRequest.ts","webpack://foreldrepengesoknad/./src/app/api/storageParser.ts","webpack://foreldrepengesoknad/./src/app/api/api.ts","webpack://foreldrepengesoknad/./src/app/api/apiInterceptor.ts","webpack://foreldrepengesoknad/./src/app/api/apiUtils.ts","webpack://foreldrepengesoknad/./src/app/context/types/AnnenForelder.ts","webpack://foreldrepengesoknad/./src/app/context/types/Barn.ts","webpack://foreldrepengesoknad/./src/app/types/Attachment.ts","webpack://foreldrepengesoknad/./src/app/types/RequestState.ts","webpack://foreldrepengesoknad/./src/app/utils/barnUtils.ts","webpack://foreldrepengesoknad/./src/app/utils/globalUtil.ts","webpack://foreldrepengesoknad/./src/app/utils/hooks/useSaveLoadedRoute.ts","webpack://foreldrepengesoknad/./src/app/utils/hooks/useSøknad.ts","webpack://foreldrepengesoknad/./src/app/utils/isFarEllerMedmor.ts","webpack://foreldrepengesoknad/./src/app/utils/redirectToLogin.ts","webpack://foreldrepengesoknad/./src/app/utils/submitUtils.ts","webpack://foreldrepengesoknad/./src/app/utils/vedleggUtils.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { AxiosError, AxiosRequestConfig } from 'axios';\nimport getAxiosInstance from 'app/api/apiInterceptor';\nimport { redirectToLogin } from './../../utils/redirectToLogin';\nimport { RequestStatus } from 'app/types/RequestState';\n\ntype Options = {\n    config?: AxiosRequestConfig;\n    fnr?: string;\n    isSuspended?: boolean;\n};\n\nconst DEFAULT_OPTIONS: Options = {\n    config: {},\n    isSuspended: false,\n};\n\nexport const useGetRequest = <T>(url: string, options: Options = DEFAULT_OPTIONS) => {\n    const [data, setData] = useState<T>();\n    const [error, setError] = useState<AxiosError<any> | null>(null);\n    const [requestStatus, setRequestStatus] = useState<RequestStatus>(RequestStatus.UNFETCHED);\n    const axiosInstance = options.fnr ? getAxiosInstance(options.fnr) : getAxiosInstance();\n\n    useEffect(() => {\n        if (!options.isSuspended && requestStatus === RequestStatus.UNFETCHED) {\n            setRequestStatus(RequestStatus.IN_PROGRESS);\n\n            axiosInstance\n                .get(url, options.config)\n                .then((res) => {\n                    res.data === '' ? setData(undefined) : setData(res.data);\n                    setRequestStatus(RequestStatus.FINISHED);\n                })\n                .catch((err) => {\n                    if (err.response && (err.response.status === 401 || err.response.status === 403)) {\n                        redirectToLogin();\n                    } else {\n                        setError(err);\n                    }\n                    setRequestStatus(RequestStatus.FINISHED);\n                });\n        }\n    }, [options, url, axiosInstance, requestStatus]);\n\n    return { data, error, requestStatus };\n};\n\nexport const usePostRequest = <T>(url: string, body: any, options: Options = DEFAULT_OPTIONS) => {\n    const [data, setData] = useState<T>();\n    const [error, setError] = useState<AxiosError<any> | null>(null);\n    const [requestStatus, setRequestStatus] = useState<RequestStatus>(RequestStatus.UNFETCHED);\n    const axiosInstance = options.fnr ? getAxiosInstance(options.fnr) : getAxiosInstance();\n\n    useEffect(() => {\n        if (!options.isSuspended && requestStatus === RequestStatus.UNFETCHED) {\n            setRequestStatus(RequestStatus.IN_PROGRESS);\n\n            axiosInstance\n                .post(url, body, options.config)\n                .then((res) => {\n                    res.data === '' ? setData(undefined) : setData(res.data);\n                    setRequestStatus(RequestStatus.FINISHED);\n                })\n                .catch((err) => {\n                    if (err.response && (err.response.status === 401 || err.response.status === 403)) {\n                        redirectToLogin();\n                    } else {\n                        setError(err);\n                    }\n                    setRequestStatus(RequestStatus.FINISHED);\n                });\n        }\n    }, [options, url, axiosInstance, requestStatus, body]);\n\n    return { data, error, requestStatus };\n};\n","import moment from 'moment';\nimport { isISODateString } from 'nav-datovelger';\n\nexport const dateStringToDateObjectMapper = (_key: string, value: string) => {\n    if (isISODateString(value)) {\n        return value;\n    }\n    if (!Array.isArray(value) && moment(value, [moment.HTML5_FMT.DATE, 'YYYY-MM-DDTHH:mm:ss.SSSZ'], true).isValid()) {\n        return new Date(value);\n    }\n    return value;\n};\nexport const storageParser = (storageResponse: string) => {\n    if (storageResponse) {\n        return JSON.parse(storageResponse, dateStringToDateObjectMapper);\n    }\n};\n","import { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport { Kvittering } from 'app/types/Kvittering';\nimport { SøkerinfoDTO } from 'app/types/SøkerinfoDTO';\nimport { useGetRequest, usePostRequest } from 'app/utils/hooks/useRequest';\nimport { AxiosResponse } from 'axios';\nimport getAxiosInstance from './apiInterceptor';\nimport { storageParser } from './storageParser';\nimport Environment from 'app/Environment';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport { formaterDato } from 'app/utils/dateUtils';\nimport { EndringssøknadForInnsending, SøknadForInnsending } from './apiUtils';\nimport { hasValue } from '@navikt/fp-common';\nimport { SakerOppslag } from 'app/types/SakerOppslag';\nimport { AnnenPartVedtakDTO } from 'app/types/AnnenPartVedtakDTO';\nimport { RequestStatus } from 'app/types/RequestState';\n\nexport interface TilgjengeligeStønadskontoerParams {\n    antallBarn: string;\n    morHarRettINorge: boolean;\n    farHarRettINorge: boolean;\n    dekningsgrad: Dekningsgrad.HUNDRE_PROSENT | Dekningsgrad.ÅTTI_PROSENT;\n    termindato: string | undefined;\n    fødselsdato: string | undefined;\n    omsorgsovertakelsesdato: string | undefined;\n    morHarAleneomsorg: boolean | undefined;\n    farHarAleneomsorg: boolean | undefined;\n    startdatoUttak: string;\n    minsterett: boolean;\n    erMor: boolean;\n    morHarUføretrygd: boolean;\n    harAnnenForelderTilsvarendeRettEØS: boolean;\n    familieHendelseDatoNesteSak: string | undefined;\n}\n\nconst formaterStønadskontoParamsDatoer = (dato: string | undefined, datoformat?: string): string | undefined => {\n    return hasValue(dato) ? formaterDato(dato, datoformat) : undefined;\n};\n\nconst uttakBaseUrl = Environment.UTTAK_API_URL;\nconst sendSøknadUrl = '/soknad';\nconst sendEndringssøknadUrl = '/soknad/endre';\n\nconst useSøkerinfo = () => {\n    const { data, error } = useGetRequest<SøkerinfoDTO>('/sokerinfo', { config: { withCredentials: true } });\n\n    return {\n        søkerinfoData: data,\n        søkerinfoError: error,\n    };\n};\n\nconst useGetSaker = () => {\n    const { data, error } = useGetRequest<SakerOppslag>('/innsyn/v2/saker', {\n        config: { withCredentials: true },\n    });\n\n    return {\n        sakerData: data,\n        sakerError: error,\n    };\n};\n\nconst useGetAnnenPartsVedtak = (\n    annenPartFnr: string | undefined,\n    barnFnr: string | undefined,\n    familiehendelsesdato: string | undefined,\n    isSuspended: boolean\n) => {\n    const body = {\n        annenPartFødselsnummer: annenPartFnr,\n        barnFødselsnummer: barnFnr,\n        familiehendelse: familiehendelsesdato,\n    };\n    const { data, error, requestStatus } = usePostRequest<AnnenPartVedtakDTO>('/innsyn/v2/annenPartVedtak', body, {\n        config: {\n            withCredentials: true,\n        },\n        isSuspended,\n    });\n\n    if (error && error.message.includes('Ugyldig ident')) {\n        return {\n            eksisterendeSakAnnenPartData: undefined,\n            eksisterendeSakAnnenPartError: undefined,\n            eksisterendeSakAnnenPartRequestStatus: RequestStatus.FINISHED,\n        };\n    }\n    return {\n        eksisterendeSakAnnenPartData: data,\n        eksisterendeSakAnnenPartError: error,\n        eksisterendeSakAnnenPartRequestStatus: requestStatus,\n    };\n};\n\nconst useStoredAppState = () => {\n    const { data, error } = useGetRequest<ForeldrepengesøknadContextState>('/storage', {\n        config: { transformResponse: storageParser, withCredentials: true },\n    });\n\n    return {\n        storageData: data,\n        storageError: error,\n    };\n};\n\nconst storeAppState = (state: ForeldrepengesøknadContextState, fnr: string) => {\n    const {\n        søknad,\n        version,\n        currentRoute,\n        uttaksplanInfo,\n        antallUkerIUttaksplan,\n        eksisterendeSak,\n        endringstidspunkt,\n        harAnnenPartEksisterendeSak,\n        harEksisterendeSak,\n        perioderSomSkalSendesInn,\n        harUttaksplanBlittSlettet,\n        søknadGjelderEtNyttBarn,\n        barnFraNesteSak,\n        brukerSvarteJaPåAutoJustering,\n        annenPartsUttakErLagtTilIPlan,\n    } = state;\n    return getAxiosInstance(fnr).post(\n        '/storage',\n        {\n            søknad,\n            version,\n            currentRoute,\n            uttaksplanInfo,\n            antallUkerIUttaksplan,\n            eksisterendeSak,\n            endringstidspunkt,\n            harAnnenPartEksisterendeSak,\n            harEksisterendeSak,\n            perioderSomSkalSendesInn,\n            harUttaksplanBlittSlettet,\n            søknadGjelderEtNyttBarn,\n            barnFraNesteSak,\n            brukerSvarteJaPåAutoJustering,\n            annenPartsUttakErLagtTilIPlan,\n        },\n        { withCredentials: true }\n    );\n};\n\nconst deleteStoredAppState = (fnr: string) => {\n    return getAxiosInstance(fnr).delete('/storage', { withCredentials: true });\n};\n\nconst getStorageKvittering = (fnr: string): Promise<AxiosResponse<Kvittering>> => {\n    return getAxiosInstance(fnr).get('/storage/kvittering/foreldrepenger', {\n        withCredentials: true,\n        timeout: 15 * 1000,\n    });\n};\n\nconst useGetUttakskontoer = (params: TilgjengeligeStønadskontoerParams, isSuspended = false) => {\n    const {\n        antallBarn,\n        farHarRettINorge,\n        morHarRettINorge,\n        harAnnenForelderTilsvarendeRettEØS,\n        dekningsgrad,\n        fødselsdato,\n        termindato,\n        omsorgsovertakelsesdato,\n        morHarAleneomsorg,\n        farHarAleneomsorg,\n        startdatoUttak,\n        minsterett,\n        erMor,\n        morHarUføretrygd,\n        familieHendelseDatoNesteSak,\n    } = params;\n\n    const fpUttakServiceDateFormat = 'YYYYMMDD';\n\n    const urlParams = {\n        farHarRett: farHarRettINorge,\n        morHarRett: morHarRettINorge,\n        harAnnenForelderTilsvarendeRettEØS,\n        morHarAleneomsorg: morHarAleneomsorg || false,\n        farHarAleneomsorg: farHarAleneomsorg || false,\n        dekningsgrad,\n        antallBarn,\n        fødselsdato: formaterStønadskontoParamsDatoer(fødselsdato, fpUttakServiceDateFormat),\n        termindato: formaterStønadskontoParamsDatoer(termindato, fpUttakServiceDateFormat),\n        omsorgsovertakelseDato: formaterStønadskontoParamsDatoer(omsorgsovertakelsesdato, fpUttakServiceDateFormat),\n        startdatoUttak: formaterStønadskontoParamsDatoer(startdatoUttak, fpUttakServiceDateFormat),\n        minsterett,\n        erMor,\n        morHarUføretrygd,\n        familieHendelseDatoNesteSak: formaterStønadskontoParamsDatoer(\n            familieHendelseDatoNesteSak,\n            fpUttakServiceDateFormat\n        ),\n    };\n\n    const { data, error } = useGetRequest<TilgjengeligeStønadskontoerDTO>(`${uttakBaseUrl}/konto`, {\n        config: {\n            timeout: 15 * 1000,\n            params: urlParams,\n            withCredentials: false,\n        },\n        isSuspended,\n    });\n\n    return {\n        tilgjengeligeStønadskontoerData: data,\n        tilgjengeligeStønadskontoerError: error,\n    };\n};\n\nfunction sendSøknad(søknad: SøknadForInnsending | EndringssøknadForInnsending, fnr: string) {\n    const url = søknad.erEndringssøknad ? sendEndringssøknadUrl : sendSøknadUrl;\n\n    return getAxiosInstance(fnr).post(url, søknad, {\n        withCredentials: true,\n        timeout: 120 * 1000,\n        headers: {\n            'content-type': 'application/json;',\n        },\n    });\n}\n\nconst Api = {\n    useGetUttakskontoer,\n    storeAppState,\n    deleteStoredAppState,\n    getStorageKvittering,\n    useGetAnnenPartsVedtak,\n    useStoredAppState,\n    useSøkerinfo,\n    sendSøknad,\n    useGetSaker,\n};\n\nexport default Api;\n","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport Environment from 'app/Environment';\n\nconst apiBaseUrl = Environment.REST_API_URL;\n\nexport const AxiosInstance = axios.create({ baseURL: apiBaseUrl });\n\nconst getAxiosInstance = (fnr?: string) => {\n    AxiosInstance.interceptors.request.use((config) => {\n        config.timeout = 60 * 1000;\n\n        if (process.env.NODE_ENV !== 'development' && fnr) {\n            config.headers!.fnr = fnr;\n        }\n        return config;\n    });\n\n    AxiosInstance.interceptors.response.use(\n        (response: AxiosResponse) => {\n            return response;\n        },\n        (response: AxiosError) => {\n            return Promise.reject(response);\n        }\n    );\n\n    return AxiosInstance;\n};\n\nexport default getAxiosInstance;\n","import { Søknad } from 'app/context/types/Søknad';\nimport AnnenForelder, { AnnenForelderIkkeOppgitt, isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport {\n    Periode,\n    UttaksperiodeBase,\n    Periodetype,\n    isForeldrepengerFørFødselUttaksperiode,\n    isUttaksperiode,\n    Arbeidsform,\n    Utsettelsesperiode,\n} from 'uttaksplan/types/Periode';\nimport Barn, { isAdoptertBarn, isAdoptertStebarn, isFødtBarn } from 'app/context/types/Barn';\nimport Søker from 'app/context/types/Søker';\nimport Søkersituasjon from 'app/context/types/Søkersituasjon';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { Søkerrolle } from 'app/types/Søkerrolle';\nimport { assertUnreachable } from 'app/utils/globalUtil';\nimport {\n    isArrayOfAttachments,\n    mapAttachmentsToSøknadForInnsending,\n    removeAttachmentsWithUploadError,\n    removeDuplicateAttachments,\n} from 'app/utils/vedleggUtils';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport dayjs from 'dayjs';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport { Forelder } from 'app/types/Forelder';\nimport { sorterPerioder } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { Attachment } from 'app/types/Attachment';\nimport { Tilleggsopplysninger } from 'app/context/types/Tilleggsopplysninger';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { andreAugust2022ReglerGjelder, førsteOktober2021ReglerGjelder } from 'app/utils/dateUtils';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { uttaksperiodeKanJusteresVedFødsel } from 'app/utils/wlbUtils';\nimport { getTermindato } from 'app/utils/barnUtils';\nimport { AxiosError } from 'axios';\nimport * as Sentry from '@sentry/browser';\nexport interface AnnenForelderOppgittForInnsending\n    extends Omit<\n        AnnenForelder,\n        'erUfør' | 'harRettPåForeldrepengerINorge' | 'harOppholdtSegIEØS' | 'harRettPåForeldrepengerIEØS'\n    > {\n    harMorUføretrygd?: boolean;\n    harRettPåForeldrepenger?: boolean;\n    harAnnenForelderOppholdtSegIEØS?: boolean;\n    harAnnenForelderTilsvarendeRettEØS?: boolean;\n}\n\nexport type AnnenForelderForInnsending = AnnenForelderIkkeOppgitt | AnnenForelderOppgittForInnsending;\n\nexport interface JusterbarPeriodeForInnsending {\n    justeresVedFødsel?: boolean;\n}\n\nexport type UttaksPeriodeForInnsending = Omit<UttaksperiodeBase, 'erMorForSyk'> & JusterbarPeriodeForInnsending;\n\nexport type PeriodeForInnsending = Exclude<Periode, 'Uttaksperiode'> | UttaksPeriodeForInnsending;\n\nexport type LocaleForInnsending = 'NB' | 'NN';\n\nexport type SøkerrolleInnsending = 'MOR' | 'FAR' | 'MEDMOR';\n\ninterface BarnPropsForAPI {\n    adopsjonAvEktefellesBarn?: boolean;\n}\n\nexport type BarnForInnsending = Omit<Barn, 'datoForAleneomsorg' | 'type'> & BarnPropsForAPI;\n\nexport interface SøkerForInnsending extends Omit<Søker, 'andreInntekterSiste10Mnd' | 'språkkode'> {\n    språkkode: LocaleForInnsending;\n    rolle: SøkerrolleInnsending;\n}\n\nexport interface SøknadForInnsending\n    extends Omit<\n        Søknad,\n        'barn' | 'annenForelder' | 'uttaksplan' | 'søker' | 'søkersituasjon' | 'tilleggsopplysninger'\n    > {\n    barn: BarnForInnsending;\n    annenForelder: AnnenForelderForInnsending;\n    uttaksplan: PeriodeForInnsending[];\n    søker: SøkerForInnsending;\n    situasjon: Situasjon;\n    tilleggsopplysninger?: string;\n}\n\nexport type EndringssøknadForInnsending = Pick<\n    SøknadForInnsending,\n    | 'type'\n    | 'saksnummer'\n    | 'erEndringssøknad'\n    | 'uttaksplan'\n    | 'vedlegg'\n    | 'søker'\n    | 'annenForelder'\n    | 'barn'\n    | 'dekningsgrad'\n    | 'situasjon'\n    | 'tilleggsopplysninger'\n    | 'ønskerJustertUttakVedFødsel'\n>;\n\nexport const FOR_MANGE_VEDLEGG_ERROR =\n    'Søknaden kan ikke inneholde flere enn 40 vedlegg. Vennligst gå tilbake, slett noen vedlegg og prøv å sende inn søknaden på nytt. Du kan ettersende vedlegg senere.';\n\nexport const FEIL_VED_INNSENDING =\n    'Det har oppstått et problem med innsending av søknaden. Vennligst prøv igjen senere. Hvis problemet vedvarer, kontakt oss og oppgi feil id: ';\n\nexport const UKJENT_UUID = 'ukjent uuid';\n\nconst getUttaksperiodeForInnsending = (\n    uttaksPeriode: UttaksperiodeBase,\n    ønskerJustertUttakVedFødsel: boolean | undefined,\n    termindato: Date | undefined\n): UttaksPeriodeForInnsending => {\n    const cleanedPeriode = changeGradertUttaksPeriode(cleanUttaksperiode(uttaksPeriode));\n    if (uttaksperiodeKanJusteresVedFødsel(ønskerJustertUttakVedFødsel, termindato, uttaksPeriode.tidsperiode.fom)) {\n        return { ...cleanedPeriode, justeresVedFødsel: true };\n    }\n    return cleanedPeriode;\n};\n\nconst cleanUttaksperiode = (uttaksPeriode: UttaksperiodeBase): UttaksPeriodeForInnsending => {\n    const { erMorForSyk, ...periodeRest } = uttaksPeriode;\n    return periodeRest;\n};\n\nconst isNotPeriodetypeHull = (periode: Periode): boolean => {\n    return periode.type !== Periodetype.Hull;\n};\n\nconst isNotPeriodetypeInfo = (periode: Periode): boolean => {\n    return periode.type !== Periodetype.Info;\n};\n\nconst isNotPeriodeUtenUttak = (periode: Periode): boolean => {\n    return periode.type !== Periodetype.PeriodeUtenUttak;\n};\n\nconst skalPeriodeSendesInn = (periode: Periode) => {\n    if (isForeldrepengerFørFødselUttaksperiode(periode)) {\n        return !periode.skalIkkeHaUttakFørTermin;\n    }\n\n    return (\n        isNotPeriodetypeHull(periode) &&\n        isNotPeriodetypeInfo(periode) &&\n        isNotPeriodeUtenUttak(periode) &&\n        !(isUttaksperiode(periode) && periode.konto === undefined)\n    );\n};\n\nconst cleanAnnenForelder = (annenForelder: AnnenForelder, erEndringssøknad = false): AnnenForelderForInnsending => {\n    if (isAnnenForelderOppgitt(annenForelder)) {\n        const {\n            erUfør,\n            erForSyk,\n            harRettPåForeldrepengerINorge,\n            harRettPåForeldrepengerIEØS,\n            harOppholdtSegIEØS,\n            ...annenForelderRest\n        } = annenForelder;\n        const cleanedAnnenForelder = {\n            harMorUføretrygd: erUfør,\n            harRettPåForeldrepenger: harRettPåForeldrepengerINorge,\n            ...annenForelderRest,\n        };\n        if (harRettPåForeldrepengerINorge) {\n            return { ...cleanedAnnenForelder, erInformertOmSøknaden: true } as AnnenForelderOppgittForInnsending;\n        }\n        if (harOppholdtSegIEØS) {\n            return {\n                ...cleanedAnnenForelder,\n                harAnnenForelderOppholdtSegIEØS: harOppholdtSegIEØS,\n                harAnnenForelderTilsvarendeRettEØS: harRettPåForeldrepengerIEØS,\n            };\n        } else if (erEndringssøknad) {\n            return { ...cleanedAnnenForelder, harAnnenForelderTilsvarendeRettEØS: harRettPåForeldrepengerIEØS };\n        } else {\n            return { ...cleanedAnnenForelder, harAnnenForelderOppholdtSegIEØS: harOppholdtSegIEØS };\n        }\n    }\n    return annenForelder;\n};\n\nconst cleanBarn = (barn: Barn): BarnForInnsending => {\n    if (isFødtBarn(barn)) {\n        const { datoForAleneomsorg, type, fnr, ...barnRest } = barn;\n\n        return barnRest;\n    }\n\n    if (isAdoptertBarn(barn)) {\n        const { datoForAleneomsorg, type, fnr, ...barnRest } = barn;\n        return {\n            adopsjonAvEktefellesBarn: isAdoptertStebarn(barn),\n            ...barnRest,\n        };\n    }\n    const { datoForAleneomsorg, type, ...barnRest } = barn;\n    return barnRest;\n};\n\nconst konverterRolle = (rolle: Søkerrolle): SøkerrolleInnsending => {\n    switch (rolle) {\n        case 'mor':\n            return 'MOR';\n        case 'far':\n            return 'FAR';\n        case 'medmor':\n            return 'MEDMOR';\n        default:\n            return assertUnreachable(rolle, 'Søkerrolle er ikke satt');\n    }\n};\n\nconst changeClientonlyKontotype = (\n    periode: Periode,\n    annenForelderHarRettPåForeldrepengerINorge: boolean,\n    morErUfør: boolean,\n    søkerErFarEllerMedmor: boolean,\n    familiehendelsesdato: Date\n) => {\n    if (isUttaksperiode(periode)) {\n        if (periode.konto === StønadskontoType.Flerbarnsdager) {\n            periode.konto = !annenForelderHarRettPåForeldrepengerINorge\n                ? StønadskontoType.Foreldrepenger\n                : StønadskontoType.Fellesperiode;\n        }\n        if (periode.konto === StønadskontoType.AktivitetsfriKvote) {\n            periode.konto = StønadskontoType.Foreldrepenger;\n            if (\n                søkerErFarEllerMedmor &&\n                !annenForelderHarRettPåForeldrepengerINorge &&\n                andreAugust2022ReglerGjelder(familiehendelsesdato)\n            ) {\n                periode.morsAktivitetIPerioden = MorsAktivitet.IkkeOppgitt;\n            } else if (morErUfør) {\n                periode.morsAktivitetIPerioden = MorsAktivitet.Uføre;\n            }\n        }\n    }\n    return periode;\n};\n\nconst getArbeidstakerFrilansSN = (arbeidsformer: Arbeidsform[] | undefined) => {\n    if (arbeidsformer !== undefined && arbeidsformer.length > 0) {\n        const arbeidsform = arbeidsformer[0];\n        return {\n            erArbeidstaker: arbeidsform === Arbeidsform.arbeidstaker,\n            erFrilanser: arbeidsform === Arbeidsform.frilans,\n            erSelvstendig: arbeidsform === Arbeidsform.selvstendignæringsdrivende,\n        };\n    } else {\n        return {};\n    }\n};\n\nconst changeGradertUttaksPeriode = (periode: UttaksPeriodeForInnsending): UttaksPeriodeForInnsending => {\n    if (periode.gradert) {\n        return { ...periode, ...getArbeidstakerFrilansSN(periode.arbeidsformer) };\n    }\n    return periode;\n};\n\nconst cleanUttaksplan = (\n    uttaksplan: Periode[],\n    familiehendelsesdato: Date,\n    søkerErFarEllerMedmor: boolean,\n    ønskerJustertUttakVedFødsel: boolean | undefined,\n    termindato: Date | undefined,\n    annenForelder?: AnnenForelder,\n    endringstidspunkt?: Date\n): PeriodeForInnsending[] => {\n    const cleanedUttaksplan = uttaksplan\n        .filter((periode: Periode) => isValidTidsperiode(periode.tidsperiode))\n        .filter(skalPeriodeSendesInn)\n        .map((periode) =>\n            annenForelder && isAnnenForelderOppgitt(annenForelder)\n                ? changeClientonlyKontotype(\n                      periode,\n                      !!annenForelder.harRettPåForeldrepengerINorge,\n                      !!annenForelder.erUfør,\n                      søkerErFarEllerMedmor,\n                      familiehendelsesdato\n                  )\n                : periode\n        )\n        .map((periode) =>\n            periode.type === Periodetype.Uttak\n                ? getUttaksperiodeForInnsending(periode, ønskerJustertUttakVedFødsel, termindato)\n                : periode\n        );\n\n    if (endringstidspunkt && førsteOktober2021ReglerGjelder(familiehendelsesdato)) {\n        const periodeVedEndringstidspunkt = getPeriodeVedTidspunkt(cleanedUttaksplan, endringstidspunkt);\n\n        if (!periodeVedEndringstidspunkt) {\n            return getUttaksplanMedFriUtsettelsesperiode(cleanedUttaksplan, endringstidspunkt);\n        }\n    }\n\n    return cleanedUttaksplan;\n};\n\nexport const getPeriodeVedTidspunkt = (uttaksplan: Periode[], tidspunkt: Date): Periode | undefined => {\n    return uttaksplan.find((periode) =>\n        dayjs(tidspunkt).isBetween(periode.tidsperiode.fom, periode.tidsperiode.tom, 'day', '[]')\n    );\n};\n\nexport const getUttaksplanMedFriUtsettelsesperiode = (uttaksplan: Periode[], endringstidspunkt: Date): Periode[] => {\n    const førstePeriodeEtterEndringstidspunkt = uttaksplan.find((periode) =>\n        dayjs(periode.tidsperiode.fom).isAfter(endringstidspunkt, 'day')\n    );\n\n    const endringsTidspunktPeriodeTom = førstePeriodeEtterEndringstidspunkt\n        ? Uttaksdagen(førstePeriodeEtterEndringstidspunkt.tidsperiode.fom).forrige()\n        : endringstidspunkt;\n\n    const endringsTidspunktPeriode: Utsettelsesperiode = {\n        type: Periodetype.Utsettelse,\n        årsak: UtsettelseÅrsakType.Fri,\n        id: guid(),\n        tidsperiode: {\n            fom: endringstidspunkt,\n            tom: endringsTidspunktPeriodeTom,\n        },\n        erArbeidstaker: false,\n        forelder: Forelder.farMedmor,\n    };\n\n    uttaksplan.push(endringsTidspunktPeriode);\n\n    uttaksplan.sort(sorterPerioder);\n\n    return uttaksplan;\n};\n\nexport const cleanSøknad = (søknad: Søknad, familiehendelsesdato: Date): SøknadForInnsending => {\n    const { søker, barn, annenForelder, søkersituasjon, tilleggsopplysninger, uttaksplan, ...rest } = søknad;\n    const annenForelderInnsending = cleanAnnenForelder(annenForelder);\n    const søkerInnsending = cleanSøker(søker, søknad.søkersituasjon);\n    const barnInnsending = cleanBarn(barn);\n    const søkerErFarEllerMedmor = isFarEllerMedmor(søknad.søkersituasjon.rolle);\n    const termindato = getTermindato(søknad.barn);\n    const uttaksplanInnsending = cleanUttaksplan(\n        uttaksplan,\n        familiehendelsesdato,\n        søkerErFarEllerMedmor,\n        søknad.ønskerJustertUttakVedFødsel,\n        termindato,\n        annenForelder\n    );\n    const tilleggsopplysningerInnsending = cleanTilleggsopplysninger(søknad.tilleggsopplysninger);\n    const cleanedSøknad: SøknadForInnsending = {\n        søker: søkerInnsending,\n        barn: barnInnsending,\n        situasjon: søknad.søkersituasjon.situasjon,\n        annenForelder: annenForelderInnsending,\n        uttaksplan: uttaksplanInnsending,\n        tilleggsopplysninger: tilleggsopplysningerInnsending,\n        ...rest,\n    };\n\n    removeDuplicateAttachments(cleanedSøknad.uttaksplan);\n\n    return mapAttachmentsToSøknadForInnsending(cleanedSøknad) as SøknadForInnsending; //TODO vedleggForSenEndring\n};\n\nconst cleanSøker = (søker: Søker, søkersituasjon: Søkersituasjon): SøkerForInnsending => {\n    const cleanedSpråkkode = søker.språkkode === 'nb' ? 'NB' : 'NN';\n    const rolle = konverterRolle(søkersituasjon.rolle);\n    return {\n        ...søker,\n        rolle: rolle,\n        språkkode: cleanedSpråkkode,\n    };\n};\n\nexport const getSøknadsdataForInnsending = (\n    originalSøknad: Søknad,\n    endringerIUttaksplan: Periode[],\n    familiehendelsesdato: Date,\n    endringstidspunkt?: Date\n): SøknadForInnsending | EndringssøknadForInnsending => {\n    const søknad: Søknad = JSON.parse(JSON.stringify(originalSøknad));\n    if (søknad.erEndringssøknad) {\n        return cleanEndringssøknad(\n            søknad,\n            endringerIUttaksplan,\n            familiehendelsesdato,\n            søknad.ønskerJustertUttakVedFødsel,\n            endringstidspunkt\n        );\n    } else {\n        return cleanSøknad(søknad, familiehendelsesdato);\n    }\n};\n\nexport const cleanAttachments = (object: any): Attachment[] => {\n    const foundAttachments = [] as Attachment[];\n\n    if (object === null || object === undefined) {\n        return foundAttachments;\n    }\n\n    Object.keys(object).forEach((key: string) => {\n        if (typeof object[key] === 'object') {\n            if (isArrayOfAttachments(object[key])) {\n                const attachmentWithoutUploadError = [...removeAttachmentsWithUploadError(object[key])];\n                foundAttachments.push(...attachmentWithoutUploadError);\n                object[key] = (object[key] as Attachment[])\n                    .filter((attachment: Attachment) => attachmentWithoutUploadError.includes(attachment))\n                    .map((attachment: Attachment) => attachment.id);\n            } else {\n                foundAttachments.push(...cleanAttachments(object[key]));\n            }\n        }\n    });\n    return foundAttachments;\n};\n\nexport const cleanEndringssøknad = (\n    søknad: Søknad,\n    endringerIUttaksplan: Periode[],\n    familiehendelsesdato: Date,\n    ønskerJustertUttakVedFødsel: boolean | undefined,\n    endringstidspunkt?: Date\n): EndringssøknadForInnsending => {\n    const søkerErFarEllerMedmor = isFarEllerMedmor(søknad.søkersituasjon.rolle);\n    const termindato = getTermindato(søknad.barn);\n    const cleanedSøknad: EndringssøknadForInnsending = {\n        erEndringssøknad: true,\n        saksnummer: søknad.saksnummer,\n        type: søknad.type,\n        uttaksplan: cleanUttaksplan(\n            endringerIUttaksplan,\n            familiehendelsesdato,\n            søkerErFarEllerMedmor,\n            ønskerJustertUttakVedFødsel,\n            termindato,\n            søknad.annenForelder,\n            endringstidspunkt\n        ),\n        vedlegg: cleanAttachments({ søknad }), //TODO: cleanUpAttachments({ cleanedSøknad, vedleggForSenEndring: søknad.vedleggForSenEndring });\n        søker: cleanSøker(søknad.søker, søknad.søkersituasjon),\n        annenForelder: cleanAnnenForelder(søknad.annenForelder, true),\n        barn: søknad.barn,\n        dekningsgrad: søknad.dekningsgrad,\n        situasjon: søknad.søkersituasjon.situasjon,\n        tilleggsopplysninger: cleanTilleggsopplysninger(søknad.tilleggsopplysninger),\n        ønskerJustertUttakVedFødsel: søknad.ønskerJustertUttakVedFødsel,\n    };\n\n    removeDuplicateAttachments(cleanedSøknad.uttaksplan);\n\n    return mapAttachmentsToSøknadForInnsending(cleanedSøknad);\n};\n\nconst cleanTilleggsopplysninger = (tilleggsopplysninger: Tilleggsopplysninger): string | undefined => {\n    const tilleggsopplysningerTilSaksbehandler = tilleggsopplysninger.begrunnelseForSenEndring?.tekst;\n    if (tilleggsopplysningerTilSaksbehandler !== undefined && tilleggsopplysningerTilSaksbehandler.length > 0) {\n        return tilleggsopplysningerTilSaksbehandler;\n    }\n    return undefined;\n};\n\nexport const sendErrorMessageToSentry = (error: AxiosError<any>) => {\n    const errorCallId = getErrorCallId(error) + '. ';\n    const errorTimestamp = getErrorTimestamp(error) + '. ';\n    const hideNumbersAndTrim = (tekst: string): string => {\n        return tekst.replace(/[0-9]/g, '*').slice(0, 250) + '...';\n    };\n\n    let errorString = errorCallId + errorTimestamp;\n    if (error.request && error.request.data && error.request.data.messages) {\n        errorString = errorString + hideNumbersAndTrim(error.request.data.messages);\n    } else if (error.response && error.response.data && error.response.data.messages) {\n        errorString = errorString + hideNumbersAndTrim(error.response.data.messages);\n    }\n    if (error.message) {\n        errorString = errorString + error.message;\n    }\n    Sentry.captureMessage(errorString);\n};\n\nexport const getErrorCallId = (error: AxiosError<any>): string => {\n    return error.response && error.response.data && error.response.data.uuid ? error.response.data.uuid : UKJENT_UUID;\n};\n\nexport const getErrorTimestamp = (error: AxiosError<any>): string => {\n    return error.response && error.response.data && error.response.data.timestamp ? error.response.data.timestamp : '';\n};\n","interface Common {\n    kanIkkeOppgis: boolean;\n}\n\nexport interface AnnenForelderOppgitt extends Common {\n    fornavn: string;\n    etternavn: string;\n    fnr: string;\n    utenlandskFnr?: boolean;\n    bostedsland?: string;\n    harRettPåForeldrepengerINorge?: boolean;\n    harOppholdtSegIEØS?: boolean;\n    harRettPåForeldrepengerIEØS?: boolean;\n    erInformertOmSøknaden?: boolean;\n    erForSyk?: boolean;\n    erUfør?: boolean;\n}\n\nexport type AnnenForelderIkkeOppgitt = Common;\n\ntype AnnenForelder = AnnenForelderIkkeOppgitt | AnnenForelderOppgitt;\n\nexport const isAnnenForelderOppgitt = (annenForelder: AnnenForelder): annenForelder is AnnenForelderOppgitt => {\n    return annenForelder.kanIkkeOppgis === false;\n};\n\nexport const isAnnenForelderIkkeOppgitt = (annenForelder: AnnenForelder): annenForelder is AnnenForelderIkkeOppgitt => {\n    return annenForelder.kanIkkeOppgis === true;\n};\n\nexport default AnnenForelder;\n","import { Attachment } from 'app/types/Attachment';\n\nexport enum BarnType {\n    FØDT = 'født',\n    UFØDT = 'ufødt',\n    ADOPTERT_STEBARN = 'adoptertStebarn',\n    ADOPTERT_ANNET_BARN = 'adoptertAnnetBarn',\n    IKKE_UTFYLT = 'ikkeUtfylt',\n}\n\ninterface Common {\n    type: BarnType;\n    antallBarn: number;\n    dokumentasjonAvAleneomsorg?: Attachment[];\n    datoForAleneomsorg?: Date;\n}\n\nexport interface IkkeUtfyltTypeBarn extends Common {\n    type: BarnType.IKKE_UTFYLT;\n    fødselsdatoer: Date[];\n    fnr?: string[];\n}\n\nexport interface FødtBarn extends Common {\n    type: BarnType.FØDT;\n    fødselsdatoer: Date[];\n    termindato?: Date;\n    fnr?: string[];\n}\n\nexport interface UfødtBarn extends Common {\n    type: BarnType.UFØDT;\n    termindato: Date;\n    terminbekreftelse?: Attachment[];\n    terminbekreftelsedato?: Date;\n}\n\nexport interface AdoptertBarn extends Common {\n    type: BarnType.ADOPTERT_STEBARN | BarnType.ADOPTERT_ANNET_BARN;\n    adopsjonsdato: Date;\n    fødselsdatoer: Date[];\n    omsorgsovertakelse: Attachment[];\n    fnr?: string[];\n}\n\nexport interface AdoptertStebarn extends AdoptertBarn {\n    type: BarnType.ADOPTERT_STEBARN;\n}\n\nexport interface AdoptertAnnetBarn extends AdoptertBarn {\n    type: BarnType.ADOPTERT_ANNET_BARN;\n    adoptertIUtlandet: boolean;\n    ankomstdato?: Date;\n}\n\nexport type Barn = FødtBarn | UfødtBarn | AdoptertBarn | AdoptertStebarn | AdoptertAnnetBarn | IkkeUtfyltTypeBarn;\n\nexport interface BarnFraNesteSak {\n    familiehendelsesdato: Date;\n    startdatoFørsteStønadsperiode: Date;\n    fnr: string[] | undefined;\n    annenForelderFnr: string | undefined;\n}\n\nexport const isIkkeUtfyltTypeBarn = (barn: Barn): barn is IkkeUtfyltTypeBarn => {\n    return barn.type === BarnType.IKKE_UTFYLT;\n};\n\nexport const isFødtBarn = (barn: Barn): barn is FødtBarn => {\n    return barn.type === BarnType.FØDT;\n};\n\nexport const isUfødtBarn = (barn: Barn): barn is UfødtBarn => {\n    return barn.type === BarnType.UFØDT;\n};\n\nexport const isAdoptertBarn = (barn: Barn): barn is AdoptertBarn => {\n    return barn.type === BarnType.ADOPTERT_STEBARN || barn.type === BarnType.ADOPTERT_ANNET_BARN;\n};\n\nexport const isAdoptertStebarn = (barn: Barn): barn is AdoptertStebarn => {\n    return barn.type === BarnType.ADOPTERT_STEBARN;\n};\n\nexport const isAdoptertAnnetBarn = (barn: Barn): barn is AdoptertAnnetBarn => {\n    return barn.type === BarnType.ADOPTERT_ANNET_BARN;\n};\n\nexport default Barn;\n","import { AttachmentType } from './AttachmentType';\nimport { Skjemanummer } from './Skjemanummer';\n\nexport enum InnsendingsType {\n    SEND_SENERE = 'SEND_SENERE',\n}\n\nexport interface Attachment {\n    id: string;\n    filename: string;\n    filesize: number;\n    file: File;\n    url?: string;\n    uuid?: string;\n    pending: boolean;\n    uploaded: boolean;\n    type: AttachmentType;\n    skjemanummer: Skjemanummer;\n    innsendingsType?: InnsendingsType;\n    error?: any;\n    beskrivelse?: string;\n}\n","export enum RequestStatus {\n    'UNFETCHED' = 'Unfetched',\n    'IN_PROGRESS' = 'InProgress',\n    'FINISHED' = 'Finished',\n}\n","import { formatDate, intlUtils } from '@navikt/fp-common';\nimport { dateToISOString } from '@navikt/sif-common-formik/lib';\nimport Barn, { isFødtBarn, isIkkeUtfyltTypeBarn, isUfødtBarn } from 'app/context/types/Barn';\nimport { RegistrertBarn } from 'app/types/Person';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport { IntlShape } from 'react-intl';\n\ndayjs.extend(utc);\n\nexport const getFamiliehendelsedato = (barn: Barn): string => {\n    if (isFødtBarn(barn) || isIkkeUtfyltTypeBarn(barn)) {\n        return dateToISOString(barn.fødselsdatoer[0]);\n    }\n    if (isUfødtBarn(barn)) {\n        return dateToISOString(barn.termindato);\n    }\n\n    return dateToISOString(barn.adopsjonsdato);\n};\n\nconst barnFødselsdatoLikSakFødselsdato = (fødselsdatoer: Date[] | undefined, regBarnFødselsdato: Date | undefined) => {\n    return fødselsdatoer !== undefined && regBarnFødselsdato !== undefined\n        ? fødselsdatoer.find((fødselsdato) => dayjs(fødselsdato).isSame(regBarnFødselsdato)) !== undefined\n        : false;\n};\n\nexport const getRegistrerteBarnOmDeFinnes = (\n    barn: Barn,\n    registrerteBarn: RegistrertBarn[]\n): RegistrertBarn[] | undefined => {\n    return registrerteBarn.length > 0 && !isUfødtBarn(barn)\n        ? registrerteBarn.filter(\n              (regBarn) =>\n                  barn.fnr?.includes(regBarn.fnr) ||\n                  barnFødselsdatoLikSakFødselsdato(barn.fødselsdatoer, regBarn.fødselsdato)\n          )\n        : undefined;\n};\n\nexport const getTermindato = (barn: Barn): Date | undefined => {\n    return isFødtBarn(barn) || isUfødtBarn(barn) ? barn.termindato : undefined;\n};\n\nexport const getFødselsdato = (barn: Barn): Date | undefined => {\n    return isFødtBarn(barn) ? barn.fødselsdatoer[0] : undefined;\n};\n\nexport const getDødeBarnetForMerEnn3MånederSiden = (registrerteBarn: RegistrertBarn) => {\n    const dato3MånederTilbake = dayjs(new Date()).subtract(3, 'month');\n    return (\n        registrerteBarn.dødsdato !== undefined && dayjs(registrerteBarn.dødsdato).isBefore(dato3MånederTilbake, 'day')\n    );\n};\n\nexport const getTekstForAntallBarn = (antallBarn: number, intl: IntlShape): string => {\n    if (antallBarn === 1) {\n        return intlUtils(intl, 'barn');\n    } else if (antallBarn === 2) {\n        return intlUtils(intl, 'tvillinger');\n    } else if (antallBarn === 3) {\n        return intlUtils(intl, 'trillinger');\n    }\n    return intlUtils(intl, 'flerlinger');\n};\n\nexport const getLeverBarnet = (barn: RegistrertBarn) => {\n    return !barn.dødsdato;\n};\n\nexport const getAndreBarnFødtSammenMedBarnet = (\n    barnFnr: string | undefined,\n    barnFødselsdato: Date,\n    registrerteBarn: RegistrertBarn[]\n) => {\n    const dagenFørFødsel = dayjs(barnFødselsdato).subtract(1, 'day');\n    const dagenEtterFødsel = dayjs(barnFødselsdato).add(1, 'day');\n    return registrerteBarn.filter(\n        (b) =>\n            b.fnr !== barnFnr &&\n            dayjs(b.fødselsdato).isSameOrAfter(dagenFørFødsel, 'day') &&\n            dayjs(b.fødselsdato).isSameOrBefore(dagenEtterFødsel, 'day')\n    );\n};\n\nexport const getTittelBarnNårNavnSkalIkkeVises = (\n    omsorgsovertagelsesdato: Date | undefined,\n    fødselsdatoer: Date[] | undefined,\n    antallBarn: number,\n    intl: IntlShape\n): string => {\n    if (omsorgsovertagelsesdato !== undefined) {\n        return intlUtils(intl, 'velkommen.barnVelger.adoptertBarn', {\n            adopsjonsdato: formatDate(omsorgsovertagelsesdato),\n        });\n    } else {\n        const fødselsdatoTekst = formaterFødselsdatoerPåBarn(fødselsdatoer);\n        const barnTekst = getTekstForAntallBarn(antallBarn, intl);\n\n        return fødselsdatoer !== undefined && fødselsdatoer.length > 0\n            ? intlUtils(intl, 'velkommen.barnVelger.fødtBarn.barn', {\n                  barnTekst,\n                  fødselsdato: fødselsdatoTekst,\n              })\n            : '';\n    }\n};\n\nexport const formaterNavnPåBarn = (\n    fornavn: string[] | undefined,\n    fødselsdatoer: Date[] | undefined,\n    omsorgsovertagelsesdato: Date | undefined,\n    alleBarnaLever: boolean,\n    antallBarn: number,\n    intl: IntlShape\n): string => {\n    if (fornavn === undefined || fornavn.length === 0 || !alleBarnaLever) {\n        return getTittelBarnNårNavnSkalIkkeVises(omsorgsovertagelsesdato, fødselsdatoer, antallBarn, intl);\n    }\n\n    if (fornavn.length > 1) {\n        const fornavnene = fornavn.slice(0, -1).join(', ');\n        const sisteFornavn = fornavn[fornavn.length - 1];\n        return `${fornavnene} og ${sisteFornavn}`;\n    }\n    return `${fornavn[0]}`;\n};\n\nexport const formaterFødselsdatoerPåBarn = (fødselsdatoer: Date[] | undefined): string | undefined => {\n    if (fødselsdatoer === undefined) {\n        return undefined;\n    }\n    const unikeFødselsdatoer = [] as Date[];\n    fødselsdatoer.forEach((f) => {\n        const finnesIUnikeFødselsdatoer = unikeFødselsdatoer.find((dato) => dayjs(dato).isSame(f, 'day'));\n        if (finnesIUnikeFødselsdatoer === undefined) {\n            unikeFødselsdatoer.push(f);\n        }\n    });\n\n    if (unikeFødselsdatoer.length > 1) {\n        const fødselsdatoerTekst = unikeFødselsdatoer.map((fd) => formatDate(fd));\n        const førsteFødselsdaoer = fødselsdatoerTekst.slice(0, -1).join(', ');\n        const sisteFødselsdato = fødselsdatoerTekst[fødselsdatoerTekst.length - 1];\n        return `${førsteFødselsdaoer} og ${sisteFødselsdato}`;\n    }\n    return formatDate(unikeFødselsdatoer[0]);\n};\n","import Bytes from 'bytes';\nimport { Attachment } from 'app/types/Attachment';\n\nexport const assertUnreachable = (_x: never, message?: string): never => {\n    throw new Error(message === undefined ? 'This should never happen.' : message);\n};\n\nexport const bytesString = (bytes: number): string => {\n    return Bytes(bytes, {\n        unitSeparator: ' ',\n        thousandsSeparator: ' ',\n        decimalPlaces: 1,\n        fixedDecimals: false,\n    });\n};\n\nexport const deleteAttachment = (attachments: Attachment[], deleted: Attachment): Attachment[] => {\n    return attachments.filter((att) => att !== deleted);\n};\n","import actionCreator from '../../context/action/actionCreator';\nimport SøknadRoutes from '../../routes/routes';\nimport { useForeldrepengesøknadContext } from '../../context/hooks/useForeldrepengesøknadContext';\nimport { useEffect, useRef } from 'react';\nimport { storeAppState } from '../submitUtils';\nimport { redirectToLogin } from '../redirectToLogin';\n\nconst useSaveLoadedRoute = (currentRoute: SøknadRoutes) => {\n    const { dispatch, state } = useForeldrepengesøknadContext();\n    const routeHasBeenSaved = useRef(false);\n\n    useEffect(() => {\n        if (!routeHasBeenSaved.current) {\n            routeHasBeenSaved.current = true;\n            dispatch(actionCreator.updateCurrentRoute(currentRoute));\n            storeAppState({ ...state, currentRoute }).catch((error) => {\n                if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n                    redirectToLogin();\n                }\n            });\n        }\n    }, [currentRoute, dispatch, state]);\n};\n\nexport default useSaveLoadedRoute;\n","import { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport { Søknad } from 'app/context/types/Søknad';\n\nconst useSøknad = (): Søknad => {\n    const { state } = useForeldrepengesøknadContext();\n    return state.søknad;\n};\n\nexport default useSøknad;\n","import { Søkerrolle } from 'app/types/Søkerrolle';\n\nconst isFarEllerMedmor = (rolle: Søkerrolle) => {\n    if (rolle === 'far' || rolle === 'medmor') {\n        return true;\n    }\n\n    return false;\n};\n\nexport default isFarEllerMedmor;\n","import Environment from 'app/Environment';\n\nexport const redirectToLogin = () => {\n    window.location.href = Environment.LOGIN_URL + '?redirect=' + window.location.origin;\n};\n","import Api from 'app/api/api';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { Forelder } from 'app/types/Forelder';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\n\nimport { AxiosResponse } from 'axios';\n\nimport dayjs from 'dayjs';\nimport { guid } from 'nav-frontend-js-utils';\nimport {\n    isOppholdsperiode,\n    isOverføringsperiode,\n    isUtsettelsesperiode,\n    isUttaksperiode,\n    Periode,\n    Periodetype,\n    Utsettelsesperiode,\n} from 'uttaksplan/types/Periode';\nimport { dateIsWithinRange } from './dateUtils';\n\nexport const storeAppState = (state: ForeldrepengesøknadContextState): Promise<AxiosResponse<any>> => {\n    return Api.storeAppState(state, state.søkerinfo.person.fnr);\n};\n\nexport const erPeriodeSomSkalSendesInn = (periode: Periode): boolean => {\n    return (\n        isUttaksperiode(periode) ||\n        isOverføringsperiode(periode) ||\n        isUtsettelsesperiode(periode) ||\n        isOppholdsperiode(periode)\n    );\n};\n\nexport const getPerioderSomSkalSendesInn = (\n    nyPlan: Periode[],\n    erEndringssøknad: boolean,\n    erFarEllerMedmor: boolean,\n    opprinneligPlan?: Periode[],\n    endringstidspunkt?: Date\n): Periode[] => {\n    if (opprinneligPlan) {\n        return erEndringssøknad\n            ? getEndretUttaksplanForInnsending(opprinneligPlan, nyPlan, endringstidspunkt, erFarEllerMedmor)\n            : nyPlan.filter(erPeriodeSomSkalSendesInn);\n    }\n    return nyPlan;\n};\n\nexport const finnEndringerIUttaksplan = (\n    opprinneligPlan: Periode[],\n    nyPlan: Periode[],\n    endringstidspunkt: Date,\n    erFarEllerMedmor: boolean\n): Periode[] => {\n    const nyPlanForInnsending = nyPlan\n        .filter(\n            (p) =>\n                dateIsWithinRange(endringstidspunkt, p.tidsperiode.fom, p.tidsperiode.tom) ||\n                dayjs(p.tidsperiode.fom).isSameOrAfter(dayjs(endringstidspunkt), 'day')\n        )\n        .filter(erPeriodeSomSkalSendesInn);\n\n    if (nyPlanForInnsending.length === 0 && opprinneligPlan.length > nyPlan.length) {\n        const førsteSlettedePeriode = opprinneligPlan.find((p) =>\n            dayjs(p.tidsperiode.fom).isSame(endringstidspunkt, 'day')\n        );\n        const utsettelseForSlettedePerioder = {\n            id: guid(),\n            type: Periodetype.Utsettelse,\n            tidsperiode: {\n                fom: førsteSlettedePeriode!.tidsperiode.fom,\n                tom: førsteSlettedePeriode!.tidsperiode.tom,\n            },\n            årsak: UtsettelseÅrsakType.Fri,\n            forelder: erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor,\n            erArbeidstaker: false,\n        } as Utsettelsesperiode;\n        return [utsettelseForSlettedePerioder];\n    } else {\n        return nyPlanForInnsending;\n    }\n};\n\nconst getEndretUttaksplanForInnsending = (\n    opprinneligPlan: Periode[],\n    nyPlan: Periode[],\n    endringstidspunkt: Date | undefined,\n    erSøkerFarEllerMedmor: boolean\n): Periode[] => {\n    if (endringstidspunkt === undefined) {\n        return [];\n    }\n\n    return finnEndringerIUttaksplan(opprinneligPlan, nyPlan, endringstidspunkt, erSøkerFarEllerMedmor);\n};\n","import { EndringssøknadForInnsending, SøknadForInnsending } from 'app/api/apiUtils';\nimport { Attachment, InnsendingsType } from 'app/types/Attachment';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { Skjemanummer } from 'app/types/Skjemanummer';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Periode } from 'uttaksplan/types/Periode';\n\nconst generateAttachmentId = () => 'V'.concat(guid().replace(/-/g, ''));\n\nexport const mapFilTilVedlegg = (\n    file: File,\n    type: AttachmentType,\n    skjemanummer: Skjemanummer,\n    innsendingsType?: InnsendingsType\n): Attachment => ({\n    id: generateAttachmentId(),\n    file,\n    filename: file.name,\n    filesize: file.size,\n    uploaded: false,\n    pending: false,\n    type,\n    skjemanummer,\n    innsendingsType,\n});\n\nexport const isAttachmentWithError = ({ pending, uploaded, filesize }: Attachment) =>\n    (pending === false && uploaded === false) || filesize === 0;\n\nexport const lagSendSenereDokument = (type: AttachmentType, skjemanummer: Skjemanummer) => {\n    return mapFilTilVedlegg({ name: '', size: '' } as any, type, skjemanummer, InnsendingsType.SEND_SENERE);\n};\n\nexport const lagSendSenereDokumentNårIngenAndreFinnes = (\n    dokumenter: Attachment[],\n    type: AttachmentType,\n    skjema: Skjemanummer\n): Attachment[] => {\n    if (dokumenter.length === 0) {\n        return [lagSendSenereDokument(type, skjema)];\n    }\n    if (dokumenter.length === 1) {\n        return dokumenter;\n    }\n    return dokumenter.filter((dok) => dok.innsendingsType !== InnsendingsType.SEND_SENERE);\n};\n\nexport const isArrayOfAttachments = (object: any): object is readonly Attachment[] => {\n    return (\n        Array.isArray(object) &&\n        object[0] !== null &&\n        object.every(\n            (element) => element && (element.filename || element.innsendingsType === InnsendingsType.SEND_SENERE)\n        )\n    );\n};\n\nexport const removeAttachmentsWithUploadError = (attachments: readonly Attachment[]) =>\n    attachments.filter(\n        (a: Attachment) => !isAttachmentWithError(a) || a.innsendingsType === InnsendingsType.SEND_SENERE\n    );\n\nconst isPOJO = (arg: unknown): arg is Record<string, unknown> => {\n    if (arg == null || typeof arg !== 'object') {\n        return false;\n    }\n\n    const proto = Object.getPrototypeOf(arg);\n\n    if (proto == null) {\n        return true; // Object.create(null)\n    }\n\n    return proto === Object.prototype;\n};\n\nconst extractAttachments = (søknad: unknown, foundAttachments: Attachment[]): any => {\n    if (Array.isArray(søknad)) {\n        return søknad.map((v) => extractAttachments(v, foundAttachments));\n    }\n\n    if (!isPOJO(søknad)) {\n        return søknad;\n    }\n\n    const ret: any = {};\n\n    Object.keys(søknad).forEach((key: string) => {\n        const value = søknad[key];\n        if (typeof value === 'object') {\n            if (isArrayOfAttachments(value)) {\n                const attachmentWithoutUploadError = removeAttachmentsWithUploadError(value);\n                foundAttachments.push(...attachmentWithoutUploadError);\n                ret[key] = (value as Attachment[])\n                    .filter((attachment: Attachment) => attachmentWithoutUploadError.includes(attachment))\n                    .map((attachment: Attachment) => attachment.id);\n            } else if (Array.isArray(value)) {\n                ret[key] = value.map((v) => extractAttachments(v, foundAttachments));\n            } else {\n                ret[key] = extractAttachments(value, foundAttachments);\n            }\n        } else {\n            ret[key] = value;\n        }\n    });\n\n    return ret;\n};\n\nexport const mapAttachmentsToSøknadForInnsending = (\n    søknad: SøknadForInnsending | EndringssøknadForInnsending\n): SøknadForInnsending | EndringssøknadForInnsending => {\n    const vedlegg: Attachment[] = [];\n    const søknadCopy = extractAttachments(søknad, vedlegg);\n\n    const vedleggWithoutDuplicates = vedlegg.reduce((result, current) => {\n        if (result.find((att) => att.id === current.id)) {\n            return result;\n        }\n\n        result.push(current);\n        return result;\n    }, [] as Attachment[]);\n\n    return {\n        ...søknadCopy,\n        vedlegg: vedleggWithoutDuplicates,\n    };\n};\n\nexport const removeDuplicateAttachments = (uttaksplan: Periode[]) => {\n    uttaksplan.forEach((p1: Periode) => {\n        if (p1.vedlegg) {\n            const vedleggIdRefs = p1.vedlegg.map((a: Attachment) => a.id);\n            uttaksplan.forEach((p2) => {\n                if (p1 !== p2 && p1.vedlegg && p2.vedlegg) {\n                    p2.vedlegg.forEach((a2) => {\n                        if (vedleggIdRefs.includes(a2.id)) {\n                            p2.vedlegg!.splice(p2.vedlegg!.indexOf(a2), 1);\n                        }\n                    });\n                }\n            });\n        }\n    });\n};\n"],"names":["DEFAULT_OPTIONS","config","isSuspended","useGetRequest","url","options","arguments","length","undefined","_useState2","_slicedToArray","useState","data","setData","_useState4","error","setError","_useState6","RequestStatus","requestStatus","setRequestStatus","axiosInstance","fnr","getAxiosInstance","useEffect","get","then","res","err","response","status","redirectToLogin","dateStringToDateObjectMapper","_key","value","isISODateString","Array","isArray","moment","isValid","Date","storageParser","storageResponse","JSON","parse","formaterStønadskontoParamsDatoer","dato","datoformat","hasValue","formaterDato","uttakBaseUrl","Environment","sendSøknadUrl","sendEndringssøknadUrl","useGetUttakskontoer","params","antallBarn","farHarRettINorge","morHarRettINorge","harAnnenForelderTilsvarendeRettEØS","dekningsgrad","fødselsdato","termindato","omsorgsovertakelsesdato","morHarAleneomsorg","farHarAleneomsorg","startdatoUttak","minsterett","erMor","morHarUføretrygd","familieHendelseDatoNesteSak","urlParams","farHarRett","morHarRett","omsorgsovertakelseDato","_useGetRequest4","concat","timeout","withCredentials","tilgjengeligeStønadskontoerData","tilgjengeligeStønadskontoerError","storeAppState","state","søknad","version","currentRoute","uttaksplanInfo","antallUkerIUttaksplan","eksisterendeSak","endringstidspunkt","harAnnenPartEksisterendeSak","harEksisterendeSak","perioderSomSkalSendesInn","harUttaksplanBlittSlettet","søknadGjelderEtNyttBarn","barnFraNesteSak","brukerSvarteJaPåAutoJustering","annenPartsUttakErLagtTilIPlan","post","deleteStoredAppState","getStorageKvittering","useGetAnnenPartsVedtak","annenPartFnr","barnFnr","familiehendelsesdato","_usePostRequest","usePostRequest","body","_useState8","_useState10","_useState12","annenPartFødselsnummer","barnFødselsnummer","familiehendelse","message","includes","eksisterendeSakAnnenPartData","eksisterendeSakAnnenPartError","eksisterendeSakAnnenPartRequestStatus","useStoredAppState","_useGetRequest3","transformResponse","storageData","storageError","useSøkerinfo","_useGetRequest","søkerinfoData","søkerinfoError","sendSøknad","erEndringssøknad","headers","useGetSaker","_useGetRequest2","sakerData","sakerError","apiBaseUrl","AxiosInstance","axios","baseURL","interceptors","request","use","Promise","reject","FOR_MANGE_VEDLEGG_ERROR","FEIL_VED_INNSENDING","UKJENT_UUID","cleanUttaksperiode","uttaksPeriode","erMorForSyk","_objectWithoutProperties","_excluded","skalPeriodeSendesInn","periode","isForeldrepengerFørFødselUttaksperiode","skalIkkeHaUttakFørTermin","isNotPeriodetypeHull","type","Periodetype","isNotPeriodetypeInfo","isNotPeriodeUtenUttak","isUttaksperiode","konto","cleanAnnenForelder","annenForelder","isAnnenForelderOppgitt","erUfør","harRettPåForeldrepengerINorge","erForSyk","harRettPåForeldrepengerIEØS","harOppholdtSegIEØS","cleanedAnnenForelder","_objectSpread","harMorUføretrygd","harRettPåForeldrepenger","_excluded2","erInformertOmSøknaden","harAnnenForelderOppholdtSegIEØS","changeGradertUttaksPeriode","gradert","getArbeidstakerFrilansSN","arbeidsformer","arbeidsform","erArbeidstaker","Arbeidsform","erFrilanser","erSelvstendig","cleanUttaksplan","uttaksplan","søkerErFarEllerMedmor","ønskerJustertUttakVedFødsel","cleanedUttaksplan","filter","isValidTidsperiode","tidsperiode","map","changeClientonlyKontotype","annenForelderHarRettPåForeldrepengerINorge","morErUfør","StønadskontoType","andreAugust2022ReglerGjelder","morsAktivitetIPerioden","MorsAktivitet","getUttaksperiodeForInnsending","cleanedPeriode","uttaksperiodeKanJusteresVedFødsel","fom","justeresVedFødsel","førsteOktober2021ReglerGjelder","getPeriodeVedTidspunkt","getUttaksplanMedFriUtsettelsesperiode","tidspunkt","find","dayjs","isBetween","tom","førstePeriodeEtterEndringstidspunkt","isAfter","endringsTidspunktPeriodeTom","Uttaksdagen","forrige","endringsTidspunktPeriode","årsak","UtsettelseÅrsakType","id","guid","forelder","Forelder","push","sort","sorterPerioder","cleanSøknad","søker","barn","søkersituasjon","tilleggsopplysninger","rest","_excluded6","annenForelderInnsending","søkerInnsending","cleanSøker","barnInnsending","cleanBarn","isFødtBarn","datoForAleneomsorg","_excluded3","isAdoptertBarn","_barnRest2","_excluded4","adopsjonAvEktefellesBarn","isAdoptertStebarn","_excluded5","isFarEllerMedmor","rolle","getTermindato","uttaksplanInnsending","tilleggsopplysningerInnsending","cleanTilleggsopplysninger","cleanedSøknad","situasjon","removeDuplicateAttachments","mapAttachmentsToSøknadForInnsending","cleanedSpråkkode","språkkode","konverterRolle","assertUnreachable","getSøknadsdataForInnsending","originalSøknad","endringerIUttaksplan","stringify","cleanEndringssøknad","cleanAttachments","object","foundAttachments","Object","keys","forEach","key","_typeof","isArrayOfAttachments","attachmentWithoutUploadError","_toConsumableArray","removeAttachmentsWithUploadError","apply","attachment","saksnummer","vedlegg","_tilleggsopplysninger","tilleggsopplysningerTilSaksbehandler","begrunnelseForSenEndring","tekst","sendErrorMessageToSentry","hideNumbersAndTrim","replace","slice","errorString","getErrorCallId","getErrorTimestamp","messages","Sentry","uuid","timestamp","kanIkkeOppgis","isAnnenForelderIkkeOppgitt","BarnType","isIkkeUtfyltTypeBarn","IKKE_UTFYLT","FØDT","isUfødtBarn","UFØDT","ADOPTERT_STEBARN","ADOPTERT_ANNET_BARN","isAdoptertAnnetBarn","InnsendingsType","utc","getFamiliehendelsedato","dateToISOString","fødselsdatoer","adopsjonsdato","getRegistrerteBarnOmDeFinnes","registrerteBarn","regBarn","_barn$fnr","barnFødselsdatoLikSakFødselsdato","regBarnFødselsdato","isSame","getFødselsdato","getDødeBarnetForMerEnn3MånederSiden","dato3MånederTilbake","subtract","dødsdato","isBefore","getTekstForAntallBarn","intl","intlUtils","getLeverBarnet","getAndreBarnFødtSammenMedBarnet","barnFødselsdato","dagenFørFødsel","dagenEtterFødsel","add","b","isSameOrAfter","isSameOrBefore","getTittelBarnNårNavnSkalIkkeVises","omsorgsovertagelsesdato","formatDate","fødselsdatoTekst","formaterFødselsdatoerPåBarn","barnTekst","formaterNavnPåBarn","fornavn","alleBarnaLever","fornavnene","join","sisteFornavn","unikeFødselsdatoer","f","fødselsdatoerTekst","fd","førsteFødselsdaoer","sisteFødselsdato","_x","Error","bytesString","bytes","Bytes","unitSeparator","thousandsSeparator","decimalPlaces","fixedDecimals","deleteAttachment","attachments","deleted","att","useSaveLoadedRoute","_useForeldrepengesøkn","useForeldrepengesøknadContext","dispatch","routeHasBeenSaved","useRef","current","actionCreator","useSøknad","window","location","href","origin","Api","søkerinfo","person","erPeriodeSomSkalSendesInn","isOverføringsperiode","isUtsettelsesperiode","isOppholdsperiode","getPerioderSomSkalSendesInn","nyPlan","erFarEllerMedmor","opprinneligPlan","getEndretUttaksplanForInnsending","erSøkerFarEllerMedmor","finnEndringerIUttaksplan","nyPlanForInnsending","p","dateIsWithinRange","førsteSlettedePeriode","generateAttachmentId","mapFilTilVedlegg","file","skjemanummer","innsendingsType","filename","name","filesize","size","uploaded","pending","isAttachmentWithError","_ref","lagSendSenereDokument","lagSendSenereDokumentNårIngenAndreFinnes","dokumenter","skjema","dok","every","element","a","extractAttachments","v","isPOJO","arg","proto","getPrototypeOf","prototype","ret","søknadCopy","vedleggWithoutDuplicates","reduce","result","p1","vedleggIdRefs","p2","a2","splice","indexOf"],"sourceRoot":""}