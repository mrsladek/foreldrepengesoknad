{"version":3,"file":"9382.ccc3bb47.iframe.bundle.js","mappings":"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","sources":["webpack://foreldrepengesoknad/./src/app/components/info-eksisterende-sak/illustrasjoner/situasjon-sirkel/SituasjonSirkel.tsx","webpack://foreldrepengesoknad/./src/app/components/info-eksisterende-sak/InfoEksisterendePerioder.tsx","webpack://foreldrepengesoknad/./src/app/components/info-eksisterende-sak/InfoOmSøknaden.tsx","webpack://foreldrepengesoknad/./src/app/assets/KalenderBakgrunnIkon.tsx","webpack://foreldrepengesoknad/./src/app/components/info-eksisterende-sak/illustrasjoner/uker-sirkel/antallUkerKalenderIkon/AntallUkerKalenderIkon.tsx","webpack://foreldrepengesoknad/./src/app/components/info-eksisterende-sak/illustrasjoner/uker-sirkel/UkerSirkel.tsx","webpack://foreldrepengesoknad/./src/app/components/innhold-med-illustrasjon/InnholdMedIllustrasjon.tsx","webpack://foreldrepengesoknad/./src/app/components/sirkelmaske/Sirkelmaske.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/utils/stønadskontoer.ts","webpack://foreldrepengesoknad/./src/app/types/ForeldreparSituasjonTypes.ts","webpack://foreldrepengesoknad/./src/app/utils/foreldreparSituasjonUtils.ts"],"sourcesContent":["import React from 'react';\nimport { Forelder } from 'app/types/Forelder';\nimport { bemUtils } from '@navikt/fp-common';\nimport { ForeldreparSituasjon } from 'app/types/ForeldreparSituasjonTypes';\nimport Sirkelmaske from 'app/components/sirkelmaske/Sirkelmaske';\nimport { getAntallForeldreISituasjon, getSituasjonForelderSvg } from 'app/utils/foreldreparSituasjonUtils';\nimport Foreldrepar from 'app/components/foreldrepar/Foreldrepar';\n\nimport './situasjonSirkel.less';\n\ninterface Props {\n    situasjon: ForeldreparSituasjon;\n    valgtForelder?: Forelder;\n}\n\nconst SituasjonSirkel: React.FunctionComponent<Props> = ({ situasjon, valgtForelder }) => {\n    const info = getSituasjonForelderSvg(situasjon);\n    const bem = bemUtils('situasjonSirkel');\n\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('ikon')}>\n                <Sirkelmaske diameter=\"5rem\">\n                    {getAntallForeldreISituasjon(situasjon) === 1 && valgtForelder ? (\n                        <Foreldrepar forelder1={valgtForelder === Forelder.mor ? info.mor : info.farMedmor} />\n                    ) : (\n                        <Foreldrepar\n                            forelder1={info.mor}\n                            forelder2={info.farMedmor}\n                            variant={info.variant}\n                            kompakt={true}\n                        />\n                    )}\n                </Sirkelmaske>\n            </div>\n        </div>\n    );\n};\n\nexport default SituasjonSirkel;\n","import { bemUtils } from '@navikt/fp-common';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { formaterDato } from 'app/utils/dateUtils';\nimport { getNavnGenitivEierform } from 'app/utils/personUtils';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport { getPeriodeTittel } from 'uttaksplan/utils/periodeUtils';\n\nimport './infoEksisterendePerioder.less';\n\ninterface Props {\n    oppgittePerioder: Periode[];\n    navnForOverskrift?: string;\n    navnPåForeldre: NavnPåForeldre;\n    familiehendelsesdato: Date;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n}\n\nconst InfoEksisterendePerioder: FunctionComponent<Props> = ({\n    oppgittePerioder,\n    navnForOverskrift,\n    navnPåForeldre,\n    familiehendelsesdato,\n    termindato,\n    situasjon,\n}) => {\n    const intl = useIntl();\n    const dateFormat = 'DD. MMM YYYY';\n    const bem = bemUtils('infoEksisterendePerioder');\n\n    return (\n        <div className={bem.block}>\n            {navnForOverskrift && (\n                <Normaltekst>\n                    <FormattedMessage\n                        id=\"eksisterendeSak.label.annenPartsPlan\"\n                        values={{\n                            navn: getNavnGenitivEierform(navnForOverskrift, intl.locale),\n                        }}\n                    />\n                </Normaltekst>\n            )}\n            <ol className={bem.element('list')}>\n                {oppgittePerioder.map((periode) => {\n                    return (\n                        <li key={guid()}>\n                            <div className={bem.element('listInfo')}>\n                                <Element className={bem.element('listInfoPeriode')}>\n                                    {formaterDato(periode.tidsperiode.fom, dateFormat)} -{' '}\n                                    {formaterDato(periode.tidsperiode.tom, dateFormat)}:\n                                </Element>\n                                <Normaltekst>\n                                    {getPeriodeTittel(\n                                        intl,\n                                        periode,\n                                        navnPåForeldre,\n                                        familiehendelsesdato,\n                                        termindato,\n                                        situasjon\n                                    )}\n                                </Normaltekst>\n                            </div>\n                        </li>\n                    );\n                })}\n            </ol>\n        </div>\n    );\n};\n\nexport default InfoEksisterendePerioder;\n","import React from 'react';\nimport { useIntl, IntlShape, FormattedMessage } from 'react-intl';\nimport SituasjonSirkel from './illustrasjoner/situasjon-sirkel/SituasjonSirkel';\nimport UkerSirkel from './illustrasjoner/uker-sirkel/UkerSirkel';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport { EksisterendeSak } from 'app/types/EksisterendeSak';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { bemUtils, Block, formatDate, hasValue, intlUtils, UtvidetInformasjon } from '@navikt/fp-common';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport { Forelder } from 'app/types/Forelder';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport {\n    getFarMedmorErAleneOmOmsorg,\n    getKjønnFromFnr,\n    getMorErAleneOmOmsorg,\n    getNavnGenitivEierform,\n    getNavnPåForeldre,\n} from 'app/utils/personUtils';\nimport { InfoPeriode, isInfoPeriode, Periodetype } from 'uttaksplan/types/Periode';\nimport InnholdMedIllustrasjon from '../innhold-med-illustrasjon/InnholdMedIllustrasjon';\nimport { formaterDato, getToTetteReglerGjelder, getVarighetString, ISOStringToDate } from 'app/utils/dateUtils';\nimport links from 'app/links/links';\nimport { getForeldreparSituasjon } from 'app/utils/foreldreparSituasjonUtils';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport InfoEksisterendePerioder from './InfoEksisterendePerioder';\n\nimport './infoOmSøknaden.less';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\n\ninterface Props {\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[];\n    eksisterendeSak: EksisterendeSak | undefined;\n    erIUttaksplanenSteg: boolean;\n    minsterettUkerToTette?: number;\n}\n\nconst getHvem = (\n    intl: IntlShape,\n    erDeltUttak: boolean,\n    navnAnnenForelder: string | undefined,\n    erAnnenPartsEksisterendeSak?: boolean\n): string => {\n    if (erDeltUttak && navnAnnenForelder !== undefined) {\n        return erAnnenPartsEksisterendeSak\n            ? intlUtils(intl, 'eksisterendeSak.tekst.benevning.førstegangssøknaMedEkisterndeSakAnnenPart', {\n                  navn: navnAnnenForelder,\n              })\n            : intlUtils(intl, 'eksisterendeSak.tekst.benevning.deltOmsorg', { navn: navnAnnenForelder });\n    }\n\n    return intlUtils(intl, 'eksisterendeSak.tekst.benevning.aleneomsorg');\n};\n\nconst InfoOmSøknaden: React.FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer,\n    eksisterendeSak,\n    erIUttaksplanenSteg,\n    minsterettUkerToTette,\n}) => {\n    const bem = bemUtils('infoOmSøknaden');\n    const intl = useIntl();\n    const søkerinfo = useSøkerinfo();\n    const søknad = useSøknad();\n    const { state } = useForeldrepengesøknadContext();\n    const { barnFraNesteSak } = state;\n    const { annenForelder, søker, barn, søkersituasjon } = søknad;\n    const { person } = søkerinfo;\n    const uker = getAntallUker(tilgjengeligeStønadskontoer);\n    const annenForelderKjønn = getKjønnFromFnr(annenForelder);\n    const erFarEllerMedmor = isFarEllerMedmor(søknad.søkersituasjon.rolle);\n    const annenForelderNavn = isAnnenForelderOppgitt(annenForelder) ? annenForelder.fornavn : '';\n    const erDeltUttak = isAnnenForelderOppgitt(annenForelder)\n        ? !!annenForelder.harRettPåForeldrepengerINorge || !!annenForelder.harRettPåForeldrepengerIEØS\n        : false;\n    const erDeltUttakINorge = isAnnenForelderOppgitt(annenForelder) && !!annenForelder.harRettPåForeldrepengerINorge;\n    const erAleneOmOmsorg = søker.erAleneOmOmsorg;\n    const morErAleneOmOmsorg = getMorErAleneOmOmsorg(!erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const farMedmorErAleneOmOmsorg = getFarMedmorErAleneOmOmsorg(erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const { dekningsgrad } = søknad;\n    const { rolle } = søkersituasjon;\n    const dekningsgradGrunnlag = eksisterendeSak ? eksisterendeSak.grunnlag.dekningsgrad : undefined;\n    const situasjon = getForeldreparSituasjon(\n        person.kjønn,\n        annenForelderKjønn,\n        erDeltUttak,\n        morErAleneOmOmsorg,\n        farMedmorErAleneOmOmsorg,\n        rolle\n    );\n    const skalViseInfoOmMorsSak = hasValue(annenForelderNavn) && erFarEllerMedmor && erDeltUttak;\n\n    const forelderVedAleneomsorg = erDeltUttak ? undefined : erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n\n    const hvem = getHvem(\n        intl,\n        erDeltUttakINorge,\n        annenForelderNavn,\n        eksisterendeSak ? eksisterendeSak.erAnnenPartsSak : false\n    );\n    const navnPåForeldre = getNavnPåForeldre(person, annenForelder, erFarEllerMedmor, intl);\n    const familiehendelsedatoNesteBarn =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.familiehendelsesdato : undefined;\n    const familiehendelsesdato = ISOStringToDate(getFamiliehendelsedato(barn));\n    const erToTette = getToTetteReglerGjelder(familiehendelsesdato, familiehendelsedatoNesteBarn);\n    const minsterettToTetteAntallUkerTekst = [minsterettUkerToTette, intlUtils(intl, 'uker')].join(' ');\n    const startStønadsperiodeNyttBarn =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n    const sisteUttaksdagDetteBarnet =\n        startStønadsperiodeNyttBarn !== undefined ? Uttaksdagen(startStønadsperiodeNyttBarn).forrige() : undefined;\n    const termindato = getTermindato(barn);\n    let sisteInfoPeriode;\n    if (eksisterendeSak) {\n        sisteInfoPeriode = eksisterendeSak.uttaksplan\n            ? Periodene(eksisterendeSak.uttaksplan).finnSisteInfoperiode()\n            : undefined;\n    }\n    const nesteMuligeUttaksdagEtterAnnenPart =\n        eksisterendeSak && eksisterendeSak.uttaksplan && sisteInfoPeriode\n            ? Uttaksdagen(sisteInfoPeriode.tidsperiode.tom).neste()\n            : undefined;\n\n    const navnGenitivEierform = getNavnGenitivEierform(annenForelderNavn, intl.locale);\n\n    const infoperioder: InfoPeriode[] =\n        eksisterendeSak !== undefined ? eksisterendeSak.uttaksplan.filter(isInfoPeriode) : [];\n\n    const visPlanTekst: string = erIUttaksplanenSteg\n        ? 'eksisterendeSak.label.seAnnenPartsPlanIPlanen'\n        : 'eksisterendeSak.label.seAnnenPartsPlan';\n\n    const søkersPerioder =\n        eksisterendeSak &&\n        eksisterendeSak.uttaksplan &&\n        eksisterendeSak.uttaksplan.filter((p) => p.type !== Periodetype.Info);\n\n    return (\n        <Block padBottom=\"l\" className={bem.block}>\n            <InnholdMedIllustrasjon\n                tittel={intlUtils(intl, `eksisterendeSak.tittel.${erDeltUttakINorge ? 'deltUttak' : 'aleneomsorg'}`)}\n                illustrasjoner={[\n                    <SituasjonSirkel key=\"situasjon\" situasjon={situasjon} valgtForelder={forelderVedAleneomsorg} />,\n                    <UkerSirkel key=\"uker\" uker={uker} />,\n                ]}\n            >\n                <Block padBottom=\"l\">\n                    <Normaltekst>\n                        <FormattedMessage\n                            id=\"eksisterendeSak.tekst.html\"\n                            values={{\n                                uker: <strong>{getVarighetString(uker * 5, intl)}</strong>,\n                                dekningsgrad: <strong>{dekningsgrad ?? dekningsgradGrunnlag}</strong>,\n                                navn: hvem,\n                            }}\n                        />\n                    </Normaltekst>\n                </Block>\n                {skalViseInfoOmMorsSak && hasValue(annenForelderNavn) && nesteMuligeUttaksdagEtterAnnenPart && (\n                    <Normaltekst>\n                        <FormattedMessage\n                            id=\"eksisterendeSak.tekst.nesteMuligeUttaksdato\"\n                            values={{\n                                dato: formaterDato(nesteMuligeUttaksdagEtterAnnenPart, 'DD. MMM YYYY'),\n                                navn: annenForelderNavn,\n                                b: (msg: any) => <b>{msg}</b>,\n                            }}\n                        />\n                    </Normaltekst>\n                )}\n\n                {skalViseInfoOmMorsSak &&\n                    hasValue(annenForelderNavn) &&\n                    infoperioder !== undefined &&\n                    infoperioder.length > 0 && (\n                        <UtvidetInformasjon\n                            apneLabel={intlUtils(intl, visPlanTekst, {\n                                navn: navnGenitivEierform,\n                            })}\n                        >\n                            <InfoEksisterendePerioder\n                                oppgittePerioder={infoperioder}\n                                navnForOverskrift={annenForelderNavn}\n                                navnPåForeldre={navnPåForeldre}\n                                familiehendelsesdato={familiehendelsesdato!}\n                                termindato={termindato}\n                                situasjon={søknad.søkersituasjon.situasjon}\n                            />\n                        </UtvidetInformasjon>\n                    )}\n            </InnholdMedIllustrasjon>\n            {skalViseInfoOmMorsSak && søkersPerioder !== undefined && søkersPerioder.length > 0 && (\n                <InnholdMedIllustrasjon\n                    tittel={intlUtils(intl, 'eksisterendeSak.tittel.dineDagerMedForeldrepenger')}\n                    illustrasjoner={[]}\n                    infoboks={\n                        erIUttaksplanenSteg === false ? (\n                            <>\n                                <UtvidetInformasjon apneLabel=\"Se perioder oppgitt av annen forelder\">\n                                    Periodene med foreldrepenger oppgitt av annen forelder\n                                    <InfoEksisterendePerioder\n                                        oppgittePerioder={søkersPerioder}\n                                        navnPåForeldre={navnPåForeldre}\n                                        familiehendelsesdato={familiehendelsesdato!}\n                                        termindato={termindato}\n                                        situasjon={søknad.søkersituasjon.situasjon}\n                                    />\n                                </UtvidetInformasjon>\n                            </>\n                        ) : undefined\n                    }\n                ></InnholdMedIllustrasjon>\n            )}\n            {erToTette && startStønadsperiodeNyttBarn !== undefined && (\n                <Block padBottom=\"l\">\n                    <Normaltekst>\n                        <strong>\n                            <FormattedMessage\n                                id=\"infoOmSøknaden.toTette.finnesBarnMedNesteSak.tittel\"\n                                values={{ antallUkerToTette: minsterettUkerToTette }}\n                            ></FormattedMessage>\n                        </strong>\n                    </Normaltekst>\n                    <Normaltekst>\n                        <FormattedMessage\n                            id=\"infoOmSøknaden.toTette.finnesBarnMedNesteSak\"\n                            values={{\n                                startStønadsperiodeNyttBarn: formatDate(startStønadsperiodeNyttBarn),\n                                minsterettAntallUker: <strong>{minsterettToTetteAntallUkerTekst}</strong>,\n                            }}\n                        />\n                    </Normaltekst>\n                </Block>\n            )}\n            {!erToTette && startStønadsperiodeNyttBarn !== undefined && (\n                <Block padBottom=\"l\">\n                    <Normaltekst>\n                        <strong>\n                            <FormattedMessage\n                                id=\"infoOmSøknaden.ikkeToTette.finnesBarnMedNesteSak.tittel\"\n                                values={{ sisteUttaksdagDetteBarnet: formaterDato(sisteUttaksdagDetteBarnet) }}\n                            ></FormattedMessage>\n                        </strong>\n                    </Normaltekst>\n                    <Normaltekst>\n                        <FormattedMessage\n                            id=\"infoOmSøknaden.ikkeToTette.finnesBarnMedNesteSak\"\n                            values={{\n                                startStønadsperiodeNyttBarn: formatDate(startStønadsperiodeNyttBarn),\n                                sisteUttaksdagDetteBarnet: formaterDato(sisteUttaksdagDetteBarnet),\n                            }}\n                        />\n                    </Normaltekst>\n                </Block>\n            )}\n            <Normaltekst>\n                <FormattedMessage\n                    id=\"uttaksplan.informasjon.lesMer\"\n                    values={{\n                        a: (msg: any) => (\n                            <a href={links.viktigeFrister} className=\"lenke\" rel=\"noreferrer\" target=\"_blank\">\n                                {msg}\n                            </a>\n                        ),\n                    }}\n                />\n            </Normaltekst>\n        </Block>\n    );\n};\n\nexport default InfoOmSøknaden;\n","import * as React from 'react';\n\nconst KalenderBakgrunnIkon = (props: any) => (\n    <svg focusable=\"false\" role=\"img\" aria-hidden=\"true\" width={48} height={42} {...props}>\n        <g fill=\"none\" fillRule=\"evenodd\">\n            <path d=\"M48 36a6 6 0 0 1-6 6H6a6 6 0 0 1-6-6V7h48v29z\" fill=\"#FFF\" stroke=\"#dfdfdf\" strokeWidth=\"1\" />\n            <path\n                d=\"M6 0h36a6 6 0 0 1 6 6v4H0V6a6 6 0 0 1 6-6zm29.5 7a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zm-23 0a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3z\"\n                fill=\"#BA3A26\"\n            />\n        </g>\n    </svg>\n);\n\nexport default KalenderBakgrunnIkon;\n","import React from 'react';\nimport { bemUtils } from '@navikt/fp-common';\nimport KalenderBakgrunnIkon from 'app/assets/KalenderBakgrunnIkon';\n\nimport './antallUkerKalenderIkon.less';\n\ninterface Props {\n    uker: number;\n}\n\nconst AntallUkerKalenderIkon: React.FunctionComponent<Props> = ({ uker }) => {\n    const bem = bemUtils('antallUkerKalenderIkon');\n    return (\n        <div className={bem.classNames(bem.block, bem.modifierConditional('over99', uker > 99))}>\n            <div className={bem.element('ikon')}>\n                <KalenderBakgrunnIkon />\n            </div>\n            <div className={bem.element('uker')}>{uker}</div>\n        </div>\n    );\n};\n\nexport default AntallUkerKalenderIkon;\n","import React from 'react';\nimport AntallUkerKalenderIkon from './antallUkerKalenderIkon/AntallUkerKalenderIkon';\nimport { bemUtils } from '@navikt/fp-common';\nimport Sirkelmaske from 'app/components/sirkelmaske/Sirkelmaske';\n\nimport './ukerSirkel.less';\n\ninterface Props {\n    uker: number;\n}\n\nconst UkerSirkel: React.FunctionComponent<Props> = ({ uker }) => {\n    const bem = bemUtils('ukerSirkel');\n\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('ikon')}>\n                <Sirkelmaske diameter=\"5rem\">\n                    <AntallUkerKalenderIkon uker={uker} />\n                </Sirkelmaske>\n            </div>\n        </div>\n    );\n};\n\nexport default UkerSirkel;\n","import React from 'react';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { bemUtils } from '@navikt/fp-common';\n\nimport './innholdMedIllustrasjon.less';\n\ninterface Props {\n    tittel: string;\n    illustrasjoner?: React.ReactNode;\n    infoboks?: React.ReactNode;\n    children?: React.ReactNode;\n}\n\nconst InnholdMedIllustrasjon: React.FunctionComponent<Props> = ({ tittel, illustrasjoner, infoboks, children }) => {\n    const bem = bemUtils('innholdMedIllustrasjon');\n\n    return (\n        <div\n            className={bem.classNames(\n                bem.block,\n                bem.modifierConditional('medIllustrasjoner', illustrasjoner !== undefined)\n            )}\n        >\n            <div className={bem.element('contentWrapper')}>\n                <div className={bem.element('headerWrapper')}>\n                    <header>\n                        <Systemtittel tag=\"h2\" className={bem.element('tittel')}>\n                            {tittel}\n                        </Systemtittel>\n                        {infoboks !== undefined && infoboks}\n                    </header>\n                </div>\n                <div className={bem.element('content')}>{children}</div>\n            </div>\n            {illustrasjoner && (\n                <div className={bem.element('illustrasjoner')} role=\"presentation\" aria-hidden={true}>\n                    {React.Children.map(illustrasjoner, (ill, index) => (\n                        <div className={bem.element('illustrasjon')} key={index}>\n                            {ill}\n                        </div>\n                    ))}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default InnholdMedIllustrasjon;\n","import React, { CSSProperties } from 'react';\nimport { bemUtils } from '@navikt/fp-common';\nimport { UttaksplanHexColor } from 'uttaksplan/types/UttaksplanHexColor';\n\nimport './sirkelmaske.less';\n\ninterface Props {\n    aktiv?: boolean;\n    farge?: UttaksplanHexColor;\n    diameter: string;\n    children?: React.ReactNode;\n}\n\nconst Sirkelmaske: React.FunctionComponent<Props> = ({ farge, diameter, aktiv = true, children }) => {\n    const bem = bemUtils('sirkelmaske');\n    const style: Partial<CSSProperties> = {\n        backgroundColor: farge,\n    };\n\n    if (diameter) {\n        style.width = diameter;\n        style.height = diameter;\n    }\n\n    return (\n        <div className={bem.classNames(bem.block, bem.modifierConditional('inaktiv', aktiv === false))} style={style}>\n            <div className={bem.element('content')}>{children}</div>\n        </div>\n    );\n};\n\nexport default Sirkelmaske;\n","import { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\n\nexport const getVelgbareStønadskontotyper = (stønadskontoTyper: TilgjengeligStønadskonto[]): StønadskontoType[] =>\n    stønadskontoTyper\n        .filter(\n            (kontoType) =>\n                kontoType.konto === StønadskontoType.Fellesperiode ||\n                kontoType.konto === StønadskontoType.Fedrekvote ||\n                kontoType.konto === StønadskontoType.Mødrekvote ||\n                kontoType.konto === StønadskontoType.Foreldrepenger ||\n                kontoType.konto === StønadskontoType.AktivitetsfriKvote\n        )\n        .map((kontoType) => kontoType.konto);\n\nexport const getStønadskontoSortOrder = (konto: StønadskontoType): number => (stønadskontoSortOrder as any)[konto];\n\nexport const stønadskontoSortOrder = {\n    [StønadskontoType.ForeldrepengerFørFødsel]: 1,\n    [StønadskontoType.Mødrekvote]: 2,\n    [StønadskontoType.Fedrekvote]: 3,\n    [StønadskontoType.Fellesperiode]: 4,\n    [StønadskontoType.Foreldrepenger]: 5,\n    [StønadskontoType.AktivitetsfriKvote]: 6,\n};\n\nexport const getAntallUker = (kontoer: TilgjengeligStønadskonto[]): number => {\n    return kontoer.reduce((sum: number, konto: TilgjengeligStønadskonto) => sum + konto.dager / 5, 0);\n};\n\nexport const getAntallUkerMødrekvote = (kontoer: TilgjengeligStønadskonto[]): number => {\n    return kontoer\n        .filter((konto: TilgjengeligStønadskonto) => konto.konto === StønadskontoType.Mødrekvote)\n        .reduce((sum: number, konto: TilgjengeligStønadskonto) => sum + konto.dager / 5, 0);\n};\n\nexport const getAntallUkerFedrekvote = (kontoer: TilgjengeligStønadskonto[]): number => {\n    return kontoer\n        .filter((konto: TilgjengeligStønadskonto) => konto.konto === StønadskontoType.Fedrekvote)\n        .reduce((sum: number, konto: TilgjengeligStønadskonto) => sum + konto.dager / 5, 0);\n};\n\nexport const getAntallUkerFellesperiode = (kontoer: TilgjengeligStønadskonto[]): number => {\n    return kontoer\n        .filter((konto: TilgjengeligStønadskonto) => konto.konto === StønadskontoType.Fellesperiode)\n        .reduce((sum: number, konto: TilgjengeligStønadskonto) => sum + konto.dager / 5, 0);\n};\n\nexport const getAntallUkerMinsterett = (minsteRettDager: number | undefined): number | undefined => {\n    if (minsteRettDager !== undefined) {\n        return minsteRettDager / 5;\n    }\n    return undefined;\n};\n","export type ForeldreparForelder = 'far1' | 'far2' | 'far3' | 'far4' | 'medmor1' | 'medmor2' | 'mor1' | 'mor2';\n\nexport type ForeldreparIllustrasjonsvariant =\n    | 'førsteForelderHalvtSynlig'\n    | 'andreForelderHalvtSynlig'\n    | 'foreldreSeparert'\n    | 'foreldreNærmere';\n\nexport enum ForeldreparSituasjon {\n    farOgMor = 'farOgMor',\n    bareFar = 'bareFar',\n    bareMor = 'bareMor',\n    aleneomsorg = 'aleneomsorg',\n    aleneomsorgMedmor = 'aleneomsorgMedmor',\n    farOgFar = 'farOgFar',\n    morOgMedmor = 'morOgMedmor',\n    bareMedmor = 'bareMedmor',\n}\n","import { Kjønn } from '@navikt/fp-common';\nimport { ForeldreparSituasjon } from 'app/types/ForeldreparSituasjonTypes';\nimport { SituasjonForelderSvg } from 'app/types/SituasjonForelderSvg';\nimport { Søkerrolle } from 'app/types/Søkerrolle';\n\nexport const getForeldreparSituasjon = (\n    søkerKjønn: Kjønn,\n    annenForelderKjønn: Kjønn | undefined,\n    erDeltUttak: boolean,\n    morErAleneOmOmsorg: boolean,\n    farMedmorErAleneOmOmsorg: boolean,\n    rolle: Søkerrolle\n): ForeldreparSituasjon => {\n    if (erDeltUttak) {\n        if (annenForelderKjønn === undefined && rolle === 'medmor') {\n            return ForeldreparSituasjon.morOgMedmor;\n        }\n        if (søkerKjønn !== annenForelderKjønn) {\n            return ForeldreparSituasjon.farOgMor;\n        }\n        return søkerKjønn === 'M' ? ForeldreparSituasjon.farOgFar : ForeldreparSituasjon.morOgMedmor;\n    } else {\n        if (søkerKjønn === 'K') {\n            if (morErAleneOmOmsorg) {\n                return ForeldreparSituasjon.aleneomsorg;\n            }\n            if (farMedmorErAleneOmOmsorg) {\n                return ForeldreparSituasjon.aleneomsorgMedmor;\n            }\n            return rolle === 'mor' ? ForeldreparSituasjon.bareMor : ForeldreparSituasjon.bareMedmor;\n        } else {\n            return farMedmorErAleneOmOmsorg ? ForeldreparSituasjon.aleneomsorg : ForeldreparSituasjon.bareFar;\n        }\n    }\n};\n\nexport const getAntallForeldreISituasjon = (situasjon: ForeldreparSituasjon) => {\n    switch (situasjon) {\n        case ForeldreparSituasjon.aleneomsorg:\n        case ForeldreparSituasjon.aleneomsorgMedmor:\n        case ForeldreparSituasjon.bareFar:\n        case ForeldreparSituasjon.bareMor:\n        case ForeldreparSituasjon.bareMedmor:\n            return 1;\n        default:\n            return 2;\n    }\n};\n\nexport const getSituasjonForelderSvg = (situasjon: ForeldreparSituasjon): SituasjonForelderSvg => {\n    switch (situasjon) {\n        case ForeldreparSituasjon.farOgMor:\n            return {\n                mor: 'mor1',\n                farMedmor: 'far1',\n            };\n        case ForeldreparSituasjon.bareFar:\n            return {\n                mor: 'mor1',\n                farMedmor: 'far1',\n                variant: 'førsteForelderHalvtSynlig',\n            };\n        case ForeldreparSituasjon.bareMor:\n            return {\n                mor: 'mor1',\n                farMedmor: 'far1',\n                variant: 'andreForelderHalvtSynlig',\n            };\n        case ForeldreparSituasjon.bareMedmor:\n            return {\n                mor: 'mor1',\n                farMedmor: 'medmor2',\n                variant: 'førsteForelderHalvtSynlig',\n            };\n        case ForeldreparSituasjon.aleneomsorg:\n            return {\n                mor: 'mor2',\n                farMedmor: 'far2',\n                variant: 'foreldreSeparert',\n            };\n        case ForeldreparSituasjon.aleneomsorgMedmor:\n            return {\n                mor: 'mor2',\n                farMedmor: 'medmor2',\n                variant: 'foreldreSeparert',\n            };\n        case ForeldreparSituasjon.morOgMedmor:\n            return {\n                mor: 'medmor2',\n                farMedmor: 'medmor1',\n            };\n        case ForeldreparSituasjon.farOgFar:\n            return {\n                mor: 'far3',\n                farMedmor: 'far4',\n            };\n    }\n};\n"],"names":["SituasjonSirkel","_ref","situasjon","valgtForelder","info","getSituasjonForelderSvg","bem","bemUtils","React","className","block","element","Sirkelmaske","diameter","getAntallForeldreISituasjon","Foreldrepar","forelder1","Forelder","mor","farMedmor","forelder2","variant","kompakt","InfoEksisterendePerioder","oppgittePerioder","navnForOverskrift","navnPåForeldre","familiehendelsesdato","termindato","intl","useIntl","Normaltekst","FormattedMessage","id","values","navn","getNavnGenitivEierform","locale","map","periode","key","guid","Element","formaterDato","tidsperiode","fom","tom","getPeriodeTittel","InfoOmSøknaden","sisteInfoPeriode","tilgjengeligeStønadskontoer","eksisterendeSak","erIUttaksplanenSteg","minsterettUkerToTette","søkerinfo","useSøkerinfo","søknad","useSøknad","barnFraNesteSak","useForeldrepengesøknadContext","state","annenForelder","søker","barn","søkersituasjon","person","uker","getAntallUker","annenForelderKjønn","getKjønnFromFnr","erFarEllerMedmor","isFarEllerMedmor","rolle","annenForelderNavn","isAnnenForelderOppgitt","fornavn","erDeltUttak","harRettPåForeldrepengerINorge","harRettPåForeldrepengerIEØS","erDeltUttakINorge","erAleneOmOmsorg","morErAleneOmOmsorg","getMorErAleneOmOmsorg","farMedmorErAleneOmOmsorg","getFarMedmorErAleneOmOmsorg","dekningsgrad","dekningsgradGrunnlag","grunnlag","undefined","getForeldreparSituasjon","kjønn","skalViseInfoOmMorsSak","hasValue","forelderVedAleneomsorg","hvem","getHvem","navnAnnenForelder","erAnnenPartsEksisterendeSak","intlUtils","erAnnenPartsSak","getNavnPåForeldre","familiehendelsedatoNesteBarn","ISOStringToDate","getFamiliehendelsedato","erToTette","getToTetteReglerGjelder","minsterettToTetteAntallUkerTekst","join","startStønadsperiodeNyttBarn","startdatoFørsteStønadsperiode","sisteUttaksdagDetteBarnet","Uttaksdagen","forrige","getTermindato","uttaksplan","Periodene","finnSisteInfoperiode","nesteMuligeUttaksdagEtterAnnenPart","neste","navnGenitivEierform","infoperioder","filter","isInfoPeriode","visPlanTekst","søkersPerioder","p","type","Periodetype","Block","padBottom","InnholdMedIllustrasjon","tittel","concat","illustrasjoner","UkerSirkel","getVarighetString","dato","b","msg","length","UtvidetInformasjon","apneLabel","infoboks","antallUkerToTette","formatDate","minsterettAntallUker","a","href","links","rel","target","KalenderBakgrunnIkon","props","_extends","focusable","role","width","height","fill","fillRule","d","stroke","strokeWidth","AntallUkerKalenderIkon","classNames","modifierConditional","children","Systemtittel","tag","ill","index","farge","_ref$aktiv","aktiv","style","backgroundColor","_defineProperty","_stønadskontoSortOrde","StønadskontoType","kontoer","reduce","sum","konto","dager","getAntallUkerMødrekvote","getAntallUkerFedrekvote","getAntallUkerFellesperiode","getAntallUkerMinsterett","minsteRettDager","ForeldreparSituasjon","søkerKjønn","morOgMedmor","farOgMor","farOgFar","aleneomsorg","aleneomsorgMedmor","bareMor","bareMedmor","bareFar"],"sourceRoot":""}