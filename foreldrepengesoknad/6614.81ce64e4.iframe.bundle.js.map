{"version":3,"file":"6614.81ce64e4.iframe.bundle.js","mappings":"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","sources":["webpack://foreldrepengesoknad/./src/app/amplitude/amplitude.ts","webpack://foreldrepengesoknad/./src/app/api/getStønadskontoParams.ts","webpack://foreldrepengesoknad/./src/app/components/fieldset/Fieldset.tsx","webpack://foreldrepengesoknad/./src/app/components/lenke-knapp/LenkeKnapp.tsx","webpack://foreldrepengesoknad/./src/app/components/personkort/Personkort.tsx","webpack://foreldrepengesoknad/./src/app/constants.ts","webpack://foreldrepengesoknad/./src/app/steps/stepsConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-begge-har-rett/farMedmorFødselBeggeHarRettFormConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-begge-har-rett/farMedmorFødselBeggeHarRettUtils.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-begge-har-rett/farMedmorFødselBeggeHarRettQuestionsConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/spørsmål/MorsSisteDagSpørsmål.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/spørsmål/FarMedmorsFørsteDag.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/fordelingFellesperiode/range-input/RangeIcon.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/fordelingFellesperiode/range-input/preventDoubleTapZoom.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/fordelingFellesperiode/range-input/AriaText.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/fordelingFellesperiode/range-input/sirkelknapp/Sirkelknapp.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/spørsmål/AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-begge-har-rett/FarMedmorFødselBeggeHarRett.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/morFødselFormConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/morFødselUtils.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/validation/morFodselValidering.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/VeilederStartdatoPermisjon.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/StartdatoPermisjonMor.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/fordelingFellesperiode/range-input/RangeStepper.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/fordelingFellesperiode/range-input/RangeInput.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/fordelingFellesperiode/FordelingFellesperiodeSpørsmål.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/morFødselQuestionsConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/utils/leggTilAnnenPartsPerioderISøkerensUttaksplan.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-fodsel/MorFødsel.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/adopsjonStartdatoValg.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/morFarAdopsjonFormConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/morFarAdopsjonUtils.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/morFarAdopsjonQuestionsConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/validation/morFarAdopsjonValidering.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/StartdatoAdopsjon.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon/MorFarAdopsjon.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon-annen-part-har-rett-i-eøs/morFarAdopsjonAnnenForelderHarRettIEØSFormConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon-annen-part-har-rett-i-eøs/morFarAdopsjonAnnenForelderHarRettIEØSQuestionsConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon-annen-part-har-rett-i-eøs/morFarAdopsjonAnnenForelderHarRettIEØSUtils.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-far-adopsjon-annen-part-har-rett-i-eøs/MorFarAdopsjonAnnenForelderHarRettIEØS.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-far-fødsel-annen-part-har-rett-i-eøs/morFarFødselAnnenForelderHarRettIEØSFormConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-far-fødsel-annen-part-har-rett-i-eøs/morFarFødselAnnenForelderHarRettIEØSQuestionsConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-far-fødsel-annen-part-har-rett-i-eøs/morFarFødselAnnenForelderHarRettIEØSUtils.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/mor-far-fødsel-annen-part-har-rett-i-eøs/MorFarFødselAnnenForelderHarRettIEØS.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/far-medmor-aleneomsorg-fødsel/farMedmorAleneomsorgFødselFormConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/far-medmor-aleneomsorg-fødsel/farMedmorAleneomsorgFødselQuestionsConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/far-medmor-aleneomsorg-fødsel/farMedmorAleneomsorgFødselUtils.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/far-medmor-aleneomsorg-fødsel/validation/farMedmorAleneomsorgFødselValidation.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/far-medmor-aleneomsorg-fødsel/FarMedmorAleneomsorgFødsel.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/farMedmor-førstegangssøknad-med-annen-part/farMedmorFørstegangssøknadMedAnnenPartFormConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/farMedmor-førstegangssøknad-med-annen-part/farMedmorFørstegangssøknadMedAnnenPartQuestionsConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/farMedmor-førstegangssøknad-med-annen-part/farMedmorFørstegangssøknadMedAnnenPartUtils.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/farMedmor-førstegangssøknad-med-annen-part/FarMedmorFørstegangssøknadMedAnnenPart.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/UttaksplanInfoScenarios.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/scenarios.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/UttaksplanInfo.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-og-mor-har-ikke-rett/farMedmorFødselOgMorHarIkkeRettFormConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-og-mor-har-ikke-rett/farMedmorFødselOgMorHarIkkeRettUtils.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-og-mor-har-ikke-rett/farMedmorFødselOgMorHarIkkeRettQuestionsConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-og-mor-har-ikke-rett/FarMedmorFødselOgMorHarIkkeRett.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/far-medmor-fødsel-og-mor-har-ikke-rett/validation/farMedmorFødselOgMorHarIkkeRettValidering.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/scenarios/spørsmål/DekningsgradSpørsmål.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/types/UttaksplanHexColor.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/tilgjengeligeDagerGraf/multibar/Multibar.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/tilgjengeligeDagerGraf/TilgjengeligeDagerGraf.tsx","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/components/tilgjengeligeDagerGraf/tilgjengeligeDagerUtils.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/utils/uttaksplanDatoavgrensninger.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan-info/utils/uttaksplanHarForMangeFlerbarnsuker.ts","webpack://foreldrepengesoknad/./src/app/utils/annenForelderUtils.ts","webpack://foreldrepengesoknad/./src/app/utils/formUtils.ts","webpack://foreldrepengesoknad/./src/app/utils/getDekningsgradFromString.ts","webpack://foreldrepengesoknad/./src/app/utils/hooks/useAvbrytSøknad.ts","webpack://foreldrepengesoknad/./src/app/utils/hooks/useFortsettSøknadSenere.ts","webpack://foreldrepengesoknad/./src/app/utils/hooks/useUttaksplanInfo.ts","webpack://foreldrepengesoknad/./src/app/utils/stønadskontoUtils.ts","webpack://foreldrepengesoknad/./src/app/utils/uttaksplanInfoUtils.ts","webpack://foreldrepengesoknad/./src/app/utils/uttaksplan/deltUttak.ts","webpack://foreldrepengesoknad/./src/app/utils/uttaksplan/ikkeDeltUttak.ts","webpack://foreldrepengesoknad/./src/app/utils/uttaksplan/lagUttaksplan.ts","webpack://foreldrepengesoknad/./src/app/utils/uttaksplan/uttaksplanUtils.ts"],"sourcesContent":["import amplitude from 'amplitude-js';\n\nexport enum PageKeys {\n    Velkommen = 'velkommen',\n    Situasjon = 'situasjon',\n    OmBarnetFødsel = 'om-barnet-fødsel',\n    OmBarnetAdopsjon = 'om-barnet-adopsjon',\n    AnnenForelder = 'annen-forelder',\n    ManglendeVedlegg = 'manglende-vedlegg',\n    UttaksplanSkjema = 'uttaksplan-skjema',\n    Uttaksplan = 'uttaksplan',\n    AndreInntekter = 'andre-inntekter',\n    Utenlandsopphold = 'utenlandsopphold',\n    Oppsummering = 'oppsummering',\n    SøknadSendt = 'søknad-sendt',\n    Umyndig = 'umyndig',\n}\n\nexport const initAmplitude = () => {\n    if (amplitude) {\n        amplitude.getInstance().init('default', '', {\n            apiEndpoint: 'amplitude.nav.no/collect-auto',\n            saveEvents: false,\n            includeUtm: true,\n            includeReferrer: true,\n            platform: window.location.toString(),\n            onError: () => console.log('Amplitude klarte ikke å starte opp'),\n        });\n    }\n};\n\nexport const logAmplitudeEvent = (eventName: string, eventData?: any, logToConsoleOnly = true) => {\n    if (logToConsoleOnly) {\n        if (process.env.NODE_ENV !== 'test') {\n            console.log({ eventName, eventData });\n        }\n        return;\n    }\n\n    setTimeout(() => {\n        try {\n            if (amplitude) {\n                amplitude.getInstance().logEvent(eventName, eventData);\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    });\n};\n","import { dateToISOString } from '@navikt/sif-common-formik/lib';\nimport AnnenForelder, { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport Barn, { isAdoptertAnnetBarn, isAdoptertStebarn, isFødtBarn, isUfødtBarn } from 'app/context/types/Barn';\nimport Søkersituasjon from 'app/context/types/Søkersituasjon';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport { getErMorUfør } from 'app/utils/annenForelderUtils';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { andreAugust2022ReglerGjelder, ISOStringToDate } from 'app/utils/dateUtils';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { TilgjengeligeStønadskontoerParams } from './api';\n\nconst getFarHarRettINorge = (erFarMedmor: boolean, annenForelder: AnnenForelder): boolean => {\n    if (erFarMedmor) {\n        return true;\n    }\n\n    if (isAnnenForelderOppgitt(annenForelder)) {\n        return !!annenForelder.harRettPåForeldrepengerINorge;\n    }\n\n    return false;\n};\n\nconst getMorHarRettINorge = (erFarMedmor: boolean, annenForelder: AnnenForelder): boolean => {\n    if (!erFarMedmor) {\n        return true;\n    }\n\n    if (isAnnenForelderOppgitt(annenForelder)) {\n        return !!annenForelder.harRettPåForeldrepengerINorge;\n    }\n\n    return false;\n};\n\nconst getAnnenForelderHarRettIEØS = (annenForelder: AnnenForelder): boolean => {\n    if (isAnnenForelderOppgitt(annenForelder)) {\n        return !!annenForelder.harRettPåForeldrepengerIEØS;\n    }\n\n    return false;\n};\n\nconst getTermindatoSomSkalBrukes = (barn: Barn, termindatoSaksgrunnlag?: string) => {\n    if (isFødtBarn(barn) || isUfødtBarn(barn)) {\n        return termindatoSaksgrunnlag ? termindatoSaksgrunnlag : dateToISOString(barn.termindato);\n    }\n\n    return undefined;\n};\n\nexport const getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter = (\n    termindatoSaksgrunnlag?: string,\n    termindatoSaksgrunnlagAnnenPart?: string\n) => {\n    if (termindatoSaksgrunnlagAnnenPart) {\n        return termindatoSaksgrunnlagAnnenPart;\n    }\n\n    return termindatoSaksgrunnlag ? termindatoSaksgrunnlag : undefined;\n};\n\nexport const getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter = (\n    erFarEllerMedmor: boolean,\n    antallBarnSaksgrunnlag: number,\n    antallBarnSaksgrunnlagAnnenPart?: number\n): number => {\n    if (erFarEllerMedmor && antallBarnSaksgrunnlagAnnenPart) {\n        return antallBarnSaksgrunnlagAnnenPart;\n    }\n\n    return antallBarnSaksgrunnlag;\n};\n\nconst getStønadskontoParams = (\n    dekningsgrad: Dekningsgrad,\n    barn: Barn,\n    annenForelder: AnnenForelder,\n    søkersituasjon: Søkersituasjon,\n    farHarAleneomsorg: boolean,\n    morHarAleneomsorg: boolean,\n    familieHendelseDatoNesteSak: string | undefined,\n    antallBarn: number,\n    oppgittTermindato?: string\n): TilgjengeligeStønadskontoerParams => {\n    const erFarMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const familiehendelsesdato = ISOStringToDate(getFamiliehendelsedato(barn));\n    const søkerErFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    return {\n        antallBarn: antallBarn.toString(),\n        startdatoUttak: getFamiliehendelsedato(barn),\n        dekningsgrad: dekningsgrad,\n        farHarRettINorge: getFarHarRettINorge(erFarMedmor, annenForelder),\n        morHarRettINorge: getMorHarRettINorge(erFarMedmor, annenForelder),\n        harAnnenForelderTilsvarendeRettEØS: getAnnenForelderHarRettIEØS(annenForelder),\n        morHarAleneomsorg,\n        farHarAleneomsorg,\n        fødselsdato: isFødtBarn(barn) ? dateToISOString(barn.fødselsdatoer[0]) : undefined,\n        omsorgsovertakelsesdato:\n            isAdoptertAnnetBarn(barn) || isAdoptertStebarn(barn) ? dateToISOString(barn.adopsjonsdato) : undefined,\n        termindato: getTermindatoSomSkalBrukes(barn, oppgittTermindato),\n        minsterett: andreAugust2022ReglerGjelder(familiehendelsesdato!),\n        erMor: !søkerErFarEllerMedmor,\n        morHarUføretrygd: getErMorUfør(annenForelder, søkerErFarEllerMedmor),\n        familieHendelseDatoNesteSak: familieHendelseDatoNesteSak,\n    };\n};\n\nexport default getStønadskontoParams;\n","import { Element } from 'nav-frontend-typografi';\nimport React from 'react';\n\ninterface Props {\n    legend: React.ReactNode;\n    children: React.ReactNode;\n    className?: string;\n}\n\nconst Fieldset: React.FunctionComponent<Props> = ({ legend, className, children }) => {\n    return (\n        <fieldset\n            className={className}\n            style={{ display: 'flex', flexDirection: 'column', border: 'none', padding: '0', margin: '0' }}\n        >\n            <legend style={{ margin: '0 0 0.5rem 0' }}>\n                <Element>{legend}</Element>\n            </legend>\n            {children}\n        </fieldset>\n    );\n};\n\nexport default Fieldset;\n","import { Normaltekst } from 'nav-frontend-typografi';\nimport React from 'react';\n\nimport './lenkeKnapp.less';\n\ninterface Props {\n    onClick: () => void;\n    text: string | React.ReactNode;\n}\n\nconst LenkeKnapp: React.FunctionComponent<Props> = ({ text, onClick }) => {\n    return (\n        <button\n            className=\"lenkeKnapp lenke\"\n            onClick={(e) => {\n                e.preventDefault();\n                onClick();\n            }}\n        >\n            <Normaltekst>{text}</Normaltekst>\n        </button>\n    );\n};\n\nexport default LenkeKnapp;\n","import * as React from 'react';\nimport { Normaltekst } from 'nav-frontend-typografi';\n\nimport './personkort.less';\nimport { bemUtils } from '@navikt/fp-common';\n\ninterface Props {\n    tittel?: string;\n    children: React.ReactNode;\n    ikon?: React.ReactNode;\n    invertert?: boolean;\n    textValign?: 'top' | 'center' | 'bottom';\n}\n\nconst Personkort: React.FunctionComponent<Props> = ({ tittel, children, ikon, invertert, textValign = 'top' }) => {\n    const bem = bemUtils('personkort');\n\n    return (\n        <div\n            className={bem.classNames(\n                bem.block,\n                bem.modifierConditional('invertert', invertert === true),\n                bem.modifier(`valign-${textValign}`)\n            )}\n        >\n            {ikon && <div className={bem.element('ikon')}>{ikon}</div>}\n            <div className={bem.element('innhold')}>\n                {tittel && <Normaltekst className=\"tittel\">{tittel}</Normaltekst>}\n                <div className={bem.element('tekst')}>{children}</div>\n            </div>\n        </div>\n    );\n};\nexport default Personkort;\n","const MAKS_PERMISJONSLENGDE_I_ÅR = 3;\nconst MAKS_FERIEDAGER_ETT_ÅR = 21;\nconst MAKS_FERIEDAGER_MED_OVERFØRING = 52;\nconst ANTALL_UKER_MØDREKVOTE_ETTER_FØDSEL = 6;\nconst ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL = 3;\nconst MAKS_ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL = 12;\nconst ANTALL_UKER_FORELDREPENGER_BARE_FAR_HAR_RETT_100_PROSENT = 40;\nconst ANTALL_UKER_FORELDREPENGER_BARE_FAR_HAR_RETT_80_PROSENT = 50;\nconst ANTALL_UKER_2_BARN_100_PROSENT_UTTAK = 17;\nconst ANTALL_UKER_2_BARN_80_PROSENT_UTTAK = 21;\nconst ANTALL_UKER_3_ELLER_FLERE_BARN_100_PROSENT_UTTAK = 46;\nconst ANTALL_UKER_3_ELLER_FLERE_BARN_80_PROSENT_UTTAK = 56;\n\nconst uttaksConstants = {\n    MAKS_PERMISJONSLENGDE_I_ÅR,\n    MAKS_FERIEDAGER_ETT_ÅR,\n    MAKS_FERIEDAGER_MED_OVERFØRING,\n    ANTALL_UKER_MØDREKVOTE_ETTER_FØDSEL,\n    ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL,\n    MAKS_ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL,\n    ANTALL_UKER_FORELDREPENGER_BARE_FAR_HAR_RETT_100_PROSENT,\n    ANTALL_UKER_FORELDREPENGER_BARE_FAR_HAR_RETT_80_PROSENT,\n    ANTALL_UKER_2_BARN_100_PROSENT_UTTAK,\n    ANTALL_UKER_2_BARN_80_PROSENT_UTTAK,\n    ANTALL_UKER_3_ELLER_FLERE_BARN_100_PROSENT_UTTAK,\n    ANTALL_UKER_3_ELLER_FLERE_BARN_80_PROSENT_UTTAK,\n};\n\nexport default uttaksConstants;\n","import { intlUtils } from '@navikt/fp-common';\nimport { assertUnreachable } from 'app/utils/globalUtil';\nimport { IntlShape } from 'react-intl';\n\ntype SøkersituasjonStepId = 'søkersituasjon';\ntype OmBarnetStepId = 'omBarnet';\ntype AnnenForelderId = 'annenForelder';\ntype UttaksplanInfo = 'uttaksplanInfo';\ntype Uttaksplan = 'uttaksplan';\ntype UtenlandsoppholdStepId = 'utenlandsopphold';\ntype Inntektsinformasjon = 'inntektsinformasjon';\ntype PåkrevdDokumentasjonStepId = 'dokumentasjon';\ntype OppsummeringStepId = 'oppsummering';\n\ntype StepIdWithBackHref =\n    | OmBarnetStepId\n    | AnnenForelderId\n    | UttaksplanInfo\n    | Uttaksplan\n    | UtenlandsoppholdStepId\n    | Inntektsinformasjon\n    | PåkrevdDokumentasjonStepId\n    | OppsummeringStepId;\n\ntype StepIdWithBackHrefEndringssøknad = PåkrevdDokumentasjonStepId | OppsummeringStepId;\n\nexport type StepId = SøkersituasjonStepId | StepIdWithBackHref;\n\ninterface StepConfig {\n    id: StepId;\n    index: number;\n    label: string;\n}\n\nconst stepConfig = (intl: IntlShape): StepConfig[] => [\n    {\n        id: 'søkersituasjon',\n        index: 0,\n        label: intlUtils(intl, 'steps.label.søkersituasjon'),\n    },\n    {\n        id: 'omBarnet',\n        index: 1,\n        label: intlUtils(intl, 'steps.label.omBarnet'),\n    },\n    {\n        id: 'annenForelder',\n        index: 2,\n        label: intlUtils(intl, 'steps.label.annenForelder'),\n    },\n    {\n        id: 'uttaksplanInfo',\n        index: 3,\n        label: intlUtils(intl, 'steps.label.uttaksplanInfo'),\n    },\n    {\n        id: 'uttaksplan',\n        index: 4,\n        label: intlUtils(intl, 'steps.label.uttaksplan'),\n    },\n    {\n        id: 'utenlandsopphold',\n        index: 5,\n        label: intlUtils(intl, 'steps.label.utenlandsopphold'),\n    },\n    {\n        id: 'inntektsinformasjon',\n        index: 6,\n        label: intlUtils(intl, 'steps.label.inntektsinformasjon'),\n    },\n    {\n        id: 'dokumentasjon',\n        index: 7,\n        label: intlUtils(intl, 'steps.label.dokumentasjon'),\n    },\n    {\n        id: 'oppsummering',\n        index: 8,\n        label: intlUtils(intl, 'steps.label.oppsummering'),\n    },\n];\n\nexport const getPreviousStepHrefEndringssøknad = (id: StepIdWithBackHrefEndringssøknad): string => {\n    let href;\n\n    switch (id) {\n        case 'dokumentasjon':\n            href = '/soknad/dokumentasjon';\n            break;\n        case 'oppsummering':\n            href = '/soknad/uttaksplan';\n            break;\n        default:\n            return assertUnreachable(id, `Forsøkt å nå en side som ikke er tilgjengelig i endringssøknaden: ${id}`);\n    }\n\n    return href;\n};\n\nexport const getPreviousStepHref = (id: StepIdWithBackHref): string => {\n    let href;\n\n    switch (id) {\n        case 'omBarnet':\n            href = '/soknad/sokersituasjon';\n            break;\n        case 'annenForelder':\n            href = '/soknad/om-barnet';\n            break;\n        case 'uttaksplanInfo':\n            href = '/soknad/annen-forelder';\n            break;\n        case 'uttaksplan':\n            href = '/soknad/uttaksplan-info';\n            break;\n        case 'utenlandsopphold':\n            href = '/soknad/uttaksplan';\n            break;\n        case 'inntektsinformasjon':\n            href = '/soknad/utenlandsopphold';\n            break;\n        case 'dokumentasjon':\n            href = '/soknad/dokumentasjon';\n            break;\n        case 'oppsummering':\n            href = '/soknad/inntektsinformasjon';\n            break;\n        default:\n            return assertUnreachable(id, `Forsøkt å nå en side som ikke er tilgjengelig i søknaden: ${id}`);\n    }\n\n    return href;\n};\n\nexport default stepConfig;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\n\nexport enum FarMedmorFødselBeggeHarRettFormField {\n    dekningsgrad = 'dekningsgrad',\n    morsSisteDag = 'morsSisteDag',\n    farMedmorsFørsteDag = 'farMedmorsFørsteDag',\n    antallUkerFellesperiode = 'antallUkerFellesperiode',\n    antallDagerFellesperiode = 'antallDagerFellesperiode',\n}\n\nexport interface FarMedmorFødselBeggeHarRettFormData {\n    [FarMedmorFødselBeggeHarRettFormField.dekningsgrad]: string;\n    [FarMedmorFødselBeggeHarRettFormField.morsSisteDag]: string;\n    [FarMedmorFødselBeggeHarRettFormField.farMedmorsFørsteDag]: string;\n    [FarMedmorFødselBeggeHarRettFormField.antallUkerFellesperiode]: string;\n    [FarMedmorFødselBeggeHarRettFormField.antallDagerFellesperiode]: string;\n}\n\nexport const FarMedmorFødselBeggeHarRettFormComponents = getTypedFormComponents<\n    FarMedmorFødselBeggeHarRettFormField,\n    FarMedmorFødselBeggeHarRettFormData,\n    string\n>();\n","import { FarMedmorFødselBeggeHarRettUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport {\n    FarMedmorFødselBeggeHarRettFormData,\n    FarMedmorFødselBeggeHarRettFormField,\n} from './farMedmorFødselBeggeHarRettFormConfig';\n\nconst initialFarMedmorFødselBeggeHarRettValues: FarMedmorFødselBeggeHarRettFormData = {\n    [FarMedmorFødselBeggeHarRettFormField.dekningsgrad]: '',\n    [FarMedmorFødselBeggeHarRettFormField.morsSisteDag]: '',\n    [FarMedmorFødselBeggeHarRettFormField.farMedmorsFørsteDag]: '',\n    [FarMedmorFødselBeggeHarRettFormField.antallUkerFellesperiode]: '0',\n    [FarMedmorFødselBeggeHarRettFormField.antallDagerFellesperiode]: '0',\n};\n\nexport const mapFarMedmorFødselBeggeHarRettToState = (\n    values: Partial<FarMedmorFødselBeggeHarRettFormData>\n): FarMedmorFødselBeggeHarRettUttaksplanInfo => {\n    return {\n        antallDagerFellesperiode:\n            values.antallDagerFellesperiode === undefined || values.antallDagerFellesperiode.trim().length === 0\n                ? '0'\n                : values.antallDagerFellesperiode,\n        antallUkerFellesperiode:\n            values.antallUkerFellesperiode === undefined || values.antallUkerFellesperiode.trim().length === 0\n                ? '0'\n                : values.antallUkerFellesperiode,\n        farMedmorsFørsteDag: values.farMedmorsFørsteDag!,\n        morsSisteDag: values.morsSisteDag!,\n    };\n};\n\nexport const getInitialFarMedmorFødselBeggeHarRettValues = (\n    state: FarMedmorFødselBeggeHarRettUttaksplanInfo | undefined,\n    dekningsgrad: Dekningsgrad\n): FarMedmorFødselBeggeHarRettFormData => {\n    if (!state) {\n        return initialFarMedmorFødselBeggeHarRettValues;\n    }\n\n    return {\n        ...initialFarMedmorFødselBeggeHarRettValues,\n        antallDagerFellesperiode: state.antallDagerFellesperiode,\n        antallUkerFellesperiode: state.antallUkerFellesperiode,\n        morsSisteDag: state.morsSisteDag,\n        farMedmorsFørsteDag: state.farMedmorsFørsteDag,\n        dekningsgrad,\n    };\n};\n","import { hasValue } from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { andreAugust2022ReglerGjelder, ISOStringToDate } from 'app/utils/dateUtils';\nimport { getSisteUttaksdag6UkerEtterFødsel } from 'app/utils/wlbUtils';\nimport dayjs from 'dayjs';\nimport {\n    FarMedmorFødselBeggeHarRettFormData,\n    FarMedmorFødselBeggeHarRettFormField,\n} from './farMedmorFødselBeggeHarRettFormConfig';\n\ninterface FarMedmorFødselBeggeHarRettFormPayload extends FarMedmorFødselBeggeHarRettFormData {\n    familiehendelsesdato: Date;\n}\nconst includeFellesperiodeSpørsmål = (farMedmorsFørsteDag: string, familiehendelsesdato: Date) => {\n    return (\n        hasValue(farMedmorsFørsteDag) &&\n        (!andreAugust2022ReglerGjelder ||\n            dayjs(ISOStringToDate(farMedmorsFørsteDag)).isAfter(\n                getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato),\n                'day'\n            ))\n    );\n};\nconst FarMedmorFødselBeggeHarRettFormConfig: QuestionConfig<\n    FarMedmorFødselBeggeHarRettFormPayload,\n    FarMedmorFødselBeggeHarRettFormField\n> = {\n    [FarMedmorFødselBeggeHarRettFormField.dekningsgrad]: {\n        isIncluded: () => true,\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [FarMedmorFødselBeggeHarRettFormField.morsSisteDag]: {\n        isIncluded: ({ familiehendelsesdato }) => !andreAugust2022ReglerGjelder(familiehendelsesdato),\n        isAnswered: ({ morsSisteDag, familiehendelsesdato }) =>\n            andreAugust2022ReglerGjelder(familiehendelsesdato) || hasValue(morsSisteDag),\n        visibilityFilter: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [FarMedmorFødselBeggeHarRettFormField.farMedmorsFørsteDag]: {\n        isIncluded: ({ morsSisteDag, familiehendelsesdato }) =>\n            andreAugust2022ReglerGjelder(familiehendelsesdato) || hasValue(morsSisteDag),\n        isAnswered: ({ farMedmorsFørsteDag }) => hasValue(farMedmorsFørsteDag),\n    },\n    [FarMedmorFødselBeggeHarRettFormField.antallDagerFellesperiode]: {\n        isIncluded: ({ farMedmorsFørsteDag, familiehendelsesdato }) =>\n            includeFellesperiodeSpørsmål(farMedmorsFørsteDag, familiehendelsesdato),\n        isAnswered: () => true,\n    },\n    [FarMedmorFødselBeggeHarRettFormField.antallUkerFellesperiode]: {\n        isIncluded: ({ farMedmorsFørsteDag, familiehendelsesdato }) =>\n            includeFellesperiodeSpørsmål(farMedmorsFørsteDag, familiehendelsesdato),\n\n        isAnswered: () => true,\n    },\n};\n\nconst farMedmorFødselBeggeHarRettQuestionsConfig = Questions<\n    FarMedmorFødselBeggeHarRettFormPayload,\n    FarMedmorFødselBeggeHarRettFormField\n>(FarMedmorFødselBeggeHarRettFormConfig);\n\nexport default farMedmorFødselBeggeHarRettQuestionsConfig;\n","import { intlUtils } from '@navikt/fp-common';\nimport { TypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { uttaksplanDatoavgrensninger } from 'app/steps/uttaksplan-info/utils/uttaksplanDatoavgrensninger';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\ninterface Props {\n    FormComponents: TypedFormComponents<any, any, string>;\n    fieldName: string;\n    navnMor: string;\n    familiehendelsesdato: string;\n}\n\nconst MorsSisteDagSpørsmål: FunctionComponent<Props> = ({\n    FormComponents,\n    fieldName,\n    familiehendelsesdato,\n    navnMor,\n}) => {\n    const intl = useIntl();\n\n    const maxDate = ISOStringToDate(uttaksplanDatoavgrensninger.morsSisteUttaksdag(familiehendelsesdato).maxDate);\n    const minDate = ISOStringToDate(uttaksplanDatoavgrensninger.morsSisteUttaksdag(familiehendelsesdato).minDate);\n\n    return (\n        <FormComponents.DatePicker\n            name={fieldName}\n            label={intlUtils(intl, 'uttaksplaninfo.morSinSisteUttaksdag.label', { navnMor })}\n            maxDate={maxDate}\n            minDate={minDate}\n            showYearSelector={true}\n            disableWeekend={true}\n            placeholder={'dd.mm.åååå'}\n        />\n    );\n};\n\nexport default MorsSisteDagSpørsmål;\n","import { Block, formatDate, intlUtils } from '@navikt/fp-common';\nimport { dateToISOString, TypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport LenkeKnapp from 'app/components/lenke-knapp/LenkeKnapp';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { uttaksplanDatoavgrensninger } from 'app/steps/uttaksplan-info/utils/uttaksplanDatoavgrensninger';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { andreAugust2022ReglerGjelder, ISOStringToDate } from 'app/utils/dateUtils';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { validateStartdatoFarMedmor } from '../far-medmor-fødsel-og-mor-har-ikke-rett/validation/farMedmorFødselOgMorHarIkkeRettValidering';\n\ninterface Props {\n    FormComponents: TypedFormComponents<any, any, string>;\n    fieldName: string;\n    familiehendelsesdato: Date;\n    setFieldValue: (field: string, value: any, shouldValidate?: boolean | undefined) => void;\n    morsSisteDag: Date | undefined;\n    navnMor: string;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n    morHarRettTilForeldrepengerIEØS: boolean;\n}\n\nconst FarMedmorsFørsteDag: FunctionComponent<Props> = ({\n    FormComponents,\n    fieldName,\n    familiehendelsesdato,\n    morsSisteDag,\n    setFieldValue,\n    navnMor,\n    termindato,\n    situasjon,\n    morHarRettTilForeldrepengerIEØS,\n}) => {\n    const intl = useIntl();\n    const maxDate = ISOStringToDate(\n        uttaksplanDatoavgrensninger.startdatoPermisjonFarMedmor(familiehendelsesdato, termindato, situasjon).maxDate\n    );\n    const minDate = ISOStringToDate(\n        uttaksplanDatoavgrensninger.startdatoPermisjonFarMedmor(familiehendelsesdato, termindato, situasjon).minDate\n    );\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <FormComponents.DatePicker\n                    name={fieldName}\n                    label={intlUtils(intl, 'uttaksplaninfo.farSinFørsteUttaksdagSpørsmål.label')}\n                    maxDate={maxDate}\n                    minDate={minDate}\n                    showYearSelector={true}\n                    disableWeekend={true}\n                    placeholder={'dd.mm.åååå'}\n                    validate={validateStartdatoFarMedmor(intl, minDate!, maxDate!)}\n                />\n            </Block>\n            {!andreAugust2022ReglerGjelder(familiehendelsesdato) && !morHarRettTilForeldrepengerIEØS && (\n                <LenkeKnapp\n                    text={\n                        <FormattedMessage\n                            id=\"uttaksplaninfo.farSinFørsteUttaksdagSpørsmål.førsteUttaksdagEtterAnnenPart\"\n                            values={{\n                                navn: navnMor,\n                                dato: formatDate(Uttaksdagen(morsSisteDag!).neste()),\n                            }}\n                        />\n                    }\n                    onClick={() => {\n                        const farSinFørsteUttaksdag: string | undefined = morsSisteDag\n                            ? dateToISOString(Uttaksdagen(morsSisteDag).neste())\n                            : undefined;\n\n                        setFieldValue(fieldName, farSinFørsteUttaksdag);\n                    }}\n                />\n            )}\n        </>\n    );\n};\n\nexport default FarMedmorsFørsteDag;\n","import React from 'react';\n\ninterface RangeIconProps {\n    type: 'plus' | 'minus';\n}\n\nexport default class RangeIcon extends React.Component<RangeIconProps> {\n    renderPlusIcon() {\n        return (\n            <path\n                d=\"M18.2616283,12.5217391 L12.5222595,12.5217391 L12.5222595,18.2608696 C12.5222595,18.5488696 12.2874672,18.7826087 12.0004988,18.7826087 C11.7124868,18.7826087 11.478738,18.5488696 11.478738,18.2608696 L11.478738,12.5217391 L5.73936926,12.5217391 C5.4513573,12.5206957 5.21656494,12.288 5.21760846,12 C5.21760846,11.7130435 5.4513573,11.4782609 5.73936926,11.4782609 L11.478738,11.4782609 L11.478738,5.73913043 C11.478738,5.45113043 11.7124868,5.2173913 12.0004988,5.2173913 C12.2874672,5.2173913 12.5222595,5.45113043 12.5222595,5.73913043 L12.5222595,11.4782609 L18.2616283,11.4782609 C18.5485967,11.4782609 18.7844326,11.712 18.783389,12 C18.783389,12.288 18.5496402,12.5217391 18.2616283,12.5217391 Z\"\n                id=\"Inner\"\n                fill=\"#FFFFFF\"\n            />\n        );\n    }\n\n    renderMinusIcon() {\n        return (\n            <path\n                d=\"M18.2616283,12.5217391 L5.73936926,12.5217391 C5.4513573,12.5206957 5.21656494,12.288 5.21760846,12 C5.21760846,11.7130435 5.4513573,11.4782609 5.73936926,11.4782609 L18.2616283,11.4782609 C18.5485967,11.4782609 18.7844326,11.712 18.783389,12 C18.783389,12.288 18.5496402,12.5217391 18.2616283,12.5217391 Z\"\n                id=\"Inner\"\n                fill=\"#FFFFFF\"\n            />\n        );\n    }\n\n    render() {\n        const { type } = this.props;\n        const icon = type === 'minus' ? this.renderMinusIcon() : this.renderPlusIcon();\n\n        return (\n            <svg\n                focusable=\"false\"\n                role=\"img\"\n                aria-hidden=\"true\"\n                width=\"24px\"\n                height=\"24px\"\n                viewBox=\"0 0 24 24\"\n                className=\"rangeIcon\"\n            >\n                <g id=\"Icons/subtract/default\" stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n                    {icon}\n                </g>\n            </svg>\n        );\n    }\n}\n","// Ensure touches occur rapidly\nconst delay = 500;\n// Sequential touches must be in close vicinity\nconst minZoomTouchDelta = 10;\n\n// Track state of the last touch\nlet lastTapAt = 0;\nlet lastClientX = 0;\nlet lastClientY = 0;\n\nexport default function preventDoubleTapZoom(event: React.TouchEvent<any>) {\n    // Exit early if this involves more than one finger (e.g. pinch to zoom)\n    if (event.touches.length > 1) {\n        return;\n    }\n\n    const tapAt = new Date().getTime();\n    const timeDiff = tapAt - lastTapAt;\n    const { clientX, clientY } = event.touches[0];\n    const xDiff = Math.abs(lastClientX - clientX);\n    const yDiff = Math.abs(lastClientY - clientY);\n    if (xDiff < minZoomTouchDelta && yDiff < minZoomTouchDelta && event.touches.length === 1 && timeDiff < delay) {\n        event.preventDefault();\n        // Trigger a fake click for the tap we just prevented\n        (event.target as any).click();\n    }\n    lastClientX = clientX;\n    lastClientY = clientY;\n    lastTapAt = tapAt;\n}\n","import React from 'react';\n\n/**\n *  Skjuler tekst slik at den ikke er synlig på skjerm, men leses av skjermleser\n */\nexport interface AriaTextProps {\n    id?: string;\n    children?: React.ReactNode;\n    tag?: string;\n}\n\nconst AriaText: React.FunctionComponent<AriaTextProps> = ({ id, children, tag }) => {\n    const tagName = tag || 'span';\n    return React.createElement(tagName, { id, className: 'sr-only' }, children);\n};\nexport default AriaText;\n","import React from 'react';\nimport classnames from 'classnames';\nimport { guid } from 'nav-frontend-js-utils';\nimport preventDoubleTapZoom from '../preventDoubleTapZoom';\nimport AriaText from '../AriaText';\nimport './sirkelknapp.less';\n\nexport type Stil = 'hvit' | 'bla' | 'info';\n\nexport interface SirkelknappProps {\n    /** Tekst som blir lest opp og satt som tittel på knappen */\n    ariaLabel: string;\n    /** Ikon som brukes inne i knappen */\n    ikon: React.ReactNode;\n    /** Funksjon som kalles knappen klikkes på */\n    onClick: () => void;\n    /** Om knappen er disabled eller ikke. Default false. */\n    disabled?: boolean;\n    /** Om knappen skal ha tilstanded pressed/valgt. Default false. */\n    toggle?: {\n        pressed: boolean;\n    };\n    /** Layout varianter */\n    stil?: Stil;\n    /** Størrelse - default normal */\n    size?: 'normal' | 'stor';\n    posisjoneringFraHøyre?: number;\n}\n\nconst Sirkelknapp: React.FunctionComponent<SirkelknappProps> = ({\n    onClick,\n    ariaLabel,\n    ikon,\n    toggle,\n    disabled,\n    stil = 'info',\n    size = 'normal',\n    posisjoneringFraHøyre,\n}) => {\n    const labelId = guid();\n    return (\n        <button\n            style={{ left: posisjoneringFraHøyre }}\n            type=\"button\"\n            onClick={() => onClick()}\n            onTouchStart={preventDoubleTapZoom}\n            aria-labelledby={labelId}\n            className={classnames(`sirkelknapp`, `sirkelknapp--${stil}`, `sirkelknapp--${size}`, {\n                'sirkelknapp--pressed': toggle && toggle.pressed,\n                'sirkelknapp--disabled': disabled,\n            })}\n            disabled={disabled}\n            aria-pressed={toggle ? toggle.pressed : undefined}\n        >\n            <span className=\"sirkelknapp__ikon\" role=\"presentation\">\n                {ikon}\n            </span>\n            <AriaText id={labelId}>{ariaLabel}</AriaText>\n        </button>\n    );\n};\n\nexport default Sirkelknapp;\n","import { bemUtils, intlUtils, UtvidetInformasjon } from '@navikt/fp-common';\nimport { getNumberFromNumberInputValue, TypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { SkjemaGruppe } from 'nav-frontend-skjema';\nimport { Element } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport RangeIcon from '../../fordelingFellesperiode/range-input/RangeIcon';\nimport Sirkelknapp from '../../fordelingFellesperiode/range-input/sirkelknapp/Sirkelknapp';\n\nimport './antallUkerOgDagerFellesperiodeFarMedmorSpørsmål.less';\n\ninterface Props {\n    FormComponents: TypedFormComponents<any, any, string>;\n    ukerFieldName: string;\n    dagerFieldName: string;\n    antallUker: string;\n    antallDager: string;\n    setFieldValue: (field: string, value: any, shouldValidate?: boolean | undefined) => void;\n    ukerMedFellesperiode: number;\n}\n\nconst getNumberFromStringInput = (input: string): number | undefined => {\n    return input === undefined || input.trim().length === 0 ? 0 : getNumberFromNumberInputValue(input);\n};\n\nconst leggTilUke = (currentAntall: string, max: number): string => {\n    const number = getNumberFromStringInput(currentAntall);\n\n    if (number === undefined || Math.round(number) !== number) {\n        return currentAntall;\n    }\n\n    if (number + 1 > max) {\n        return max.toString();\n    }\n\n    return (number + 1).toString();\n};\n\nconst trekkFraUke = (currentAntall: string, min: number): string => {\n    const number = getNumberFromStringInput(currentAntall);\n\n    if (number === undefined || number === 0 || Math.round(number) !== number) {\n        return currentAntall;\n    }\n\n    if (number - 1 < min) {\n        return min.toString();\n    }\n\n    return (number - 1).toString();\n};\n\nconst leggTilDag = (currentAntall: string, max: number): string => {\n    const number = getNumberFromStringInput(currentAntall);\n\n    if (number === undefined || Math.round(number) !== number) {\n        return currentAntall;\n    }\n\n    if (number + 1 > max) {\n        return max.toString();\n    }\n\n    return (number + 1).toString();\n};\n\nconst trekkFraDag = (currentAntall: string, min: number): string => {\n    const number = getNumberFromStringInput(currentAntall);\n\n    if (number === undefined || number === 0 || Math.round(number) !== number) {\n        return currentAntall;\n    }\n\n    if (number - 1 < min) {\n        return min.toString();\n    }\n\n    return (number - 1).toString();\n};\n\nconst AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål: FunctionComponent<Props> = ({\n    FormComponents,\n    ukerFieldName,\n    dagerFieldName,\n    antallDager,\n    antallUker,\n    setFieldValue,\n    ukerMedFellesperiode,\n}) => {\n    const bem = bemUtils('antallUkerOgDagerFellesperiodeFarMedmorSpørsmål');\n    const intl = useIntl();\n\n    return (\n        <SkjemaGruppe\n            legend={\n                <Element>\n                    <FormattedMessage id=\"uttaksplaninfo.fellesperiode.tittel\" />\n                </Element>\n            }\n            description={\n                <UtvidetInformasjon apneLabel={intlUtils(intl, 'uttaksplaninfo.fellesperiode.apneLabel')}>\n                    <FormattedMessage id=\"uttaksplaninfo.fellesperiode.lesMerInfo\" />\n                </UtvidetInformasjon>\n            }\n        >\n            <div className={bem.block}>\n                <div className={bem.element('stepper')}>\n                    <div className={bem.element('icon')}>\n                        <Sirkelknapp\n                            stil=\"hvit\"\n                            ariaLabel=\"Mink antall uker med en uke\"\n                            ikon={<RangeIcon type=\"minus\" />}\n                            disabled={\n                                antallUker === undefined ||\n                                parseInt(antallUker, 10) === 0 ||\n                                antallUker.trim().length === 0\n                                    ? true\n                                    : false\n                            }\n                            onClick={() => setFieldValue(ukerFieldName, trekkFraUke(antallUker, 0))}\n                        />\n                    </div>\n                    <FormComponents.NumberInput\n                        className={bem.element('uker')}\n                        integerValue={true}\n                        name={ukerFieldName}\n                        label={intlUtils(intl, 'uker.fellesperiode')}\n                        bredde=\"XS\"\n                        step=\"1\"\n                    />\n                    <div className={bem.element('icon')}>\n                        <Sirkelknapp\n                            stil=\"hvit\"\n                            ariaLabel=\"Øk antall uker med en uke\"\n                            ikon={<RangeIcon type=\"plus\" />}\n                            disabled={parseInt(antallUker, 10) >= ukerMedFellesperiode ? true : false}\n                            onClick={() => setFieldValue(ukerFieldName, leggTilUke(antallUker, ukerMedFellesperiode))}\n                        />\n                    </div>\n                </div>\n                <div className={bem.element('stepper')}>\n                    <div className={bem.element('icon')}>\n                        <Sirkelknapp\n                            stil=\"hvit\"\n                            ariaLabel=\"Mink antall dager med en dag\"\n                            ikon={<RangeIcon type=\"minus\" />}\n                            onClick={() => setFieldValue(dagerFieldName, trekkFraDag(antallDager, 0))}\n                            disabled={\n                                antallDager === undefined ||\n                                parseInt(antallDager, 10) === 0 ||\n                                antallDager.trim().length === 0\n                                    ? true\n                                    : false\n                            }\n                        />\n                    </div>\n                    <FormComponents.NumberInput\n                        className={bem.element('uker')}\n                        integerValue={true}\n                        name={dagerFieldName}\n                        label={intlUtils(intl, 'dager.fellesperiode')}\n                        bredde=\"XS\"\n                        step=\"1\"\n                    />\n                    <div className={bem.element('icon')}>\n                        <Sirkelknapp\n                            stil=\"hvit\"\n                            ariaLabel=\"Øk antall dager med en dag\"\n                            ikon={<RangeIcon type=\"plus\" />}\n                            onClick={() => setFieldValue(dagerFieldName, leggTilDag(antallDager, 4))}\n                            disabled={parseInt(antallDager, 10) === 4 ? true : false}\n                        />\n                    </div>\n                </div>\n            </div>\n        </SkjemaGruppe>\n    );\n};\n\nexport default AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål;\n","import { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport React, { FunctionComponent } from 'react';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport VeilederNormal from 'app/assets/VeilederNormal';\nimport { getNavnGenitivEierform } from 'app/utils/personUtils';\nimport { Block, intlUtils } from '@navikt/fp-common';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    FarMedmorFødselBeggeHarRettFormComponents,\n    FarMedmorFødselBeggeHarRettFormData,\n    FarMedmorFødselBeggeHarRettFormField,\n} from './farMedmorFødselBeggeHarRettFormConfig';\nimport {\n    getInitialFarMedmorFødselBeggeHarRettValues,\n    mapFarMedmorFødselBeggeHarRettToState,\n} from './farMedmorFødselBeggeHarRettUtils';\nimport TilgjengeligeDagerGraf from '../../tilgjengeligeDagerGraf/TilgjengeligeDagerGraf';\nimport { getTilgjengeligeDager } from '../../tilgjengeligeDagerGraf/tilgjengeligeDagerUtils';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport farMedmorFødselBeggeHarRettQuestionsConfig from './farMedmorFødselBeggeHarRettQuestionsConfig';\nimport MorsSisteDagSpørsmål from '../spørsmål/MorsSisteDagSpørsmål';\nimport FarMedmorsFørsteDag from '../spørsmål/FarMedmorsFørsteDag';\nimport AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål from '../spørsmål/AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål';\nimport { getErMorUfør } from 'app/utils/annenForelderUtils';\nimport { Forelder } from 'app/types/Forelder';\nimport { EksisterendeSak } from 'app/types/EksisterendeSak';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport actionCreator from 'app/context/action/actionCreator';\nimport SøknadRoutes from 'app/routes/routes';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport useUttaksplanInfo from 'app/utils/hooks/useUttaksplanInfo';\nimport { FarMedmorFødselBeggeHarRettUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { andreAugust2022ReglerGjelder, ISOStringToDate } from 'app/utils/dateUtils';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n    eksisterendeSakAnnenPart: EksisterendeSak | undefined;\n}\n\nconst FarMedmorFødselFørsteganggsøknadBeggeHarRett: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer100DTO,\n    tilgjengeligeStønadskontoer80DTO,\n}) => {\n    const intl = useIntl();\n    const { state } = useForeldrepengesøknadContext();\n    const { annenForelder, søkersituasjon, barn, dekningsgrad, erEndringssøknad } = useSøknad();\n    const { person } = useSøkerinfo();\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n    const lagretUttaksplanInfo = useUttaksplanInfo<FarMedmorFødselBeggeHarRettUttaksplanInfo>();\n\n    const navnFar = erFarEllerMedmor\n        ? person.fornavn\n        : isAnnenForelderOppgitt(annenForelder)\n        ? annenForelder.fornavn\n        : '';\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const navnMor = erFarEllerMedmor && isAnnenForelderOppgitt(annenForelder) ? annenForelder.fornavn : person.fornavn;\n\n    const erMorUfør = getErMorUfør(annenForelder, erFarEllerMedmor);\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO\n    );\n\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const termindato = getTermindato(barn);\n    const førsteUttaksdagNesteBarnsSak =\n        state.barnFraNesteSak !== undefined ? state.barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n    const onValidSubmitHandler = (values: Partial<FarMedmorFødselBeggeHarRettFormData>) => {\n        const antallUker = getAntallUker(tilgjengeligeStønadskontoer[values.dekningsgrad! === '100' ? 100 : 80]);\n        return [\n            actionCreator.setAntallUkerIUttaksplan(antallUker),\n            actionCreator.setUttaksplanInfo(mapFarMedmorFødselBeggeHarRettToState(values)),\n            actionCreator.setDekningsgrad(getDekningsgradFromString(values.dekningsgrad)),\n            actionCreator.lagUttaksplanforslag(\n                lagUttaksplan({\n                    annenForelderErUfør: erMorUfør,\n                    erDeltUttak: true,\n                    erEndringssøknad,\n                    erEnkelEndringssøknad: erEndringssøknad,\n                    familiehendelsesdato: familiehendelsesdatoDate!,\n                    førsteUttaksdagEtterSeksUker: Uttaksdagen(\n                        Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste()\n                    ).leggTil(30),\n                    situasjon: erFødsel ? 'fødsel' : 'adopsjon',\n                    søkerErFarEllerMedmor: erFarEllerMedmor,\n                    søkerHarMidlertidigOmsorg: false,\n                    tilgjengeligeStønadskontoer:\n                        tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n                    uttaksplanSkjema: {\n                        morSinSisteUttaksdag: values.morsSisteDag,\n                        farSinFørsteUttaksdag: values.farMedmorsFørsteDag,\n                        antallDagerFellesperiodeFarMedmor: parseInt(values.antallDagerFellesperiode || '0', 10),\n                        antallUkerFellesperiodeFarMedmor: parseInt(values.antallUkerFellesperiode || '0', 10),\n                    },\n                    bareFarMedmorHarRett: false,\n                    termindato,\n                    harAktivitetskravIPeriodeUtenUttak: false,\n                    førsteUttaksdagNesteBarnsSak,\n                })\n            ),\n        ];\n    };\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.UTTAKSPLAN,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state)\n    );\n\n    return (\n        <FarMedmorFødselBeggeHarRettFormComponents.FormikWrapper\n            initialValues={getInitialFarMedmorFødselBeggeHarRettValues(lagretUttaksplanInfo, dekningsgrad)}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues, setFieldValue }) => {\n                const visibility = farMedmorFødselBeggeHarRettQuestionsConfig.getVisbility({\n                    ...formValues,\n                    familiehendelsesdato: familiehendelsesdatoDate!,\n                });\n\n                const valgtStønadskonto = tilgjengeligeStønadskontoer[formValues.dekningsgrad === '100' ? 100 : 80];\n                const tilgjengeligeDager = valgtStønadskonto\n                    ? getTilgjengeligeDager(valgtStønadskonto, false, Forelder.farMedmor)\n                    : undefined;\n\n                return (\n                    <FarMedmorFødselBeggeHarRettFormComponents.Form\n                        includeButtons={false}\n                        includeValidationSummary={true}\n                    >\n                        <Block padBottom=\"l\">\n                            <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.informasjonTilAnnenForelder\"\n                                    values={{\n                                        navn: isAnnenForelderOppgitt(annenForelder)\n                                            ? getNavnGenitivEierform(annenForelder.fornavn, intl.locale)\n                                            : '',\n                                    }}\n                                />\n                            </Veilederpanel>\n                        </Block>\n                        <Block padBottom=\"l\">\n                            <DekningsgradSpørsmål\n                                FormKomponent={FarMedmorFødselBeggeHarRettFormComponents}\n                                dekningsgradFeltNavn={FarMedmorFødselBeggeHarRettFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={true}\n                            />\n                        </Block>\n                        <Block visible={formValues.dekningsgrad !== ''}>\n                            {tilgjengeligeDager && (\n                                <TilgjengeligeDagerGraf\n                                    erDeltUttak={true}\n                                    erFarEllerMedmor={true}\n                                    navnFarMedmor={navnFar}\n                                    navnMor={navnMor}\n                                    tilgjengeligeDager={tilgjengeligeDager}\n                                />\n                            )}\n                        </Block>\n                        <Block\n                            padBottom=\"l\"\n                            visible={\n                                erFarEllerMedmor &&\n                                formValues.dekningsgrad !== '' &&\n                                !andreAugust2022ReglerGjelder(ISOStringToDate(familiehendelsesdato)!)\n                            }\n                        >\n                            <Veilederpanel svg={<VeilederNormal transparentBackground={true} />}>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.farMedmor.infoOmTidsromMellomMorsSisteDagOgFarsFørsteDag\"\n                                    values={{ navnMor }}\n                                />\n                            </Veilederpanel>\n                        </Block>\n                        <Block\n                            padBottom=\"l\"\n                            visible={visibility.isVisible(FarMedmorFødselBeggeHarRettFormField.morsSisteDag)}\n                        >\n                            <MorsSisteDagSpørsmål\n                                FormComponents={FarMedmorFødselBeggeHarRettFormComponents}\n                                fieldName={FarMedmorFødselBeggeHarRettFormField.morsSisteDag}\n                                navnMor={navnMor}\n                                familiehendelsesdato={familiehendelsesdato}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"l\"\n                            visible={visibility.isVisible(FarMedmorFødselBeggeHarRettFormField.farMedmorsFørsteDag)}\n                        >\n                            <FarMedmorsFørsteDag\n                                FormComponents={FarMedmorFødselBeggeHarRettFormComponents}\n                                fieldName={FarMedmorFødselBeggeHarRettFormField.farMedmorsFørsteDag}\n                                familiehendelsesdato={familiehendelsesdatoDate!}\n                                setFieldValue={setFieldValue}\n                                morsSisteDag={ISOStringToDate(formValues.morsSisteDag)}\n                                navnMor={navnMor}\n                                termindato={termindato}\n                                situasjon={søkersituasjon.situasjon}\n                                morHarRettTilForeldrepengerIEØS={false}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"l\"\n                            visible={visibility.isVisible(\n                                FarMedmorFødselBeggeHarRettFormField.antallDagerFellesperiode\n                            )}\n                        >\n                            {tilgjengeligeDager && (\n                                <AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål\n                                    FormComponents={FarMedmorFødselBeggeHarRettFormComponents}\n                                    ukerFieldName={FarMedmorFødselBeggeHarRettFormField.antallUkerFellesperiode}\n                                    dagerFieldName={FarMedmorFødselBeggeHarRettFormField.antallDagerFellesperiode}\n                                    antallDager={formValues.antallDagerFellesperiode}\n                                    antallUker={formValues.antallUkerFellesperiode}\n                                    setFieldValue={setFieldValue}\n                                    ukerMedFellesperiode={tilgjengeligeDager.dagerFelles / 5}\n                                />\n                            )}\n                        </Block>\n                        <Block visible={visibility.areAllQuestionsAnswered()} textAlignCenter={true}>\n                            <Hovedknapp disabled={isSubmitting} spinner={isSubmitting}>\n                                {intlUtils(intl, 'søknad.gåVidere')}\n                            </Hovedknapp>\n                        </Block>\n                    </FarMedmorFødselBeggeHarRettFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default FarMedmorFødselFørsteganggsøknadBeggeHarRett;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\n\nexport enum MorFødselFormField {\n    dekningsgrad = 'dekningsgrad',\n    permisjonStartdato = 'permisjonStartdato',\n    skalIkkeHaUttakFørTermin = 'skalIkkeHaUttakFørTermin',\n    fellesperiodeukerMor = 'fellesperiodeukerMor',\n}\n\nexport interface MorFødselFormData {\n    [MorFødselFormField.dekningsgrad]: string;\n    [MorFødselFormField.permisjonStartdato]: string;\n    [MorFødselFormField.skalIkkeHaUttakFørTermin]: boolean;\n    [MorFødselFormField.fellesperiodeukerMor]: number | undefined;\n}\n\nexport const MorFødselFormComponents = getTypedFormComponents<MorFødselFormField, MorFødselFormData, string>();\n","import { dateToISOString } from '@navikt/sif-common-formik/lib';\nimport { MorFødselUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport { MorFødselFormData, MorFødselFormField } from './morFødselFormConfig';\n\nconst initialMorFødselValues: MorFødselFormData = {\n    [MorFødselFormField.dekningsgrad]: '',\n    [MorFødselFormField.permisjonStartdato]: '',\n    [MorFødselFormField.skalIkkeHaUttakFørTermin]: false,\n    [MorFødselFormField.fellesperiodeukerMor]: undefined,\n};\n\nexport const mapMorFødselFormToState = (values: Partial<MorFødselFormData>): MorFødselUttaksplanInfo => {\n    return {\n        permisjonStartdato: values.permisjonStartdato!,\n        skalIkkeHaUttakFørTermin: values.skalIkkeHaUttakFørTermin!,\n        fellesperiodeukerMor: values.fellesperiodeukerMor,\n    };\n};\n\nexport const getInitialMorFødselValues = (\n    defaultPermisjonStartdato: Date,\n    lagretUttaksplanInfo: MorFødselUttaksplanInfo | undefined,\n    dekningsgrad: Dekningsgrad\n): MorFødselFormData => {\n    if (lagretUttaksplanInfo) {\n        return {\n            ...lagretUttaksplanInfo,\n            [MorFødselFormField.dekningsgrad]: dekningsgrad,\n        };\n    }\n\n    return {\n        ...initialMorFødselValues,\n        [MorFødselFormField.permisjonStartdato]: dateToISOString(defaultPermisjonStartdato),\n    };\n};\n","import { intlUtils } from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { IntlShape } from 'react-intl';\nimport { isISODateString } from 'nav-datovelger';\nimport { dateToISOString } from '@navikt/sif-common-formik/lib';\nimport uttaksConstants from 'app/constants';\nimport { Uttaksdagen } from '../../../../utils/Uttaksdagen';\nimport { uttaksplanDatoavgrensninger } from '../../../../utils/uttaksplanDatoavgrensninger';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\n\nexport const validateErStartdatoFørTermindato =\n    (intl: IntlShape, familiehendelsedato: Date, skalIkkeHaUttakFørTermin: boolean) => (permisjonStartdato: string) => {\n        if (!(permisjonStartdato === undefined && skalIkkeHaUttakFørTermin)) {\n            if (!isISODateString(permisjonStartdato)) {\n                return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.startdatoPermisjon.gyldigDato');\n            }\n        }\n\n        if (permisjonStartdato !== undefined && !Uttaksdagen(ISOStringToDate(permisjonStartdato)!).erUttaksdag()) {\n            return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.startdatoHelg');\n        }\n\n        if (!skalIkkeHaUttakFørTermin) {\n            const avgrensninger = uttaksplanDatoavgrensninger.startdatoFørTermin(dateToISOString(familiehendelsedato));\n            if (\n                (avgrensninger.minDate &&\n                    avgrensninger.maxDate &&\n                    dayjs(permisjonStartdato).isBefore(avgrensninger.minDate, 'day')) ||\n                dayjs(permisjonStartdato).isAfter(avgrensninger.maxDate, 'day')\n            ) {\n                return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.startdatoUtenforGyldigTidsrom', {\n                    uker: uttaksConstants.MAKS_ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL,\n                });\n            }\n        }\n\n        return undefined;\n    };\n","import * as React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport { Block, intlUtils } from '@navikt/fp-common';\nimport { formaterDato, getVarighetString } from 'app/utils/dateUtils';\nimport Veileder from 'app/components/veileder/Veileder';\nimport { Uttaksdagen } from '../../../utils/Uttaksdagen';\n\ntype ugyldigStartdatoÅrsak = undefined | 'helgedag' | 'fortidlig';\n\nexport interface Props {\n    startdato: Date | undefined;\n    antallDager: number;\n    antallDagerFørFødselIhtRegler: number;\n    skalIkkeHaUttakFørTermin: boolean | undefined;\n    førsteMuligeStartdato: Date | undefined;\n    visKunFeil?: boolean;\n}\n\nexport const getÅrsakDersomUgyldigStartdato = (\n    startdato: Date | undefined,\n    førsteMuligeStartdato: Date | undefined\n): ugyldigStartdatoÅrsak => {\n    if (startdato === undefined) {\n        return;\n    }\n    if (Uttaksdagen(startdato).erUttaksdag() === false) {\n        return 'helgedag';\n    } else if (førsteMuligeStartdato && dayjs(startdato).isBefore(førsteMuligeStartdato, 'day')) {\n        return 'fortidlig';\n    }\n    return;\n};\n\nconst VeilederStartdatoPermisjon: React.FunctionComponent<Props> = ({\n    startdato,\n    antallDager,\n    antallDagerFørFødselIhtRegler,\n    skalIkkeHaUttakFørTermin,\n    førsteMuligeStartdato,\n    visKunFeil,\n}) => {\n    const intl = useIntl();\n\n    const ugyldigDatoÅrsak = startdato && getÅrsakDersomUgyldigStartdato(startdato, førsteMuligeStartdato);\n\n    const msg = React.useMemo(() => {\n        if (ugyldigDatoÅrsak && førsteMuligeStartdato) {\n            return ugyldigDatoÅrsak === 'fortidlig'\n                ? intlUtils(intl, 'uttaksplaninfo.veileder.forTidligStartdato', {\n                      dato: formaterDato(førsteMuligeStartdato),\n                  })\n                : intlUtils(intl, 'uttaksplaninfo.veileder.helgedag');\n        }\n        if (visKunFeil) {\n            return undefined;\n        }\n        if (skalIkkeHaUttakFørTermin === true) {\n            return <FormattedMessage id=\"uttaksplaninfo.informasjon.foreldrepengerFørFødselSkalIkkeHa\" />;\n        } else if (antallDager < antallDagerFørFødselIhtRegler) {\n            return (\n                <FormattedMessage\n                    id=\"uttaksplaninfo.informasjon.foreldrepengerFørFødselMindreEnnTreUker\"\n                    values={{\n                        varighet: getVarighetString(antallDagerFørFødselIhtRegler - antallDager, intl),\n                    }}\n                />\n            );\n        } else if (antallDager > antallDagerFørFødselIhtRegler) {\n            return (\n                <FormattedMessage\n                    id=\"uttaksplaninfo.informasjon.foreldrepengerFørFødselMerEnnTreUker\"\n                    values={{\n                        varighet: getVarighetString(antallDager - antallDagerFørFødselIhtRegler, intl),\n                    }}\n                />\n            );\n        }\n        return undefined;\n    }, [\n        ugyldigDatoÅrsak,\n        antallDager,\n        antallDagerFørFødselIhtRegler,\n        førsteMuligeStartdato,\n        intl,\n        skalIkkeHaUttakFørTermin,\n        visKunFeil,\n    ]);\n\n    const erFeilmelding = ugyldigDatoÅrsak !== undefined;\n\n    return (\n        <Block margin=\"none\" visible={msg !== undefined}>\n            <Veilederpanel svg={<Veileder farge=\"lilla\" ansikt={erFeilmelding ? 'skeptisk' : 'glad'} stil=\"kompakt\" />}>\n                {msg}\n            </Veilederpanel>\n        </Block>\n    );\n};\n\nexport default VeilederStartdatoPermisjon;\n","import React, { FunctionComponent } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { Block, intlUtils, bemUtils } from '@navikt/fp-common';\nimport { MorFødselFormComponents, MorFødselFormField } from './morFødselFormConfig';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { isFødtBarn } from 'app/context/types/Barn';\nimport { Tidsperioden, getValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport uttaksConstants from 'app/constants';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { validateErStartdatoFørTermindato } from './validation/morFodselValidering';\nimport VeilederStartdatoPermisjon from './VeilederStartdatoPermisjon';\nimport { uttaksplanDatoavgrensninger } from 'app/steps/uttaksplan-info/utils/uttaksplanDatoavgrensninger';\nimport { getVarighetString, ISOStringToDate } from 'app/utils/dateUtils';\n\nimport './startdatoPermisjonMor.less';\n\nconst getVarighetForStartdato = (antallDager: number, barnetErFødt: boolean, intl: IntlShape): string | undefined =>\n    antallDager > 0\n        ? barnetErFødt\n            ? intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjon.barnetErFødt.varighet', {\n                  varighet: getVarighetString(antallDager, intl),\n              })\n            : intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjon.varighet', {\n                  varighet: getVarighetString(antallDager, intl),\n              })\n        : undefined;\n\ninterface Props {\n    permisjonStartdato: string;\n    skalIkkeHaUttakFørTermin: boolean;\n}\n\nconst StartdatoPermisjonMor: FunctionComponent<Props> = ({ permisjonStartdato, skalIkkeHaUttakFørTermin }) => {\n    const intl = useIntl();\n    const { barn } = useSøknad();\n    const bem = bemUtils('datoInput');\n\n    const erBarnFødt = isFødtBarn(barn);\n    const spørsmålNår = erBarnFødt\n        ? intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjon.barnetErFødt.label')\n        : intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjon.label');\n\n    const spørsmålHaddeIkke = erBarnFødt\n        ? intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjon.skalIkkeHaUttak.barnetErFødt.label')\n        : intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjon.skalIkkeHaUttak.label');\n\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = dayjs(familiehendelsesdato).toDate();\n    const sisteUttaksdagFørTermin = Uttaksdagen(familiehendelsesdatoDate).forrige();\n    const startdato = skalIkkeHaUttakFørTermin !== true ? permisjonStartdato : undefined;\n    const tidsperiode = getValidTidsperiode({\n        fom: ISOStringToDate(startdato)!,\n        tom: sisteUttaksdagFørTermin,\n    });\n    const antallDager = tidsperiode ? Tidsperioden(tidsperiode).getAntallUttaksdager() : 0;\n    const antallDagerFørFødselIhtRegler = uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5;\n    const visVeileder = antallDager !== antallDagerFørFødselIhtRegler;\n\n    const datoAvgrensninger = uttaksplanDatoavgrensninger.startdatoFørTermin(familiehendelsesdato);\n    const maksDato = Uttaksdagen(familiehendelsesdatoDate).forrige();\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <div className={bem.block}>\n                    <MorFødselFormComponents.DatePicker\n                        name={MorFødselFormField.permisjonStartdato}\n                        label={spørsmålNår}\n                        disabled={skalIkkeHaUttakFørTermin}\n                        maxDate={maksDato}\n                        dayPickerProps={{\n                            initialMonth: ISOStringToDate(permisjonStartdato) || familiehendelsesdatoDate,\n                        }}\n                        validate={validateErStartdatoFørTermindato(\n                            intl,\n                            familiehendelsesdatoDate,\n                            skalIkkeHaUttakFørTermin\n                        )}\n                        disableWeekend\n                        placeholder={'dd.mm.åååå'}\n                    />\n                    <div className={bem.element('postfix')}>\n                        {getVarighetForStartdato(antallDager, erBarnFødt, intl)}\n                    </div>\n                </div>\n            </Block>\n            <Block padBottom={visVeileder ? 'l' : 'm'}>\n                <MorFødselFormComponents.Checkbox\n                    name={MorFødselFormField.skalIkkeHaUttakFørTermin}\n                    label={spørsmålHaddeIkke}\n                    autoComplete=\"off\"\n                />\n            </Block>\n            <Block padBottom={visVeileder ? 'l' : 'm'} visible={visVeileder}>\n                <VeilederStartdatoPermisjon\n                    startdato={ISOStringToDate(startdato)}\n                    antallDager={antallDager}\n                    skalIkkeHaUttakFørTermin={skalIkkeHaUttakFørTermin === true}\n                    antallDagerFørFødselIhtRegler={antallDagerFørFødselIhtRegler}\n                    førsteMuligeStartdato={datoAvgrensninger.minDate ? new Date(datoAvgrensninger.minDate) : undefined}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default StartdatoPermisjonMor;\n","import * as React from 'react';\nimport RangeIcon from './RangeIcon';\nimport Sirkelknapp from './sirkelknapp/Sirkelknapp';\n\nimport './rangeStepper.less';\n\nexport type Direction = 'next' | 'previous';\n\nexport interface Props {\n    onClick: () => void;\n    direction: Direction;\n    label: string;\n    disabled?: boolean;\n}\n\nconst RangeStepper: React.FunctionComponent<Props> = ({ direction, onClick, label, disabled }) => (\n    <Sirkelknapp\n        stil=\"hvit\"\n        onClick={() => onClick()}\n        ariaLabel={label}\n        disabled={disabled}\n        ikon={direction === 'previous' ? <RangeIcon type=\"minus\" /> : <RangeIcon type=\"plus\" />}\n    />\n);\n\nexport default RangeStepper;\n","import React from 'react';\nimport classnames from 'classnames';\nimport { guid } from 'nav-frontend-js-utils';\nimport { bemUtils, UtvidetInformasjon } from '@navikt/fp-common';\nimport Fieldset from 'app/components/fieldset/Fieldset';\nimport AriaText from './AriaText';\nimport RangeStepper from './RangeStepper';\nimport './rangeInput.less';\n\nexport interface RangeInputElementRendererOptions {\n    value: number;\n    min: number;\n    max: number;\n}\n\nexport type RangeInputElementRenderer = (options: RangeInputElementRendererOptions) => React.ReactElement<any>;\n\nexport type RangeValueLabelPlacement = 'above' | 'below';\n\ninterface Props {\n    label: string;\n    hjelpetekst?: React.ReactNode;\n    ariaLabelText: string;\n    hjelpetekstApneLabel: string;\n    value: number;\n    min: number;\n    max: number;\n    step?: number;\n    inputId?: string;\n    bottomContentRenderer?: RangeInputElementRenderer;\n    valueLabelRenderer?: RangeInputElementRenderer;\n    valueLabelPlacement?: RangeValueLabelPlacement;\n    ariaValueChangedMessage?: (value: number) => string;\n    steppers?: {\n        increaseLabel: string;\n        reduceLabel: string;\n    };\n    onChange: (value: number) => void;\n}\n\ninterface State {\n    active: boolean;\n}\n\nconst defaultValueLabelRenderer: RangeInputElementRenderer = (options: RangeInputElementRendererOptions) => (\n    <div className=\"rangeInput__valueLabels\">\n        <div className=\"rangeInput__valueLabels__left\">{options.min}</div>\n        <div className=\"rangeInput__valueLabels__right\">{options.max}</div>\n    </div>\n);\n\nconst defaultBottomContentRenderer: RangeInputElementRenderer = (options: RangeInputElementRendererOptions) => (\n    <div className=\"rangeInput__bottomContent\">\n        <span className=\"typo-normaltekst\">{options.max - options.min}</span>\n    </div>\n);\n\nclass RangeInput extends React.Component<Props, State> {\n    container: HTMLDivElement | null = null;\n\n    constructor(props: Props) {\n        super(props);\n        this.handleBlur = this.handleBlur.bind(this);\n        this.handleFocus = this.handleFocus.bind(this);\n        this.deactivateIfOutside = this.deactivateIfOutside.bind(this);\n        this.state = {\n            active: false,\n        };\n    }\n    handleBlur(_e: React.FocusEvent<HTMLDivElement>) {\n        if (!this.container) {\n            return;\n        }\n        setTimeout(() => this.deactivateIfOutside(), 0);\n    }\n    handleFocus(_e: React.FocusEvent<HTMLDivElement>) {\n        this.setState({\n            active: true,\n        });\n    }\n    deactivateIfOutside() {\n        if (\n            this.container &&\n            window.document.activeElement &&\n            !this.container.contains(window.document.activeElement)\n        ) {\n            this.setState({\n                active: false,\n            });\n        }\n    }\n    render() {\n        const {\n            label,\n            hjelpetekst,\n            ariaLabelText,\n            inputId,\n            valueLabelRenderer,\n            steppers,\n            ariaValueChangedMessage,\n            bottomContentRenderer,\n            hjelpetekstApneLabel,\n            valueLabelPlacement = 'above',\n            ...rest\n        } = this.props;\n\n        const { value, min, max, onChange } = this.props;\n        const id = inputId || guid();\n        const labelRenderer = valueLabelRenderer || defaultValueLabelRenderer;\n        const ariaLabelId = `${id}_label`;\n        const bottomRenderer = bottomContentRenderer || defaultBottomContentRenderer;\n\n        const bemWrapper = bemUtils('rangeInputWrapper');\n        const bemRangeInput = bemUtils('rangeInput');\n        const bemStepper = bemUtils('rangeInput__stepper');\n\n        return (\n            <div className={bemWrapper.block}>\n                <Fieldset legend={<>{label}</>} className={'uttakfordeler'}>\n                    <UtvidetInformasjon apneLabel={hjelpetekstApneLabel}>{hjelpetekst}</UtvidetInformasjon>\n                    <div aria-live=\"polite\">\n                        {valueLabelPlacement === 'above' && labelRenderer({ value, min, max })}\n                    </div>\n                    <div\n                        className={classnames(bemRangeInput.block, {\n                            [bemRangeInput.modifier('withSteppers')]: steppers !== undefined,\n                        })}\n                        ref={(c) => (this.container = c)}\n                        onBlur={this.handleBlur}\n                        onFocus={this.handleFocus}\n                    >\n                        {steppers && (\n                            <div className={`${bemStepper.block} ${bemStepper.modifier('previous')}`}>\n                                <RangeStepper\n                                    direction=\"previous\"\n                                    onClick={() => (value > min ? onChange(value - 1) : null)}\n                                    label={steppers ? steppers.reduceLabel : 'Mindre'}\n                                />\n                            </div>\n                        )}\n                        <div className={bemRangeInput.element('range')}>\n                            <AriaText id={ariaLabelId}>{ariaLabelText}</AriaText>\n                            <input\n                                {...rest}\n                                id={id}\n                                aria-labelledby={ariaLabelId}\n                                className=\"nav-frontend-range-input\"\n                                type=\"range\"\n                                onChange={(e) => onChange(parseInt(e.target.value, 10))}\n                            />\n                            <div role=\"alert\" aria-live=\"assertive\" className=\"sr-only\">\n                                {ariaValueChangedMessage && this.state.active\n                                    ? ariaValueChangedMessage(value)\n                                    : undefined}\n                            </div>\n                        </div>\n                        {steppers && (\n                            <div className={`${bemStepper.block} ${bemStepper.modifier('next')}`}>\n                                <RangeStepper\n                                    direction=\"next\"\n                                    onClick={() => (value < max ? onChange(value + 1) : null)}\n                                    label={steppers ? steppers.increaseLabel : 'Mer'}\n                                />\n                            </div>\n                        )}\n                    </div>\n                    <div aria-live=\"polite\">\n                        {valueLabelPlacement === 'below' && labelRenderer({ value, min, max })}\n                    </div>\n                    {bottomRenderer({ value, min, max })}\n                </Fieldset>\n            </div>\n        );\n    }\n}\n\nexport default RangeInput;\n","import React, { useEffect } from 'react';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport Lenke from 'nav-frontend-lenker';\nimport { Ingress, Normaltekst } from 'nav-frontend-typografi';\nimport { Block, intlUtils } from '@navikt/fp-common';\nimport lenker from 'app/links/links';\nimport RangeInput from './range-input/RangeInput';\n\nimport './fordelingFellesperiodeSpørsmål.less';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport {\n    getAntallUkerFedrekvote,\n    getAntallUkerFellesperiode,\n    getAntallUkerMødrekvote,\n} from '../../utils/stønadskontoer';\n\nexport interface OwnProps {\n    setFieldValue: (field: string, value: any, shouldValidate?: boolean | undefined) => void;\n    valgtFellesperiodeukerMor: number | undefined;\n    mor: string;\n    farMedmor: string;\n    annenForelderErFarEllerMedmor: boolean;\n    valgtStønadskonto: TilgjengeligStønadskonto[] | undefined;\n}\n\nconst FordelingFellesperiodeSpørsmål: React.FunctionComponent<OwnProps> = ({\n    setFieldValue,\n    valgtFellesperiodeukerMor,\n    annenForelderErFarEllerMedmor,\n    mor,\n    farMedmor,\n    valgtStønadskonto,\n}) => {\n    const intl = useIntl();\n\n    const fellesperiodeukerMor =\n        valgtFellesperiodeukerMor !== undefined || !valgtStønadskonto\n            ? valgtFellesperiodeukerMor\n            : Math.round((getAntallUkerFellesperiode(valgtStønadskonto) || 0) / 2);\n\n    useEffect(() => {\n        setFieldValue('fellesperiodeukerMor', fellesperiodeukerMor);\n    }, [setFieldValue, fellesperiodeukerMor]);\n\n    if (!valgtStønadskonto) {\n        return null;\n    }\n\n    const ukerFellesperiode = Math.floor(getAntallUkerFellesperiode(valgtStønadskonto));\n    const antallUkerFedreKvote = getAntallUkerFedrekvote(valgtStønadskonto);\n    const antallUkerMødreKvote = getAntallUkerMødrekvote(valgtStønadskonto);\n\n    const infotekst = intlUtils(intl, 'uttaksplaninfo.fordeling.veiledning', {\n        pakrevdForelder1: antallUkerMødreKvote,\n        pakrevdForelder2: antallUkerFedreKvote,\n        navnForelder1: mor,\n        navnForelder2: farMedmor,\n    });\n\n    const annenForeldersNavn = annenForelderErFarEllerMedmor ? farMedmor : mor;\n    return (\n        <RangeInput\n            label={intlUtils(intl, 'uttaksplaninfo.spørsmål.fordeling')}\n            hjelpetekst={\n                <Normaltekst tag=\"div\">\n                    <Block padBottom=\"l\">{infotekst}</Block>\n                    <Lenke href={lenker.nav_aktivitetskrav} target=\"_blank\">\n                        <FormattedMessage id=\"uttaksplaninfo.fordeling.veiledning.lenketekst\" />\n                    </Lenke>\n                </Normaltekst>\n            }\n            hjelpetekstApneLabel={intlUtils(intl, 'uttaksplaninfo.fordeling.veiledning.lenketekst.apneLabel')}\n            ariaLabelText={intlUtils(intl, 'uttaksplaninfo.spørsmål.fordeling')}\n            value={fellesperiodeukerMor!}\n            min={0}\n            max={ukerFellesperiode}\n            onChange={(fellesperiodeukerMor) => setFieldValue('fellesperiodeukerMor', fellesperiodeukerMor)}\n            steppers={{\n                reduceLabel: intl.formatMessage({ id: 'uttaksplaninfo.fordeling.reduser.tooltip' }),\n                increaseLabel: intl.formatMessage({ id: 'uttaksplaninfo.fordeling.øk.tooltip' }),\n            }}\n            ariaValueChangedMessage={(value) =>\n                intl.formatMessage(\n                    { id: 'uttaksplaninfo.fordeling.valgtVerdi' },\n                    {\n                        ukerForelder: value,\n                        ukerTotalt: ukerFellesperiode,\n                        navnForelder: mor || intl.formatMessage({ id: 'uttaksplan.mor' }),\n                    }\n                )\n            }\n            valueLabelRenderer={(options) => (\n                <Ingress tag=\"p\" className=\"m-text-center fordelingFellesperiode--valgtVerdi\">\n                    <FormattedMessage\n                        id=\"uttaksplaninfo.fordeling.valgtVerdi\"\n                        values={{\n                            ukerForelder: options.value,\n                            ukerTotalt: options.max,\n                            navnForelder: mor || intl.formatMessage({ id: 'uttaksplan.mor' }),\n                        }}\n                    />\n                </Ingress>\n            )}\n            valueLabelPlacement=\"above\"\n            bottomContentRenderer={(options) => (\n                <Normaltekst className=\"m-text-center fordelingFellesperiode--bottomContent\">\n                    <FormattedMessage\n                        id=\"uttaksplaninfo.fordeling.annenForeldersFellesperiode\"\n                        values={{ annenForeldersNavn, antallUker: options.max - options.value }}\n                    />\n                </Normaltekst>\n            )}\n        />\n    );\n};\n\nexport default FordelingFellesperiodeSpørsmål;\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { hasValue } from '@navikt/fp-common';\nimport { MorFødselFormData, MorFødselFormField } from './morFødselFormConfig';\n\ninterface MorFødselQuestionsPayload extends MorFødselFormData {\n    harRettPåForeldrepengerINorge: boolean | undefined;\n    erAleneOmOmsorg: boolean | undefined;\n}\n\nconst MorFødselFormConfig: QuestionConfig<MorFødselQuestionsPayload, MorFødselFormField> = {\n    [MorFødselFormField.dekningsgrad]: {\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n        isIncluded: () => true,\n    },\n    [MorFødselFormField.permisjonStartdato]: {\n        isAnswered: ({ permisjonStartdato }) => hasValue(permisjonStartdato),\n        isIncluded: () => true,\n        visibilityFilter: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [MorFødselFormField.skalIkkeHaUttakFørTermin]: {\n        isAnswered: ({ skalIkkeHaUttakFørTermin }) => hasValue(skalIkkeHaUttakFørTermin),\n        isIncluded: () => true,\n        visibilityFilter: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [MorFødselFormField.fellesperiodeukerMor]: {\n        isAnswered: ({ fellesperiodeukerMor }) => hasValue(fellesperiodeukerMor),\n        isIncluded: ({ harRettPåForeldrepengerINorge, erAleneOmOmsorg }) =>\n            !!harRettPåForeldrepengerINorge && erAleneOmOmsorg === false,\n        visibilityFilter: ({ dekningsgrad, permisjonStartdato, skalIkkeHaUttakFørTermin }) =>\n            hasValue(dekningsgrad) && (hasValue(permisjonStartdato) || skalIkkeHaUttakFørTermin === true),\n    },\n};\n\nexport const morFødselQuestionsConfig = Questions<MorFødselQuestionsPayload, MorFødselFormField>(MorFødselFormConfig);\n","import {\n    finnOgSettInnHull,\n    normaliserPerioder,\n    settInnAnnenPartsUttak,\n} from 'uttaksplan/builder/uttaksplanbuilderUtils';\nimport { isUttakAnnenPart, isUttaksperiode, Periode } from 'uttaksplan/types/Periode';\nimport { Periodene } from './Periodene';\n\nexport const leggTilAnnenPartsPerioderISøkerenesUttaksplan = (\n    annenPartsPerioder: Periode[],\n    uttaksplan: Periode[],\n    familiehendelsedato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n): Periode[] => {\n    const { normaliserteEgnePerioder, normaliserteAnnenPartsPerioder } = normaliserPerioder(\n        uttaksplan,\n        annenPartsPerioder\n    );\n\n    if (normaliserteAnnenPartsPerioder.length > 0) {\n        normaliserteEgnePerioder.forEach((p) => {\n            if (isUttaksperiode(p)) {\n                const overlappendePerioderAnnenPart =\n                    Periodene(normaliserteAnnenPartsPerioder).finnOverlappendePerioder(p);\n                const overlappendePeriodeAnnenPart =\n                    overlappendePerioderAnnenPart.length > 0 ? overlappendePerioderAnnenPart[0] : undefined;\n\n                if (overlappendePeriodeAnnenPart !== undefined && isUttakAnnenPart(overlappendePeriodeAnnenPart)) {\n                    if (!p.ønskerSamtidigUttak) {\n                        p.ønskerSamtidigUttak = true;\n                        p.samtidigUttakProsent = '100';\n                    }\n                    if (!overlappendePeriodeAnnenPart.ønskerSamtidigUttak) {\n                        overlappendePeriodeAnnenPart.ønskerSamtidigUttak = true;\n                        overlappendePeriodeAnnenPart.samtidigUttakProsent = '100';\n                    }\n                }\n            }\n        });\n        return finnOgSettInnHull(\n            settInnAnnenPartsUttak(\n                normaliserteEgnePerioder,\n                normaliserteAnnenPartsPerioder,\n                familiehendelsedato,\n                førsteUttaksdagNesteBarnsSak\n            ),\n            harAktivitetskravIPeriodeUtenUttak,\n            familiehendelsedato,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak\n        );\n    }\n\n    return uttaksplan;\n};\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Block, intlUtils } from '@navikt/fp-common';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport VeilederNormal from 'app/assets/VeilederNormal';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport actionCreator from 'app/context/action/actionCreator';\nimport { getFamiliehendelsedato, getFødselsdato, getTermindato } from 'app/utils/barnUtils';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport { formaterNavn } from 'app/utils/personUtils';\nimport { getFlerbarnsuker } from '../../../utils/uttaksplanHarForMangeFlerbarnsuker';\nimport { MorFødselFormComponents, MorFødselFormData, MorFødselFormField } from './morFødselFormConfig';\nimport { getTilgjengeligeDager } from '../../tilgjengeligeDagerGraf/tilgjengeligeDagerUtils';\nimport TilgjengeligeDagerGraf from '../../tilgjengeligeDagerGraf/TilgjengeligeDagerGraf';\nimport { Tidsperioden } from '../../../utils/Tidsperioden';\nimport { getInitialMorFødselValues, mapMorFødselFormToState } from './morFødselUtils';\nimport StartdatoPermisjonMor from './StartdatoPermisjonMor';\nimport FordelingFellesperiodeSpørsmål from '../../fordelingFellesperiode/FordelingFellesperiodeSpørsmål';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport uttaksConstants from 'app/constants';\nimport { Forelder } from 'app/types/Forelder';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport SøknadRoutes from 'app/routes/routes';\nimport { MorFødselUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport { morFødselQuestionsConfig } from './morFødselQuestionsConfig';\nimport useUttaksplanInfo from 'app/utils/hooks/useUttaksplanInfo';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport { skalViseInfoOmPrematuruker } from 'app/utils/uttaksplanInfoUtils';\nimport { EksisterendeSak } from 'app/types/EksisterendeSak';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from 'app/utils/uttaksplan/uttaksplanUtils';\nimport { leggTilAnnenPartsPerioderISøkerenesUttaksplan } from 'app/steps/uttaksplan-info/utils/leggTilAnnenPartsPerioderISøkerensUttaksplan';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n    eksisterendeSakFar: EksisterendeSak | undefined;\n}\n\nconst MorFødsel: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer100DTO,\n    tilgjengeligeStønadskontoer80DTO,\n    eksisterendeSakFar,\n}) => {\n    const intl = useIntl();\n    const { state } = useForeldrepengesøknadContext();\n    const {\n        annenForelder,\n        søkersituasjon,\n        barn,\n        søker: { erAleneOmOmsorg },\n        dekningsgrad,\n        erEndringssøknad,\n    } = useSøknad();\n    const {\n        person: { fornavn, mellomnavn, etternavn },\n    } = useSøkerinfo();\n    const lagretUttaksplanInfo = useUttaksplanInfo<MorFødselUttaksplanInfo>();\n\n    const antallBarn = barn.antallBarn;\n\n    const fødselsdato = getFødselsdato(barn);\n    const termindato = getTermindato(barn);\n    const visInfoOmPrematuruker = skalViseInfoOmPrematuruker(fødselsdato, termindato, søkersituasjon.situasjon);\n    const ekstraDagerGrunnetPrematurFødsel = visInfoOmPrematuruker\n        ? Tidsperioden({ fom: fødselsdato!, tom: termindato! }).getAntallUttaksdager() - 1\n        : undefined;\n    const førsteUttaksdagNesteBarnsSak =\n        state.barnFraNesteSak !== undefined ? state.barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n    const oppgittAnnenForelder = isAnnenForelderOppgitt(annenForelder) ? annenForelder : undefined;\n    const erMorUfør = !!oppgittAnnenForelder?.erUfør;\n    const harRettPåForeldrepengerINorge = !!oppgittAnnenForelder?.harRettPåForeldrepengerINorge;\n    const navnFarMedmor = oppgittAnnenForelder\n        ? formaterNavn(oppgittAnnenForelder.fornavn, oppgittAnnenForelder.etternavn, true)\n        : '';\n\n    const navnMor = formaterNavn(fornavn, etternavn, true, mellomnavn);\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const førsteUttaksdag = Uttaksdagen(ISOStringToDate(familiehendelsesdato)!).denneEllerNeste();\n    const defaultPermisjonStartdato = Uttaksdagen(førsteUttaksdag).trekkFra(\n        uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5\n    );\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n    const erAdopsjon = søkersituasjon.situasjon === 'adopsjon';\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n\n    const erDeltUttak = isAnnenForelderOppgitt(annenForelder) ? !!annenForelder.harRettPåForeldrepengerINorge : false;\n\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO\n    );\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n\n    const onValidSubmitHandler = (values: Partial<MorFødselFormData>) => {\n        const submissionValues = mapMorFødselFormToState(values);\n        const uttaksplanforslag = lagUttaksplan({\n            annenForelderErUfør: erMorUfør,\n            erDeltUttak,\n            erEndringssøknad,\n            erEnkelEndringssøknad: erEndringssøknad,\n            familiehendelsesdato: familiehendelsesdatoDate!,\n            førsteUttaksdagEtterSeksUker: Uttaksdagen(Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste()).leggTil(\n                30\n            ),\n            situasjon: erFødsel ? 'fødsel' : 'adopsjon',\n            søkerErFarEllerMedmor: erFarEllerMedmor,\n            søkerHarMidlertidigOmsorg: false,\n            tilgjengeligeStønadskontoer: tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n            uttaksplanSkjema: {\n                fellesperiodeukerMor: submissionValues.fellesperiodeukerMor,\n                startdatoPermisjon: submissionValues.skalIkkeHaUttakFørTermin\n                    ? undefined\n                    : submissionValues.permisjonStartdato,\n                skalIkkeHaUttakFørTermin: submissionValues.skalIkkeHaUttakFørTermin,\n            },\n            bareFarMedmorHarRett: false,\n            termindato,\n            harAktivitetskravIPeriodeUtenUttak: false,\n            førsteUttaksdagNesteBarnsSak,\n        });\n        const antallUker = getAntallUker(tilgjengeligeStønadskontoer[values.dekningsgrad! === '100' ? 100 : 80]);\n        const harAktivitetskravIPeriodeUtenUttak = getHarAktivitetskravIPeriodeUtenUttak({\n            erDeltUttak,\n            morHarRett: true,\n            søkerErAleneOmOmsorg: false,\n        });\n\n        let uttaksplanMedAnnenPart;\n\n        if (eksisterendeSakFar && uttaksplanforslag.length > 0) {\n            uttaksplanMedAnnenPart = leggTilAnnenPartsPerioderISøkerenesUttaksplan(\n                eksisterendeSakFar.uttaksplan,\n                uttaksplanforslag,\n                familiehendelsesdatoDate!,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                false,\n                false,\n                førsteUttaksdagNesteBarnsSak\n            );\n        } else if (eksisterendeSakFar) {\n            uttaksplanMedAnnenPart = eksisterendeSakFar.uttaksplan;\n        } else {\n            uttaksplanMedAnnenPart = uttaksplanforslag;\n        }\n        return [\n            actionCreator.setAntallUkerIUttaksplan(antallUker),\n            actionCreator.setUttaksplanInfo(submissionValues),\n            actionCreator.setDekningsgrad(getDekningsgradFromString(values.dekningsgrad)),\n            actionCreator.lagUttaksplanforslag(uttaksplanMedAnnenPart),\n        ];\n    };\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.UTTAKSPLAN,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state)\n    );\n\n    return (\n        <MorFødselFormComponents.FormikWrapper\n            initialValues={getInitialMorFødselValues(defaultPermisjonStartdato, lagretUttaksplanInfo, dekningsgrad)}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues, setFieldValue }) => {\n                const visibility = morFødselQuestionsConfig.getVisbility({\n                    ...formValues,\n                    harRettPåForeldrepengerINorge,\n                    erAleneOmOmsorg,\n                });\n\n                const valgtStønadskonto = tilgjengeligeStønadskontoer[formValues.dekningsgrad === '100' ? 100 : 80];\n\n                return (\n                    <MorFødselFormComponents.Form includeButtons={false} includeValidationSummary={true}>\n                        <Block padBottom=\"l\">\n                            <DekningsgradSpørsmål\n                                FormKomponent={MorFødselFormComponents}\n                                dekningsgradFeltNavn={MorFødselFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={erDeltUttak}\n                            />\n                        </Block>\n                        <Block padBottom=\"l\" visible={visibility.isAnswered(MorFødselFormField.dekningsgrad)}>\n                            {valgtStønadskonto && (\n                                <TilgjengeligeDagerGraf\n                                    erDeltUttak={erDeltUttak}\n                                    erFarEllerMedmor={false}\n                                    navnFarMedmor={navnFarMedmor}\n                                    navnMor={navnMor}\n                                    tilgjengeligeDager={getTilgjengeligeDager(\n                                        valgtStønadskonto,\n                                        false,\n                                        Forelder.farMedmor\n                                    )}\n                                />\n                            )}\n                        </Block>\n                        <Block padBottom=\"l\" visible={visInfoOmPrematuruker === true}>\n                            <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.informasjonPrematuruker\"\n                                    values={{\n                                        antallprematuruker: Math.floor(ekstraDagerGrunnetPrematurFødsel! / 5),\n                                        antallprematurdager: ekstraDagerGrunnetPrematurFødsel! % 5,\n                                    }}\n                                />\n                            </Veilederpanel>\n                        </Block>\n                        <Block visible={visibility.isAnswered(MorFødselFormField.dekningsgrad)}>\n                            <StartdatoPermisjonMor\n                                permisjonStartdato={formValues.permisjonStartdato}\n                                skalIkkeHaUttakFørTermin={formValues.skalIkkeHaUttakFørTermin}\n                            />\n                        </Block>\n                        <Block\n                            visible={\n                                erAleneOmOmsorg === false &&\n                                harRettPåForeldrepengerINorge &&\n                                visibility.isAnswered(MorFødselFormField.dekningsgrad)\n                            }\n                        >\n                            <Block\n                                padBottom=\"l\"\n                                visible={\n                                    antallBarn > 1 &&\n                                    (formValues.permisjonStartdato !== undefined ||\n                                        formValues.skalIkkeHaUttakFørTermin === true)\n                                }\n                            >\n                                <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                                    <FormattedMessage\n                                        id=\"uttaksplaninfo.veileder.flerbarnsInformasjon\"\n                                        values={{\n                                            uker: getFlerbarnsuker(formValues.dekningsgrad!, antallBarn),\n                                            navnFar: navnFarMedmor,\n                                            navnMor: navnMor,\n                                        }}\n                                    />\n                                </Veilederpanel>\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(MorFødselFormField.fellesperiodeukerMor)}\n                            >\n                                <FordelingFellesperiodeSpørsmål\n                                    setFieldValue={setFieldValue}\n                                    valgtStønadskonto={valgtStønadskonto}\n                                    valgtFellesperiodeukerMor={formValues.fellesperiodeukerMor}\n                                    mor={navnMor}\n                                    farMedmor={navnFarMedmor}\n                                    annenForelderErFarEllerMedmor={!erFarEllerMedmor}\n                                />\n                            </Block>\n                        </Block>\n                        <Block visible={visibility.areAllQuestionsAnswered()} textAlignCenter={true}>\n                            <Hovedknapp disabled={isSubmitting} spinner={isSubmitting}>\n                                {intlUtils(intl, 'søknad.gåVidere')}\n                            </Hovedknapp>\n                        </Block>\n                    </MorFødselFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default MorFødsel;\n","enum AdopsjonStartdatoValg {\n    ANKOMST = 'ankomst',\n    OMSORGSOVERTAKELSE = 'omsorgsovertakelse',\n    ANNEN = 'annen',\n}\n\nexport const finnEnum = (valg?: string): AdopsjonStartdatoValg | undefined => {\n    if (valg === AdopsjonStartdatoValg.ANKOMST) {\n        return AdopsjonStartdatoValg.ANKOMST;\n    }\n    if (valg === AdopsjonStartdatoValg.OMSORGSOVERTAKELSE) {\n        return AdopsjonStartdatoValg.OMSORGSOVERTAKELSE;\n    }\n    if (valg === AdopsjonStartdatoValg.ANNEN) {\n        return AdopsjonStartdatoValg.ANNEN;\n    }\n    return undefined;\n};\n\nexport default AdopsjonStartdatoValg;\n","import { getTypedFormComponents, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport AdopsjonStartdatoValg from './adopsjonStartdatoValg';\n\nexport enum MorFarAdopsjonFormField {\n    harAnnenForelderSøktFP = 'harAnnenForelderSøktFP',\n    dekningsgrad = 'dekningsgrad',\n    startdatoAdopsjonValg = 'startdatoAdopsjonValg',\n    annenStartdatoAdopsjon = 'annenStartdatoAdopsjon',\n    annenForeldersSisteDag = 'annenForeldersSisteDag',\n    søkersFørsteDag = 'søkersFørsteDag',\n    antallUkerFellesperiode = 'antallUkerFellesperiode',\n    antallDagerFellesperiode = 'antallDagerFellesperiode',\n    fellesperiodeukerMor = 'fellesperiodeukerMor',\n}\n\nexport interface MorFarAdopsjonFormData {\n    [MorFarAdopsjonFormField.harAnnenForelderSøktFP]: YesOrNo;\n    [MorFarAdopsjonFormField.dekningsgrad]: string;\n    [MorFarAdopsjonFormField.startdatoAdopsjonValg]: AdopsjonStartdatoValg | undefined;\n    [MorFarAdopsjonFormField.annenStartdatoAdopsjon]: string;\n    [MorFarAdopsjonFormField.annenForeldersSisteDag]: string;\n    [MorFarAdopsjonFormField.søkersFørsteDag]: string;\n    [MorFarAdopsjonFormField.antallUkerFellesperiode]: string;\n    [MorFarAdopsjonFormField.antallDagerFellesperiode]: string;\n    [MorFarAdopsjonFormField.fellesperiodeukerMor]: number | undefined;\n}\n\nexport const MorFarAdopsjonFormComponents = getTypedFormComponents<\n    MorFarAdopsjonFormField,\n    MorFarAdopsjonFormData,\n    string\n>();\n","import { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { MorFarAdopsjonUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport { convertYesOrNoOrUndefinedToBoolean } from 'app/utils/formUtils';\nimport { finnEnum } from './adopsjonStartdatoValg';\nimport { MorFarAdopsjonFormData, MorFarAdopsjonFormField } from './morFarAdopsjonFormConfig';\n\nconst initialMorFarAdopsjonValues: MorFarAdopsjonFormData = {\n    [MorFarAdopsjonFormField.harAnnenForelderSøktFP]: YesOrNo.UNANSWERED,\n    [MorFarAdopsjonFormField.dekningsgrad]: '',\n    [MorFarAdopsjonFormField.startdatoAdopsjonValg]: undefined,\n    [MorFarAdopsjonFormField.annenStartdatoAdopsjon]: '',\n    [MorFarAdopsjonFormField.annenForeldersSisteDag]: '',\n    [MorFarAdopsjonFormField.søkersFørsteDag]: '',\n    [MorFarAdopsjonFormField.antallUkerFellesperiode]: '0',\n    [MorFarAdopsjonFormField.antallDagerFellesperiode]: '0',\n    [MorFarAdopsjonFormField.fellesperiodeukerMor]: undefined,\n};\n\nexport const mapMorFarAdopsjonFormToState = (values: Partial<MorFarAdopsjonFormData>): MorFarAdopsjonUttaksplanInfo => {\n    return {\n        harAnnenForelderSøktFP: convertYesOrNoOrUndefinedToBoolean(values.harAnnenForelderSøktFP)!,\n        startdatoAdopsjonValg: values.startdatoAdopsjonValg!,\n        annenStartdatoAdopsjon: values.annenStartdatoAdopsjon!,\n        annenForeldersSisteDag: values.annenForeldersSisteDag!,\n        søkersFørsteDag: values.søkersFørsteDag!,\n        antallUkerFellesperiode: values.antallUkerFellesperiode!,\n        antallDagerFellesperiode: values.antallDagerFellesperiode!,\n        fellesperiodeukerMor: values.fellesperiodeukerMor,\n    };\n};\n\nexport const getInitialMorFarAdopsjonValues = (\n    lagretUttaksplanInfo: MorFarAdopsjonUttaksplanInfo | undefined,\n    dekningsgrad: Dekningsgrad\n): MorFarAdopsjonFormData => {\n    if (lagretUttaksplanInfo) {\n        return {\n            ...lagretUttaksplanInfo,\n            [MorFarAdopsjonFormField.dekningsgrad]: dekningsgrad,\n            [MorFarAdopsjonFormField.startdatoAdopsjonValg]: finnEnum(lagretUttaksplanInfo.startdatoAdopsjonValg),\n            [MorFarAdopsjonFormField.harAnnenForelderSøktFP]: lagretUttaksplanInfo.harAnnenForelderSøktFP\n                ? YesOrNo.YES\n                : YesOrNo.NO,\n        };\n    }\n\n    return initialMorFarAdopsjonValues;\n};\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { hasValue } from '@navikt/fp-common';\nimport { MorFarAdopsjonFormData, MorFarAdopsjonFormField } from './morFarAdopsjonFormConfig';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport AdopsjonStartdatoValg from './adopsjonStartdatoValg';\n\ninterface MorFarAdopsjonQuestionsPayload extends MorFarAdopsjonFormData {\n    harAnnenForelderRettPåForeldrepengerINorge: boolean | undefined;\n    erAleneOmOmsorg: boolean | undefined;\n}\n\nconst MorFarAdopsjonFormConfig: QuestionConfig<MorFarAdopsjonQuestionsPayload, MorFarAdopsjonFormField> = {\n    [MorFarAdopsjonFormField.harAnnenForelderSøktFP]: {\n        isAnswered: ({ harAnnenForelderSøktFP }) => harAnnenForelderSøktFP !== YesOrNo.UNANSWERED,\n        isIncluded: ({ harAnnenForelderRettPåForeldrepengerINorge }) => !!harAnnenForelderRettPåForeldrepengerINorge,\n    },\n    [MorFarAdopsjonFormField.dekningsgrad]: {\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n        isIncluded: ({ harAnnenForelderSøktFP, harAnnenForelderRettPåForeldrepengerINorge }) =>\n            harAnnenForelderSøktFP !== YesOrNo.UNANSWERED || !harAnnenForelderRettPåForeldrepengerINorge,\n    },\n    [MorFarAdopsjonFormField.startdatoAdopsjonValg]: {\n        isAnswered: ({ startdatoAdopsjonValg }) => hasValue(startdatoAdopsjonValg),\n        isIncluded: ({ dekningsgrad, harAnnenForelderSøktFP }) =>\n            hasValue(dekningsgrad) && harAnnenForelderSøktFP !== YesOrNo.YES,\n    },\n    [MorFarAdopsjonFormField.annenStartdatoAdopsjon]: {\n        isAnswered: ({ annenStartdatoAdopsjon }) => hasValue(annenStartdatoAdopsjon),\n        isIncluded: ({ dekningsgrad, harAnnenForelderSøktFP, startdatoAdopsjonValg }) =>\n            startdatoAdopsjonValg === AdopsjonStartdatoValg.ANNEN &&\n            hasValue(dekningsgrad) &&\n            harAnnenForelderSøktFP !== YesOrNo.YES,\n    },\n    [MorFarAdopsjonFormField.annenForeldersSisteDag]: {\n        isAnswered: ({ annenForeldersSisteDag }) => hasValue(annenForeldersSisteDag),\n        isIncluded: ({ dekningsgrad, harAnnenForelderSøktFP }) =>\n            hasValue(dekningsgrad) && harAnnenForelderSøktFP === YesOrNo.YES,\n    },\n    [MorFarAdopsjonFormField.søkersFørsteDag]: {\n        isAnswered: ({ søkersFørsteDag }) => hasValue(søkersFørsteDag),\n        isIncluded: ({ annenForeldersSisteDag, harAnnenForelderSøktFP }) =>\n            hasValue(annenForeldersSisteDag) && harAnnenForelderSøktFP === YesOrNo.YES,\n    },\n    [MorFarAdopsjonFormField.antallDagerFellesperiode]: {\n        isAnswered: ({ antallDagerFellesperiode }) => hasValue(antallDagerFellesperiode),\n        isIncluded: ({ søkersFørsteDag }) => hasValue(søkersFørsteDag),\n    },\n    [MorFarAdopsjonFormField.antallUkerFellesperiode]: {\n        isAnswered: ({ antallUkerFellesperiode }) => hasValue(antallUkerFellesperiode),\n        isIncluded: ({ søkersFørsteDag }) => hasValue(søkersFørsteDag),\n    },\n    [MorFarAdopsjonFormField.fellesperiodeukerMor]: {\n        isAnswered: ({ fellesperiodeukerMor }) => hasValue(fellesperiodeukerMor),\n        isIncluded: ({\n            startdatoAdopsjonValg,\n            harAnnenForelderSøktFP,\n            harAnnenForelderRettPåForeldrepengerINorge,\n            erAleneOmOmsorg,\n        }) =>\n            startdatoAdopsjonValg !== undefined &&\n            harAnnenForelderSøktFP !== YesOrNo.YES &&\n            !!harAnnenForelderRettPåForeldrepengerINorge &&\n            erAleneOmOmsorg === false,\n    },\n};\n\nexport const morFarAdopsjonQuestionsConfig = Questions<MorFarAdopsjonQuestionsPayload, MorFarAdopsjonFormField>(\n    MorFarAdopsjonFormConfig\n);\n","import { intlUtils } from '@navikt/fp-common';\nimport { isISODateString } from 'nav-datovelger';\nimport { IntlShape } from 'react-intl';\n\nexport const validateErAnnenStartdatoAdopsjonGyldig = (intl: IntlShape) => (annenStartdatoAdopsjon: string) => {\n    if (!isISODateString(annenStartdatoAdopsjon)) {\n        return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.startdatoAdopsjon.annenDato.gyldigDato');\n    }\n\n    return undefined;\n};\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Block, hasValue, intlUtils } from '@navikt/fp-common';\nimport { MorFarAdopsjonFormComponents, MorFarAdopsjonFormField } from './morFarAdopsjonFormConfig';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { isAdoptertAnnetBarn, isAdoptertBarn } from 'app/context/types/Barn';\nimport { DateRange } from '@navikt/sif-common-formik/lib';\nimport { formaterDatoUtenDag, ISOStringToDate } from 'app/utils/dateUtils';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { uttaksplanDatoavgrensninger } from 'app/steps/uttaksplan-info/utils/uttaksplanDatoavgrensninger';\nimport { DatepickerDateRange } from 'nav-datovelger';\nimport { validateErAnnenStartdatoAdopsjonGyldig } from './validation/morFarAdopsjonValidering';\nimport AdopsjonStartdatoValg from './adopsjonStartdatoValg';\nimport { assertUnreachable } from 'app/utils/globalUtil';\n\nexport const finnStartdatoAdopsjon = (\n    startdatoAdopsjonValg: AdopsjonStartdatoValg,\n    annenStartdatoAdopsjon?: string,\n    adopsjonsdato?: string,\n    ankomstdato?: string,\n    søkersFørsteDag?: string\n): string => {\n    if (hasValue(søkersFørsteDag)) {\n        return søkersFørsteDag!;\n    }\n\n    switch (startdatoAdopsjonValg) {\n        case AdopsjonStartdatoValg.ANKOMST:\n            return ankomstdato!;\n        case AdopsjonStartdatoValg.OMSORGSOVERTAKELSE:\n            return adopsjonsdato!;\n        case AdopsjonStartdatoValg.ANNEN:\n            return annenStartdatoAdopsjon!;\n        default:\n            return assertUnreachable(startdatoAdopsjonValg, 'Startdato for adopsjon er ikke valgt');\n    }\n};\n\nconst konverterStringTilDate = (invalidDateRanges?: DatepickerDateRange[]): DateRange[] | undefined => {\n    if (!invalidDateRanges) {\n        return undefined;\n    }\n\n    return invalidDateRanges.map((r) => ({\n        from: ISOStringToDate(r.from)!,\n        to: ISOStringToDate(r.to)!,\n    }));\n};\n\ninterface Props {\n    valgtStartdatoAdopsjon?: AdopsjonStartdatoValg;\n}\n\nconst StartdatoAdopsjon: FunctionComponent<Props> = ({ valgtStartdatoAdopsjon }) => {\n    const intl = useIntl();\n    const { barn } = useSøknad();\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n\n    const radios = [];\n    if (isAdoptertAnnetBarn(barn) && barn.ankomstdato) {\n        radios.push({\n            label: intlUtils(intl, 'uttaksplaninfo.startdatoAdopsjon.alternativ.ankomst', {\n                dato: formaterDatoUtenDag(barn.ankomstdato),\n            }),\n            value: AdopsjonStartdatoValg.ANKOMST,\n        });\n    }\n\n    if (isAdoptertBarn(barn)) {\n        radios.push({\n            label: intlUtils(intl, 'uttaksplaninfo.startdatoAdopsjon.alternativ.omsorgsovertakelse', {\n                dato: formaterDatoUtenDag(barn.adopsjonsdato),\n            }),\n            value: AdopsjonStartdatoValg.OMSORGSOVERTAKELSE,\n        });\n    }\n\n    radios.push({\n        label: intlUtils(intl, 'uttaksplaninfo.startdatoAdopsjon.alternativ.annen'),\n        value: AdopsjonStartdatoValg.ANNEN,\n    });\n\n    const datoAvgrensninger = uttaksplanDatoavgrensninger.startdatoPermisjonAdopsjon(familiehendelsesdato);\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <MorFarAdopsjonFormComponents.RadioPanelGroup\n                    name={MorFarAdopsjonFormField.startdatoAdopsjonValg}\n                    radios={radios}\n                    legend={intlUtils(intl, 'uttaksplaninfo.startdatoAdopsjon.spørsmål')}\n                    useTwoColumns={true}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={valgtStartdatoAdopsjon === AdopsjonStartdatoValg.ANNEN}>\n                <MorFarAdopsjonFormComponents.DatePicker\n                    name={MorFarAdopsjonFormField.annenStartdatoAdopsjon}\n                    label={intlUtils(intl, 'uttaksplaninfo.startdatoAdopsjon.annenDato.spørsmål')}\n                    minDate={datoAvgrensninger.minDate ? ISOStringToDate(datoAvgrensninger.minDate) : undefined}\n                    maxDate={datoAvgrensninger.maxDate ? ISOStringToDate(datoAvgrensninger.maxDate) : undefined}\n                    disabledDateRanges={konverterStringTilDate(datoAvgrensninger.invalidDateRanges)}\n                    disableWeekend={datoAvgrensninger.weekendsNotSelectable}\n                    validate={validateErAnnenStartdatoAdopsjonGyldig(intl)}\n                    placeholder={'dd.mm.åååå'}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default StartdatoAdopsjon;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { dateToISOString, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { Block, intlUtils } from '@navikt/fp-common';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { getNavnGenitivEierform, formaterNavn } from 'app/utils/personUtils';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport { getInitialMorFarAdopsjonValues, mapMorFarAdopsjonFormToState } from './morFarAdopsjonUtils';\nimport { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport VeilederNormal from 'app/assets/VeilederNormal';\nimport { Forelder } from 'app/types/Forelder';\nimport { getFlerbarnsuker } from 'app/steps/uttaksplan-info/utils/uttaksplanHarForMangeFlerbarnsuker';\nimport { isAdoptertAnnetBarn, isAdoptertBarn, isAdoptertStebarn } from 'app/context/types/Barn';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport { dateIsSameOrAfter, findEldsteDato, ISOStringToDate } from 'app/utils/dateUtils';\nimport {\n    MorFarAdopsjonFormComponents,\n    MorFarAdopsjonFormData,\n    MorFarAdopsjonFormField,\n} from './morFarAdopsjonFormConfig';\nimport { morFarAdopsjonQuestionsConfig } from './morFarAdopsjonQuestionsConfig';\nimport { getTilgjengeligeDager } from '../../tilgjengeligeDagerGraf/tilgjengeligeDagerUtils';\nimport TilgjengeligeDagerGraf from '../../tilgjengeligeDagerGraf/TilgjengeligeDagerGraf';\nimport StartdatoAdopsjon, { finnStartdatoAdopsjon } from './StartdatoAdopsjon';\nimport MorsSisteDagSpørsmål from '../spørsmål/MorsSisteDagSpørsmål';\nimport FarMedmorsFørsteDag from '../spørsmål/FarMedmorsFørsteDag';\nimport AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål from '../spørsmål/AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål';\nimport FordelingFellesperiodeSpørsmål from '../../fordelingFellesperiode/FordelingFellesperiodeSpørsmål';\nimport SøknadRoutes from 'app/routes/routes';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport actionCreator from 'app/context/action/actionCreator';\nimport useUttaksplanInfo from 'app/utils/hooks/useUttaksplanInfo';\nimport { MorFarAdopsjonUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport AdopsjonStartdatoValg from './adopsjonStartdatoValg';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from 'app/utils/uttaksplan/uttaksplanUtils';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n}\n\nconst MorFarAdopsjon: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer80DTO,\n    tilgjengeligeStønadskontoer100DTO,\n}) => {\n    const intl = useIntl();\n    const { state } = useForeldrepengesøknadContext();\n    const {\n        søkersituasjon,\n        annenForelder,\n        barn,\n        søker: { erAleneOmOmsorg },\n        dekningsgrad,\n        erEndringssøknad,\n    } = useSøknad();\n    const {\n        person: { fornavn, mellomnavn, etternavn },\n    } = useSøkerinfo();\n    const lagretUttaksplanInfo = useUttaksplanInfo<MorFarAdopsjonUttaksplanInfo>();\n\n    const erAdopsjon = søkersituasjon.situasjon === 'adopsjon';\n    const søkerErAleneOmOmsorg = !!erAleneOmOmsorg;\n    const annenForelderOppgittIkkeAleneOmOmsorg = isAnnenForelderOppgitt(annenForelder)\n        ? annenForelder.harRettPåForeldrepengerINorge !== undefined ||\n          annenForelder.harRettPåForeldrepengerIEØS !== undefined\n        : false;\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const bareFarMedmorHarRett =\n        erFarEllerMedmor &&\n        isAnnenForelderOppgitt(annenForelder) &&\n        !søkerErAleneOmOmsorg &&\n        !annenForelder.harRettPåForeldrepengerINorge &&\n        !annenForelder.harRettPåForeldrepengerIEØS;\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const førsteUttaksdagNesteBarnsSak =\n        state.barnFraNesteSak !== undefined ? state.barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n    const shouldRender =\n        erAdopsjon && (annenForelderOppgittIkkeAleneOmOmsorg || annenForelder.kanIkkeOppgis || søkerErAleneOmOmsorg);\n\n    const onValidSubmitHandler = (values: Partial<MorFarAdopsjonFormData>) => {\n        const submissionValues = mapMorFarAdopsjonFormToState(values);\n        const barnAdopsjonsdato = isAdoptertBarn(barn) ? barn.adopsjonsdato : undefined;\n        const antallUker = getAntallUker(tilgjengeligeStønadskontoer[values.dekningsgrad! === '100' ? 100 : 80]);\n\n        const startdato = finnStartdatoAdopsjon(\n            values.startdatoAdopsjonValg!,\n            values.annenStartdatoAdopsjon,\n            dateToISOString(barnAdopsjonsdato),\n            dateToISOString(ankomstdato),\n            values.søkersFørsteDag\n        );\n\n        return [\n            actionCreator.setAntallUkerIUttaksplan(antallUker),\n            actionCreator.setUttaksplanInfo(submissionValues),\n            actionCreator.setDekningsgrad(getDekningsgradFromString(values.dekningsgrad)),\n            actionCreator.lagUttaksplanforslag(\n                lagUttaksplan({\n                    annenForelderErUfør: erMorUfør,\n                    erDeltUttak,\n                    erEndringssøknad,\n                    erEnkelEndringssøknad: erEndringssøknad,\n                    familiehendelsesdato: familiehendelsesdatoDate!,\n                    førsteUttaksdagEtterSeksUker: Uttaksdagen(\n                        Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste()\n                    ).leggTil(30),\n                    situasjon: søkersituasjon.situasjon,\n                    søkerErFarEllerMedmor: erFarEllerMedmor,\n                    søkerHarMidlertidigOmsorg: false,\n                    tilgjengeligeStønadskontoer:\n                        tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n                    uttaksplanSkjema: {\n                        fellesperiodeukerMor: submissionValues.fellesperiodeukerMor,\n                        startdatoPermisjon: startdato,\n                        antallDagerFellesperiodeFarMedmor: parseInt(submissionValues.antallDagerFellesperiode),\n                        antallUkerFellesperiodeFarMedmor: parseInt(submissionValues.antallUkerFellesperiode),\n                        harAnnenForelderSøktFP: submissionValues.harAnnenForelderSøktFP,\n                        morSinSisteUttaksdag: submissionValues.annenForeldersSisteDag,\n                        farSinFørsteUttaksdag: submissionValues.søkersFørsteDag,\n                    },\n                    bareFarMedmorHarRett: bareFarMedmorHarRett,\n                    termindato: undefined,\n                    harAktivitetskravIPeriodeUtenUttak: getHarAktivitetskravIPeriodeUtenUttak({\n                        erDeltUttak,\n                        morHarRett: !bareFarMedmorHarRett,\n                        søkerErAleneOmOmsorg,\n                    }),\n                    førsteUttaksdagNesteBarnsSak,\n                })\n            ),\n        ];\n    };\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.UTTAKSPLAN,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state)\n    );\n\n    if (!shouldRender || !isAdoptertBarn(barn)) {\n        return null;\n    }\n\n    const erSøkerMor = !erFarEllerMedmor;\n\n    const oppgittAnnenForelder = isAnnenForelderOppgitt(annenForelder) ? annenForelder : undefined;\n    const harAnnenForelderRettPåForeldrepengerINorge = !!oppgittAnnenForelder?.harRettPåForeldrepengerINorge;\n    const fornavnAnnenForeldre = oppgittAnnenForelder?.fornavn;\n    const erAnnenPartUfør = !!oppgittAnnenForelder?.erUfør;\n    const navnAnnenPart = oppgittAnnenForelder\n        ? formaterNavn(oppgittAnnenForelder.fornavn, oppgittAnnenForelder.etternavn, true)\n        : '';\n\n    const erDeltUttak = isAnnenForelderOppgitt(annenForelder)\n        ? !!annenForelder.harRettPåForeldrepengerINorge || !!annenForelder.harRettPåForeldrepengerIEØS\n        : false;\n\n    const erMorUfør = erSøkerMor ? false : erAnnenPartUfør;\n\n    const navnSøker = formaterNavn(fornavn, etternavn, true, mellomnavn);\n    const navnMor = erSøkerMor ? navnSøker : navnAnnenPart;\n    const navnFarMedmor = erSøkerMor ? navnAnnenPart : navnSøker;\n\n    const erAdoptertIUtlandet = isAdoptertAnnetBarn(barn) ? barn.adoptertIUtlandet : false;\n    const ankomstdato = isAdoptertAnnetBarn(barn) ? barn.ankomstdato : undefined;\n    const antallBarn = barn.antallBarn;\n    const latestDate =\n        ankomstdato !== undefined && barn.adopsjonsdato !== undefined\n            ? dateToISOString(findEldsteDato([ankomstdato, barn.adopsjonsdato])) // todo - sjekk logikk her\n            : barn.adopsjonsdato;\n\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO\n    );\n\n    return (\n        <MorFarAdopsjonFormComponents.FormikWrapper\n            initialValues={getInitialMorFarAdopsjonValues(lagretUttaksplanInfo, dekningsgrad)}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues, setFieldValue }) => {\n                const visibility = morFarAdopsjonQuestionsConfig.getVisbility({\n                    ...formValues,\n                    harAnnenForelderRettPåForeldrepengerINorge,\n                    erAleneOmOmsorg,\n                });\n\n                const valgtStønadskonto = tilgjengeligeStønadskontoer[formValues.dekningsgrad === '100' ? 100 : 80];\n\n                const tilgjengeligeDager = valgtStønadskonto\n                    ? getTilgjengeligeDager(valgtStønadskonto, false, Forelder.farMedmor)\n                    : undefined;\n\n                return (\n                    <MorFarAdopsjonFormComponents.Form includeButtons={false} includeValidationSummary={true}>\n                        <Block\n                            padBottom=\"l\"\n                            visible={visibility.isIncluded(MorFarAdopsjonFormField.harAnnenForelderSøktFP)}\n                        >\n                            <MorFarAdopsjonFormComponents.YesOrNoQuestion\n                                name={MorFarAdopsjonFormField.harAnnenForelderSøktFP}\n                                legend={intlUtils(intl, 'uttaksplaninfo.spørsmål.harAnnenForelderSøktFP.label', {\n                                    navnAnnenForelder: fornavnAnnenForeldre,\n                                })}\n                            />\n                        </Block>\n                        {formValues.harAnnenForelderSøktFP === YesOrNo.YES && (\n                            <Block padBottom=\"l\">\n                                <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                                    <FormattedMessage\n                                        id=\"uttaksplaninfo.informasjon.tilAnnenForelder\"\n                                        values={{\n                                            navn: getNavnGenitivEierform(fornavnAnnenForeldre!, intl.locale),\n                                        }}\n                                    />\n                                </Veilederpanel>\n                            </Block>\n                        )}\n                        <Block padBottom=\"l\" visible={visibility.isIncluded(MorFarAdopsjonFormField.dekningsgrad)}>\n                            <DekningsgradSpørsmål\n                                FormKomponent={MorFarAdopsjonFormComponents}\n                                dekningsgradFeltNavn={MorFarAdopsjonFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={erDeltUttak}\n                            />\n                        </Block>\n                        <Block padBottom=\"l\" visible={visibility.isAnswered(MorFarAdopsjonFormField.dekningsgrad)}>\n                            {tilgjengeligeDager && (\n                                <TilgjengeligeDagerGraf\n                                    erDeltUttak={erDeltUttak}\n                                    erFarEllerMedmor={!erSøkerMor}\n                                    navnFarMedmor={navnFarMedmor}\n                                    navnMor={navnMor}\n                                    tilgjengeligeDager={tilgjengeligeDager}\n                                />\n                            )}\n                        </Block>\n                        <Block visible={visibility.isIncluded(MorFarAdopsjonFormField.startdatoAdopsjonValg)}>\n                            <StartdatoAdopsjon valgtStartdatoAdopsjon={formValues.startdatoAdopsjonValg} />\n                        </Block>\n                        <Block\n                            padBottom=\"l\"\n                            visible={visibility.isIncluded(MorFarAdopsjonFormField.annenForeldersSisteDag)}\n                        >\n                            <MorsSisteDagSpørsmål\n                                FormComponents={MorFarAdopsjonFormComponents}\n                                fieldName={MorFarAdopsjonFormField.annenForeldersSisteDag}\n                                navnMor={navnAnnenPart}\n                                familiehendelsesdato={familiehendelsesdato}\n                            />\n                        </Block>\n                        <Block padBottom=\"l\" visible={visibility.isIncluded(MorFarAdopsjonFormField.søkersFørsteDag)}>\n                            <FarMedmorsFørsteDag\n                                FormComponents={MorFarAdopsjonFormComponents}\n                                fieldName={MorFarAdopsjonFormField.søkersFørsteDag}\n                                familiehendelsesdato={familiehendelsesdatoDate!}\n                                setFieldValue={setFieldValue}\n                                morsSisteDag={ISOStringToDate(formValues.annenForeldersSisteDag)}\n                                navnMor={navnMor}\n                                termindato={undefined}\n                                situasjon={søkersituasjon.situasjon}\n                                morHarRettTilForeldrepengerIEØS={false}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"l\"\n                            visible={\n                                visibility.isAnswered(MorFarAdopsjonFormField.søkersFørsteDag) &&\n                                !dateIsSameOrAfter(\n                                    ISOStringToDate(formValues.annenForeldersSisteDag),\n                                    ISOStringToDate(formValues.søkersFørsteDag)\n                                ) &&\n                                formValues.harAnnenForelderSøktFP === YesOrNo.YES\n                            }\n                        >\n                            {tilgjengeligeDager && (\n                                <AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål\n                                    FormComponents={MorFarAdopsjonFormComponents}\n                                    ukerFieldName={MorFarAdopsjonFormField.antallUkerFellesperiode}\n                                    dagerFieldName={MorFarAdopsjonFormField.antallDagerFellesperiode}\n                                    antallDager={formValues.antallDagerFellesperiode}\n                                    antallUker={formValues.antallUkerFellesperiode}\n                                    setFieldValue={setFieldValue}\n                                    ukerMedFellesperiode={tilgjengeligeDager.dagerFelles / 5}\n                                />\n                            )}\n                        </Block>\n                        <Block\n                            padBottom=\"l\"\n                            visible={\n                                formValues.startdatoAdopsjonValg === AdopsjonStartdatoValg.ANNEN &&\n                                dayjs(latestDate).isBefore(\n                                    dayjs(\n                                        finnStartdatoAdopsjon(\n                                            formValues.startdatoAdopsjonValg,\n                                            formValues.annenStartdatoAdopsjon,\n                                            dateToISOString(barn.adopsjonsdato),\n                                            dateToISOString(ankomstdato),\n                                            formValues.søkersFørsteDag\n                                        )\n                                    ),\n                                    'day'\n                                ) &&\n                                !isAdoptertStebarn(barn) &&\n                                !erDeltUttak\n                            }\n                        >\n                            <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                                <FormattedMessage\n                                    id={\n                                        erAdoptertIUtlandet === false\n                                            ? 'uttaksplaninfo.info.ikkeAdoptertIUtlandet'\n                                            : 'uttaksplaninfo.info.adoptertIUtlandet'\n                                    }\n                                />\n                            </Veilederpanel>\n                        </Block>\n                        <Block visible={erAleneOmOmsorg === false && harAnnenForelderRettPåForeldrepengerINorge}>\n                            <Block\n                                padBottom=\"l\"\n                                visible={\n                                    antallBarn > 1 &&\n                                    formValues.startdatoAdopsjonValg !== undefined &&\n                                    formValues.harAnnenForelderSøktFP !== YesOrNo.YES\n                                }\n                            >\n                                <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                                    <FormattedMessage\n                                        id=\"uttaksplaninfo.veileder.flerbarnsInformasjon\"\n                                        values={{\n                                            uker: getFlerbarnsuker(formValues.dekningsgrad!, antallBarn),\n                                            navnFar: navnFarMedmor,\n                                            navnMor: navnMor,\n                                        }}\n                                    />\n                                </Veilederpanel>\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isIncluded(MorFarAdopsjonFormField.fellesperiodeukerMor)}\n                            >\n                                <FordelingFellesperiodeSpørsmål\n                                    setFieldValue={setFieldValue}\n                                    valgtStønadskonto={valgtStønadskonto}\n                                    valgtFellesperiodeukerMor={formValues.fellesperiodeukerMor}\n                                    mor={navnMor}\n                                    farMedmor={navnFarMedmor}\n                                    annenForelderErFarEllerMedmor={!erSøkerMor}\n                                />\n                            </Block>\n                        </Block>\n                        <Block visible={visibility.areAllQuestionsAnswered()} textAlignCenter={true}>\n                            <Hovedknapp disabled={isSubmitting} spinner={isSubmitting}>\n                                {intlUtils(intl, 'søknad.gåVidere')}\n                            </Hovedknapp>\n                        </Block>\n                    </MorFarAdopsjonFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default MorFarAdopsjon;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport AdopsjonStartdatoValg from '../mor-far-adopsjon/adopsjonStartdatoValg';\n\nexport enum MorFarAdopsjonAnnenForelderHarRettIEØSFormField {\n    dekningsgrad = 'dekningsgrad',\n    startdatoAdopsjonValg = 'startdatoAdopsjonValg',\n    annenStartdatoAdopsjon = 'annenStartdatoAdopsjon',\n}\n\nexport interface MorFarAdopsjonAnnenForelderHarRettIEØSFormData {\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.dekningsgrad]: string;\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.startdatoAdopsjonValg]: AdopsjonStartdatoValg | undefined;\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.annenStartdatoAdopsjon]: string | undefined;\n}\n\nexport const MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents = getTypedFormComponents<\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormField,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormData,\n    string\n>();\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { hasValue } from '@navikt/fp-common';\nimport {\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormData,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormField,\n} from './morFarAdopsjonAnnenForelderHarRettIEØSFormConfig';\nimport AdopsjonStartdatoValg from '../mor-far-adopsjon/adopsjonStartdatoValg';\ninterface MorFarAdopsjonAnnenForelderHarRettIEØSQuestionsPayload\n    extends MorFarAdopsjonAnnenForelderHarRettIEØSFormData {\n    erFarEllerMedmor: boolean;\n}\nconst MorFarAdopsjonAnnenForelderHarRettIEØSFormConfig: QuestionConfig<\n    MorFarAdopsjonAnnenForelderHarRettIEØSQuestionsPayload,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormField\n> = {\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.dekningsgrad]: {\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n        isIncluded: () => true,\n    },\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.startdatoAdopsjonValg]: {\n        isAnswered: ({ startdatoAdopsjonValg }) => hasValue(startdatoAdopsjonValg),\n        isIncluded: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.annenStartdatoAdopsjon]: {\n        isAnswered: ({ annenStartdatoAdopsjon }) => hasValue(annenStartdatoAdopsjon),\n        isIncluded: ({ dekningsgrad, startdatoAdopsjonValg }) =>\n            startdatoAdopsjonValg === AdopsjonStartdatoValg.ANNEN && hasValue(dekningsgrad),\n    },\n};\nexport const morFarAdopsjonAnnenForelderHarRettIEØSQuestionsConfig = Questions<\n    MorFarAdopsjonAnnenForelderHarRettIEØSQuestionsPayload,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormField\n>(MorFarAdopsjonAnnenForelderHarRettIEØSFormConfig);\n","import { MorFarAdopsjonAnnenForelderHarRettIEØSUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport { finnEnum } from '../mor-far-adopsjon/adopsjonStartdatoValg';\nimport {\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormField,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormData,\n} from './morFarAdopsjonAnnenForelderHarRettIEØSFormConfig';\n\nconst initialMorFarAdopsjonAnnenForelderHarRettIEØSValues: MorFarAdopsjonAnnenForelderHarRettIEØSFormData = {\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.dekningsgrad]: '',\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.startdatoAdopsjonValg]: undefined,\n    [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.annenStartdatoAdopsjon]: '',\n};\nexport const mapMorFarAdopsjonAnnenForelderHarRettIEØSFormToState = (\n    values: Partial<MorFarAdopsjonAnnenForelderHarRettIEØSFormData>\n): MorFarAdopsjonAnnenForelderHarRettIEØSUttaksplanInfo => {\n    return {\n        dekningsgrad: values.dekningsgrad!,\n        startdatoAdopsjonValg: values.startdatoAdopsjonValg!,\n        annenStartdatoAdopsjon: values.annenStartdatoAdopsjon!,\n    };\n};\nexport const getInitialMorFarAdopsjonAnnenForelderHarRettIEØSValues = (\n    lagretUttaksplanInfo: MorFarAdopsjonAnnenForelderHarRettIEØSUttaksplanInfo | undefined,\n    dekningsgrad: Dekningsgrad\n): MorFarAdopsjonAnnenForelderHarRettIEØSFormData => {\n    if (lagretUttaksplanInfo) {\n        return {\n            ...lagretUttaksplanInfo,\n            [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.dekningsgrad]: dekningsgrad,\n            [MorFarAdopsjonAnnenForelderHarRettIEØSFormField.startdatoAdopsjonValg]: finnEnum(\n                lagretUttaksplanInfo.startdatoAdopsjonValg\n            ),\n        };\n    }\n    return initialMorFarAdopsjonAnnenForelderHarRettIEØSValues;\n};\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport dayjs from 'dayjs';\nimport { dateToISOString } from '@navikt/sif-common-formik/lib';\nimport { Block, intlUtils } from '@navikt/fp-common';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { formaterNavn } from 'app/utils/personUtils';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport VeilederNormal from 'app/assets/VeilederNormal';\nimport { getFlerbarnsuker } from 'app/steps/uttaksplan-info/utils/uttaksplanHarForMangeFlerbarnsuker';\nimport { isAdoptertAnnetBarn, isAdoptertBarn, isAdoptertStebarn } from 'app/context/types/Barn';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport { findEldsteDato, ISOStringToDate } from 'app/utils/dateUtils';\nimport SøknadRoutes from 'app/routes/routes';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport actionCreator from 'app/context/action/actionCreator';\nimport useUttaksplanInfo from 'app/utils/hooks/useUttaksplanInfo';\nimport { MorFarAdopsjonAnnenForelderHarRettIEØSUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from 'app/utils/uttaksplan/uttaksplanUtils';\nimport StartdatoAdopsjon, { finnStartdatoAdopsjon } from '../mor-far-adopsjon/StartdatoAdopsjon';\nimport { morFarAdopsjonAnnenForelderHarRettIEØSQuestionsConfig } from './morFarAdopsjonAnnenForelderHarRettIEØSQuestionsConfig';\nimport {\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormData,\n    MorFarAdopsjonAnnenForelderHarRettIEØSFormField,\n} from './morFarAdopsjonAnnenForelderHarRettIEØSFormConfig';\nimport {\n    getInitialMorFarAdopsjonAnnenForelderHarRettIEØSValues,\n    mapMorFarAdopsjonAnnenForelderHarRettIEØSFormToState,\n} from './morFarAdopsjonAnnenForelderHarRettIEØSUtils';\nimport AdopsjonStartdatoValg from '../mor-far-adopsjon/adopsjonStartdatoValg';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n}\n\nconst MorFarAdopsjonAnnenForelderHarRettIEØS: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer80DTO,\n    tilgjengeligeStønadskontoer100DTO,\n}) => {\n    const intl = useIntl();\n    const { state } = useForeldrepengesøknadContext();\n    const { søkersituasjon, annenForelder, barn, dekningsgrad, erEndringssøknad } = useSøknad();\n    const {\n        person: { fornavn, mellomnavn, etternavn },\n    } = useSøkerinfo();\n    const lagretUttaksplanInfo = useUttaksplanInfo<MorFarAdopsjonAnnenForelderHarRettIEØSUttaksplanInfo>();\n    const erDeltUttak = true;\n    const erAdopsjon = søkersituasjon.situasjon === 'adopsjon';\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const førsteUttaksdagNesteBarnsSak =\n        state.barnFraNesteSak !== undefined ? state.barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n    const onValidSubmitHandler = (values: Partial<MorFarAdopsjonAnnenForelderHarRettIEØSFormData>) => {\n        const submissionValues = mapMorFarAdopsjonAnnenForelderHarRettIEØSFormToState(values);\n        const barnAdopsjonsdato = isAdoptertBarn(barn) ? barn.adopsjonsdato : undefined;\n        const antallUker = getAntallUker(tilgjengeligeStønadskontoer[values.dekningsgrad! === '100' ? 100 : 80]);\n\n        const startdato = finnStartdatoAdopsjon(\n            values.startdatoAdopsjonValg!,\n            values.annenStartdatoAdopsjon,\n            dateToISOString(barnAdopsjonsdato),\n            dateToISOString(ankomstdato),\n            undefined\n        );\n\n        return [\n            actionCreator.setAntallUkerIUttaksplan(antallUker),\n            actionCreator.setUttaksplanInfo(submissionValues),\n            actionCreator.setDekningsgrad(getDekningsgradFromString(values.dekningsgrad)),\n            actionCreator.lagUttaksplanforslag(\n                lagUttaksplan({\n                    annenForelderErUfør: false,\n                    erDeltUttak,\n                    erEndringssøknad,\n                    erEnkelEndringssøknad: erEndringssøknad,\n                    familiehendelsesdato: familiehendelsesdatoDate!,\n                    førsteUttaksdagEtterSeksUker: Uttaksdagen(\n                        Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste()\n                    ).leggTil(30),\n                    situasjon: søkersituasjon.situasjon,\n                    søkerErFarEllerMedmor: erFarEllerMedmor,\n                    søkerHarMidlertidigOmsorg: false,\n                    tilgjengeligeStønadskontoer:\n                        tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n                    uttaksplanSkjema: {\n                        startdatoPermisjon: startdato,\n                        farSinFørsteUttaksdag: erFarEllerMedmor ? startdato : undefined,\n                    },\n                    bareFarMedmorHarRett: false,\n                    termindato: undefined,\n                    harAktivitetskravIPeriodeUtenUttak: getHarAktivitetskravIPeriodeUtenUttak({\n                        erDeltUttak,\n                        morHarRett: true,\n                        søkerErAleneOmOmsorg: false,\n                    }),\n                    annenForelderHarRettPåForeldrepengerIEØS: true,\n                    førsteUttaksdagNesteBarnsSak,\n                })\n            ),\n        ];\n    };\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.UTTAKSPLAN,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state)\n    );\n\n    if (!erAdopsjon || !isAdoptertBarn(barn)) {\n        return null;\n    }\n\n    const erSøkerMor = !erFarEllerMedmor;\n    const oppgittAnnenForelder = isAnnenForelderOppgitt(annenForelder) ? annenForelder : undefined;\n    const navnAnnenPart = oppgittAnnenForelder\n        ? formaterNavn(oppgittAnnenForelder.fornavn, oppgittAnnenForelder.etternavn, true)\n        : '';\n\n    const erDeltUttakINorge = false;\n    const navnSøker = formaterNavn(fornavn, etternavn, true, mellomnavn);\n    const navnMor = erSøkerMor ? navnSøker : navnAnnenPart;\n    const navnFarMedmor = erSøkerMor ? navnAnnenPart : navnSøker;\n    const erAdoptertIUtlandet = isAdoptertAnnetBarn(barn) ? barn.adoptertIUtlandet : false;\n    const ankomstdato = isAdoptertAnnetBarn(barn) ? barn.ankomstdato : undefined;\n    const antallBarn = barn.antallBarn;\n    const latestDate =\n        ankomstdato !== undefined && barn.adopsjonsdato !== undefined\n            ? dateToISOString(findEldsteDato([ankomstdato, barn.adopsjonsdato]))\n            : barn.adopsjonsdato;\n\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO\n    );\n\n    return (\n        <MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents.FormikWrapper\n            initialValues={getInitialMorFarAdopsjonAnnenForelderHarRettIEØSValues(lagretUttaksplanInfo, dekningsgrad)}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues }) => {\n                const visibility = morFarAdopsjonAnnenForelderHarRettIEØSQuestionsConfig.getVisbility({\n                    ...formValues,\n                    erFarEllerMedmor,\n                });\n\n                return (\n                    <MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents.Form\n                        includeButtons={false}\n                        includeValidationSummary={true}\n                    >\n                        <Block\n                            padBottom=\"l\"\n                            visible={visibility.isIncluded(\n                                MorFarAdopsjonAnnenForelderHarRettIEØSFormField.dekningsgrad\n                            )}\n                        >\n                            <DekningsgradSpørsmål\n                                FormKomponent={MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents}\n                                dekningsgradFeltNavn={MorFarAdopsjonAnnenForelderHarRettIEØSFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={erDeltUttakINorge}\n                            />\n                        </Block>\n                        <Block\n                            visible={visibility.isIncluded(\n                                MorFarAdopsjonAnnenForelderHarRettIEØSFormField.startdatoAdopsjonValg\n                            )}\n                        >\n                            <StartdatoAdopsjon valgtStartdatoAdopsjon={formValues.startdatoAdopsjonValg} />\n                        </Block>\n                        <Block\n                            padBottom=\"l\"\n                            visible={\n                                erAdopsjon &&\n                                isAdoptertBarn(barn) &&\n                                formValues.startdatoAdopsjonValg === AdopsjonStartdatoValg.ANNEN &&\n                                dayjs(latestDate).isBefore(\n                                    dayjs(\n                                        finnStartdatoAdopsjon(\n                                            formValues.startdatoAdopsjonValg!,\n                                            undefined,\n                                            dateToISOString(barn.adopsjonsdato),\n                                            dateToISOString(ankomstdato),\n                                            undefined\n                                        )\n                                    ),\n                                    'day'\n                                ) &&\n                                !isAdoptertStebarn(barn) &&\n                                !erDeltUttak\n                            }\n                        >\n                            <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                                <FormattedMessage\n                                    id={\n                                        erAdoptertIUtlandet === false\n                                            ? 'uttaksplaninfo.info.ikkeAdoptertIUtlandet'\n                                            : 'uttaksplaninfo.info.adoptertIUtlandet'\n                                    }\n                                />\n                            </Veilederpanel>\n                        </Block>\n                        <Block padBottom=\"l\" visible={antallBarn > 1 && formValues.startdatoAdopsjonValg !== undefined}>\n                            <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.flerbarnsInformasjon.annenForelderHarRettIEØS\"\n                                    values={{\n                                        uker: getFlerbarnsuker(formValues.dekningsgrad!, antallBarn),\n                                        navnFar: navnFarMedmor,\n                                        navnMor: navnMor,\n                                    }}\n                                />\n                            </Veilederpanel>\n                        </Block>\n                        <Block visible={visibility.areAllQuestionsAnswered()} textAlignCenter={true}>\n                            <Hovedknapp disabled={isSubmitting} spinner={isSubmitting}>\n                                {intlUtils(intl, 'søknad.gåVidere')}\n                            </Hovedknapp>\n                        </Block>\n                    </MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default MorFarAdopsjonAnnenForelderHarRettIEØS;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\n\nexport enum MorFarFødselAnnenForelderHarRettIEØSFormField {\n    dekningsgrad = 'dekningsgrad',\n    permisjonStartdato = 'permisjonStartdato',\n    skalIkkeHaUttakFørTermin = 'skalIkkeHaUttakFørTermin',\n}\n\nexport interface MorFarFødselAnnenForelderHarRettIEØSFormData {\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad]: string;\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato]: string;\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.skalIkkeHaUttakFørTermin]: boolean | undefined;\n}\n\nexport const MorFarFødselAnnenForelderHarRettIEØSFormComponents = getTypedFormComponents<\n    MorFarFødselAnnenForelderHarRettIEØSFormField,\n    MorFarFødselAnnenForelderHarRettIEØSFormData,\n    string\n>();\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { hasValue } from '@navikt/fp-common';\nimport {\n    MorFarFødselAnnenForelderHarRettIEØSFormData,\n    MorFarFødselAnnenForelderHarRettIEØSFormField,\n} from './morFarFødselAnnenForelderHarRettIEØSFormConfig';\ninterface MorFarFødselAnnenForelderHarRettIEØSQuestionsPayload extends MorFarFødselAnnenForelderHarRettIEØSFormData {\n    erFarEllerMedmor: boolean;\n}\nconst MorFarFødselAnnenForelderHarRettIEØSFormConfig: QuestionConfig<\n    MorFarFødselAnnenForelderHarRettIEØSQuestionsPayload,\n    MorFarFødselAnnenForelderHarRettIEØSFormField\n> = {\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad]: {\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n        isIncluded: () => true,\n    },\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato]: {\n        isAnswered: ({ permisjonStartdato }) => hasValue(permisjonStartdato),\n        isIncluded: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n};\nexport const morFarFødselAnnenForelderHarRettIEØSQuestionsConfig = Questions<\n    MorFarFødselAnnenForelderHarRettIEØSQuestionsPayload,\n    MorFarFødselAnnenForelderHarRettIEØSFormField\n>(MorFarFødselAnnenForelderHarRettIEØSFormConfig);\n","import { dateToISOString } from '@navikt/sif-common-formik/lib';\nimport { MorFarFødselAnnenForelderHarRettIEØSUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport {\n    MorFarFødselAnnenForelderHarRettIEØSFormField,\n    MorFarFødselAnnenForelderHarRettIEØSFormData,\n} from './morFarFødselAnnenForelderHarRettIEØSFormConfig';\n\nconst initialMorFarFødselAnnenForelderHarRettIEØSValues: MorFarFødselAnnenForelderHarRettIEØSFormData = {\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad]: '',\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato]: '',\n    [MorFarFødselAnnenForelderHarRettIEØSFormField.skalIkkeHaUttakFørTermin]: undefined,\n};\nexport const mapMorFarFødselAnnenForelderHarRettIEØSFormToState = (\n    values: Partial<MorFarFødselAnnenForelderHarRettIEØSFormData>\n): MorFarFødselAnnenForelderHarRettIEØSUttaksplanInfo => {\n    return {\n        dekningsgrad: values.dekningsgrad!,\n        permisjonStartdato: values.permisjonStartdato!,\n        skalIkkeHaUttakFørTermin: values.skalIkkeHaUttakFørTermin,\n    };\n};\nexport const getInitialMorFarFødselAnnenForelderHarRettIEØSValues = (\n    defaultPermisjonStartdato: Date,\n    lagretUttaksplanInfo: MorFarFødselAnnenForelderHarRettIEØSUttaksplanInfo | undefined,\n    dekningsgrad: Dekningsgrad\n): MorFarFødselAnnenForelderHarRettIEØSFormData => {\n    if (lagretUttaksplanInfo) {\n        return {\n            ...lagretUttaksplanInfo,\n            [MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad]: dekningsgrad,\n        };\n    }\n    return {\n        ...initialMorFarFødselAnnenForelderHarRettIEØSValues,\n        [MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato]: dateToISOString(defaultPermisjonStartdato),\n    };\n};\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Block, hasValue, intlUtils } from '@navikt/fp-common';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { formaterNavn } from 'app/utils/personUtils';\nimport { getFamiliehendelsedato, getFødselsdato, getTermindato } from 'app/utils/barnUtils';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport VeilederNormal from 'app/assets/VeilederNormal';\nimport { getFlerbarnsuker } from 'app/steps/uttaksplan-info/utils/uttaksplanHarForMangeFlerbarnsuker';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport FarMedmorsFørsteDag from '../spørsmål/FarMedmorsFørsteDag';\nimport SøknadRoutes from 'app/routes/routes';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport actionCreator from 'app/context/action/actionCreator';\nimport useUttaksplanInfo from 'app/utils/hooks/useUttaksplanInfo';\nimport { MorFarFødselAnnenForelderHarRettIEØSUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from 'app/utils/uttaksplan/uttaksplanUtils';\nimport { morFarFødselAnnenForelderHarRettIEØSQuestionsConfig } from './morFarFødselAnnenForelderHarRettIEØSQuestionsConfig';\nimport {\n    MorFarFødselAnnenForelderHarRettIEØSFormComponents as MorFarFødselAnnenForelderHarRettIEØSFormComponents,\n    MorFarFødselAnnenForelderHarRettIEØSFormData,\n    MorFarFødselAnnenForelderHarRettIEØSFormField,\n} from './morFarFødselAnnenForelderHarRettIEØSFormConfig';\nimport {\n    getInitialMorFarFødselAnnenForelderHarRettIEØSValues,\n    mapMorFarFødselAnnenForelderHarRettIEØSFormToState,\n} from './morFarFødselAnnenForelderHarRettIEØSUtils';\nimport { skalViseInfoOmPrematuruker } from 'app/utils/uttaksplanInfoUtils';\nimport { Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport StartdatoPermisjonMor from '../mor-fodsel/StartdatoPermisjonMor';\nimport uttaksConstants from 'app/constants';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n}\n\nconst MorFarFødselAnnenForelderHarRettIEØS: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer80DTO,\n    tilgjengeligeStønadskontoer100DTO,\n}) => {\n    const intl = useIntl();\n    const { state } = useForeldrepengesøknadContext();\n    const { søkersituasjon, annenForelder, barn, dekningsgrad, erEndringssøknad } = useSøknad();\n    const {\n        person: { fornavn, mellomnavn, etternavn },\n    } = useSøkerinfo();\n    const fødselsdato = getFødselsdato(barn);\n    const termindato = getTermindato(barn);\n    const lagretUttaksplanInfo = useUttaksplanInfo<MorFarFødselAnnenForelderHarRettIEØSUttaksplanInfo>();\n    const erDeltUttak = true;\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const førsteUttaksdagNesteBarnsSak =\n        state.barnFraNesteSak !== undefined ? state.barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n    const shouldRender = erFødsel;\n\n    const onValidSubmitHandler = (values: Partial<MorFarFødselAnnenForelderHarRettIEØSFormData>) => {\n        const submissionValues = mapMorFarFødselAnnenForelderHarRettIEØSFormToState(values);\n        const antallUker = getAntallUker(tilgjengeligeStønadskontoer[values.dekningsgrad! === '100' ? 100 : 80]);\n        const startdato = hasValue(values.permisjonStartdato) ? values.permisjonStartdato : undefined;\n\n        return [\n            actionCreator.setAntallUkerIUttaksplan(antallUker),\n            actionCreator.setUttaksplanInfo(submissionValues),\n            actionCreator.setDekningsgrad(getDekningsgradFromString(values.dekningsgrad)),\n            actionCreator.lagUttaksplanforslag(\n                lagUttaksplan({\n                    annenForelderErUfør: false,\n                    erDeltUttak,\n                    erEndringssøknad,\n                    erEnkelEndringssøknad: erEndringssøknad,\n                    familiehendelsesdato: familiehendelsesdatoDate!,\n                    førsteUttaksdagEtterSeksUker: Uttaksdagen(\n                        Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste()\n                    ).leggTil(30),\n                    situasjon: søkersituasjon.situasjon,\n                    søkerErFarEllerMedmor: erFarEllerMedmor,\n                    søkerHarMidlertidigOmsorg: false,\n                    tilgjengeligeStønadskontoer:\n                        tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n                    uttaksplanSkjema: {\n                        startdatoPermisjon: submissionValues.skalIkkeHaUttakFørTermin ? undefined : startdato,\n                        farSinFørsteUttaksdag: erFarEllerMedmor ? startdato : undefined,\n                    },\n                    bareFarMedmorHarRett: false,\n                    termindato: undefined,\n                    harAktivitetskravIPeriodeUtenUttak: getHarAktivitetskravIPeriodeUtenUttak({\n                        erDeltUttak,\n                        morHarRett: true,\n                        søkerErAleneOmOmsorg: false,\n                    }),\n                    annenForelderHarRettPåForeldrepengerIEØS: true,\n                    førsteUttaksdagNesteBarnsSak,\n                })\n            ),\n        ];\n    };\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.UTTAKSPLAN,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state)\n    );\n\n    if (!shouldRender) {\n        return null;\n    }\n\n    const erSøkerMor = !erFarEllerMedmor;\n    const oppgittAnnenForelder = isAnnenForelderOppgitt(annenForelder) ? annenForelder : undefined;\n\n    const navnAnnenPart = oppgittAnnenForelder\n        ? formaterNavn(oppgittAnnenForelder.fornavn, oppgittAnnenForelder.etternavn, true)\n        : '';\n\n    const erDeltUttakINorge = false;\n\n    const navnSøker = formaterNavn(fornavn, etternavn, true, mellomnavn);\n    const navnMor = erSøkerMor ? navnSøker : navnAnnenPart;\n    const navnFarMedmor = erSøkerMor ? navnAnnenPart : navnSøker;\n    const antallBarn = barn.antallBarn;\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO\n    );\n\n    const visInfoOmPrematuruker =\n        !erFarEllerMedmor && skalViseInfoOmPrematuruker(fødselsdato, termindato, søkersituasjon.situasjon);\n    const ekstraDagerGrunnetPrematurFødsel = visInfoOmPrematuruker\n        ? Tidsperioden({ fom: fødselsdato!, tom: termindato! }).getAntallUttaksdager() - 1\n        : undefined;\n    const førsteUttaksdag = Uttaksdagen(ISOStringToDate(familiehendelsesdato)!).denneEllerNeste();\n    const defaultPermisjonStartdato = erFarEllerMedmor\n        ? førsteUttaksdag\n        : Uttaksdagen(førsteUttaksdag).trekkFra(uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5);\n    return (\n        <MorFarFødselAnnenForelderHarRettIEØSFormComponents.FormikWrapper\n            initialValues={getInitialMorFarFødselAnnenForelderHarRettIEØSValues(\n                defaultPermisjonStartdato,\n                lagretUttaksplanInfo,\n                dekningsgrad\n            )}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues, setFieldValue }) => {\n                const visibility = morFarFødselAnnenForelderHarRettIEØSQuestionsConfig.getVisbility({\n                    ...formValues,\n                    erFarEllerMedmor,\n                });\n\n                return (\n                    <MorFarFødselAnnenForelderHarRettIEØSFormComponents.Form\n                        includeButtons={false}\n                        includeValidationSummary={true}\n                    >\n                        <Block\n                            padBottom=\"l\"\n                            visible={visibility.isIncluded(MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad)}\n                        >\n                            <DekningsgradSpørsmål\n                                FormKomponent={MorFarFødselAnnenForelderHarRettIEØSFormComponents}\n                                dekningsgradFeltNavn={MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={erDeltUttakINorge}\n                            />\n                        </Block>\n                        <Block padBottom=\"l\" visible={visInfoOmPrematuruker === true}>\n                            <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.informasjonPrematuruker\"\n                                    values={{\n                                        antallprematuruker: Math.floor(ekstraDagerGrunnetPrematurFødsel! / 5),\n                                        antallprematurdager: ekstraDagerGrunnetPrematurFødsel! % 5,\n                                    }}\n                                />\n                            </Veilederpanel>\n                        </Block>\n                        <Block\n                            visible={\n                                !erFarEllerMedmor &&\n                                visibility.isIncluded(MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato)\n                            }\n                        >\n                            <StartdatoPermisjonMor\n                                permisjonStartdato={formValues.permisjonStartdato}\n                                skalIkkeHaUttakFørTermin={formValues.skalIkkeHaUttakFørTermin!}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"l\"\n                            visible={\n                                erFarEllerMedmor &&\n                                visibility.isIncluded(MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato)\n                            }\n                        >\n                            <FarMedmorsFørsteDag\n                                FormComponents={MorFarFødselAnnenForelderHarRettIEØSFormComponents}\n                                fieldName={MorFarFødselAnnenForelderHarRettIEØSFormField.permisjonStartdato}\n                                familiehendelsesdato={familiehendelsesdatoDate!}\n                                setFieldValue={setFieldValue}\n                                morsSisteDag={undefined}\n                                navnMor={navnMor}\n                                termindato={undefined}\n                                situasjon={søkersituasjon.situasjon}\n                                morHarRettTilForeldrepengerIEØS={true}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"l\"\n                            visible={\n                                visibility.isAnswered(MorFarFødselAnnenForelderHarRettIEØSFormField.dekningsgrad) &&\n                                antallBarn > 1 &&\n                                (formValues.permisjonStartdato !== undefined ||\n                                    formValues.skalIkkeHaUttakFørTermin === true)\n                            }\n                        >\n                            <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.flerbarnsInformasjon.annenForelderHarRettIEØS\"\n                                    values={{\n                                        uker: getFlerbarnsuker(formValues.dekningsgrad!, antallBarn),\n                                        navnFar: navnFarMedmor,\n                                        navnMor: navnMor,\n                                    }}\n                                />\n                            </Veilederpanel>\n                        </Block>\n                        <Block visible={visibility.areAllQuestionsAnswered()} textAlignCenter={true}>\n                            <Hovedknapp disabled={isSubmitting} spinner={isSubmitting}>\n                                {intlUtils(intl, 'søknad.gåVidere')}\n                            </Hovedknapp>\n                        </Block>\n                    </MorFarFødselAnnenForelderHarRettIEØSFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default MorFarFødselAnnenForelderHarRettIEØS;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\n\nexport enum FarMedmorAleneomsorgFødselFormField {\n    dekningsgrad = 'dekningsgrad',\n    startPåOmsorgsovertakelse = 'startPåOmsorgsovertakelse',\n    startdatoUttak = 'startdatoUttak',\n}\n\nexport interface FarMedmorAleneomsorgFødselFormData {\n    [FarMedmorAleneomsorgFødselFormField.dekningsgrad]: string;\n    [FarMedmorAleneomsorgFødselFormField.startPåOmsorgsovertakelse]: string;\n    [FarMedmorAleneomsorgFødselFormField.startdatoUttak]: string;\n}\n\nexport const FarMedmorAleneomsorgFødselFormComponents = getTypedFormComponents<\n    FarMedmorAleneomsorgFødselFormField,\n    FarMedmorAleneomsorgFødselFormData,\n    string\n>();\n","import { hasValue } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport {\n    FarMedmorAleneomsorgFødselFormData,\n    FarMedmorAleneomsorgFødselFormField,\n} from './farMedmorAleneomsorgFødselFormConfig';\n\nconst FarMedmorAleneomsorgFødselFormConfig: QuestionConfig<\n    FarMedmorAleneomsorgFødselFormData,\n    FarMedmorAleneomsorgFødselFormField\n> = {\n    [FarMedmorAleneomsorgFødselFormField.dekningsgrad]: {\n        isIncluded: () => true,\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [FarMedmorAleneomsorgFødselFormField.startPåOmsorgsovertakelse]: {\n        isIncluded: () => true,\n        isAnswered: ({ startPåOmsorgsovertakelse }) => startPåOmsorgsovertakelse !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ dekningsgrad }) => hasValue(dekningsgrad),\n    },\n    [FarMedmorAleneomsorgFødselFormField.startdatoUttak]: {\n        isIncluded: ({ startPåOmsorgsovertakelse }) => startPåOmsorgsovertakelse === YesOrNo.NO,\n        isAnswered: ({ startdatoUttak }) => hasValue(startdatoUttak),\n        visibilityFilter: ({ startPåOmsorgsovertakelse }) => startPåOmsorgsovertakelse === YesOrNo.NO,\n    },\n};\n\nconst farMedmorAleneomsorgFødselQuestionsConfig = Questions<\n    FarMedmorAleneomsorgFødselFormData,\n    FarMedmorAleneomsorgFødselFormField\n>(FarMedmorAleneomsorgFødselFormConfig);\n\nexport default farMedmorAleneomsorgFødselQuestionsConfig;\n","import { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { FarMedmorAleneomsorgFødselUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport dayjs from 'dayjs';\nimport {\n    FarMedmorAleneomsorgFødselFormData,\n    FarMedmorAleneomsorgFødselFormField,\n} from './farMedmorAleneomsorgFødselFormConfig';\n\nconst initialFarMedmorAleneomsorgFødselValues: FarMedmorAleneomsorgFødselFormData = {\n    [FarMedmorAleneomsorgFødselFormField.dekningsgrad]: '',\n    [FarMedmorAleneomsorgFødselFormField.startPåOmsorgsovertakelse]: YesOrNo.UNANSWERED,\n    [FarMedmorAleneomsorgFødselFormField.startdatoUttak]: '',\n};\n\nexport const mapFarMedmorAleneomsorgFødselFormToState = (\n    values: Partial<FarMedmorAleneomsorgFødselFormData>,\n    datoForAleneomsorg: string\n): FarMedmorAleneomsorgFødselUttaksplanInfo => {\n    return {\n        fellesperiodeukerMor: undefined,\n        startdatoUttak: values.startPåOmsorgsovertakelse === YesOrNo.YES ? datoForAleneomsorg : values.startdatoUttak!,\n    };\n};\n\nexport const getInitialFarMedmorAleneomsorgFødselValues = (\n    lagretUttaksplanInfo: FarMedmorAleneomsorgFødselUttaksplanInfo | undefined,\n    datoForAleneomsorg: string,\n    dekningsgrad: Dekningsgrad\n): FarMedmorAleneomsorgFødselFormData => {\n    if (lagretUttaksplanInfo) {\n        const startetPåOmsorgsovertakelse = dayjs(lagretUttaksplanInfo.startdatoUttak).isSame(\n            dayjs(datoForAleneomsorg),\n            'day'\n        );\n\n        return {\n            dekningsgrad,\n            startPåOmsorgsovertakelse: startetPåOmsorgsovertakelse ? YesOrNo.YES : YesOrNo.NO,\n            startdatoUttak: startetPåOmsorgsovertakelse ? '' : lagretUttaksplanInfo.startdatoUttak,\n        };\n    }\n\n    return initialFarMedmorAleneomsorgFødselValues;\n};\n","import { formatDate, hasValue, intlUtils } from '@navikt/fp-common';\nimport { isDateABeforeDateB } from 'app/utils/dateUtils';\nimport { isISODateString } from 'nav-datovelger';\nimport { IntlShape } from 'react-intl';\n\nexport const validateStartdatoUttakFarMedmorAleneomsorgFødsel =\n    (intl: IntlShape, familiehendelsesdato: string) => (startdatoUttak: string) => {\n        if (!hasValue(startdatoUttak)) {\n            return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.farMedmorAleneomsorgFødsel.startdatoUttak.påkrevd');\n        }\n\n        if (!isISODateString(startdatoUttak)) {\n            return intlUtils(\n                intl,\n                'valideringsfeil.uttaksplaninfo.farMedmorAleneomsorgFødsel.startdatoUttak.gyldigDato'\n            );\n        }\n\n        if (isDateABeforeDateB(startdatoUttak, familiehendelsesdato)) {\n            return intlUtils(\n                intl,\n                'valideringsfeil.uttaksplaninfo.farMedmorAleneomsorgFødsel.startdatoUttak.etterFamiliehendelsesdato',\n                { familiehendelsesdato: formatDate(familiehendelsesdato) }\n            );\n        }\n\n        return undefined;\n    };\n","import { Block, intlUtils } from '@navikt/fp-common';\nimport { dateToISOString } from '@navikt/sif-common-formik/lib';\nimport actionCreator from 'app/context/action/actionCreator';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport { FarMedmorAleneomsorgFødselUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport SøknadRoutes from 'app/routes/routes';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { Forelder } from 'app/types/Forelder';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport { getErMorUfør } from 'app/utils/annenForelderUtils';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport { formaterDatoUtenDag, ISOStringToDate } from 'app/utils/dateUtils';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport useUttaksplanInfo from 'app/utils/hooks/useUttaksplanInfo';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from 'app/utils/uttaksplan/uttaksplanUtils';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport TilgjengeligeDagerGraf from '../../tilgjengeligeDagerGraf/TilgjengeligeDagerGraf';\nimport { getTilgjengeligeDager } from '../../tilgjengeligeDagerGraf/tilgjengeligeDagerUtils';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport {\n    FarMedmorAleneomsorgFødselFormComponents,\n    FarMedmorAleneomsorgFødselFormData,\n    FarMedmorAleneomsorgFødselFormField,\n} from './farMedmorAleneomsorgFødselFormConfig';\nimport farMedmorAleneomsorgFødselAdopsjonQuestionsConfig from './farMedmorAleneomsorgFødselQuestionsConfig';\nimport {\n    getInitialFarMedmorAleneomsorgFødselValues,\n    mapFarMedmorAleneomsorgFødselFormToState,\n} from './farMedmorAleneomsorgFødselUtils';\nimport { validateStartdatoUttakFarMedmorAleneomsorgFødsel } from './validation/farMedmorAleneomsorgFødselValidation';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n}\n\nconst FarMedmorAleneomsorgFødsel: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer100DTO,\n    tilgjengeligeStønadskontoer80DTO,\n}) => {\n    const { state } = useForeldrepengesøknadContext();\n    const { søkersituasjon, søker, annenForelder, barn, dekningsgrad, erEndringssøknad } = useSøknad();\n    const { person } = useSøkerinfo();\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const datoForAleneomsorg = annenForelder.kanIkkeOppgis ? familiehendelsesdatoDate : barn.datoForAleneomsorg;\n    const intl = useIntl();\n\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n    const lagretUttaksplanInfo = useUttaksplanInfo<FarMedmorAleneomsorgFødselUttaksplanInfo>();\n    const erMorUfør = getErMorUfør(annenForelder, erFarEllerMedmor);\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO\n    );\n    const termindato = getTermindato(barn);\n    const førsteUttaksdagNesteBarnsSak =\n        state.barnFraNesteSak !== undefined ? state.barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n    const onValidSubmitHandler = (values: Partial<FarMedmorAleneomsorgFødselFormData>) => {\n        const uttaksplanInfo: FarMedmorAleneomsorgFødselUttaksplanInfo = mapFarMedmorAleneomsorgFødselFormToState(\n            values,\n            dateToISOString(datoForAleneomsorg)\n        );\n        const kontoerForValgtDekningsgrad = tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)];\n        const antallUker = getAntallUker(kontoerForValgtDekningsgrad);\n\n        return [\n            actionCreator.setAntallUkerIUttaksplan(antallUker),\n            actionCreator.setUttaksplanInfo(uttaksplanInfo),\n            actionCreator.setDekningsgrad(getDekningsgradFromString(values.dekningsgrad)),\n            actionCreator.lagUttaksplanforslag(\n                lagUttaksplan({\n                    annenForelderErUfør: erMorUfør,\n                    erDeltUttak: false,\n                    erEndringssøknad,\n                    erEnkelEndringssøknad: erEndringssøknad,\n                    familiehendelsesdato: familiehendelsesdatoDate!,\n                    førsteUttaksdagEtterSeksUker: Uttaksdagen(\n                        Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste()\n                    ).leggTil(30),\n                    situasjon: erFødsel ? 'fødsel' : 'adopsjon',\n                    søkerErFarEllerMedmor: erFarEllerMedmor,\n                    søkerHarMidlertidigOmsorg: false,\n                    tilgjengeligeStønadskontoer:\n                        tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n                    uttaksplanSkjema: {\n                        startdatoPermisjon: uttaksplanInfo.startdatoUttak,\n                    },\n                    bareFarMedmorHarRett: false,\n                    termindato,\n                    harAktivitetskravIPeriodeUtenUttak: getHarAktivitetskravIPeriodeUtenUttak({\n                        erDeltUttak: false,\n                        morHarRett: false,\n                        søkerErAleneOmOmsorg: true,\n                    }),\n                    førsteUttaksdagNesteBarnsSak,\n                })\n            ),\n        ];\n    };\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.UTTAKSPLAN,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state)\n    );\n\n    const shouldRender = erFødsel && erFarEllerMedmor && (!!søker.erAleneOmOmsorg || annenForelder.kanIkkeOppgis);\n\n    if (!shouldRender) {\n        return null;\n    }\n\n    const navnFar = erFarEllerMedmor\n        ? person.fornavn\n        : isAnnenForelderOppgitt(annenForelder)\n        ? annenForelder.fornavn\n        : '';\n\n    return (\n        <FarMedmorAleneomsorgFødselFormComponents.FormikWrapper\n            initialValues={getInitialFarMedmorAleneomsorgFødselValues(\n                lagretUttaksplanInfo,\n                dateToISOString(datoForAleneomsorg),\n                dekningsgrad\n            )}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues }) => {\n                const visibility = farMedmorAleneomsorgFødselAdopsjonQuestionsConfig.getVisbility(formValues);\n\n                const valgtStønadskonto = tilgjengeligeStønadskontoer[formValues.dekningsgrad === '100' ? 100 : 80];\n\n                return (\n                    <FarMedmorAleneomsorgFødselFormComponents.Form\n                        includeButtons={false}\n                        includeValidationSummary={true}\n                    >\n                        <Block\n                            padBottom=\"xxl\"\n                            visible={visibility.isVisible(FarMedmorAleneomsorgFødselFormField.dekningsgrad)}\n                        >\n                            <DekningsgradSpørsmål\n                                FormKomponent={FarMedmorAleneomsorgFødselFormComponents}\n                                dekningsgradFeltNavn={FarMedmorAleneomsorgFødselFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={false}\n                            />\n                        </Block>\n                        <Block visible={formValues.dekningsgrad !== ''}>\n                            {valgtStønadskonto && (\n                                <TilgjengeligeDagerGraf\n                                    erDeltUttak={false}\n                                    erFarEllerMedmor={true}\n                                    navnFarMedmor={navnFar}\n                                    navnMor=\"\"\n                                    tilgjengeligeDager={getTilgjengeligeDager(\n                                        valgtStønadskonto,\n                                        false,\n                                        Forelder.farMedmor\n                                    )}\n                                />\n                            )}\n                        </Block>\n                        <Block\n                            padBottom=\"l\"\n                            visible={visibility.isVisible(\n                                FarMedmorAleneomsorgFødselFormField.startPåOmsorgsovertakelse\n                            )}\n                        >\n                            <FarMedmorAleneomsorgFødselFormComponents.YesOrNoQuestion\n                                name={FarMedmorAleneomsorgFødselFormField.startPåOmsorgsovertakelse}\n                                legend={intlUtils(intl, 'uttaksplaninfo.startdatoAleneomsorgFarMedmor.spørsmål')}\n                                labels={{\n                                    yes: intlUtils(\n                                        intl,\n                                        'uttaksplaninfo.startdatoAdopsjon.alternativ.omsorgsovertakelse',\n                                        {\n                                            dato: formaterDatoUtenDag(datoForAleneomsorg!),\n                                        }\n                                    ),\n                                    no: intlUtils(intl, 'uttaksplaninfo.startdatoAleneomsorgFarMedmor.annenDato'),\n                                }}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"l\"\n                            visible={visibility.isVisible(FarMedmorAleneomsorgFødselFormField.startdatoUttak)}\n                        >\n                            <FarMedmorAleneomsorgFødselFormComponents.DatePicker\n                                name={FarMedmorAleneomsorgFødselFormField.startdatoUttak}\n                                label=\"Startdato\"\n                                validate={validateStartdatoUttakFarMedmorAleneomsorgFødsel(intl, familiehendelsesdato)}\n                                minDate={ISOStringToDate(familiehendelsesdato)}\n                                placeholder={'dd.mm.åååå'}\n                            />\n                        </Block>\n                        <Block visible={visibility.areAllQuestionsAnswered()} textAlignCenter={true}>\n                            <Hovedknapp disabled={isSubmitting} spinner={isSubmitting}>\n                                {intlUtils(intl, 'søknad.gåVidere')}\n                            </Hovedknapp>\n                        </Block>\n                    </FarMedmorAleneomsorgFødselFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default FarMedmorAleneomsorgFødsel;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\n\nexport enum FarMedmorFørstegangssøknadMedAnnenPartFormField {\n    permisjonStartdato = 'permisjonStartdato',\n}\n\nexport interface FarMedmorFørstegangssøknadMedAnnenPartFormData {\n    [FarMedmorFørstegangssøknadMedAnnenPartFormField.permisjonStartdato]: string;\n}\n\nexport const FarMedmorFørstegangssøknadMedAnnenPartFormComponents = getTypedFormComponents<\n    FarMedmorFørstegangssøknadMedAnnenPartFormField,\n    FarMedmorFørstegangssøknadMedAnnenPartFormData,\n    string\n>();\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { hasValue } from '@navikt/fp-common';\nimport {\n    FarMedmorFørstegangssøknadMedAnnenPartFormData,\n    FarMedmorFørstegangssøknadMedAnnenPartFormField,\n} from './farMedmorFørstegangssøknadMedAnnenPartFormConfig';\n\nconst FarMedmorFørstegangssøknadMedAnnenPartFormConfig: QuestionConfig<\n    FarMedmorFørstegangssøknadMedAnnenPartFormData,\n    FarMedmorFørstegangssøknadMedAnnenPartFormField\n> = {\n    [FarMedmorFørstegangssøknadMedAnnenPartFormField.permisjonStartdato]: {\n        isIncluded: () => true,\n        isAnswered: ({ permisjonStartdato }) => hasValue(permisjonStartdato),\n    },\n};\n\nexport const farMedmorFørstegangssøknadMedAnnenPartQuestionsConfig = Questions<\n    FarMedmorFørstegangssøknadMedAnnenPartFormData,\n    FarMedmorFørstegangssøknadMedAnnenPartFormField\n>(FarMedmorFørstegangssøknadMedAnnenPartFormConfig);\n","import { FarMedmorFørstegangssøknadMedAnnenPartUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { FarMedmorFørstegangssøknadMedAnnenPartFormData } from './farMedmorFørstegangssøknadMedAnnenPartFormConfig';\n\nexport const getFarMedmorFørstegangssøknadMedAnnenPartInitialValues = (\n    state: FarMedmorFørstegangssøknadMedAnnenPartUttaksplanInfo | undefined\n): FarMedmorFørstegangssøknadMedAnnenPartFormData => {\n    if (!state) {\n        return {\n            permisjonStartdato: '',\n        };\n    }\n\n    return {\n        permisjonStartdato: state.permisjonStartdato,\n    };\n};\n","import { Block, intlUtils } from '@navikt/fp-common';\nimport InfoOmSøknaden from 'app/components/info-eksisterende-sak/InfoOmSøknaden';\nimport actionCreator from 'app/context/action/actionCreator';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport { FarMedmorFørstegangssøknadMedAnnenPartUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport SøknadRoutes from 'app/routes/routes';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { EksisterendeSak } from 'app/types/EksisterendeSak';\nimport { Forelder } from 'app/types/Forelder';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport { getErMorUfør } from 'app/utils/annenForelderUtils';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport useUttaksplanInfo from 'app/utils/hooks/useUttaksplanInfo';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { isInfoPeriode } from 'uttaksplan/types/Periode';\nimport FarMedmorsFørsteDag from '../spørsmål/FarMedmorsFørsteDag';\nimport {\n    FarMedmorFørstegangssøknadMedAnnenPartFormComponents,\n    FarMedmorFørstegangssøknadMedAnnenPartFormData,\n    FarMedmorFørstegangssøknadMedAnnenPartFormField,\n} from './farMedmorFørstegangssøknadMedAnnenPartFormConfig';\nimport { farMedmorFørstegangssøknadMedAnnenPartQuestionsConfig } from './farMedmorFørstegangssøknadMedAnnenPartQuestionsConfig';\nimport { getFarMedmorFørstegangssøknadMedAnnenPartInitialValues } from './farMedmorFørstegangssøknadMedAnnenPartUtils';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from 'app/utils/uttaksplan/uttaksplanUtils';\nimport { dateToISOString } from '@navikt/sif-common-formik/lib';\nimport { getMorHarRettPåForeldrepengerINorgeEllerEØS } from 'app/utils/personUtils';\nimport { leggTilAnnenPartsPerioderISøkerenesUttaksplan } from 'app/steps/uttaksplan-info/utils/leggTilAnnenPartsPerioderISøkerensUttaksplan';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n    eksisterendeSakAnnenPart: EksisterendeSak | undefined;\n}\n\nconst FarMedmorFørstegangssøknadMedAnnenPart: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer100DTO,\n    tilgjengeligeStønadskontoer80DTO,\n    eksisterendeSakAnnenPart,\n}) => {\n    const søknad = useSøknad();\n    const { state } = useForeldrepengesøknadContext();\n    const intl = useIntl();\n    const { barn, søkersituasjon, annenForelder, erEndringssøknad } = søknad;\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const lagretUttaksplanInfo = useUttaksplanInfo<FarMedmorFørstegangssøknadMedAnnenPartUttaksplanInfo>();\n    const familiehendelsedato = getFamiliehendelsedato(barn);\n    const familiehendelsedatoDate = ISOStringToDate(familiehendelsedato);\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n    const erAdopsjon = søkersituasjon.situasjon === 'adopsjon';\n    const erMorUfør = getErMorUfør(annenForelder, erFarEllerMedmor);\n    const bareFarHarRett = !getMorHarRettPåForeldrepengerINorgeEllerEØS(\n        søkersituasjon.rolle,\n        erFarEllerMedmor,\n        annenForelder\n    );\n    const førsteUttaksdagNesteBarnsSak =\n        state.barnFraNesteSak !== undefined ? state.barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n    const erDeltUttak = true;\n    const termindato = getTermindato(barn);\n    const harAktivitetskravIPeriodeUtenUttak = getHarAktivitetskravIPeriodeUtenUttak({\n        erDeltUttak,\n        morHarRett: true,\n        søkerErAleneOmOmsorg: false,\n    });\n\n    const morsSisteUttaksdag =\n        eksisterendeSakAnnenPart && eksisterendeSakAnnenPart.uttaksplan.length > 0\n            ? dateToISOString(\n                  eksisterendeSakAnnenPart.uttaksplan[eksisterendeSakAnnenPart.uttaksplan.length - 1].tidsperiode.tom\n              )\n            : undefined;\n    const onValidSubmitHandler = (values: Partial<FarMedmorFørstegangssøknadMedAnnenPartFormData>) => {\n        const uttaksplanInfo: FarMedmorFørstegangssøknadMedAnnenPartUttaksplanInfo = {\n            permisjonStartdato: values.permisjonStartdato!,\n        };\n        const stønadskontoer = tilgjengeligeStønadskontoer[getDekningsgradFromString(grunnlag.dekningsgrad)];\n        const antallUker = getAntallUker(tilgjengeligeStønadskontoer[grunnlag.dekningsgrad]);\n        const farMedmorSinePerioder = lagUttaksplan({\n            annenForelderErUfør: erMorUfør,\n            erDeltUttak,\n            erEndringssøknad,\n            erEnkelEndringssøknad: erEndringssøknad,\n            familiehendelsesdato: familiehendelsedatoDate!,\n            førsteUttaksdagEtterSeksUker: Uttaksdagen(Uttaksdagen(familiehendelsedatoDate!).denneEllerNeste()).leggTil(\n                30\n            ),\n            situasjon: erFødsel ? 'fødsel' : 'adopsjon',\n            søkerErFarEllerMedmor: erFarEllerMedmor,\n            søkerHarMidlertidigOmsorg: false,\n            tilgjengeligeStønadskontoer: stønadskontoer,\n            uttaksplanSkjema: {\n                morSinSisteUttaksdag: morsSisteUttaksdag,\n                farSinFørsteUttaksdag: values.permisjonStartdato,\n                antallDagerFellesperiodeFarMedmor: undefined,\n                antallUkerFellesperiodeFarMedmor: undefined,\n            },\n            bareFarMedmorHarRett: bareFarHarRett,\n            termindato,\n            harAktivitetskravIPeriodeUtenUttak,\n            førsteUttaksdagNesteBarnsSak,\n        });\n        let uttaksplanMedAnnenPart;\n\n        if (eksisterendeSakAnnenPart && farMedmorSinePerioder.length > 0) {\n            uttaksplanMedAnnenPart = leggTilAnnenPartsPerioderISøkerenesUttaksplan(\n                eksisterendeSakAnnenPart.uttaksplan,\n                farMedmorSinePerioder,\n                familiehendelsedatoDate!,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                førsteUttaksdagNesteBarnsSak\n            );\n        } else if (eksisterendeSakAnnenPart) {\n            uttaksplanMedAnnenPart = eksisterendeSakAnnenPart.uttaksplan;\n        } else {\n            uttaksplanMedAnnenPart = farMedmorSinePerioder;\n        }\n\n        return [\n            actionCreator.setAntallUkerIUttaksplan(antallUker),\n            actionCreator.setUttaksplanInfo(uttaksplanInfo),\n            actionCreator.setDekningsgrad(grunnlag.dekningsgrad),\n            actionCreator.lagUttaksplanforslag(uttaksplanMedAnnenPart),\n        ];\n    };\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.UTTAKSPLAN,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state)\n    );\n\n    if (!eksisterendeSakAnnenPart || !erFarEllerMedmor) {\n        return null;\n    }\n\n    const navnMor = isAnnenForelderOppgitt(annenForelder) ? annenForelder.fornavn : '';\n    const { grunnlag, uttaksplan } = eksisterendeSakAnnenPart;\n    const morsPerioder = uttaksplan.filter((p) => isInfoPeriode(p) && p.forelder === Forelder.mor);\n    const morsSisteDag = morsPerioder.reverse()[0].tidsperiode.tom;\n\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO\n    );\n\n    return (\n        <FarMedmorFørstegangssøknadMedAnnenPartFormComponents.FormikWrapper\n            initialValues={getFarMedmorFørstegangssøknadMedAnnenPartInitialValues(lagretUttaksplanInfo)}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues, setFieldValue }) => {\n                const visibility = farMedmorFørstegangssøknadMedAnnenPartQuestionsConfig.getVisbility(formValues);\n                const valgtMengdeStønadskonto = tilgjengeligeStønadskontoer[grunnlag.dekningsgrad];\n\n                return (\n                    <FarMedmorFørstegangssøknadMedAnnenPartFormComponents.Form\n                        includeButtons={false}\n                        includeValidationSummary={true}\n                    >\n                        <Block padBottom=\"l\">\n                            <InfoOmSøknaden\n                                eksisterendeSak={eksisterendeSakAnnenPart}\n                                erIUttaksplanenSteg={false}\n                                tilgjengeligeStønadskontoer={valgtMengdeStønadskonto}\n                            />\n                        </Block>\n                        <Block padBottom=\"l\">\n                            <FarMedmorsFørsteDag\n                                FormComponents={FarMedmorFørstegangssøknadMedAnnenPartFormComponents}\n                                fieldName={FarMedmorFørstegangssøknadMedAnnenPartFormField.permisjonStartdato}\n                                familiehendelsesdato={familiehendelsedatoDate!}\n                                setFieldValue={setFieldValue}\n                                morsSisteDag={morsSisteDag}\n                                navnMor={navnMor}\n                                termindato={termindato}\n                                situasjon={søkersituasjon.situasjon}\n                                morHarRettTilForeldrepengerIEØS={false}\n                            />\n                        </Block>\n                        <Block visible={visibility.areAllQuestionsAnswered()} textAlignCenter={true}>\n                            <Hovedknapp disabled={isSubmitting} spinner={isSubmitting}>\n                                {intlUtils(intl, 'søknad.gåVidere')}\n                            </Hovedknapp>\n                        </Block>\n                    </FarMedmorFørstegangssøknadMedAnnenPartFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default FarMedmorFørstegangssøknadMedAnnenPart;\n","import { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport React, { FunctionComponent } from 'react';\nimport FarMedmorFødselFørsteganggsøknadBeggeHarRett from './scenarios/far-medmor-fødsel-begge-har-rett/FarMedmorFødselBeggeHarRett';\nimport MorFødsel from './scenarios/mor-fodsel/MorFødsel';\nimport MorFarAdopsjon from './scenarios/mor-far-adopsjon/MorFarAdopsjon';\nimport MorFarAdopsjonAnnenForelderHarRettIEØS from './scenarios/mor-far-adopsjon-annen-part-har-rett-i-eøs/MorFarAdopsjonAnnenForelderHarRettIEØS';\nimport MorFarFødselAnnenForelderHarRettIEØS from './scenarios/mor-far-fødsel-annen-part-har-rett-i-eøs/MorFarFødselAnnenForelderHarRettIEØS';\nimport FarMedmorAleneomsorgFødselAdopsjon from './scenarios/far-medmor-aleneomsorg-fødsel/FarMedmorAleneomsorgFødsel';\nimport FarMedmorFødselOgMorHarIkkeRett from './scenarios/far-medmor-fødsel-og-mor-har-ikke-rett/FarMedmorFødselOgMorHarIkkeRett';\nimport { EksisterendeSak } from 'app/types/EksisterendeSak';\nimport FarMedmorFørstegangssøknadMedAnnenPart from './scenarios/farMedmor-førstegangssøknad-med-annen-part/FarMedmorFørstegangssøknadMedAnnenPart';\nimport { getUttaksplanScenario } from './scenarios/scenarios';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { harAnnenForelderRettIEØS } from 'app/utils/annenForelderUtils';\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n    eksisterendeSakAnnenPart: EksisterendeSak | undefined;\n}\n\nconst UttaksplanInfoScenarios: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer100DTO,\n    tilgjengeligeStønadskontoer80DTO,\n    eksisterendeSakAnnenPart,\n}) => {\n    const { søkersituasjon, søker, annenForelder } = useSøknad();\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n    const erAdopsjon = søkersituasjon.situasjon === 'adopsjon';\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const annenForelderHarRett = isAnnenForelderOppgitt(annenForelder)\n        ? !!annenForelder.harRettPåForeldrepengerINorge || !!annenForelder.harRettPåForeldrepengerIEØS\n        : false;\n    const annenForelderOppgittIkkeAleneOmOmsorg = isAnnenForelderOppgitt(annenForelder)\n        ? annenForelder.harRettPåForeldrepengerINorge !== undefined\n        : false;\n    const annenForelderHarRettIEØS = harAnnenForelderRettIEØS(annenForelder);\n\n    const scenario = getUttaksplanScenario({\n        erFødsel,\n        erFarEllerMedmor,\n        søkerErAleneOmOmsorg: !!søker.erAleneOmOmsorg,\n        annenForelderKanIkkeOppgis: annenForelder.kanIkkeOppgis,\n        annenForelderHarRett: annenForelderHarRett,\n        erAdopsjon,\n        eksisterendeSakAnnenPart,\n        annenForelderOppgittIkkeAleneOmOmsorg,\n        annenForelderHarRettIEØS,\n    });\n\n    switch (scenario) {\n        case 'farMedmorAleneomsorgFødselAdopsjon':\n            return (\n                <FarMedmorAleneomsorgFødselAdopsjon\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                />\n            );\n        case 'farMedmorFødselBeggeHarRett':\n            return (\n                <FarMedmorFødselFørsteganggsøknadBeggeHarRett\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                    eksisterendeSakAnnenPart={eksisterendeSakAnnenPart}\n                />\n            );\n        case 'farMedmorFødselMorHarIkkeRett':\n            return (\n                <FarMedmorFødselOgMorHarIkkeRett\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                />\n            );\n        case 'farMedmorFørstegangssøknadMedAnnenPart':\n            return (\n                <FarMedmorFørstegangssøknadMedAnnenPart\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                    eksisterendeSakAnnenPart={eksisterendeSakAnnenPart}\n                />\n            );\n        case 'morFarAdopsjon':\n            return (\n                <MorFarAdopsjon\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                />\n            );\n        case 'morFødsel':\n            return (\n                <MorFødsel\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                    eksisterendeSakFar={eksisterendeSakAnnenPart}\n                />\n            );\n        case 'morFarFødselAnnenForelderHarRettIEØS':\n            return (\n                <MorFarFødselAnnenForelderHarRettIEØS\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                />\n            );\n        case 'morFarAdopsjonAnnenForelderHarRettIEØS':\n            return (\n                <MorFarAdopsjonAnnenForelderHarRettIEØS\n                    tilgjengeligeStønadskontoer100DTO={tilgjengeligeStønadskontoer100DTO}\n                    tilgjengeligeStønadskontoer80DTO={tilgjengeligeStønadskontoer80DTO}\n                />\n            );\n    }\n};\n\nexport default UttaksplanInfoScenarios;\n","import { EksisterendeSak } from 'app/types/EksisterendeSak';\n\nexport type UttaksplanInfoScenario =\n    | 'farMedmorAleneomsorgFødselAdopsjon'\n    | 'farMedmorFødselBeggeHarRett'\n    | 'farMedmorFødselMorHarIkkeRett'\n    | 'farMedmorFørstegangssøknadMedAnnenPart'\n    | 'morFarAdopsjon'\n    | 'morFødsel'\n    | 'morFarFødselAnnenForelderHarRettIEØS'\n    | 'morFarAdopsjonAnnenForelderHarRettIEØS';\n\ninterface UttaksplanScenarioParams {\n    erFødsel: boolean;\n    erFarEllerMedmor: boolean;\n    søkerErAleneOmOmsorg: boolean;\n    annenForelderKanIkkeOppgis: boolean;\n    annenForelderHarRett: boolean;\n    erAdopsjon: boolean;\n    eksisterendeSakAnnenPart: EksisterendeSak | undefined;\n    annenForelderOppgittIkkeAleneOmOmsorg: boolean;\n    annenForelderHarRettIEØS: boolean;\n}\n\nexport const getUttaksplanScenario = ({\n    erFødsel,\n    erFarEllerMedmor,\n    søkerErAleneOmOmsorg,\n    annenForelderKanIkkeOppgis,\n    annenForelderHarRett,\n    eksisterendeSakAnnenPart,\n    erAdopsjon,\n    annenForelderOppgittIkkeAleneOmOmsorg,\n    annenForelderHarRettIEØS,\n}: UttaksplanScenarioParams): UttaksplanInfoScenario => {\n    if (erFødsel && erFarEllerMedmor && (søkerErAleneOmOmsorg || annenForelderKanIkkeOppgis)) {\n        return 'farMedmorAleneomsorgFødselAdopsjon';\n    }\n    if (annenForelderHarRettIEØS) {\n        return erFødsel ? 'morFarFødselAnnenForelderHarRettIEØS' : 'morFarAdopsjonAnnenForelderHarRettIEØS';\n    }\n\n    if (\n        erFarEllerMedmor &&\n        erFødsel &&\n        annenForelderHarRett &&\n        (eksisterendeSakAnnenPart === undefined || eksisterendeSakAnnenPart.uttaksplan.length === 0)\n    ) {\n        return 'farMedmorFødselBeggeHarRett';\n    }\n\n    if (erFarEllerMedmor && erFødsel && !annenForelderHarRett) {\n        return 'farMedmorFødselMorHarIkkeRett';\n    }\n\n    if (eksisterendeSakAnnenPart && erFarEllerMedmor) {\n        return 'farMedmorFørstegangssøknadMedAnnenPart';\n    }\n\n    if (erAdopsjon && (annenForelderOppgittIkkeAleneOmOmsorg || annenForelderKanIkkeOppgis || søkerErAleneOmOmsorg)) {\n        return 'morFarAdopsjon';\n    }\n\n    return 'morFødsel';\n};\n","import { intlUtils, Step } from '@navikt/fp-common';\nimport useAvbrytSøknad from 'app/utils/hooks/useAvbrytSøknad';\nimport React, { useEffect, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport stepConfig, { getPreviousStepHref } from '../stepsConfig';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport Api from 'app/api/api';\nimport UttaksplanInfoScenarios from './components/UttaksplanInfoScenarios';\nimport getStønadskontoParams, {\n    getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter,\n    getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter,\n} from 'app/api/getStønadskontoParams';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport NavFrontendSpinner from 'nav-frontend-spinner';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport actionCreator from 'app/context/action/actionCreator';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport { RequestStatus } from 'app/types/RequestState';\nimport { getFarMedmorErAleneOmOmsorg, getMorErAleneOmOmsorg } from 'app/utils/personUtils';\nimport { mapAnnenPartsEksisterendeSakFromDTO } from 'app/utils/eksisterendeSakUtils';\nimport { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport { isFødtBarn } from 'app/context/types/Barn';\nimport { dateToISOString } from '@navikt/sif-common-formik/lib';\nimport { sendErrorMessageToSentry } from 'app/api/apiUtils';\nimport SøknadRoutes from 'app/routes/routes';\nimport useSaveLoadedRoute from 'app/utils/hooks/useSaveLoadedRoute';\n\nconst UttaksplanInfo = () => {\n    const intl = useIntl();\n\n    const søknad = useSøknad();\n    const { dispatch, state } = useForeldrepengesøknadContext();\n\n    const { barn, annenForelder, søkersituasjon, søker } = søknad;\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const { erAleneOmOmsorg } = søker;\n    const { barnFraNesteSak, eksisterendeSak } = state;\n\n    const familieHendelseDatoNesteSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.familiehendelsesdato : undefined;\n    const førsteUttaksdagNesteBarnsSak =\n        state.barnFraNesteSak !== undefined ? state.barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n    const annenPartFnr =\n        annenForelder !== undefined && isAnnenForelderOppgitt(annenForelder) && annenForelder.utenlandskFnr === false\n            ? annenForelder.fnr\n            : undefined;\n    const eksisterendeSakAnnenPartRequestIsSuspended = annenPartFnr !== undefined && annenPartFnr !== '' ? false : true;\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const barnFnr = isFødtBarn(barn) && barn.fnr !== undefined && barn.fnr?.length > 0 ? barn.fnr[0] : undefined;\n    const { eksisterendeSakAnnenPartData, eksisterendeSakAnnenPartError, eksisterendeSakAnnenPartRequestStatus } =\n        Api.useGetAnnenPartsVedtak(\n            annenPartFnr,\n            barnFnr,\n            familiehendelsesdato,\n            eksisterendeSakAnnenPartRequestIsSuspended\n        );\n\n    const farMedmorErAleneOmOmsorg = getFarMedmorErAleneOmOmsorg(erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const morErAleneOmOmsorg = getMorErAleneOmOmsorg(!erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n\n    const eksisterendeVedtakAnnenPart = useMemo(\n        () =>\n            mapAnnenPartsEksisterendeSakFromDTO(\n                eksisterendeSakAnnenPartData,\n                barn,\n                erFarEllerMedmor,\n                familiehendelsesdato,\n                førsteUttaksdagNesteBarnsSak\n            ),\n        [eksisterendeSakAnnenPartData, barn, erFarEllerMedmor, familiehendelsesdato, førsteUttaksdagNesteBarnsSak]\n    );\n\n    useSaveLoadedRoute(SøknadRoutes.UTTAKSPLAN_INFO);\n\n    const saksgrunnlagsTermindato = getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter(\n        eksisterendeSak?.grunnlag.termindato,\n        eksisterendeVedtakAnnenPart?.grunnlag.termindato\n    );\n\n    const saksgrunnlagsAntallBarn = getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter(\n        erFarEllerMedmor,\n        barn.antallBarn,\n        eksisterendeVedtakAnnenPart?.grunnlag.antallBarn\n    );\n\n    useEffect(() => {\n        if (erFarEllerMedmor && søknad.barn.antallBarn !== saksgrunnlagsAntallBarn) {\n            const søknadMedOppdatertAntallBarn = {\n                ...søknad,\n                barn: { ...søknad.barn, antallBarn: saksgrunnlagsAntallBarn },\n            };\n            dispatch(actionCreator.setSøknad(søknadMedOppdatertAntallBarn));\n        }\n    }, [erFarEllerMedmor, saksgrunnlagsAntallBarn, dispatch, søknad]);\n\n    //Uttaksplaninfo vises ikke hvis endringssøknad, så det er nok å sette annen parts sak og uttaksplan her\n    useEffect(() => {\n        if (eksisterendeVedtakAnnenPart !== undefined) {\n            dispatch(actionCreator.setUttaksplan(eksisterendeVedtakAnnenPart!.uttaksplan));\n            dispatch(actionCreator.setEksisterendeSak(eksisterendeVedtakAnnenPart));\n            dispatch(actionCreator.setAnnenPartsUttakErLagtTilIPlan(true));\n        }\n    }, [eksisterendeVedtakAnnenPart, dispatch]);\n\n    useEffect(() => {\n        dispatch(actionCreator.setUttaksplanSlettet(false));\n    }, [dispatch]);\n\n    const { tilgjengeligeStønadskontoerData: stønadskontoer100, tilgjengeligeStønadskontoerError } =\n        Api.useGetUttakskontoer(\n            getStønadskontoParams(\n                Dekningsgrad.HUNDRE_PROSENT,\n                barn,\n                annenForelder,\n                søkersituasjon,\n                farMedmorErAleneOmOmsorg,\n                morErAleneOmOmsorg,\n                dateToISOString(familieHendelseDatoNesteSak),\n                saksgrunnlagsAntallBarn,\n                saksgrunnlagsTermindato\n            ),\n            eksisterendeSakAnnenPartRequestIsSuspended\n                ? false\n                : eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED\n        );\n    const { tilgjengeligeStønadskontoerData: stønadskontoer80 } = Api.useGetUttakskontoer(\n        getStønadskontoParams(\n            Dekningsgrad.ÅTTI_PROSENT,\n            barn,\n            annenForelder,\n            søkersituasjon,\n            farMedmorErAleneOmOmsorg,\n            morErAleneOmOmsorg,\n            dateToISOString(familieHendelseDatoNesteSak),\n            saksgrunnlagsAntallBarn,\n            saksgrunnlagsTermindato\n        ),\n        eksisterendeSakAnnenPartRequestIsSuspended\n            ? false\n            : eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED\n    );\n    const onAvbrytSøknad = useAvbrytSøknad();\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n\n    useEffect(() => {\n        if (tilgjengeligeStønadskontoerError) {\n            sendErrorMessageToSentry(tilgjengeligeStønadskontoerError);\n            throw new Error(\n                `Vi klarte ikke å hente opp stønadskontoer. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`\n            );\n        }\n        if (eksisterendeSakAnnenPartError) {\n            sendErrorMessageToSentry(eksisterendeSakAnnenPartError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om saken til annen forelder. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`\n            );\n        }\n    }, [tilgjengeligeStønadskontoerError, eksisterendeSakAnnenPartError]);\n\n    if (\n        !stønadskontoer100 ||\n        !stønadskontoer80 ||\n        (eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED &&\n            !eksisterendeSakAnnenPartRequestIsSuspended)\n    ) {\n        return (\n            <div style={{ textAlign: 'center', padding: '12rem 0' }}>\n                <NavFrontendSpinner type=\"XXL\" />\n            </div>\n        );\n    }\n\n    return (\n        <Step\n            bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n            backLinkHref={getPreviousStepHref('uttaksplanInfo')}\n            activeStepId=\"uttaksplanInfo\"\n            pageTitle={intlUtils(intl, 'søknad.uttaksplanInfo')}\n            stepTitle={intlUtils(intl, 'søknad.uttaksplanInfo')}\n            onCancel={onAvbrytSøknad}\n            onContinueLater={onFortsettSøknadSenere}\n            steps={stepConfig(intl)}\n            kompakt={true}\n        >\n            <UttaksplanInfoScenarios\n                tilgjengeligeStønadskontoer100DTO={stønadskontoer100}\n                tilgjengeligeStønadskontoer80DTO={stønadskontoer80}\n                eksisterendeSakAnnenPart={eksisterendeVedtakAnnenPart}\n            />\n        </Step>\n    );\n};\n\nexport default UttaksplanInfo;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\n\nexport enum FarMedmorFødselOgMorHarIkkeRettFormField {\n    dekningsgrad = 'dekningsgrad',\n    permisjonStartdato = 'permisjonStartdato',\n}\n\nexport interface FarMedmorFødselOgMorHarIkkeRettFormData {\n    [FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad]: string;\n    [FarMedmorFødselOgMorHarIkkeRettFormField.permisjonStartdato]: string;\n}\n\nexport const FarMedmorFødselOgMorHarIkkeRettFormComponents = getTypedFormComponents<\n    FarMedmorFødselOgMorHarIkkeRettFormField,\n    FarMedmorFødselOgMorHarIkkeRettFormData,\n    string\n>();\n","import { FarMedmorFødselOgMorHarIkkeRettUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport {\n    FarMedmorFødselOgMorHarIkkeRettFormData,\n    FarMedmorFødselOgMorHarIkkeRettFormField,\n} from './farMedmorFødselOgMorHarIkkeRettFormConfig';\n\nconst initialFarMedmorFødselOgMorHarIkkeRettValues: FarMedmorFødselOgMorHarIkkeRettFormData = {\n    [FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad]: '',\n    [FarMedmorFødselOgMorHarIkkeRettFormField.permisjonStartdato]: '',\n};\n\nexport const mapFarMedmorFødselOgMorHarIkkeRettFormToState = (\n    values: Partial<FarMedmorFødselOgMorHarIkkeRettFormData>\n): FarMedmorFødselOgMorHarIkkeRettUttaksplanInfo => {\n    return {\n        permisjonStartdato: values.permisjonStartdato!,\n    };\n};\n\nexport const getInitialFarMedmorFødselOgMorHarIkkeRettValues = (\n    dekningsgrad: Dekningsgrad,\n    lagretUttaksplanInfo: FarMedmorFødselOgMorHarIkkeRettUttaksplanInfo | undefined\n): FarMedmorFødselOgMorHarIkkeRettFormData => {\n    if (lagretUttaksplanInfo) {\n        return {\n            ...lagretUttaksplanInfo,\n            [FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad]: dekningsgrad,\n        };\n    }\n\n    return initialFarMedmorFødselOgMorHarIkkeRettValues;\n};\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { hasValue } from '@navikt/fp-common';\nimport {\n    FarMedmorFødselOgMorHarIkkeRettFormData,\n    FarMedmorFødselOgMorHarIkkeRettFormField,\n} from './farMedmorFødselOgMorHarIkkeRettFormConfig';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\n\ninterface FarMedmorFødselOgMorHarIkkeRettQuestionsPayload extends FarMedmorFødselOgMorHarIkkeRettFormData {\n    erMorUfør: boolean;\n    familiehendelsesdato: Date;\n}\n\nconst FarMedmorFødselOgMorHarIkkeRettFormConfig: QuestionConfig<\n    FarMedmorFødselOgMorHarIkkeRettQuestionsPayload,\n    FarMedmorFødselOgMorHarIkkeRettFormField\n> = {\n    [FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad]: {\n        isAnswered: ({ dekningsgrad }) => hasValue(dekningsgrad),\n        isIncluded: () => true,\n    },\n    [FarMedmorFødselOgMorHarIkkeRettFormField.permisjonStartdato]: {\n        isAnswered: ({ permisjonStartdato }) => hasValue(permisjonStartdato),\n        isIncluded: ({ dekningsgrad, erMorUfør, familiehendelsesdato }) =>\n            andreAugust2022ReglerGjelder(familiehendelsesdato) || (hasValue(dekningsgrad) && erMorUfør),\n    },\n};\n\nexport const farMedmorFødselOgMorHarIkkeRettQuestionsConfig = Questions<\n    FarMedmorFødselOgMorHarIkkeRettQuestionsPayload,\n    FarMedmorFødselOgMorHarIkkeRettFormField\n>(FarMedmorFødselOgMorHarIkkeRettFormConfig);\n","import React, { FunctionComponent } from 'react';\nimport { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { getFamiliehendelsedato, getFødselsdato, getTermindato } from 'app/utils/barnUtils';\nimport {\n    FarMedmorFødselOgMorHarIkkeRettFormComponents,\n    FarMedmorFødselOgMorHarIkkeRettFormData,\n    FarMedmorFødselOgMorHarIkkeRettFormField,\n} from './farMedmorFødselOgMorHarIkkeRettFormConfig';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport {\n    getInitialFarMedmorFødselOgMorHarIkkeRettValues,\n    mapFarMedmorFødselOgMorHarIkkeRettFormToState,\n} from './farMedmorFødselOgMorHarIkkeRettUtils';\nimport { FarMedmorFødselOgMorHarIkkeRettUttaksplanInfo } from 'app/context/types/UttaksplanInfo';\nimport actionCreator from 'app/context/action/actionCreator';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport SøknadRoutes from 'app/routes/routes';\nimport useUttaksplanInfo from 'app/utils/hooks/useUttaksplanInfo';\nimport { Block, intlUtils } from '@navikt/fp-common';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { farMedmorFødselOgMorHarIkkeRettQuestionsConfig } from './farMedmorFødselOgMorHarIkkeRettQuestionsConfig';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport TilgjengeligeDagerGraf from '../../tilgjengeligeDagerGraf/TilgjengeligeDagerGraf';\nimport { getTilgjengeligeDager } from '../../tilgjengeligeDagerGraf/tilgjengeligeDagerUtils';\nimport { Forelder } from 'app/types/Forelder';\nimport { formaterNavn } from 'app/utils/personUtils';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport VeilederNormal from 'app/assets/VeilederNormal';\nimport { DateRange, dateToISOString } from '@navikt/sif-common-formik/lib';\nimport { Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { uttaksplanDatoavgrensninger } from 'app/steps/uttaksplan-info/utils/uttaksplanDatoavgrensninger';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { DatepickerDateRange } from 'nav-datovelger';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport { validateStartdatoFarMedmor } from './validation/farMedmorFødselOgMorHarIkkeRettValidering';\nimport DekningsgradSpørsmål from '../spørsmål/DekningsgradSpørsmål';\nimport { getDekningsgradFromString } from 'app/utils/getDekningsgradFromString';\nimport { lagUttaksplan } from 'app/utils/uttaksplan/lagUttaksplan';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { andreAugust2022ReglerGjelder, ISOStringToDate } from 'app/utils/dateUtils';\nimport { getErMorUfør } from 'app/utils/annenForelderUtils';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from 'app/utils/uttaksplan/uttaksplanUtils';\nimport { skalViseInfoOmPrematuruker } from 'app/utils/uttaksplanInfoUtils';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\n\nconst konverterStringTilDate = (invalidDateRanges?: DatepickerDateRange[]): DateRange[] | undefined => {\n    if (!invalidDateRanges) {\n        return undefined;\n    }\n\n    return invalidDateRanges.map((r) => ({\n        from: ISOStringToDate(r.from)!,\n        to: ISOStringToDate(r.to)!,\n    }));\n};\n\ninterface Props {\n    tilgjengeligeStønadskontoer100DTO: TilgjengeligeStønadskontoerDTO;\n    tilgjengeligeStønadskontoer80DTO: TilgjengeligeStønadskontoerDTO;\n}\n\nconst FarMedmorFødselOgMorHarIkkeRett: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer80DTO,\n    tilgjengeligeStønadskontoer100DTO,\n}) => {\n    const intl = useIntl();\n    const { state } = useForeldrepengesøknadContext();\n    const { søkersituasjon, annenForelder, barn, dekningsgrad, erEndringssøknad } = useSøknad();\n    const {\n        person: { fornavn, mellomnavn, etternavn },\n    } = useSøkerinfo();\n    const lagretUttaksplanInfo = useUttaksplanInfo<FarMedmorFødselOgMorHarIkkeRettUttaksplanInfo>();\n\n    const førsteUttaksdagNesteBarnsSak =\n        state.barnFraNesteSak !== undefined ? state.barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n    const erFarEllerMedmor = isFarEllerMedmor(søkersituasjon.rolle);\n    const erFødsel = søkersituasjon.situasjon === 'fødsel';\n    const annenForelderHarIkkeRett = isAnnenForelderOppgitt(annenForelder)\n        ? annenForelder.harRettPåForeldrepengerINorge === false && annenForelder.harRettPåForeldrepengerIEØS === false\n        : false;\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const termindato = getTermindato(barn);\n\n    const onValidSubmitHandler = (values: Partial<FarMedmorFødselOgMorHarIkkeRettFormData>) => {\n        const startDatoUttaksplan =\n            andreAugust2022ReglerGjelder(familiehendelsesdatoDate!) || getErMorUfør(annenForelder, erFarEllerMedmor)\n                ? values.permisjonStartdato\n                : dateToISOString(Uttaksdagen(Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste()).leggTil(30));\n\n        return [\n            actionCreator.setUttaksplanInfo(mapFarMedmorFødselOgMorHarIkkeRettFormToState(values)),\n            actionCreator.setDekningsgrad(getDekningsgradFromString(values.dekningsgrad)),\n            actionCreator.lagUttaksplanforslag(\n                lagUttaksplan({\n                    annenForelderErUfør: erMorUfør,\n                    erDeltUttak: false,\n                    erEndringssøknad,\n                    erEnkelEndringssøknad: erEndringssøknad,\n                    familiehendelsesdato: familiehendelsesdatoDate!,\n                    førsteUttaksdagEtterSeksUker: Uttaksdagen(\n                        Uttaksdagen(familiehendelsesdatoDate!).denneEllerNeste()\n                    ).leggTil(30),\n                    situasjon: søkersituasjon.situasjon,\n                    søkerErFarEllerMedmor: erFarEllerMedmor,\n                    søkerHarMidlertidigOmsorg: false,\n                    tilgjengeligeStønadskontoer:\n                        tilgjengeligeStønadskontoer[getDekningsgradFromString(values.dekningsgrad)],\n                    uttaksplanSkjema: {\n                        startdatoPermisjon: startDatoUttaksplan,\n                    },\n                    bareFarMedmorHarRett: true,\n                    termindato,\n                    harAktivitetskravIPeriodeUtenUttak: getHarAktivitetskravIPeriodeUtenUttak({\n                        erDeltUttak: false,\n                        morHarRett: false,\n                        søkerErAleneOmOmsorg: false,\n                    }),\n                    førsteUttaksdagNesteBarnsSak,\n                })\n            ),\n        ];\n    };\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.UTTAKSPLAN,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state)\n    );\n\n    const shouldRender = erFarEllerMedmor && erFødsel && annenForelderHarIkkeRett;\n\n    if (!shouldRender) {\n        return null;\n    }\n\n    const erDeltUttak = !annenForelderHarIkkeRett;\n    const erMorUfør = isAnnenForelderOppgitt(annenForelder) ? !!annenForelder.erUfør : false;\n    const navnMor = isAnnenForelderOppgitt(annenForelder)\n        ? formaterNavn(annenForelder.fornavn, annenForelder.etternavn, true)\n        : '';\n    const navnFarMedmor = formaterNavn(fornavn, etternavn, true, mellomnavn);\n    const datoAvgrensinger = uttaksplanDatoavgrensninger.startdatoPermisjonFarMedmor(\n        familiehendelsesdatoDate!,\n        termindato,\n        søkersituasjon.situasjon\n    );\n    const fødselsdato = getFødselsdato(barn);\n    const visInfoOmPrematuruker = skalViseInfoOmPrematuruker(fødselsdato, termindato, søkersituasjon.situasjon);\n    const ekstraDagerGrunnetPrematurFødsel = visInfoOmPrematuruker\n        ? Tidsperioden({ fom: fødselsdato!, tom: termindato! }).getAntallUttaksdager() - 1\n        : undefined;\n\n    const tilgjengeligeStønadskontoer = getValgtStønadskontoFor80Og100Prosent(\n        tilgjengeligeStønadskontoer80DTO,\n        tilgjengeligeStønadskontoer100DTO\n    );\n\n    return (\n        <FarMedmorFødselOgMorHarIkkeRettFormComponents.FormikWrapper\n            initialValues={getInitialFarMedmorFødselOgMorHarIkkeRettValues(dekningsgrad, lagretUttaksplanInfo)}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues }) => {\n                const visibility = farMedmorFødselOgMorHarIkkeRettQuestionsConfig.getVisbility({\n                    ...formValues,\n                    erMorUfør,\n                    familiehendelsesdato: familiehendelsesdatoDate!,\n                });\n\n                const valgtStønadskonto = tilgjengeligeStønadskontoer[formValues.dekningsgrad === '100' ? 100 : 80];\n\n                return (\n                    <FarMedmorFødselOgMorHarIkkeRettFormComponents.Form\n                        includeButtons={false}\n                        includeValidationSummary={true}\n                    >\n                        <Block\n                            padBottom=\"l\"\n                            visible={visibility.isIncluded(FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad)}\n                        >\n                            <DekningsgradSpørsmål\n                                FormKomponent={FarMedmorFødselOgMorHarIkkeRettFormComponents}\n                                dekningsgradFeltNavn={FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad}\n                                tilgjengeligeStønadskontoer={tilgjengeligeStønadskontoer}\n                                erDeltUttak={erDeltUttak}\n                            />\n                        </Block>\n                        <Block\n                            padBottom=\"l\"\n                            visible={visibility.isAnswered(FarMedmorFødselOgMorHarIkkeRettFormField.dekningsgrad)}\n                        >\n                            {valgtStønadskonto && (\n                                <TilgjengeligeDagerGraf\n                                    erDeltUttak={erDeltUttak}\n                                    erFarEllerMedmor\n                                    navnFarMedmor={navnFarMedmor}\n                                    navnMor={navnMor}\n                                    tilgjengeligeDager={getTilgjengeligeDager(\n                                        valgtStønadskonto,\n                                        erDeltUttak,\n                                        Forelder.farMedmor\n                                    )}\n                                />\n                            )}\n                        </Block>\n                        <Block padBottom=\"l\" visible={visInfoOmPrematuruker === true}>\n                            <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                                <FormattedMessage\n                                    id=\"uttaksplaninfo.veileder.informasjonPrematuruker\"\n                                    values={{\n                                        antallprematuruker: Math.floor(ekstraDagerGrunnetPrematurFødsel! / 5),\n                                        antallprematurdager: ekstraDagerGrunnetPrematurFødsel! % 5,\n                                    }}\n                                />\n                            </Veilederpanel>\n                        </Block>\n                        <Block\n                            padBottom=\"l\"\n                            visible={visibility.isIncluded(FarMedmorFødselOgMorHarIkkeRettFormField.permisjonStartdato)}\n                        >\n                            <FarMedmorFødselOgMorHarIkkeRettFormComponents.DatePicker\n                                name={FarMedmorFødselOgMorHarIkkeRettFormField.permisjonStartdato}\n                                label={intlUtils(intl, 'uttaksplaninfo.spørsmål.startdatoPermisjonFarMedmor.label')}\n                                minDate={ISOStringToDate(datoAvgrensinger.minDate)}\n                                maxDate={ISOStringToDate(datoAvgrensinger.maxDate)}\n                                disabledDateRanges={konverterStringTilDate(datoAvgrensinger.invalidDateRanges)}\n                                disableWeekend={datoAvgrensinger.weekendsNotSelectable}\n                                validate={validateStartdatoFarMedmor(\n                                    intl,\n                                    ISOStringToDate(datoAvgrensinger.minDate)!,\n                                    ISOStringToDate(datoAvgrensinger.maxDate)!\n                                )}\n                                placeholder={'dd.mm.åååå'}\n                            />\n                        </Block>\n                        <Block visible={visibility.areAllQuestionsAnswered()} textAlignCenter={true}>\n                            <Hovedknapp disabled={isSubmitting} spinner={isSubmitting}>\n                                {intlUtils(intl, 'søknad.gåVidere')}\n                            </Hovedknapp>\n                        </Block>\n                    </FarMedmorFødselOgMorHarIkkeRettFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default FarMedmorFødselOgMorHarIkkeRett;\n","import { formatDateExtended, intlUtils } from '@navikt/fp-common';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport dayjs from 'dayjs';\nimport { isISODateString } from 'nav-datovelger';\nimport { IntlShape } from 'react-intl';\nimport { Uttaksdagen } from '../../../../utils/Uttaksdagen';\n\nexport const validateStartdatoFarMedmor =\n    (intl: IntlShape, minDato: Date, maxDato: Date) => (permisjonStartdato: string) => {\n        if (!isISODateString(permisjonStartdato)) {\n            return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.startdatoPermisjon.gyldigDato');\n        }\n        if (!Uttaksdagen(ISOStringToDate(permisjonStartdato)!).erUttaksdag()) {\n            return intlUtils(intl, 'valideringsfeil.uttaksplaninfo.startdatoHelg');\n        }\n        if (dayjs(permisjonStartdato).isBefore(minDato, 'd') || dayjs(permisjonStartdato).isAfter(maxDato, 'd')) {\n            return intlUtils(intl, 'valideringsfeil.dateOutsideRange.fom', {\n                fom: formatDateExtended(minDato),\n                tom: formatDateExtended(maxDato),\n            });\n        }\n\n        return undefined;\n    };\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { TypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { intlUtils, UtvidetInformasjon } from '@navikt/fp-common';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\n\ninterface Props {\n    FormKomponent: TypedFormComponents<any, any, any>;\n    dekningsgradFeltNavn: string;\n    tilgjengeligeStønadskontoer: {\n        [Dekningsgrad.ÅTTI_PROSENT]: TilgjengeligStønadskonto[];\n        [Dekningsgrad.HUNDRE_PROSENT]: TilgjengeligStønadskonto[];\n    };\n    erDeltUttak: boolean;\n}\n\nconst DekningsgradSpørsmål: FunctionComponent<Props> = ({\n    FormKomponent,\n    dekningsgradFeltNavn,\n    tilgjengeligeStønadskontoer,\n    erDeltUttak,\n}) => {\n    const intl = useIntl();\n    const spørsmålTekst = erDeltUttak\n        ? 'uttaksplaninfo.dekningsgrad.label.deltUttak'\n        : 'uttaksplaninfo.dekningsgrad.label.ikkeDeltUttak';\n    return (\n        <FormKomponent.RadioPanelGroup\n            name={dekningsgradFeltNavn}\n            radios={[\n                {\n                    label: intlUtils(intl, 'uttaksplaninfo.49Uker', {\n                        antallUker: getAntallUker(tilgjengeligeStønadskontoer[Dekningsgrad.HUNDRE_PROSENT]),\n                    }),\n                    value: Dekningsgrad.HUNDRE_PROSENT,\n                },\n                {\n                    label: intlUtils(intl, 'uttaksplaninfo.59Uker', {\n                        antallUker: getAntallUker(tilgjengeligeStønadskontoer[Dekningsgrad.ÅTTI_PROSENT]),\n                    }),\n                    value: Dekningsgrad.ÅTTI_PROSENT,\n                },\n            ]}\n            legend={intlUtils(intl, spørsmålTekst)}\n            description={\n                <UtvidetInformasjon apneLabel=\"Les mer om lengden på foreldrepengeperioden\">\n                    Den totale utbetalingen blir høyere hvis du velger 100 prosent. Valget gjelder dere begge, og kan\n                    ikke endres senere.\n                </UtvidetInformasjon>\n            }\n            useTwoColumns={true}\n        />\n    );\n};\n\nexport default DekningsgradSpørsmål;\n","export enum UttaksplanHexColor {\n    lilla = '#544066',\n    blaa = '#0067C5',\n    gronn = '#06893a',\n    yellow = '#ff9100',\n    graa = '#7f756c',\n    rammeGraa = '#c6c2bf',\n    rod = '#BA3A26',\n}\n","import React from 'react';\nimport { bemUtils } from '@navikt/fp-common';\n\nimport './multibar.less';\n\ninterface BarProps {\n    width: number;\n    color: string;\n    color2?: string;\n    text?: React.ReactNode;\n}\n\ninterface Props {\n    borderColor: string;\n    leftBar?: BarProps;\n    rightBar?: BarProps;\n    centerBar?: BarProps;\n}\n\nconst getBarStyle = ({ width, color, color2 }: BarProps): React.CSSProperties => {\n    return {\n        width: `${width}%`,\n        background: color2 ? `linear-gradient(to right bottom, ${color} 49%, ${color2} 51%)` : color,\n    };\n};\n\nconst Multibar: React.FunctionComponent<Props> = ({ leftBar, rightBar, centerBar, borderColor }) => {\n    const bem = bemUtils('multibar');\n\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('bars')}>\n                {leftBar && leftBar.width > 0 && (\n                    <div className={bem.element('bar', 'left')} style={getBarStyle(leftBar)}>\n                        {leftBar && leftBar.text}\n                    </div>\n                )}\n                {centerBar && (\n                    <div\n                        className={bem.element('bar', 'center')}\n                        style={{ ...getBarStyle(centerBar), left: leftBar ? `${leftBar.width}%` : undefined }}\n                    >\n                        {centerBar && centerBar.text}\n                    </div>\n                )}\n                {rightBar && rightBar.width > 0 && (\n                    <div className={bem.element('bar', 'right')} style={getBarStyle(rightBar)}>\n                        {rightBar && rightBar.text}\n                    </div>\n                )}\n            </div>\n            <div className={bem.element('background')} style={{ borderColor }} />\n        </div>\n    );\n};\n\nexport default Multibar;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Element } from 'nav-frontend-typografi';\nimport { getNavnGenitivEierform } from 'app/utils/personUtils';\nimport { bemUtils, intlUtils } from '@navikt/fp-common';\nimport { UttaksplanHexColor } from 'uttaksplan/types/UttaksplanHexColor';\nimport { getVarighetString } from 'app/utils/dateUtils';\nimport Multibar from './multibar/Multibar';\nimport { TilgjengeligeDager } from 'app/types/TilgjengeligeDager';\nimport Personkort from 'app/components/personkort/Personkort';\n\nimport './tilgjengeligeDagerGraf.less';\n\ninterface Props {\n    tilgjengeligeDager: TilgjengeligeDager;\n    navnMor: string;\n    navnFarMedmor: string;\n    erFarEllerMedmor: boolean;\n    erDeltUttak: boolean;\n}\n\nexport const getProsentFordelingPerDel = (\n    tilgjengeligeDager: TilgjengeligeDager,\n    inkluderForeldrepengerFørTermin: boolean\n): {\n    pstMor: number;\n    pstFelles: number;\n    pstFarMedmor: number;\n} => {\n    const pstMultiplikator =\n        100 / (inkluderForeldrepengerFørTermin ? tilgjengeligeDager.dagerTotalt : tilgjengeligeDager.dagerEtterTermin);\n\n    const pstMor =\n        pstMultiplikator * tilgjengeligeDager.dagerMor +\n        (inkluderForeldrepengerFørTermin ? tilgjengeligeDager.dagerForeldrepengerFørFødsel : 0);\n    const pstFarMedmor = pstMultiplikator * tilgjengeligeDager.dagerFarMedmor;\n    const pstFelles = 100 - pstMor - pstFarMedmor;\n\n    return {\n        pstMor,\n        pstFarMedmor,\n        pstFelles,\n    };\n};\n\nconst DeltOmsorgGraf: React.FunctionComponent<Props> = ({\n    tilgjengeligeDager,\n    navnFarMedmor,\n    navnMor,\n    erFarEllerMedmor,\n}) => {\n    const intl = useIntl();\n    const bem = bemUtils('tilgjengeligeDagerGraf');\n    const fordeling = getProsentFordelingPerDel(tilgjengeligeDager, true);\n    const txtMor =\n        tilgjengeligeDager.dagerForeldrepengerFørFødsel > 0\n            ? `${tilgjengeligeDager.dagerForeldrepengerFørFødsel / 5} + ${tilgjengeligeDager.dagerMor / 5} ${intlUtils(\n                  intl,\n                  'uker',\n                  { uker: 15 }\n              )}`\n            : getVarighetString(tilgjengeligeDager.dagerMor, intl);\n    return (\n        <div className={bem.classNames(bem.block, bem.modifier('flereForeldre'))}>\n            <div className={bem.element('bars')}>\n                <div className={bem.element('forelder1')} style={{ width: `${fordeling.pstMor}%` }}>\n                    <div className={bem.element('barTitle')}>\n                        <Personkort textValign=\"bottom\">\n                            <FormattedMessage\n                                id=\"tilgjengeligeDagerGraf.person.del\"\n                                values={{ navnEierform: getNavnGenitivEierform(navnMor, intl.locale) }}\n                            />\n                        </Personkort>\n                    </div>\n                    <Multibar\n                        borderColor={UttaksplanHexColor.graa}\n                        leftBar={{\n                            color: UttaksplanHexColor.lilla,\n                            width: 100,\n                            text: <div className={bem.element('barTekst')}>{txtMor}</div>,\n                        }}\n                    />\n                </div>\n                <div className={bem.element('felles')} style={{ width: `${fordeling.pstFelles}%` }}>\n                    <div className={bem.element('barTitle')}>\n                        <FormattedMessage id=\"tilgjengeligeDagerGraf.fellesperiode\" />\n                    </div>\n                    <Multibar\n                        borderColor={UttaksplanHexColor.graa}\n                        leftBar={{\n                            color: UttaksplanHexColor.lilla,\n                            color2: UttaksplanHexColor.blaa,\n                            width: 100,\n                            text: (\n                                <div className={bem.element('barTekst')}>\n                                    {getVarighetString(tilgjengeligeDager.dagerFelles, intl)}\n                                </div>\n                            ),\n                        }}\n                    />\n                </div>\n                {navnFarMedmor && (\n                    <div className={bem.element('forelder2')} style={{ width: `${fordeling.pstFarMedmor}%` }}>\n                        <div className={bem.element('barTitle')}>\n                            <Personkort invertert={true} textValign=\"bottom\">\n                                <FormattedMessage\n                                    id=\"tilgjengeligeDagerGraf.person.del\"\n                                    values={{\n                                        navnEierform: getNavnGenitivEierform(navnFarMedmor, intl.locale),\n                                    }}\n                                />\n                            </Personkort>\n                        </div>\n                        <Multibar\n                            borderColor={UttaksplanHexColor.graa}\n                            leftBar={{\n                                color: UttaksplanHexColor.blaa,\n                                width: 100,\n                                text: (\n                                    <div className={bem.element('barTekst')}>\n                                        {getVarighetString(tilgjengeligeDager.dagerFarMedmor, intl)}\n                                    </div>\n                                ),\n                            }}\n                        />\n                    </div>\n                )}\n            </div>\n            {!erFarEllerMedmor && tilgjengeligeDager.dagerForeldrepengerFørFødsel > 0 && (\n                <div style={{ paddingTop: '0.625rem' }}>\n                    <Element>\n                        <FormattedMessage id=\"tilgjengeligeDagerGraf.uttakFørFødselInfo\" values={{ navn: navnMor }} />\n                    </Element>\n                </div>\n            )}\n            {erFarEllerMedmor && tilgjengeligeDager.dagerForeldrepengerFørFødsel > 0 && (\n                <div style={{ paddingTop: '0.625rem' }}>\n                    <Element>\n                        <FormattedMessage\n                            id=\"tilgjengeligeDagerGraf.uttakFørFødselInfoFarMedmor\"\n                            values={{ navn: navnMor }}\n                        />\n                    </Element>\n                </div>\n            )}\n        </div>\n    );\n};\n\nconst AleneomsorgGraf: React.FunctionComponent<Props> = ({ tilgjengeligeDager, erFarEllerMedmor }) => {\n    const intl = useIntl();\n    const bem = bemUtils('tilgjengeligeDagerGraf');\n    const txt =\n        tilgjengeligeDager.dagerForeldrepengerFørFødsel > 0\n            ? `${tilgjengeligeDager.dagerForeldrepengerFørFødsel / 5} + ${\n                  tilgjengeligeDager.dagerForeldrepenger / 5\n              } uker`\n            : getVarighetString(tilgjengeligeDager.dagerEtterTermin, intl);\n    return (\n        <div className={bem.block}>\n            <div style={{ position: 'relative' }}>\n                <div className={bem.element('barTitle')}>\n                    <Element>\n                        <FormattedMessage id=\"tilgjengeligeDagerGraf.periodeMedForeldrepenger\" />\n                    </Element>\n                </div>\n            </div>\n            <Multibar\n                borderColor={UttaksplanHexColor.graa}\n                leftBar={{\n                    color: erFarEllerMedmor ? UttaksplanHexColor.blaa : UttaksplanHexColor.lilla,\n                    width: 100,\n                    text: <div className={bem.element('barTekst')}>{txt}</div>,\n                }}\n            />\n            {!erFarEllerMedmor && tilgjengeligeDager.dagerForeldrepengerFørFødsel > 0 && (\n                <div style={{ paddingTop: '0.625rem' }}>\n                    <Element>\n                        <FormattedMessage id=\"tilgjengeligeDagerGraf.uttakFørFødselInfoIkkeDeltUttak\" />\n                    </Element>\n                </div>\n            )}\n        </div>\n    );\n};\n\nconst TilgjengeligeDagerGraf: React.FunctionComponent<Props> = (props) => {\n    return props.erDeltUttak ? <DeltOmsorgGraf {...props} /> : <AleneomsorgGraf {...props} />;\n};\n\nexport default TilgjengeligeDagerGraf;\n","import { Forelder } from 'app/types/Forelder';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { TilgjengeligeDager } from './../../../../types/TilgjengeligeDager';\n\nexport const summerAntallDagerIKontoer = (kontoer: TilgjengeligStønadskonto[]): number => {\n    return kontoer.reduce((dager, konto) => konto.dager + dager, 0);\n};\n\nconst getMorsStønadskontoer = (kontoer: TilgjengeligStønadskonto[]): TilgjengeligStønadskonto[] =>\n    kontoer.filter((konto) => konto.konto === StønadskontoType.Mødrekvote);\n\nconst getFarsStønadskontoer = (kontoer: TilgjengeligStønadskonto[]): TilgjengeligStønadskonto[] =>\n    kontoer.filter((konto) => konto.konto === StønadskontoType.Fedrekvote);\n\nconst getForeldrepengeKontoer = (kontoer: TilgjengeligStønadskonto[]): TilgjengeligStønadskonto[] =>\n    kontoer.filter((konto) => konto.konto === StønadskontoType.Foreldrepenger);\n\nconst getFellesStønadskontoer = (kontoer: TilgjengeligStønadskonto[]): TilgjengeligStønadskonto[] =>\n    kontoer.filter((konto) => konto.konto === StønadskontoType.Fellesperiode);\n\nconst kontoErFørTermin = (konto: TilgjengeligStønadskonto): boolean => {\n    return konto.konto === StønadskontoType.ForeldrepengerFørFødsel;\n};\n\nconst kontoErEtterTermin = (konto: TilgjengeligStønadskonto): boolean => {\n    return konto.konto !== StønadskontoType.ForeldrepengerFørFødsel;\n};\n\nexport const getTilgjengeligeDager = (\n    kontoer: TilgjengeligStønadskonto[],\n    erDeltUttak: boolean,\n    forelderVedAleneomsorg: Forelder | undefined\n): TilgjengeligeDager => {\n    const kontoerEtterTermin = kontoer.filter(kontoErEtterTermin);\n\n    const dagerTotalt = summerAntallDagerIKontoer(kontoer);\n    const dagerForeldrepengerFørFødsel = summerAntallDagerIKontoer(kontoer.filter(kontoErFørTermin));\n    const dagerEtterTermin = summerAntallDagerIKontoer(kontoerEtterTermin);\n    const dagerForeldrepenger = summerAntallDagerIKontoer(getForeldrepengeKontoer(kontoerEtterTermin));\n    const dagerMor = summerAntallDagerIKontoer(getMorsStønadskontoer(kontoerEtterTermin));\n    const dagerFar = summerAntallDagerIKontoer(getFarsStønadskontoer(kontoerEtterTermin));\n    const dagerFelles = summerAntallDagerIKontoer(getFellesStønadskontoer(kontoerEtterTermin));\n\n    const dagerKunTilMor = erDeltUttak === false && forelderVedAleneomsorg === Forelder.mor;\n    const dagerKunTilFar = erDeltUttak === false && forelderVedAleneomsorg === Forelder.farMedmor;\n\n    const maksDagerFar = dagerKunTilFar ? dagerForeldrepenger : dagerFar + dagerFelles;\n    const maksDagerMor = dagerKunTilMor ? dagerForeldrepenger + dagerForeldrepengerFørFødsel : dagerMor + dagerFelles;\n\n    return {\n        dagerTotalt,\n        dagerForeldrepengerFørFødsel,\n        dagerEtterTermin,\n        dagerForeldrepenger,\n        dagerMor,\n        dagerFarMedmor: dagerFar,\n        dagerFelles,\n        maksDagerFar,\n        maksDagerMor,\n        stønadskontoer: kontoer,\n    };\n};\n","import dayjs from 'dayjs';\nimport { Uttaksdagen } from './Uttaksdagen';\nimport uttaksConstants from 'app/constants';\nimport { DatepickerLimitations } from 'nav-datovelger';\nimport { dateToISOString } from '@navikt/sif-common-formik/lib';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { getFørsteUttaksdag2UkerFørFødsel } from 'app/utils/wlbUtils';\n\nfunction sisteMuligePermisjonsdag(familiehendelsedato: Date): Date {\n    const startDato = Uttaksdagen(familiehendelsedato).denneEllerNeste();\n    return Uttaksdagen(\n        dayjs(startDato).add(uttaksConstants.MAKS_PERMISJONSLENGDE_I_ÅR, 'years').toDate()\n    ).denneEllerNeste();\n}\n\nconst konverterMinOgMaxDatoerTilString = (minDate: Date, maxDate: Date) => ({\n    minDate: dateToISOString(minDate),\n    maxDate: dateToISOString(maxDate),\n});\n\nconst defaultPermisjonsperiodeAvgrensning = (familiehendelsesdato: Date): DatepickerLimitations => {\n    const minDato = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n    const maksDato = sisteMuligePermisjonsdag(familiehendelsesdato);\n    return {\n        ...konverterMinOgMaxDatoerTilString(minDato, maksDato),\n        weekendsNotSelectable: true,\n    };\n};\n\nconst startdatoFørTermin = (familiehendelsesdato: string): DatepickerLimitations => {\n    const maksDato = Uttaksdagen(dayjs(familiehendelsesdato).toDate()).forrige();\n    const minDato = Uttaksdagen(maksDato).trekkFra(uttaksConstants.MAKS_ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1);\n    return {\n        ...konverterMinOgMaxDatoerTilString(minDato, maksDato),\n        weekendsNotSelectable: true,\n    };\n};\n\nconst startdatoFørTerminForeldrepengerFørFødselKonto = (familiehendelsesdato: string): DatepickerLimitations => {\n    const maksDato = Uttaksdagen(dayjs(familiehendelsesdato).toDate()).forrige();\n    const minDato = Uttaksdagen(maksDato).trekkFra(uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1);\n    return {\n        ...konverterMinOgMaxDatoerTilString(minDato, maksDato),\n        weekendsNotSelectable: true,\n    };\n};\n\nconst ekstrauttakFørFødsel = (familiehendelsesdato: string): DatepickerLimitations => {\n    const sisteDagFørFødsel = Uttaksdagen(dayjs(familiehendelsesdato).toDate()).forrige();\n    const minDato = Uttaksdagen(sisteDagFørFødsel).trekkFra(\n        uttaksConstants.MAKS_ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1\n    );\n    const maksDato = Uttaksdagen(sisteDagFørFødsel).trekkFra(\n        uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1\n    );\n    return {\n        ...konverterMinOgMaxDatoerTilString(minDato, maksDato),\n        weekendsNotSelectable: true,\n    };\n};\n\nconst startdatoPermisjonAleneomsorgFarMedmor = (\n    datoForAleneomsorg: string,\n    familiehendelsesdato: string\n): DatepickerLimitations => {\n    const minDato = Uttaksdagen(dayjs(datoForAleneomsorg).toDate()).denneEllerNeste();\n    const maksDato = sisteMuligePermisjonsdag(dayjs(familiehendelsesdato).toDate());\n    return {\n        ...konverterMinOgMaxDatoerTilString(minDato, maksDato),\n        weekendsNotSelectable: true,\n    };\n};\n\nconst startdatoPermisjonAdopsjon = (familiehendelsesdato: string): DatepickerLimitations => {\n    return defaultPermisjonsperiodeAvgrensning(dayjs(familiehendelsesdato).toDate());\n};\n\nconst morsSisteUttaksdag = (familiehendelsesdato: string): DatepickerLimitations => {\n    return defaultPermisjonsperiodeAvgrensning(dayjs(familiehendelsesdato).toDate());\n};\n\nconst startdatoPermisjonFarMedmor = (\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon\n): DatepickerLimitations => {\n    const defaultAvgrensning = defaultPermisjonsperiodeAvgrensning(familiehendelsesdato);\n    if (situasjon === 'fødsel' && andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n        return {\n            ...defaultAvgrensning,\n            minDate: dateToISOString(getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato)),\n        };\n    }\n    return defaultAvgrensning;\n};\n\nexport const uttaksplanDatoavgrensninger = {\n    startdatoFørTermin,\n    morsSisteUttaksdag,\n    startdatoPermisjonFarMedmor,\n    startdatoPermisjonAdopsjon,\n    startdatoPermisjonAleneomsorgFarMedmor,\n    startdatoFørTerminForeldrepengerFørFødselKonto,\n    ekstrauttakFørFødsel,\n};\n","import { Periode, isUttaksperiode } from 'uttaksplan/types/Periode';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport { finnAntallDagerÅTrekke } from './uttaksPlanStatus';\n\nexport const getFlerbarnsuker = (dekningsgrad: string, antallBarn: number): number => {\n    if (antallBarn === 2) {\n        if (dekningsgrad === Dekningsgrad.HUNDRE_PROSENT) {\n            return 17;\n        } else {\n            return 21;\n        }\n    } else {\n        if (dekningsgrad === Dekningsgrad.HUNDRE_PROSENT) {\n            return 46;\n        } else {\n            return 56;\n        }\n    }\n};\n\nexport const uttaksplanHarForMangeFlerbarnsdager = (\n    uttaksplan: Periode[],\n    dekningsgrad: Dekningsgrad,\n    antallBarn: number\n) => {\n    const result: number = uttaksplan\n        .slice()\n        .filter((periode) => isUttaksperiode(periode) && periode.ønskerFlerbarnsdager === true)\n        .reduce((sum: number, periode: Periode) => {\n            if (isUttaksperiode(periode)) {\n                return finnAntallDagerÅTrekke(periode) + sum;\n            } else {\n                return sum;\n            }\n        }, 0);\n\n    return result > getFlerbarnsuker(dekningsgrad, antallBarn) * 5;\n};\n","import { intlUtils } from '@navikt/fp-common';\nimport AnnenForelder, { AnnenForelderOppgitt, isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport { RettighetType } from 'app/types/RettighetType';\nimport { Sak } from 'app/types/Sak';\nimport { IntlShape } from 'react-intl';\n\nexport const getErMorUfør = (annenForelder: AnnenForelder, erFarEllerMedmor: boolean) => {\n    if (isAnnenForelderOppgitt(annenForelder) && erFarEllerMedmor) {\n        return !!annenForelder.erUfør;\n    }\n\n    return false;\n};\n\nexport const harAnnenForelderRettIEØS = (annenForelder: AnnenForelder): boolean => {\n    return isAnnenForelderOppgitt(annenForelder) && !!annenForelder.harRettPåForeldrepengerIEØS;\n};\n\nexport const getMockAnnenForelder = (sak: Sak, intl: IntlShape): AnnenForelderOppgitt => {\n    return {\n        fornavn: intlUtils(intl, 'annen.forelder'),\n        etternavn: '',\n        fnr: '',\n        harRettPåForeldrepengerINorge:\n            sak.rettighetType === RettighetType.BEGGE_RETT && !sak.harAnnenForelderTilsvarendeRettEØS,\n        harRettPåForeldrepengerIEØS: sak.harAnnenForelderTilsvarendeRettEØS,\n        erUfør: (!sak.sakTilhørerMor && sak.morUføretrygd) || undefined,\n        kanIkkeOppgis: false,\n    };\n};\n","import { YesOrNo } from '@navikt/sif-common-formik/lib';\n\nexport const convertBooleanOrUndefinedToYesOrNo = (value: boolean | undefined): YesOrNo => {\n    if (value === true) {\n        return YesOrNo.YES;\n    }\n\n    if (value === false) {\n        return YesOrNo.NO;\n    }\n\n    return YesOrNo.UNANSWERED;\n};\n\nexport const convertYesOrNoOrUndefinedToBoolean = (value: YesOrNo | undefined) => {\n    if (value === YesOrNo.YES) {\n        return true;\n    }\n\n    if (value === YesOrNo.UNANSWERED) {\n        return undefined;\n    }\n\n    return false;\n};\n","import { Dekningsgrad } from 'app/types/Dekningsgrad';\n\nexport const getDekningsgradFromString = (dekningsgrad: string | undefined) => {\n    if (!dekningsgrad) {\n        return Dekningsgrad.HUNDRE_PROSENT;\n    }\n\n    return dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? Dekningsgrad.HUNDRE_PROSENT : Dekningsgrad.ÅTTI_PROSENT;\n};\n","import { useNavigate } from 'react-router-dom';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport { logAmplitudeEvent } from 'app/amplitude/amplitude';\nimport Api from 'app/api/api';\nimport actionCreator from 'app/context/action/actionCreator';\nimport { useCallback } from 'react';\n\nconst useAvbrytSøknad = () => {\n    const navigate = useNavigate();\n    const { dispatch, state } = useForeldrepengesøknadContext();\n    const { søkerinfo } = state;\n\n    const avbrytSøknadHandler = useCallback(() => {\n        logAmplitudeEvent('applikasjon-hendelse', {\n            app: 'foreldrepengesoknad',\n            team: 'foreldrepenger',\n            hendelse: 'avbrutt',\n        });\n\n        dispatch(actionCreator.avbrytSøknad());\n        Api.deleteStoredAppState(søkerinfo.person.fnr);\n        navigate('/');\n    }, [navigate, dispatch, søkerinfo.person.fnr]);\n\n    return avbrytSøknadHandler;\n};\n\nexport default useAvbrytSøknad;\n","import { logAmplitudeEvent } from 'app/amplitude/amplitude';\nimport { useCallback } from 'react';\nimport Environment from 'app/Environment';\n\nconst useFortsettSøknadSenere = () => {\n    const useFortsettSøknadSenere = useCallback(() => {\n        logAmplitudeEvent('applikasjon-hendelse', {\n            app: 'foreldrepengesoknad',\n            team: 'foreldrepenger',\n            hendelse: 'fortsettSenere',\n        });\n\n        (window as any).location = Environment.FAMILIE;\n    }, []);\n\n    return useFortsettSøknadSenere;\n};\n\nexport default useFortsettSøknadSenere;\n","import { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport UttaksplanInfo from 'app/context/types/UttaksplanInfo';\n\nconst useUttaksplanInfo = <T extends UttaksplanInfo>(): T | undefined => {\n    const { state } = useForeldrepengesøknadContext();\n    //TODO (TOR) Fiks casting\n    return <T>state.uttaksplanInfo;\n};\n\nexport default useUttaksplanInfo;\n","import { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport { TilgjengeligeStønadskontoerDTO } from 'app/types/TilgjengeligeStønadskontoerDTO';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\n\nconst opprettAktivitetsFriKonto = (\n    kontoer: TilgjengeligStønadskonto[],\n    generellMinsterett: number\n): TilgjengeligStønadskonto[] => {\n    const nyeKontoer: TilgjengeligStønadskonto[] = [];\n    nyeKontoer.push({ ...kontoer[0], dager: kontoer[0].dager - generellMinsterett });\n    nyeKontoer.push({ konto: StønadskontoType.AktivitetsfriKvote, dager: generellMinsterett });\n    return nyeKontoer;\n};\n\nconst mapTilgjengeligStønadskontoDTOToTilgjengeligStønadskonto = (\n    stønadskontoerDTO: TilgjengeligeStønadskontoerDTO\n): TilgjengeligStønadskonto[] => {\n    let tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[] = [];\n\n    Object.keys(stønadskontoerDTO.kontoer)\n        .filter((konto: string) => konto !== StønadskontoType.Flerbarnsdager)\n        .forEach((konto) => {\n            tilgjengeligeStønadskontoer.push({\n                konto: konto as StønadskontoType,\n                dager: stønadskontoerDTO.kontoer[konto],\n            });\n        });\n\n    const generellMinsterett = stønadskontoerDTO.minsteretter.generellMinsterett;\n\n    if (generellMinsterett > 0) {\n        tilgjengeligeStønadskontoer = opprettAktivitetsFriKonto(tilgjengeligeStønadskontoer, generellMinsterett);\n    }\n    return tilgjengeligeStønadskontoer;\n};\n\nexport const getValgtStønadskontoFor80Og100Prosent = (\n    kontoer80: TilgjengeligeStønadskontoerDTO,\n    kontoer100: TilgjengeligeStønadskontoerDTO\n) => {\n    const åttiProsent = mapTilgjengeligStønadskontoDTOToTilgjengeligStønadskonto(kontoer80);\n    const hundreProsent = mapTilgjengeligStønadskontoDTOToTilgjengeligStønadskonto(kontoer100);\n    return {\n        [Dekningsgrad.ÅTTI_PROSENT]: åttiProsent,\n        [Dekningsgrad.HUNDRE_PROSENT]: hundreProsent,\n    };\n};\n","import { Situasjon } from 'app/types/Situasjon';\nimport dayjs from 'dayjs';\n\nexport const skalViseInfoOmPrematuruker = (\n    fødselsdato: Date | undefined,\n    termindato: Date | undefined,\n    situasjon: Situasjon\n): boolean => {\n    if (fødselsdato === undefined || termindato === undefined || situasjon !== 'fødsel') {\n        return false;\n    }\n    const fødselsdatoEtterEllerLikFørsteJuli = dayjs(fødselsdato).isSameOrAfter(dayjs(new Date('2019-07-01')), 'day');\n    return (\n        dayjs(fødselsdato).add(7, 'weeks').add(3, 'days').isBefore(dayjs(termindato), 'days') &&\n        fødselsdatoEtterEllerLikFørsteJuli\n    );\n};\n","import { sorterPerioder } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { getTidsperiode, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { Forelder } from 'app/types/Forelder';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport { guid } from 'nav-frontend-js-utils';\nimport { isUttaksperiode, Periode, Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport {\n    andreAugust2022ReglerGjelder,\n    dateIsSameOrAfter,\n    skalFarUtsetteEtterMorSinSisteUttaksdag,\n    tidperiodeOverlapperDato,\n} from '../dateUtils';\nimport {\n    farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato,\n    getLengdePåForeslåttWLBUttakFarMedmor,\n    starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel,\n} from '../wlbUtils';\nimport { splittPeriodePåDato, splittUttaksperiodePåFamiliehendelsesdato } from 'uttaksplan/builder/leggTilPeriode';\n\nconst deltUttakAdopsjonSøktFørst = (\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    startdatoPermisjon: Date | undefined,\n    fellesperiodeukerMor: number | undefined,\n    harAnnenForelderSøktFP: boolean | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n): Periode[] => {\n    if (harAnnenForelderSøktFP !== true) {\n        const førsteUttaksdag = Uttaksdagen(startdatoPermisjon || famDato).denneEllerNeste();\n        const perioder: Periode[] = [];\n        const kontoType = erFarEllerMedmor ? StønadskontoType.Fedrekvote : StønadskontoType.Mødrekvote;\n        const forelder = erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n        const konto: TilgjengeligStønadskonto | undefined = tilgjengeligeStønadskontoer.find((k) =>\n            erFarEllerMedmor ? k.konto === StønadskontoType.Fedrekvote : k.konto === StønadskontoType.Mødrekvote\n        );\n        let currentTomDate: Date = førsteUttaksdag;\n\n        if (konto !== undefined) {\n            const periodeMødrekvote: Periode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder,\n                konto: kontoType,\n                tidsperiode: getTidsperiode(currentTomDate, konto.dager),\n                ønskerSamtidigUttak: false,\n                gradert: false,\n            };\n\n            currentTomDate = Uttaksdagen(periodeMødrekvote.tidsperiode.tom).neste();\n\n            if (\n                førsteUttaksdagNesteBarnsSak !== undefined &&\n                tidperiodeOverlapperDato(periodeMødrekvote.tidsperiode, førsteUttaksdagNesteBarnsSak)\n            ) {\n                const splittedePerioder = splittPeriodePåDato(periodeMødrekvote, førsteUttaksdagNesteBarnsSak);\n                splittedePerioder.forEach((periode) => perioder.push(periode));\n            } else {\n                perioder.push(periodeMødrekvote);\n            }\n        }\n\n        if (fellesperiodeukerMor !== undefined && fellesperiodeukerMor > 0) {\n            const periodeFellesperiode: Periode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder,\n                konto: StønadskontoType.Fellesperiode,\n                tidsperiode: getTidsperiode(currentTomDate, fellesperiodeukerMor * 5),\n                ønskerSamtidigUttak: false,\n                gradert: false,\n            };\n            if (\n                førsteUttaksdagNesteBarnsSak !== undefined &&\n                tidperiodeOverlapperDato(periodeFellesperiode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n            ) {\n                const splittedePerioder = splittPeriodePåDato(periodeFellesperiode, førsteUttaksdagNesteBarnsSak);\n                splittedePerioder.forEach((periode) => perioder.push(periode));\n            } else {\n                perioder.push(periodeFellesperiode);\n            }\n        }\n\n        return perioder.sort(sorterPerioder);\n    } else {\n        return [];\n    }\n};\n\nconst deltUttakAdopsjonSøktSist = (\n    familiehendelsesdato: Date,\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    erFarEllerMedmor: boolean,\n    antallDagerFellesperiodeFarMedmor: number | undefined,\n    antallUkerFellesperiodeFarMedmor: number | undefined,\n    morSinSisteUttaksdag: Date,\n    farSinFørsteUttaksdag: Date,\n    begrunnelseForUtsettelse: UtsettelseÅrsakType | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n) => {\n    if (erFarEllerMedmor) {\n        // Oppfører seg identisk som fødselsscenario\n        return deltUttakFødselFarMedmor(\n            tilgjengeligeStønadskontoer,\n            antallDagerFellesperiodeFarMedmor,\n            antallUkerFellesperiodeFarMedmor,\n            morSinSisteUttaksdag,\n            farSinFørsteUttaksdag,\n            begrunnelseForUtsettelse,\n            familiehendelsesdato,\n            undefined,\n            undefined,\n            førsteUttaksdagNesteBarnsSak,\n            'adopsjon'\n        );\n    } else {\n        const forslag = deltUttakFødselFarMedmor(\n            tilgjengeligeStønadskontoer,\n            antallDagerFellesperiodeFarMedmor,\n            antallUkerFellesperiodeFarMedmor,\n            morSinSisteUttaksdag,\n            farSinFørsteUttaksdag,\n            begrunnelseForUtsettelse,\n            familiehendelsesdato,\n            undefined,\n            undefined,\n            førsteUttaksdagNesteBarnsSak,\n            'adopsjon'\n        );\n\n        const forslagGjortOmTilMor = forslag.map((periode) => {\n            if (\n                isUttaksperiode(periode) &&\n                (periode.konto === StønadskontoType.Fedrekvote || periode.konto === StønadskontoType.Fellesperiode)\n            ) {\n                if (periode.konto === StønadskontoType.Fedrekvote) {\n                    return {\n                        ...periode,\n                        konto: StønadskontoType.Mødrekvote,\n                        forelder: Forelder.mor,\n                    };\n                } else {\n                    return {\n                        ...periode,\n                        forelder: Forelder.mor,\n                    };\n                }\n            }\n\n            return periode;\n        });\n\n        return forslagGjortOmTilMor;\n    }\n};\n\nconst deltUttakAdopsjon = (\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    startdatoPermisjon: Date | undefined,\n    fellesperiodeukerMor: number | undefined,\n    harAnnenForelderSøktFP: boolean | undefined,\n    antallDagerFellesperiodeFarMedmor: number | undefined,\n    antallUkerFellesperiodeFarMedmor: number | undefined,\n    morSinSisteUttaksdag: Date | undefined,\n    farSinFørsteUttaksdag: Date | undefined,\n    begrunnelseForUtsettelse: UtsettelseÅrsakType | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n) => {\n    if (!harAnnenForelderSøktFP) {\n        return deltUttakAdopsjonSøktFørst(\n            famDato,\n            erFarEllerMedmor,\n            tilgjengeligeStønadskontoer,\n            startdatoPermisjon,\n            fellesperiodeukerMor,\n            harAnnenForelderSøktFP,\n            førsteUttaksdagNesteBarnsSak\n        );\n    } else {\n        return deltUttakAdopsjonSøktSist(\n            famDato,\n            tilgjengeligeStønadskontoer,\n            erFarEllerMedmor,\n            antallDagerFellesperiodeFarMedmor,\n            antallUkerFellesperiodeFarMedmor,\n            morSinSisteUttaksdag!,\n            farSinFørsteUttaksdag!,\n            begrunnelseForUtsettelse,\n            førsteUttaksdagNesteBarnsSak\n        );\n    }\n};\n\nconst deltUttakFødselMor = (\n    famDato: Date,\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    ønsketStartdatoPermisjon: Date | undefined,\n    fellesperiodeukerMor: number | undefined\n): Periode[] => {\n    const førsteUttaksdag = Uttaksdagen(famDato).denneEllerNeste();\n    const perioder: Periode[] = [];\n    const skalHaForeldrePengerFørFødsel = ønsketStartdatoPermisjon ? true : false;\n    const fpFørFødselKonto: TilgjengeligStønadskonto | undefined = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.ForeldrepengerFørFødsel\n    );\n    const mkKonto: TilgjengeligStønadskonto | undefined = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.Mødrekvote\n    );\n    let currentTomDate: Date = førsteUttaksdag;\n    if (fpFørFødselKonto !== undefined && skalHaForeldrePengerFørFødsel && ønsketStartdatoPermisjon) {\n        const startdatoPermisjon = Uttaksdagen(ønsketStartdatoPermisjon).denneEllerNeste();\n        const dagerFørFødsel = Uttaksdagen(startdatoPermisjon).getUttaksdagerFremTilDato(currentTomDate);\n        const merEnnTreUkerPermisjonFørFødsel = dagerFørFødsel > 15;\n        const startdatoFpFørFødsel = Uttaksdagen(førsteUttaksdag).trekkFra(\n            merEnnTreUkerPermisjonFørFødsel ? 15 : dagerFørFødsel\n        );\n\n        if (merEnnTreUkerPermisjonFørFødsel) {\n            const ekstraPeriodeFørFødsel: Periode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder: Forelder.mor,\n                konto: StønadskontoType.Fellesperiode,\n                tidsperiode: getTidsperiode(startdatoPermisjon, dagerFørFødsel - 15),\n                vedlegg: [],\n            };\n\n            perioder.push(ekstraPeriodeFørFødsel);\n        }\n\n        const periodeFørFødsel: Periode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.mor,\n            konto: StønadskontoType.ForeldrepengerFørFødsel,\n            tidsperiode: {\n                fom: startdatoFpFørFødsel,\n                tom: Uttaksdagen(currentTomDate).forrige(),\n            },\n        };\n\n        perioder.push(periodeFørFødsel);\n    } else {\n        const periodeFørFødsel: Periode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.mor,\n            konto: StønadskontoType.ForeldrepengerFørFødsel,\n            skalIkkeHaUttakFørTermin: true,\n            tidsperiode: {} as any,\n            vedlegg: [],\n        };\n        perioder.push(periodeFørFødsel);\n    }\n\n    if (mkKonto !== undefined) {\n        const periodeMødrekvote: Periode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.mor,\n            konto: StønadskontoType.Mødrekvote,\n            tidsperiode: getTidsperiode(currentTomDate, mkKonto.dager),\n            ønskerSamtidigUttak: false,\n            gradert: false,\n        };\n\n        currentTomDate = Uttaksdagen(periodeMødrekvote.tidsperiode.tom).neste();\n\n        perioder.push(periodeMødrekvote);\n    }\n\n    if (fellesperiodeukerMor !== undefined && fellesperiodeukerMor > 0) {\n        const ekstraPermisjonFørFødsel = perioder.find(\n            (p) => isUttaksperiode(p) && p.konto === StønadskontoType.Fellesperiode\n        );\n\n        let trekkEkstraPermisjonDager = 0;\n        if (ekstraPermisjonFørFødsel) {\n            trekkEkstraPermisjonDager = Tidsperioden(ekstraPermisjonFørFødsel.tidsperiode).getAntallUttaksdager();\n        }\n\n        if (fellesperiodeukerMor * 5 - trekkEkstraPermisjonDager > 0) {\n            const periodeFellesperiodeMor: Periode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder: Forelder.mor,\n                konto: StønadskontoType.Fellesperiode,\n                tidsperiode: getTidsperiode(currentTomDate, fellesperiodeukerMor * 5 - trekkEkstraPermisjonDager),\n                ønskerSamtidigUttak: false,\n                gradert: false,\n            };\n\n            perioder.push(periodeFellesperiodeMor);\n        }\n    }\n\n    return perioder.sort(sorterPerioder);\n};\n\nconst deltUttakFødselFarMedmor = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    antallDagerFellesperiodeFarMedmor: number | undefined,\n    antallUkerFellesperiodeFarMedmor: number | undefined,\n    morSinSisteUttaksdag: Date,\n    farSinFørsteUttaksdag: Date,\n    begrunnelseForUtsettelse: UtsettelseÅrsakType | undefined,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    morHarRettPåForeldrepengerIEØS: boolean | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n    situasjon = 'fødsel'\n): Periode[] => {\n    if (\n        !andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n        dateIsSameOrAfter(morSinSisteUttaksdag, farSinFørsteUttaksdag) &&\n        !morHarRettPåForeldrepengerIEØS\n    ) {\n        return [];\n    }\n\n    const perioder: Periode[] = [];\n    const startDatoUttak = Uttaksdagen(farSinFørsteUttaksdag).denneEllerNeste();\n    let sisteUttaksDag = Uttaksdagen(farSinFørsteUttaksdag).denneEllerNeste();\n    const fedrekvoteKonto: TilgjengeligStønadskonto | undefined = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.Fedrekvote\n    );\n    const fellesKonto: TilgjengeligStønadskonto | undefined = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.Fellesperiode\n    );\n\n    const morHarRett = true;\n\n    if (\n        begrunnelseForUtsettelse &&\n        morSinSisteUttaksdag !== undefined &&\n        skalFarUtsetteEtterMorSinSisteUttaksdag(farSinFørsteUttaksdag, morSinSisteUttaksdag)\n    ) {\n        perioder.push({\n            id: guid(),\n            årsak: begrunnelseForUtsettelse,\n            type: Periodetype.Utsettelse,\n            forelder: Forelder.farMedmor,\n            erArbeidstaker: false, // TODO\n            tidsperiode: {\n                fom: Uttaksdagen(morSinSisteUttaksdag).neste(),\n                tom: Uttaksdagen(farSinFørsteUttaksdag).forrige(),\n            },\n        });\n    }\n\n    if (fedrekvoteKonto !== undefined) {\n        const erPeriodeWLBRundtFødsel =\n            situasjon === 'fødsel' &&\n            andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n            starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(\n                getTidsperiode(startDatoUttak, 1),\n                familiehendelsesdato,\n                termindato\n            );\n\n        const lengdePåForeslåttUttak = erPeriodeWLBRundtFødsel\n            ? getLengdePåForeslåttWLBUttakFarMedmor(familiehendelsesdato, startDatoUttak)\n            : fedrekvoteKonto.dager;\n\n        const fedrekvotePeriode: Periode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: StønadskontoType.Fedrekvote,\n            tidsperiode: getTidsperiode(startDatoUttak, lengdePåForeslåttUttak),\n            ønskerSamtidigUttak: erPeriodeWLBRundtFødsel,\n            samtidigUttakProsent: erPeriodeWLBRundtFødsel ? '100' : undefined,\n        };\n\n        sisteUttaksDag = Uttaksdagen(fedrekvotePeriode.tidsperiode.tom).neste();\n\n        if (\n            farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato(\n                fedrekvotePeriode,\n                familiehendelsesdato,\n                morHarRett,\n                termindato\n            )\n        ) {\n            const fedrekvotePerioder = splittUttaksperiodePåFamiliehendelsesdato(\n                fedrekvotePeriode,\n                familiehendelsesdato\n            );\n            fedrekvotePerioder.forEach((periode) => perioder.push(periode));\n        } else if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(fedrekvotePeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const fedrekvotePerioder = splittPeriodePåDato(fedrekvotePeriode, førsteUttaksdagNesteBarnsSak);\n            fedrekvotePerioder.forEach((periode) => perioder.push(periode));\n        } else {\n            perioder.push(fedrekvotePeriode);\n        }\n    }\n\n    if (fellesKonto !== undefined) {\n        let antallDagerFellesperiode = 0;\n\n        if (antallUkerFellesperiodeFarMedmor !== undefined && antallUkerFellesperiodeFarMedmor !== 0) {\n            antallDagerFellesperiode = 5 * antallUkerFellesperiodeFarMedmor;\n        }\n\n        if (antallDagerFellesperiodeFarMedmor !== undefined && antallDagerFellesperiodeFarMedmor !== 0) {\n            antallDagerFellesperiode = antallDagerFellesperiode + antallDagerFellesperiodeFarMedmor;\n        }\n\n        if (antallDagerFellesperiode > 0) {\n            const fellesPeriode: Periode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder: Forelder.farMedmor,\n                konto: StønadskontoType.Fellesperiode,\n                tidsperiode: getTidsperiode(sisteUttaksDag, antallDagerFellesperiode),\n                ønskerSamtidigUttak: false,\n                gradert: false,\n            };\n\n            perioder.push(fellesPeriode);\n        }\n    }\n\n    return perioder;\n};\n\nconst deltUttakFødsel = (\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    startdatoPermisjon: Date | undefined,\n    fellesperiodeukerMor: number | undefined,\n    antallDagerFellesperiodeFarMedmor: number | undefined,\n    antallUkerFellesperiodeFarMedmor: number | undefined,\n    morSinSisteUttaksdag: Date | undefined,\n    farSinFørsteUttaksdag: Date | undefined,\n    begrunnelseForUtsettelse: UtsettelseÅrsakType | undefined,\n    annenForelderHarRettPåForeldrepengerIEØS: boolean | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n    termindato?: Date | undefined\n) => {\n    if (!erFarEllerMedmor) {\n        return deltUttakFødselMor(famDato, tilgjengeligeStønadskontoer, startdatoPermisjon, fellesperiodeukerMor);\n    } else {\n        const tilgjengeligeStønadskontoerUtenFPP = tilgjengeligeStønadskontoer.filter(\n            (konto) => konto.konto !== StønadskontoType.ForeldrepengerFørFødsel\n        );\n\n        return deltUttakFødselFarMedmor(\n            tilgjengeligeStønadskontoerUtenFPP,\n            antallDagerFellesperiodeFarMedmor,\n            antallUkerFellesperiodeFarMedmor,\n            morSinSisteUttaksdag!,\n            farSinFørsteUttaksdag!,\n            begrunnelseForUtsettelse,\n            famDato,\n            termindato,\n            annenForelderHarRettPåForeldrepengerIEØS,\n            førsteUttaksdagNesteBarnsSak\n        );\n    }\n};\n\nexport interface DeltUttakParams {\n    situasjon: Situasjon;\n    famDato: Date;\n    erFarEllerMedmor: boolean;\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[];\n    startdatoPermisjon: Date | undefined;\n    fellesperiodeukerMor: number | undefined;\n    harAnnenForelderSøktFP: boolean | undefined;\n    antallDagerFellesperiodeFarMedmor: number | undefined;\n    antallUkerFellesperiodeFarMedmor: number | undefined;\n    morSinSisteUttaksdag: Date | undefined;\n    farSinFørsteUttaksdag: Date | undefined;\n    begrunnelseForUtsettelse: UtsettelseÅrsakType | undefined;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n    annenForelderHarRettPåForeldrepengerIEØS?: boolean | undefined;\n    termindato?: Date | undefined;\n}\n\nexport const deltUttak = (params: DeltUttakParams) => {\n    if (params.situasjon === 'adopsjon') {\n        return deltUttakAdopsjon(\n            params.famDato,\n            params.erFarEllerMedmor,\n            params.tilgjengeligeStønadskontoer,\n            params.startdatoPermisjon,\n            params.fellesperiodeukerMor,\n            params.harAnnenForelderSøktFP,\n            params.antallDagerFellesperiodeFarMedmor,\n            params.antallUkerFellesperiodeFarMedmor,\n            params.morSinSisteUttaksdag,\n            params.farSinFørsteUttaksdag,\n            params.begrunnelseForUtsettelse,\n            params.førsteUttaksdagNesteBarnsSak\n        );\n    }\n\n    if (params.situasjon === 'fødsel') {\n        return deltUttakFødsel(\n            params.famDato,\n            params.erFarEllerMedmor,\n            params.tilgjengeligeStønadskontoer,\n            params.startdatoPermisjon,\n            params.fellesperiodeukerMor,\n            params.antallDagerFellesperiodeFarMedmor,\n            params.antallUkerFellesperiodeFarMedmor,\n            params.morSinSisteUttaksdag,\n            params.farSinFørsteUttaksdag,\n            params.begrunnelseForUtsettelse,\n            params.annenForelderHarRettPåForeldrepengerIEØS,\n            params.førsteUttaksdagNesteBarnsSak,\n            params.termindato\n        );\n    }\n\n    return [];\n};\n","import { sorterPerioder } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { getTidsperiode, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { Forelder } from 'app/types/Forelder';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { guid } from 'nav-frontend-js-utils';\nimport { splittPeriodePåDato, splittUttaksperiodePåFamiliehendelsesdato } from 'uttaksplan/builder/leggTilPeriode';\nimport { isUttaksperiode, Periode, Periodetype, Uttaksperiode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { andreAugust2022ReglerGjelder, tidperiodeOverlapperDato } from '../dateUtils';\nimport { farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato } from '../wlbUtils';\n\nconst ikkeDeltUttakAdopsjonFarMedmor = (\n    famDato: Date,\n    foreldrepengerKonto: TilgjengeligStønadskonto,\n    startdatoPermisjon: Date | undefined,\n    erMorUfør: boolean | undefined,\n    aktivitetsfriKvote: TilgjengeligStønadskonto | undefined,\n    bareFarMedmorHarRett: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n) => {\n    const førsteUttaksdag = Uttaksdagen(startdatoPermisjon || famDato).denneEllerNeste();\n    const perioder: Uttaksperiode[] = [];\n\n    if (erMorUfør !== true) {\n        let startDatoNestePeriode = førsteUttaksdag;\n        if (andreAugust2022ReglerGjelder(famDato) && !!bareFarMedmorHarRett) {\n            const aktivitetsFriPeriode: Uttaksperiode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder: Forelder.farMedmor,\n                konto: StønadskontoType.AktivitetsfriKvote,\n                tidsperiode: getTidsperiode(førsteUttaksdag, aktivitetsfriKvote!.dager),\n                vedlegg: [],\n                gradert: false,\n                harIkkeAktivitetskrav: true,\n            };\n            if (\n                førsteUttaksdagNesteBarnsSak !== undefined &&\n                tidperiodeOverlapperDato(aktivitetsFriPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n            ) {\n                const splittetPeriode = splittPeriodePåDato(\n                    aktivitetsFriPeriode,\n                    førsteUttaksdagNesteBarnsSak\n                ) as Uttaksperiode[];\n                splittetPeriode.forEach((sp) => perioder.push(sp));\n            } else {\n                perioder.push(aktivitetsFriPeriode);\n            }\n            startDatoNestePeriode = Uttaksdagen(aktivitetsFriPeriode.tidsperiode.tom).neste();\n        }\n        const periode: Uttaksperiode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: foreldrepengerKonto.konto,\n            tidsperiode: getTidsperiode(startDatoNestePeriode, foreldrepengerKonto.dager),\n            vedlegg: [],\n            gradert: false,\n        };\n        if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(periode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const splittetPeriode = splittPeriodePåDato(periode, førsteUttaksdagNesteBarnsSak) as Uttaksperiode[];\n            splittetPeriode.forEach((sp) => perioder.push(sp));\n        } else {\n            perioder.push(periode);\n        }\n    } else {\n        const aktivitetsFriPeriode: Uttaksperiode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: StønadskontoType.AktivitetsfriKvote,\n            tidsperiode: getTidsperiode(førsteUttaksdag, aktivitetsfriKvote!.dager),\n            vedlegg: [],\n            gradert: false,\n            harIkkeAktivitetskrav: true,\n        };\n\n        if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(aktivitetsFriPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const splittetPeriode = splittPeriodePåDato(\n                aktivitetsFriPeriode,\n                førsteUttaksdagNesteBarnsSak\n            ) as Uttaksperiode[];\n            splittetPeriode.forEach((sp) => perioder.push(sp));\n        } else {\n            perioder.push(aktivitetsFriPeriode);\n        }\n\n        const aktivitetskravPeriode: Uttaksperiode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: StønadskontoType.Foreldrepenger,\n            tidsperiode: getTidsperiode(\n                Uttaksdagen(aktivitetsFriPeriode.tidsperiode.tom).neste(),\n                foreldrepengerKonto.dager\n            ),\n            vedlegg: [],\n            gradert: false,\n        };\n\n        if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(aktivitetskravPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const splittetPeriode = splittPeriodePåDato(\n                aktivitetskravPeriode,\n                førsteUttaksdagNesteBarnsSak\n            ) as Uttaksperiode[];\n            splittetPeriode.forEach((sp) => perioder.push(sp));\n        } else {\n            perioder.push(aktivitetskravPeriode);\n        }\n    }\n\n    return perioder;\n};\n\nconst ikkeDeltUttakAdopsjonMor = (\n    famDato: Date,\n    foreldrepengerKonto: TilgjengeligStønadskonto,\n    startdatoPermisjon: Date | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n) => {\n    const førsteUttaksdag = Uttaksdagen(startdatoPermisjon || famDato).denneEllerNeste();\n    const periode: Uttaksperiode = {\n        id: guid(),\n        type: Periodetype.Uttak,\n        forelder: Forelder.mor,\n        konto: foreldrepengerKonto.konto,\n        tidsperiode: getTidsperiode(førsteUttaksdag, foreldrepengerKonto.dager),\n        vedlegg: [],\n        gradert: false,\n    };\n    if (\n        førsteUttaksdagNesteBarnsSak !== undefined &&\n        tidperiodeOverlapperDato(periode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n    ) {\n        return splittPeriodePåDato(periode, førsteUttaksdagNesteBarnsSak);\n    }\n    return [periode];\n};\n\nconst ikkeDeltUttakAdopsjon = (\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    foreldrepengerKonto: TilgjengeligStønadskonto,\n    startdatoPermisjon: Date | undefined,\n    erMorUfør: boolean | undefined,\n    aktivitetsfriKvote: TilgjengeligStønadskonto | undefined,\n    bareFarMedmorHarRett: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n) => {\n    if (!erFarEllerMedmor) {\n        return ikkeDeltUttakAdopsjonMor(famDato, foreldrepengerKonto, startdatoPermisjon, førsteUttaksdagNesteBarnsSak);\n    } else {\n        return ikkeDeltUttakAdopsjonFarMedmor(\n            famDato,\n            foreldrepengerKonto,\n            startdatoPermisjon,\n            erMorUfør,\n            aktivitetsfriKvote,\n            bareFarMedmorHarRett,\n            førsteUttaksdagNesteBarnsSak\n        );\n    }\n};\n\nconst ikkeDeltUttakFødselMor = (\n    famDato: Date,\n    foreldrepengerKonto: TilgjengeligStønadskonto,\n    startdatoPermisjon: Date | undefined,\n    foreldrePengerFørFødselKonto: TilgjengeligStønadskonto\n) => {\n    const førsteUttaksdag = Uttaksdagen(famDato).denneEllerNeste();\n    const perioder: Periode[] = [];\n    const skalHaForeldrePengerFørFødsel = startdatoPermisjon ? true : false;\n\n    if (foreldrePengerFørFødselKonto !== undefined && skalHaForeldrePengerFørFødsel && startdatoPermisjon) {\n        const dagerFørFødsel = Uttaksdagen(startdatoPermisjon).getUttaksdagerFremTilDato(førsteUttaksdag);\n        const merEnnTreUkerPermisjonFørFødsel = dagerFørFødsel > 15;\n        const startdatoFpFørFødsel = Uttaksdagen(førsteUttaksdag).trekkFra(\n            merEnnTreUkerPermisjonFørFødsel ? 15 : dagerFørFødsel\n        );\n\n        if (merEnnTreUkerPermisjonFørFødsel) {\n            const ekstraPeriodeFørFødsel: Periode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder: Forelder.mor,\n                konto: StønadskontoType.Foreldrepenger,\n                tidsperiode: getTidsperiode(startdatoPermisjon, dagerFørFødsel - 15),\n                vedlegg: [],\n            };\n\n            perioder.push(ekstraPeriodeFørFødsel);\n        }\n\n        const periodeFørFødsel: Periode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.mor,\n            konto: foreldrePengerFørFødselKonto.konto,\n            tidsperiode: {\n                fom: startdatoFpFørFødsel,\n                tom: Uttaksdagen(førsteUttaksdag).forrige(),\n            },\n            vedlegg: [],\n        };\n\n        perioder.push(periodeFørFødsel);\n    } else {\n        const periodeFørFødsel: Periode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.mor,\n            konto: StønadskontoType.ForeldrepengerFørFødsel,\n            skalIkkeHaUttakFørTermin: true,\n            tidsperiode: {} as any,\n            vedlegg: [],\n        };\n\n        perioder.push(periodeFørFødsel);\n    }\n\n    const ekstraPermisjonFørFødsel = perioder.find(\n        (p) => isUttaksperiode(p) && p.konto === StønadskontoType.Foreldrepenger\n    );\n\n    const antallDagerIForeldrepenger = ekstraPermisjonFørFødsel\n        ? getTidsperiode(\n              førsteUttaksdag,\n              foreldrepengerKonto.dager - Tidsperioden(ekstraPermisjonFørFødsel.tidsperiode).getAntallUttaksdager()\n          )\n        : getTidsperiode(førsteUttaksdag, foreldrepengerKonto.dager);\n\n    const foreldrepengerPeriode: Periode = {\n        id: guid(),\n        type: Periodetype.Uttak,\n        forelder: Forelder.mor,\n        konto: foreldrepengerKonto.konto,\n        tidsperiode: antallDagerIForeldrepenger,\n        vedlegg: [],\n        gradert: false,\n    };\n\n    perioder.push(foreldrepengerPeriode);\n\n    return perioder.sort(sorterPerioder);\n};\n\nconst ikkeDeltUttakFødselFarMedmor = (\n    famDato: Date,\n    foreldrepengerKonto: TilgjengeligStønadskonto,\n    startdatoPermisjon: Date | undefined,\n    erMorUfør: boolean | undefined,\n    aktivitetsfriKvote: TilgjengeligStønadskonto | undefined,\n    bareFarMedmorHarRett: boolean,\n    termindato: Date | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n) => {\n    const startDato = Uttaksdagen(startdatoPermisjon || famDato).denneEllerNeste();\n    const morHarRett = false;\n    const perioder: Periode[] = [];\n\n    if (erMorUfør !== true) {\n        let startDatoNestePeriode = startDato;\n        if (andreAugust2022ReglerGjelder(famDato) && !!bareFarMedmorHarRett) {\n            const aktivitetsFriPeriode: Uttaksperiode = {\n                id: guid(),\n                type: Periodetype.Uttak,\n                forelder: Forelder.farMedmor,\n                konto: StønadskontoType.AktivitetsfriKvote,\n                tidsperiode: getTidsperiode(startDato, aktivitetsfriKvote!.dager),\n                vedlegg: [],\n                harIkkeAktivitetskrav: true,\n            };\n            if (\n                farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato(\n                    aktivitetsFriPeriode,\n                    famDato,\n                    morHarRett,\n                    termindato\n                )\n            ) {\n                const aktivitetsFriePerioder = splittUttaksperiodePåFamiliehendelsesdato(aktivitetsFriPeriode, famDato);\n                aktivitetsFriePerioder.forEach((periode) => perioder.push(periode));\n            } else if (\n                førsteUttaksdagNesteBarnsSak !== undefined &&\n                tidperiodeOverlapperDato(aktivitetsFriPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n            ) {\n                const aktivitetsFriePerioder = splittPeriodePåDato(aktivitetsFriPeriode, førsteUttaksdagNesteBarnsSak);\n                aktivitetsFriePerioder.forEach((periode) => perioder.push(periode));\n            } else {\n                perioder.push(aktivitetsFriPeriode);\n            }\n            startDatoNestePeriode = Uttaksdagen(aktivitetsFriPeriode.tidsperiode.tom).neste();\n        }\n\n        const periode: Uttaksperiode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: foreldrepengerKonto.konto,\n            tidsperiode: getTidsperiode(startDatoNestePeriode, foreldrepengerKonto.dager),\n            vedlegg: [],\n            gradert: false,\n        };\n\n        perioder.push(periode);\n    } else {\n        const aktivitetsFriPeriode: Uttaksperiode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: StønadskontoType.AktivitetsfriKvote,\n            tidsperiode: getTidsperiode(startDato, aktivitetsfriKvote!.dager),\n            vedlegg: [],\n            gradert: false,\n            harIkkeAktivitetskrav: true,\n        };\n\n        if (\n            farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato(\n                aktivitetsFriPeriode,\n                famDato,\n                morHarRett,\n                termindato\n            )\n        ) {\n            const aktivitetsFriePerioder = splittUttaksperiodePåFamiliehendelsesdato(aktivitetsFriPeriode, famDato);\n            aktivitetsFriePerioder.forEach((periode) => perioder.push(periode));\n        } else {\n            perioder.push(aktivitetsFriPeriode);\n        }\n\n        const aktivitetskravPeriode: Uttaksperiode = {\n            id: guid(),\n            type: Periodetype.Uttak,\n            forelder: Forelder.farMedmor,\n            konto: StønadskontoType.Foreldrepenger,\n            tidsperiode: getTidsperiode(\n                Uttaksdagen(aktivitetsFriPeriode.tidsperiode.tom).neste(),\n                foreldrepengerKonto.dager\n            ),\n            vedlegg: [],\n            gradert: false,\n        };\n        perioder.push(aktivitetskravPeriode);\n    }\n\n    return perioder.sort(sorterPerioder);\n};\n\nconst ikkeDeltUttakFødsel = (\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    foreldrepengerKonto: TilgjengeligStønadskonto,\n    startdatoPermisjon: Date | undefined,\n    foreldrePengerFørFødselKonto: TilgjengeligStønadskonto | undefined,\n    erMorUfør: boolean | undefined,\n    aktivitetsfriKvote: TilgjengeligStønadskonto | undefined,\n    bareFarMedmorHarRett: boolean,\n    termindato: Date | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n) => {\n    if (!erFarEllerMedmor) {\n        return ikkeDeltUttakFødselMor(famDato, foreldrepengerKonto, startdatoPermisjon, foreldrePengerFørFødselKonto!);\n    } else {\n        return ikkeDeltUttakFødselFarMedmor(\n            famDato,\n            foreldrepengerKonto,\n            startdatoPermisjon,\n            erMorUfør,\n            aktivitetsfriKvote,\n            bareFarMedmorHarRett,\n            termindato,\n            førsteUttaksdagNesteBarnsSak\n        );\n    }\n};\n\nexport const ikkeDeltUttak = (\n    situasjon: Situasjon,\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    startdatoPermisjon: Date | undefined,\n    erMorUfør: boolean | undefined,\n    bareFarMedmorHarRett: boolean,\n    termindato: Date | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n) => {\n    const foreldrepengerKonto = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.Foreldrepenger\n    );\n    const foreldrePengerFørFødselKonto = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.ForeldrepengerFørFødsel\n    );\n    const aktivitetsfriKvote = tilgjengeligeStønadskontoer.find(\n        (konto) => konto.konto === StønadskontoType.AktivitetsfriKvote\n    );\n\n    if (situasjon === 'adopsjon') {\n        return ikkeDeltUttakAdopsjon(\n            famDato,\n            erFarEllerMedmor,\n            foreldrepengerKonto!,\n            startdatoPermisjon,\n            erMorUfør,\n            aktivitetsfriKvote,\n            bareFarMedmorHarRett,\n            førsteUttaksdagNesteBarnsSak\n        );\n    }\n\n    if (situasjon === 'fødsel') {\n        return ikkeDeltUttakFødsel(\n            famDato,\n            erFarEllerMedmor,\n            foreldrepengerKonto!,\n            startdatoPermisjon,\n            foreldrePengerFørFødselKonto,\n            erMorUfør,\n            aktivitetsfriKvote,\n            bareFarMedmorHarRett,\n            termindato,\n            førsteUttaksdagNesteBarnsSak\n        );\n    }\n\n    return [];\n};\n","import { Situasjon } from 'app/types/Situasjon';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { UttaksplanSkjemadata } from 'app/types/UttaksplanSkjemaData';\nimport { finnOgSettInnHull } from 'uttaksplan/builder/uttaksplanbuilderUtils';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport { ISOStringToDate } from '../dateUtils';\nimport { deltUttak } from './deltUttak';\nimport { ikkeDeltUttak } from './ikkeDeltUttak';\n\nexport interface LagUttaksplanParams {\n    situasjon: Situasjon;\n    familiehendelsesdato: Date;\n    erDeltUttak: boolean;\n    erEndringssøknad: boolean;\n    søkerErFarEllerMedmor: boolean;\n    annenForelderErUfør: boolean;\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[];\n    uttaksplanSkjema: UttaksplanSkjemadata;\n    erEnkelEndringssøknad: boolean;\n    førsteUttaksdagEtterSeksUker: Date;\n    søkerHarMidlertidigOmsorg: boolean;\n    bareFarMedmorHarRett: boolean;\n    harAktivitetskravIPeriodeUtenUttak: boolean;\n    termindato: Date | undefined;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n    annenForelderHarRettPåForeldrepengerIEØS?: boolean;\n}\n\nexport const lagUttaksplan = (params: LagUttaksplanParams): Periode[] => {\n    const {\n        situasjon,\n        familiehendelsesdato,\n        erDeltUttak,\n        erEndringssøknad,\n        søkerErFarEllerMedmor,\n        annenForelderErUfør,\n        tilgjengeligeStønadskontoer,\n        uttaksplanSkjema,\n        bareFarMedmorHarRett,\n        termindato,\n        harAktivitetskravIPeriodeUtenUttak,\n        annenForelderHarRettPåForeldrepengerIEØS,\n        førsteUttaksdagNesteBarnsSak,\n    } = params;\n\n    if (uttaksplanSkjema.ønskerIkkeFlerePerioder || erEndringssøknad) {\n        return [];\n    }\n    const erAdopsjon = situasjon === 'adopsjon';\n\n    const {\n        harAnnenForelderSøktFP,\n        startdatoPermisjon,\n        fellesperiodeukerMor,\n        antallDagerFellesperiodeFarMedmor,\n        antallUkerFellesperiodeFarMedmor,\n        morSinSisteUttaksdag,\n        farSinFørsteUttaksdag,\n        begrunnelseForUtsettelse,\n    } = uttaksplanSkjema;\n\n    const morSinSisteUttaksdagDate = ISOStringToDate(morSinSisteUttaksdag);\n    if (familiehendelsesdato) {\n        if (erDeltUttak) {\n            const forslag = deltUttak({\n                situasjon,\n                famDato: familiehendelsesdato,\n                erFarEllerMedmor: søkerErFarEllerMedmor,\n                tilgjengeligeStønadskontoer,\n                startdatoPermisjon: ISOStringToDate(startdatoPermisjon),\n                fellesperiodeukerMor,\n                harAnnenForelderSøktFP,\n                antallDagerFellesperiodeFarMedmor,\n                antallUkerFellesperiodeFarMedmor,\n                morSinSisteUttaksdag: morSinSisteUttaksdagDate,\n                farSinFørsteUttaksdag: ISOStringToDate(farSinFørsteUttaksdag),\n                begrunnelseForUtsettelse,\n                annenForelderHarRettPåForeldrepengerIEØS,\n                termindato,\n                førsteUttaksdagNesteBarnsSak,\n            });\n\n            return finnOgSettInnHull(\n                forslag,\n                harAktivitetskravIPeriodeUtenUttak,\n                familiehendelsesdato,\n                erAdopsjon,\n                søkerErFarEllerMedmor && !erDeltUttak,\n                søkerErFarEllerMedmor,\n                førsteUttaksdagNesteBarnsSak\n            );\n        } else {\n            const forslag = ikkeDeltUttak(\n                situasjon,\n                familiehendelsesdato,\n                søkerErFarEllerMedmor,\n                tilgjengeligeStønadskontoer,\n                ISOStringToDate(startdatoPermisjon),\n                annenForelderErUfør,\n                bareFarMedmorHarRett,\n                termindato,\n                førsteUttaksdagNesteBarnsSak\n            );\n\n            return finnOgSettInnHull(\n                forslag,\n                harAktivitetskravIPeriodeUtenUttak,\n                familiehendelsesdato,\n                erAdopsjon,\n                søkerErFarEllerMedmor && !erDeltUttak,\n                søkerErFarEllerMedmor,\n                førsteUttaksdagNesteBarnsSak\n            );\n        }\n    }\n\n    return [];\n};\n","import { isUttaksperiode, Periode } from 'uttaksplan/types/Periode';\n\ninterface HarAktivitetskravIPeriodeUtenUttakParams {\n    erDeltUttak: boolean;\n    morHarRett: boolean;\n    søkerErAleneOmOmsorg: boolean;\n}\n\nexport const getHarAktivitetskravIPeriodeUtenUttak = ({\n    erDeltUttak,\n    morHarRett,\n    søkerErAleneOmOmsorg,\n}: HarAktivitetskravIPeriodeUtenUttakParams) => {\n    return !erDeltUttak && !morHarRett && !søkerErAleneOmOmsorg;\n};\n\nexport const uttaksplanInneholderPerioderUtenKonto = (uttaksplan: Periode[]): boolean => {\n    return uttaksplan.find((periode) => isUttaksperiode(periode) && periode.konto === undefined) !== undefined;\n};\n"],"names":["PageKeys","logAmplitudeEvent","eventName","eventData","arguments","length","undefined","setTimeout","amplitude","logEvent","error","console","log","getFarHarRettINorge","erFarMedmor","annenForelder","isAnnenForelderOppgitt","harRettPåForeldrepengerINorge","getMorHarRettINorge","getAnnenForelderHarRettIEØS","harRettPåForeldrepengerIEØS","getTermindatoSomSkalBrukes","barn","termindatoSaksgrunnlag","isFødtBarn","isUfødtBarn","dateToISOString","termindato","getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter","termindatoSaksgrunnlagAnnenPart","getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter","erFarEllerMedmor","antallBarnSaksgrunnlag","antallBarnSaksgrunnlagAnnenPart","getStønadskontoParams","dekningsgrad","søkersituasjon","farHarAleneomsorg","morHarAleneomsorg","familieHendelseDatoNesteSak","antallBarn","oppgittTermindato","isFarEllerMedmor","rolle","familiehendelsesdato","ISOStringToDate","getFamiliehendelsedato","søkerErFarEllerMedmor","toString","startdatoUttak","farHarRettINorge","morHarRettINorge","harAnnenForelderTilsvarendeRettEØS","fødselsdato","fødselsdatoer","omsorgsovertakelsesdato","isAdoptertAnnetBarn","isAdoptertStebarn","adopsjonsdato","minsterett","andreAugust2022ReglerGjelder","erMor","morHarUføretrygd","getErMorUfør","Fieldset","_ref","legend","className","children","React","style","display","flexDirection","border","padding","margin","Element","LenkeKnapp","text","_onClick","onClick","e","preventDefault","Normaltekst","Personkort","tittel","ikon","invertert","_ref$textValign","textValign","bem","bemUtils","classNames","block","modifierConditional","modifier","concat","element","MAKS_PERMISJONSLENGDE_I_ÅR","MAKS_FERIEDAGER_ETT_ÅR","MAKS_FERIEDAGER_MED_OVERFØRING","ANTALL_UKER_MØDREKVOTE_ETTER_FØDSEL","ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL","MAKS_ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL","ANTALL_UKER_FORELDREPENGER_BARE_FAR_HAR_RETT_100_PROSENT","ANTALL_UKER_FORELDREPENGER_BARE_FAR_HAR_RETT_80_PROSENT","ANTALL_UKER_2_BARN_100_PROSENT_UTTAK","ANTALL_UKER_2_BARN_80_PROSENT_UTTAK","ANTALL_UKER_3_ELLER_FLERE_BARN_100_PROSENT_UTTAK","ANTALL_UKER_3_ELLER_FLERE_BARN_80_PROSENT_UTTAK","getPreviousStepHrefEndringssøknad","id","href","assertUnreachable","getPreviousStepHref","stepConfig","intl","index","label","intlUtils","FarMedmorFødselBeggeHarRettFormField","FarMedmorFødselBeggeHarRettFormComponents","getTypedFormComponents","initialFarMedmorFødselBeggeHarRettValues","_defineProperty","_initialFarMedmorFøds","morsSisteDag","antallUkerFellesperiode","antallDagerFellesperiode","mapFarMedmorFødselBeggeHarRettToState","values","trim","farMedmorsFørsteDag","getInitialFarMedmorFødselBeggeHarRettValues","state","_objectSpread","includeFellesperiodeSpørsmål","hasValue","dayjs","isAfter","getSisteUttaksdag6UkerEtterFødsel","FarMedmorFødselBeggeHarRettFormConfig","_FarMedmorFødselBegge","isIncluded","isAnswered","_ref2","_ref3","visibilityFilter","_ref4","_ref5","_ref6","_ref7","_ref8","Questions","MorsSisteDagSpørsmål","FormComponents","fieldName","navnMor","useIntl","maxDate","uttaksplanDatoavgrensninger","minDate","DatePicker","name","showYearSelector","disableWeekend","placeholder","FarMedmorsFørsteDag","setFieldValue","situasjon","morHarRettTilForeldrepengerIEØS","Block","padBottom","validate","validateStartdatoFarMedmor","FormattedMessage","navn","dato","formatDate","Uttaksdagen","neste","farSinFørsteUttaksdag","RangeIcon","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","_createClass","key","value","renderPlusIcon","d","fill","renderMinusIcon","render","icon","this","props","type","focusable","role","width","height","viewBox","stroke","strokeWidth","fillRule","delay","minZoomTouchDelta","lastTapAt","lastClientX","lastClientY","preventDoubleTapZoom","event","touches","tapAt","Date","getTime","timeDiff","_event$touches$","clientX","clientY","xDiff","Math","abs","yDiff","target","click","AriaText","tagName","tag","Sirkelknapp","ariaLabel","toggle","disabled","_ref$stil","stil","_ref$size","size","posisjoneringFraHøyre","labelId","guid","left","onTouchStart","classnames","pressed","getNumberFromStringInput","input","getNumberFromNumberInputValue","AntallUkerOgDagerFellesperiodeFarMedmorSpørsmål","ukerFieldName","dagerFieldName","antallDager","antallUker","ukerMedFellesperiode","SkjemaGruppe","description","UtvidetInformasjon","apneLabel","parseInt","trekkFraUke","currentAntall","min","number","round","NumberInput","integerValue","bredde","step","leggTilUke","max","trekkFraDag","leggTilDag","FarMedmorFødselFørsteganggsøknadBeggeHarRett","tilgjengeligeStønadskontoer100DTO","tilgjengeligeStønadskontoer80DTO","useForeldrepengesøknadContext","_useSøknad","useSøknad","erEndringssøknad","person","useSøkerinfo","erFødsel","lagretUttaksplanInfo","useUttaksplanInfo","navnFar","fornavn","erMorUfør","tilgjengeligeStønadskontoer","getValgtStønadskontoFor80Og100Prosent","familiehendelsesdatoDate","getTermindato","førsteUttaksdagNesteBarnsSak","barnFraNesteSak","startdatoFørsteStønadsperiode","_useOnValidSubmit","useOnValidSubmit","onValidSubmitHandler","getAntallUker","actionCreator","getDekningsgradFromString","lagUttaksplan","annenForelderErUfør","erDeltUttak","erEnkelEndringssøknad","førsteUttaksdagEtterSeksUker","denneEllerNeste","leggTil","søkerHarMidlertidigOmsorg","uttaksplanSkjema","morSinSisteUttaksdag","antallDagerFellesperiodeFarMedmor","antallUkerFellesperiodeFarMedmor","bareFarMedmorHarRett","harAktivitetskravIPeriodeUtenUttak","SøknadRoutes","storeAppState","handleSubmit","isSubmitting","FormikWrapper","initialValues","onSubmit","renderForm","formValues","visibility","farMedmorFødselBeggeHarRettQuestionsConfig","valgtStønadskonto","tilgjengeligeDager","getTilgjengeligeDager","Forelder","Form","includeButtons","includeValidationSummary","Veilederpanel","fargetema","svg","VeilederNormal","transparentBackground","getNavnGenitivEierform","locale","DekningsgradSpørsmål","FormKomponent","dekningsgradFeltNavn","visible","TilgjengeligeDagerGraf","navnFarMedmor","isVisible","dagerFelles","areAllQuestionsAnswered","textAlignCenter","Hovedknapp","spinner","MorFødselFormField","MorFødselFormComponents","initialMorFødselValues","_initialMorFødselValu","permisjonStartdato","fellesperiodeukerMor","getInitialMorFødselValues","defaultPermisjonStartdato","validateErStartdatoFørTermindato","familiehendelsedato","skalIkkeHaUttakFørTermin","isISODateString","erUttaksdag","avgrensninger","isBefore","uker","uttaksConstants","VeilederStartdatoPermisjon","startdato","antallDagerFørFødselIhtRegler","førsteMuligeStartdato","visKunFeil","ugyldigDatoÅrsak","getÅrsakDersomUgyldigStartdato","msg","formaterDato","varighet","getVarighetString","erFeilmelding","Veileder","farge","ansikt","StartdatoPermisjonMor","erBarnFødt","spørsmålNår","spørsmålHaddeIkke","toDate","sisteUttaksdagFørTermin","forrige","tidsperiode","getValidTidsperiode","fom","tom","Tidsperioden","getAntallUttaksdager","visVeileder","datoAvgrensninger","maksDato","dayPickerProps","initialMonth","getVarighetForStartdato","barnetErFødt","Checkbox","autoComplete","RangeStepper","direction","defaultValueLabelRenderer","options","defaultBottomContentRenderer","RangeInput","_this","_assertThisInitialized","call","handleBlur","bind","handleFocus","deactivateIfOutside","active","_e","_this2","container","setState","window","document","activeElement","contains","_this3","_this$props","hjelpetekst","ariaLabelText","inputId","valueLabelRenderer","steppers","ariaValueChangedMessage","bottomContentRenderer","hjelpetekstApneLabel","_this$props$valueLabe","valueLabelPlacement","rest","_objectWithoutProperties","_excluded","_this$props2","_onChange","onChange","labelRenderer","ariaLabelId","bottomRenderer","bemWrapper","bemRangeInput","bemStepper","ref","c","onBlur","onFocus","reduceLabel","_extends","increaseLabel","FordelingFellesperiodeSpørsmål","valgtFellesperiodeukerMor","annenForelderErFarEllerMedmor","mor","farMedmor","getAntallUkerFellesperiode","useEffect","ukerFellesperiode","floor","antallUkerFedreKvote","getAntallUkerFedrekvote","antallUkerMødreKvote","getAntallUkerMødrekvote","infotekst","pakrevdForelder1","pakrevdForelder2","navnForelder1","navnForelder2","annenForeldersNavn","Lenke","lenker","formatMessage","ukerForelder","ukerTotalt","navnForelder","Ingress","MorFødselFormConfig","_MorFødselFormConfig","erAleneOmOmsorg","morFødselQuestionsConfig","leggTilAnnenPartsPerioderISøkerenesUttaksplan","annenPartsPerioder","uttaksplan","erAdopsjon","bareFarHarRett","_normaliserPerioder","normaliserPerioder","normaliserteEgnePerioder","normaliserteAnnenPartsPerioder","forEach","p","isUttaksperiode","overlappendePerioderAnnenPart","Periodene","finnOverlappendePerioder","overlappendePeriodeAnnenPart","isUttakAnnenPart","ønskerSamtidigUttak","samtidigUttakProsent","finnOgSettInnHull","settInnAnnenPartsUttak","MorFødsel","eksisterendeSakFar","søker","_useSøkerinfo$person","mellomnavn","etternavn","getFødselsdato","visInfoOmPrematuruker","skalViseInfoOmPrematuruker","ekstraDagerGrunnetPrematurFødsel","oppgittAnnenForelder","erUfør","formaterNavn","førsteUttaksdag","trekkFra","uttaksplanMedAnnenPart","submissionValues","mapMorFødselFormToState","uttaksplanforslag","startdatoPermisjon","getHarAktivitetskravIPeriodeUtenUttak","morHarRett","søkerErAleneOmOmsorg","getVisbility","antallprematuruker","antallprematurdager","getFlerbarnsuker","AdopsjonStartdatoValg","finnEnum","valg","ANKOMST","OMSORGSOVERTAKELSE","ANNEN","MorFarAdopsjonFormField","MorFarAdopsjonFormComponents","initialMorFarAdopsjonValues","_initialMorFarAdopsjo","YesOrNo","startdatoAdopsjonValg","annenStartdatoAdopsjon","annenForeldersSisteDag","getInitialMorFarAdopsjonValues","_objectSpread2","harAnnenForelderSøktFP","MorFarAdopsjonFormConfig","_MorFarAdopsjonFormCo","harAnnenForelderRettPåForeldrepengerINorge","_ref9","_ref10","_ref11","søkersFørsteDag","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","morFarAdopsjonQuestionsConfig","validateErAnnenStartdatoAdopsjonGyldig","finnStartdatoAdopsjon","ankomstdato","konverterStringTilDate","invalidDateRanges","map","r","from","to","StartdatoAdopsjon","valgtStartdatoAdopsjon","radios","push","formaterDatoUtenDag","isAdoptertBarn","RadioPanelGroup","useTwoColumns","disabledDateRanges","weekendsNotSelectable","MorFarAdopsjon","annenForelderOppgittIkkeAleneOmOmsorg","shouldRender","kanIkkeOppgis","mapMorFarAdopsjonFormToState","convertYesOrNoOrUndefinedToBoolean","barnAdopsjonsdato","erSøkerMor","fornavnAnnenForeldre","erAnnenPartUfør","navnAnnenPart","navnSøker","erAdoptertIUtlandet","adoptertIUtlandet","latestDate","findEldsteDato","YesOrNoQuestion","navnAnnenForelder","dateIsSameOrAfter","MorFarAdopsjonAnnenForelderHarRettIEØSFormField","MorFarAdopsjonAnnenForelderHarRettIEØSFormComponents","MorFarAdopsjonAnnenForelderHarRettIEØSFormConfig","_MorFarAdopsjonAnnenF","morFarAdopsjonAnnenForelderHarRettIEØSQuestionsConfig","initialMorFarAdopsjonAnnenForelderHarRettIEØSValues","getInitialMorFarAdopsjonAnnenForelderHarRettIEØSValues","MorFarAdopsjonAnnenForelderHarRettIEØS","mapMorFarAdopsjonAnnenForelderHarRettIEØSFormToState","annenForelderHarRettPåForeldrepengerIEØS","MorFarFødselAnnenForelderHarRettIEØSFormField","MorFarFødselAnnenForelderHarRettIEØSFormComponents","MorFarFødselAnnenForelderHarRettIEØSFormConfig","_MorFarFødselAnnenFor","morFarFødselAnnenForelderHarRettIEØSQuestionsConfig","initialMorFarFødselAnnenForelderHarRettIEØSValues","_initialMorFarFødselA","getInitialMorFarFødselAnnenForelderHarRettIEØSValues","MorFarFødselAnnenForelderHarRettIEØS","mapMorFarFødselAnnenForelderHarRettIEØSFormToState","FarMedmorAleneomsorgFødselFormField","FarMedmorAleneomsorgFødselFormComponents","FarMedmorAleneomsorgFødselFormConfig","_FarMedmorAleneomsorg","startPåOmsorgsovertakelse","initialFarMedmorAleneomsorgFødselValues","_initialFarMedmorAlen","getInitialFarMedmorAleneomsorgFødselValues","datoForAleneomsorg","startetPåOmsorgsovertakelse","isSame","validateStartdatoUttakFarMedmorAleneomsorgFødsel","isDateABeforeDateB","FarMedmorAleneomsorgFødsel","uttaksplanInfo","mapFarMedmorAleneomsorgFødselFormToState","kontoerForValgtDekningsgrad","farMedmorAleneomsorgFødselAdopsjonQuestionsConfig","labels","yes","no","FarMedmorFørstegangssøknadMedAnnenPartFormField","FarMedmorFørstegangssøknadMedAnnenPartFormComponents","FarMedmorFørstegangssøknadMedAnnenPartFormConfig","farMedmorFørstegangssøknadMedAnnenPartQuestionsConfig","getFarMedmorFørstegangssøknadMedAnnenPartInitialValues","FarMedmorFørstegangssøknadMedAnnenPart","eksisterendeSakAnnenPart","søknad","familiehendelsedatoDate","getMorHarRettPåForeldrepengerINorgeEllerEØS","morsSisteUttaksdag","stønadskontoer","grunnlag","farMedmorSinePerioder","filter","isInfoPeriode","forelder","reverse","valgtMengdeStønadskonto","InfoOmSøknaden","eksisterendeSak","erIUttaksplanenSteg","UttaksplanInfoScenarios","annenForelderHarRett","annenForelderHarRettIEØS","harAnnenForelderRettIEØS","scenario","getUttaksplanScenario","annenForelderKanIkkeOppgis","FarMedmorAleneomsorgFødselAdopsjon","FarMedmorFødselOgMorHarIkkeRett","UttaksplanInfo","_barn$fnr","_useForeldrepengesøkn","dispatch","annenPartFnr","utenlandskFnr","fnr","eksisterendeSakAnnenPartRequestIsSuspended","barnFnr","_Api$useGetAnnenParts","Api","eksisterendeSakAnnenPartData","eksisterendeSakAnnenPartError","eksisterendeSakAnnenPartRequestStatus","farMedmorErAleneOmOmsorg","getFarMedmorErAleneOmOmsorg","morErAleneOmOmsorg","getMorErAleneOmOmsorg","eksisterendeVedtakAnnenPart","useMemo","mapAnnenPartsEksisterendeSakFromDTO","useSaveLoadedRoute","saksgrunnlagsTermindato","saksgrunnlagsAntallBarn","søknadMedOppdatertAntallBarn","_Api$useGetUttakskont","Dekningsgrad","RequestStatus","stønadskontoer100","tilgjengeligeStønadskontoerData","tilgjengeligeStønadskontoerError","stønadskontoer80","onAvbrytSøknad","useAvbrytSøknad","onFortsettSøknadSenere","useFortsettSøknadSenere","sendErrorMessageToSentry","Error","Step","bannerTitle","backLinkHref","activeStepId","pageTitle","stepTitle","onCancel","onContinueLater","steps","kompakt","textAlign","NavFrontendSpinner","FarMedmorFødselOgMorHarIkkeRettFormField","FarMedmorFødselOgMorHarIkkeRettFormComponents","initialFarMedmorFødselOgMorHarIkkeRettValues","mapFarMedmorFødselOgMorHarIkkeRettFormToState","getInitialFarMedmorFødselOgMorHarIkkeRettValues","FarMedmorFødselOgMorHarIkkeRettFormConfig","_FarMedmorFødselOgMor","farMedmorFødselOgMorHarIkkeRettQuestionsConfig","annenForelderHarIkkeRett","startDatoUttaksplan","datoAvgrensinger","minDato","maxDato","formatDateExtended","spørsmålTekst","UttaksplanHexColor","getBarStyle","color","color2","background","Multibar","leftBar","rightBar","centerBar","borderColor","DeltOmsorgGraf","fordeling","getProsentFordelingPerDel","inkluderForeldrepengerFørTermin","pstMultiplikator","dagerTotalt","dagerEtterTermin","pstMor","dagerMor","dagerForeldrepengerFørFødsel","pstFarMedmor","dagerFarMedmor","pstFelles","txtMor","navnEierform","graa","lilla","blaa","paddingTop","AleneomsorgGraf","txt","dagerForeldrepenger","position","summerAntallDagerIKontoer","kontoer","reduce","dager","konto","kontoErFørTermin","StønadskontoType","kontoErEtterTermin","forelderVedAleneomsorg","kontoerEtterTermin","getForeldrepengeKontoer","getMorsStønadskontoer","dagerFar","getFarsStønadskontoer","getFellesStønadskontoer","dagerKunTilMor","maksDagerFar","maksDagerMor","sisteMuligePermisjonsdag","startDato","add","konverterMinOgMaxDatoerTilString","defaultPermisjonsperiodeAvgrensning","startdatoFørTermin","startdatoPermisjonFarMedmor","defaultAvgrensning","getFørsteUttaksdag2UkerFørFødsel","startdatoPermisjonAdopsjon","startdatoPermisjonAleneomsorgFarMedmor","startdatoFørTerminForeldrepengerFørFødselKonto","ekstrauttakFørFødsel","sisteDagFørFødsel","uttaksplanHarForMangeFlerbarnsdager","slice","periode","ønskerFlerbarnsdager","sum","finnAntallDagerÅTrekke","convertBooleanOrUndefinedToYesOrNo","navigate","useNavigate","søkerinfo","useCallback","app","team","hendelse","location","Environment","mapTilgjengeligStønadskontoDTOToTilgjengeligStønadskonto","stønadskontoerDTO","Object","keys","generellMinsterett","minsteretter","opprettAktivitetsFriKonto","nyeKontoer","kontoer80","kontoer100","åttiProsent","hundreProsent","fødselsdatoEtterEllerLikFørsteJuli","isSameOrAfter","deltUttakAdopsjon","famDato","begrunnelseForUtsettelse","deltUttakAdopsjonSøktSist","deltUttakFødselFarMedmor","deltUttakAdopsjonSøktFørst","perioder","kontoType","find","k","currentTomDate","periodeMødrekvote","Periodetype","getTidsperiode","gradert","tidperiodeOverlapperDato","splittPeriodePåDato","periodeFellesperiode","sort","sorterPerioder","morHarRettPåForeldrepengerIEØS","startDatoUttak","sisteUttaksDag","fedrekvoteKonto","fellesKonto","skalFarUtsetteEtterMorSinSisteUttaksdag","årsak","erArbeidstaker","erPeriodeWLBRundtFødsel","starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel","lengdePåForeslåttUttak","getLengdePåForeslåttWLBUttakFarMedmor","fedrekvotePeriode","farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato","splittUttaksperiodePåFamiliehendelsesdato","fellesPeriode","deltUttakFødsel","tilgjengeligeStønadskontoerUtenFPP","deltUttakFødselMor","ønsketStartdatoPermisjon","skalHaForeldrePengerFørFødsel","fpFørFødselKonto","mkKonto","dagerFørFødsel","getUttaksdagerFremTilDato","merEnnTreUkerPermisjonFørFødsel","startdatoFpFørFødsel","ekstraPeriodeFørFødsel","vedlegg","periodeFørFødsel","_periodeFørFødsel","ekstraPermisjonFørFødsel","trekkEkstraPermisjonDager","periodeFellesperiodeMor","ikkeDeltUttakAdopsjon","foreldrepengerKonto","aktivitetsfriKvote","ikkeDeltUttakAdopsjonFarMedmor","startDatoNestePeriode","aktivitetsFriPeriode","harIkkeAktivitetskrav","sp","_aktivitetsFriPeriode","aktivitetskravPeriode","ikkeDeltUttakAdopsjonMor","ikkeDeltUttakFødsel","foreldrePengerFørFødselKonto","ikkeDeltUttakFødselFarMedmor","_aktivitetsFriPeriode2","ikkeDeltUttakFødselMor","antallDagerIForeldrepenger","foreldrepengerPeriode","params","ønskerIkkeFlerePerioder","morSinSisteUttaksdagDate","forslag","deltUttak","_forslag","ikkeDeltUttak","uttaksplanInneholderPerioderUtenKonto"],"sourceRoot":""}