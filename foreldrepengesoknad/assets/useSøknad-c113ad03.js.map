{"version":3,"file":"useSøknad-c113ad03.js","sources":["../../../../node_modules/.pnpm/react-router-dom@6.10.0_react-dom@18.2.0_react@18.2.0/node_modules/react-router-dom/dist/index.js","../../src/app/context/types/Barn.ts","../../src/app/utils/isFarEllerMedmor.ts","../../src/app/utils/barnUtils.ts","../../src/app/utils/hooks/useSøknad.ts"],"sourcesContent":["/**\n * React Router DOM v6.10.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nimport * as React from 'react';\nimport { UNSAFE_detectErrorBoundary, Router, UNSAFE_NavigationContext, useHref, useResolvedPath, useLocation, UNSAFE_DataRouterStateContext, useNavigate, createPath, UNSAFE_RouteContext, useMatches, useNavigation, unstable_useBlocker, UNSAFE_DataRouterContext } from 'react-router';\nexport { AbortedDeferredError, Await, MemoryRouter, Navigate, NavigationType, Outlet, Route, Router, RouterProvider, Routes, UNSAFE_DataRouterContext, UNSAFE_DataRouterStateContext, UNSAFE_LocationContext, UNSAFE_NavigationContext, UNSAFE_RouteContext, createMemoryRouter, createPath, createRoutesFromChildren, createRoutesFromElements, defer, generatePath, isRouteErrorResponse, json, matchPath, matchRoutes, parsePath, redirect, renderMatches, resolvePath, unstable_useBlocker, useActionData, useAsyncError, useAsyncValue, useHref, useInRouterContext, useLoaderData, useLocation, useMatch, useMatches, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useRoutes } from 'react-router';\nimport { createRouter, createBrowserHistory, createHashHistory, ErrorResponse, stripBasename, UNSAFE_warning, UNSAFE_invariant, joinPaths } from '@remix-run/router';\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nconst defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\nfunction isHtmlElement(object) {\n  return object != null && typeof object.tagName === \"string\";\n}\nfunction isButtonElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\nfunction isFormElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\nfunction isInputElement(object) {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nfunction shouldProcessLinkClick(event, target) {\n  return event.button === 0 && ( // Ignore everything but left clicks\n  !target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n  !isModifiedEvent(event) // Ignore clicks with modifier keys\n  ;\n}\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\n\nfunction createSearchParams(init) {\n  if (init === void 0) {\n    init = \"\";\n  }\n\n  return new URLSearchParams(typeof init === \"string\" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {\n    let value = init[key];\n    return memo.concat(Array.isArray(value) ? value.map(v => [key, v]) : [[key, value]]);\n  }, []));\n}\nfunction getSearchParamsForLocation(locationSearch, defaultSearchParams) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    for (let key of defaultSearchParams.keys()) {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach(value => {\n          searchParams.append(key, value);\n        });\n      }\n    }\n  }\n\n  return searchParams;\n}\nfunction getFormSubmissionInfo(target, defaultAction, options) {\n  let method;\n  let action;\n  let encType;\n  let formData;\n\n  if (isFormElement(target)) {\n    let submissionTrigger = options.submissionTrigger;\n    method = options.method || target.getAttribute(\"method\") || defaultMethod;\n    action = options.action || target.getAttribute(\"action\") || defaultAction;\n    encType = options.encType || target.getAttribute(\"enctype\") || defaultEncType;\n    formData = new FormData(target);\n\n    if (submissionTrigger && submissionTrigger.name) {\n      formData.append(submissionTrigger.name, submissionTrigger.value);\n    }\n  } else if (isButtonElement(target) || isInputElement(target) && (target.type === \"submit\" || target.type === \"image\")) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\"Cannot submit a <button> or <input type=\\\"submit\\\"> without a <form>\");\n    } // <button>/<input type=\"submit\"> may override attributes of <form>\n\n\n    method = options.method || target.getAttribute(\"formmethod\") || form.getAttribute(\"method\") || defaultMethod;\n    action = options.action || target.getAttribute(\"formaction\") || form.getAttribute(\"action\") || defaultAction;\n    encType = options.encType || target.getAttribute(\"formenctype\") || form.getAttribute(\"enctype\") || defaultEncType;\n    formData = new FormData(form); // Include name + value from a <button>, appending in case the button name\n    // matches an existing input name\n\n    if (target.name) {\n      formData.append(target.name, target.value);\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\"Cannot submit element that is not <form>, <button>, or \" + \"<input type=\\\"submit|image\\\">\");\n  } else {\n    method = options.method || defaultMethod;\n    action = options.action || defaultAction;\n    encType = options.encType || defaultEncType;\n\n    if (target instanceof FormData) {\n      formData = target;\n    } else {\n      formData = new FormData();\n\n      if (target instanceof URLSearchParams) {\n        for (let [name, value] of target) {\n          formData.append(name, value);\n        }\n      } else if (target != null) {\n        for (let name of Object.keys(target)) {\n          formData.append(name, target[name]);\n        }\n      }\n    }\n  }\n\n  let {\n    protocol,\n    host\n  } = window.location;\n  let url = new URL(action, protocol + \"//\" + host);\n  return {\n    url,\n    method: method.toLowerCase(),\n    encType,\n    formData\n  };\n}\n\nconst _excluded = [\"onClick\", \"relative\", \"reloadDocument\", \"replace\", \"state\", \"target\", \"to\", \"preventScrollReset\"],\n      _excluded2 = [\"aria-current\", \"caseSensitive\", \"className\", \"end\", \"style\", \"to\", \"children\"],\n      _excluded3 = [\"reloadDocument\", \"replace\", \"method\", \"action\", \"onSubmit\", \"fetcherKey\", \"routeId\", \"relative\", \"preventScrollReset\"];\nfunction createBrowserRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: opts == null ? void 0 : opts.future,\n    history: createBrowserHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    detectErrorBoundary: UNSAFE_detectErrorBoundary\n  }).initialize();\n}\nfunction createHashRouter(routes, opts) {\n  return createRouter({\n    basename: opts == null ? void 0 : opts.basename,\n    future: opts == null ? void 0 : opts.future,\n    history: createHashHistory({\n      window: opts == null ? void 0 : opts.window\n    }),\n    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),\n    routes,\n    detectErrorBoundary: UNSAFE_detectErrorBoundary\n  }).initialize();\n}\n\nfunction parseHydrationData() {\n  var _window;\n\n  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;\n\n  if (state && state.errors) {\n    state = _extends({}, state, {\n      errors: deserializeErrors(state.errors)\n    });\n  }\n\n  return state;\n}\n\nfunction deserializeErrors(errors) {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized = {};\n\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponse(val.status, val.statusText, val.data, val.internal === true);\n    } else if (val && val.__type === \"Error\") {\n      let error = new Error(val.message); // Wipe away the client-side stack trace.  Nothing to fill it in with\n      // because we don't serialize SSR stack traces for security reasons\n\n      error.stack = \"\";\n      serialized[key] = error;\n    } else {\n      serialized[key] = val;\n    }\n  }\n\n  return serialized;\n}\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\n\n\nfunction BrowserRouter(_ref) {\n  let {\n    basename,\n    children,\n    window\n  } = _ref;\n  let historyRef = React.useRef();\n\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({\n      window,\n      v5Compat: true\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\n\nfunction HashRouter(_ref2) {\n  let {\n    basename,\n    children,\n    window\n  } = _ref2;\n  let historyRef = React.useRef();\n\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({\n      window,\n      v5Compat: true\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\n\nfunction HistoryRouter(_ref3) {\n  let {\n    basename,\n    children,\n    history\n  } = _ref3;\n  const [state, setState] = React.useState({\n    action: history.action,\n    location: history.location\n  });\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename,\n    children: children,\n    location: state.location,\n    navigationType: state.action,\n    navigator: history\n  });\n}\n\nif (process.env.NODE_ENV !== \"production\") {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n/**\n * The public API for rendering a history-aware <a>.\n */\n\nconst Link = /*#__PURE__*/React.forwardRef(function LinkWithRef(_ref4, ref) {\n  let {\n    onClick,\n    relative,\n    reloadDocument,\n    replace,\n    state,\n    target,\n    to,\n    preventScrollReset\n  } = _ref4,\n      rest = _objectWithoutPropertiesLoose(_ref4, _excluded);\n\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext); // Rendered into <a href> for absolute URLs\n\n  let absoluteHref;\n  let isExternal = false;\n\n  if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n    // Render the absolute href server- and client-side\n    absoluteHref = to; // Only check for external origins client-side\n\n    if (isBrowser) {\n      let currentUrl = new URL(window.location.href);\n      let targetUrl = to.startsWith(\"//\") ? new URL(currentUrl.protocol + to) : new URL(to);\n      let path = stripBasename(targetUrl.pathname, basename);\n\n      if (targetUrl.origin === currentUrl.origin && path != null) {\n        // Strip the protocol/origin/basename for same-origin absolute URLs\n        to = path + targetUrl.search + targetUrl.hash;\n      } else {\n        isExternal = true;\n      }\n    }\n  } // Rendered into <a href> for relative URLs\n\n\n  let href = useHref(to, {\n    relative\n  });\n  let internalOnClick = useLinkClickHandler(to, {\n    replace,\n    state,\n    target,\n    preventScrollReset,\n    relative\n  });\n\n  function handleClick(event) {\n    if (onClick) onClick(event);\n\n    if (!event.defaultPrevented) {\n      internalOnClick(event);\n    }\n  }\n\n  return (\n    /*#__PURE__*/\n    // eslint-disable-next-line jsx-a11y/anchor-has-content\n    React.createElement(\"a\", _extends({}, rest, {\n      href: absoluteHref || href,\n      onClick: isExternal || reloadDocument ? onClick : handleClick,\n      ref: ref,\n      target: target\n    }))\n  );\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  Link.displayName = \"Link\";\n}\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\n\n\nconst NavLink = /*#__PURE__*/React.forwardRef(function NavLinkWithRef(_ref5, ref) {\n  let {\n    \"aria-current\": ariaCurrentProp = \"page\",\n    caseSensitive = false,\n    className: classNameProp = \"\",\n    end = false,\n    style: styleProp,\n    to,\n    children\n  } = _ref5,\n      rest = _objectWithoutPropertiesLoose(_ref5, _excluded2);\n\n  let path = useResolvedPath(to, {\n    relative: rest.relative\n  });\n  let location = useLocation();\n  let routerState = React.useContext(UNSAFE_DataRouterStateContext);\n  let {\n    navigator\n  } = React.useContext(UNSAFE_NavigationContext);\n  let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;\n  let locationPathname = location.pathname;\n  let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;\n\n  if (!caseSensitive) {\n    locationPathname = locationPathname.toLowerCase();\n    nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;\n    toPathname = toPathname.toLowerCase();\n  }\n\n  let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(toPathname.length) === \"/\";\n  let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === \"/\");\n  let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n  let className;\n\n  if (typeof classNameProp === \"function\") {\n    className = classNameProp({\n      isActive,\n      isPending\n    });\n  } else {\n    // If the className prop is not a function, we use a default `active`\n    // class for <NavLink />s that are active. In v5 `active` was the default\n    // value for `activeClassName`, but we are removing that API and can still\n    // use the old default behavior for a cleaner upgrade path and keep the\n    // simple styling rules working as they currently do.\n    className = [classNameProp, isActive ? \"active\" : null, isPending ? \"pending\" : null].filter(Boolean).join(\" \");\n  }\n\n  let style = typeof styleProp === \"function\" ? styleProp({\n    isActive,\n    isPending\n  }) : styleProp;\n  return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {\n    \"aria-current\": ariaCurrent,\n    className: className,\n    ref: ref,\n    style: style,\n    to: to\n  }), typeof children === \"function\" ? children({\n    isActive,\n    isPending\n  }) : children);\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  NavLink.displayName = \"NavLink\";\n}\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\n\n\nconst Form = /*#__PURE__*/React.forwardRef((props, ref) => {\n  return /*#__PURE__*/React.createElement(FormImpl, _extends({}, props, {\n    ref: ref\n  }));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  Form.displayName = \"Form\";\n}\n\nconst FormImpl = /*#__PURE__*/React.forwardRef((_ref6, forwardedRef) => {\n  let {\n    reloadDocument,\n    replace,\n    method = defaultMethod,\n    action,\n    onSubmit,\n    fetcherKey,\n    routeId,\n    relative,\n    preventScrollReset\n  } = _ref6,\n      props = _objectWithoutPropertiesLoose(_ref6, _excluded3);\n\n  let submit = useSubmitImpl(fetcherKey, routeId);\n  let formMethod = method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n  let formAction = useFormAction(action, {\n    relative\n  });\n\n  let submitHandler = event => {\n    onSubmit && onSubmit(event);\n    if (event.defaultPrevented) return;\n    event.preventDefault();\n    let submitter = event.nativeEvent.submitter;\n    let submitMethod = (submitter == null ? void 0 : submitter.getAttribute(\"formmethod\")) || method;\n    submit(submitter || event.currentTarget, {\n      method: submitMethod,\n      replace,\n      relative,\n      preventScrollReset\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", _extends({\n    ref: forwardedRef,\n    method: formMethod,\n    action: formAction,\n    onSubmit: reloadDocument ? onSubmit : submitHandler\n  }, props));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  FormImpl.displayName = \"FormImpl\";\n}\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\n\n\nfunction ScrollRestoration(_ref7) {\n  let {\n    getKey,\n    storageKey\n  } = _ref7;\n  useScrollRestoration({\n    getKey,\n    storageKey\n  });\n  return null;\n}\n\nif (process.env.NODE_ENV !== \"production\") {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\n\nvar DataRouterHook;\n\n(function (DataRouterHook) {\n  DataRouterHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n  DataRouterHook[\"UseSubmitImpl\"] = \"useSubmitImpl\";\n  DataRouterHook[\"UseFetcher\"] = \"useFetcher\";\n})(DataRouterHook || (DataRouterHook = {}));\n\nvar DataRouterStateHook;\n\n(function (DataRouterStateHook) {\n  DataRouterStateHook[\"UseFetchers\"] = \"useFetchers\";\n  DataRouterStateHook[\"UseScrollRestoration\"] = \"useScrollRestoration\";\n})(DataRouterStateHook || (DataRouterStateHook = {}));\n\nfunction getDataRouterConsoleError(hookName) {\n  return hookName + \" must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.\";\n}\n\nfunction useDataRouterContext(hookName) {\n  let ctx = React.useContext(UNSAFE_DataRouterContext);\n  !ctx ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return ctx;\n}\n\nfunction useDataRouterState(hookName) {\n  let state = React.useContext(UNSAFE_DataRouterStateContext);\n  !state ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, getDataRouterConsoleError(hookName)) : UNSAFE_invariant(false) : void 0;\n  return state;\n}\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\n\n\nfunction useLinkClickHandler(to, _temp) {\n  let {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative\n  } = _temp === void 0 ? {} : _temp;\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, {\n    relative\n  });\n  return React.useCallback(event => {\n    if (shouldProcessLinkClick(event, target)) {\n      event.preventDefault(); // If the URL hasn't changed, a regular <a> will do a replace instead of\n      // a push, so do the same here unless the replace prop is explicitly set\n\n      let replace = replaceProp !== undefined ? replaceProp : createPath(location) === createPath(path);\n      navigate(to, {\n        replace,\n        state,\n        preventScrollReset,\n        relative\n      });\n    }\n  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative]);\n}\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\n\nfunction useSearchParams(defaultInit) {\n  process.env.NODE_ENV !== \"production\" ? UNSAFE_warning(typeof URLSearchParams !== \"undefined\", \"You cannot use the `useSearchParams` hook in a browser that does not \" + \"support the URLSearchParams API. If you need to support Internet \" + \"Explorer 11, we recommend you load a polyfill such as \" + \"https://github.com/ungap/url-search-params\\n\\n\" + \"If you're unsure how to load polyfills, we recommend you check out \" + \"https://polyfill.io/v3/ which provides some recommendations about how \" + \"to load polyfills only for users that need them, instead of for every \" + \"user.\") : void 0;\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n  let location = useLocation();\n  let searchParams = React.useMemo(() => // Only merge in the defaults if we haven't yet called setSearchParams.\n  // Once we call that we want those to take precedence, otherwise you can't\n  // remove a param with setSearchParams({}) if it has an initial value\n  getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current), [location.search]);\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback((nextInit, navigateOptions) => {\n    const newSearchParams = createSearchParams(typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit);\n    hasSetSearchParamsRef.current = true;\n    navigate(\"?\" + newSearchParams, navigateOptions);\n  }, [navigate, searchParams]);\n  return [searchParams, setSearchParams];\n}\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\n\nfunction useSubmit() {\n  return useSubmitImpl();\n}\n\nfunction useSubmitImpl(fetcherKey, routeId) {\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseSubmitImpl);\n  let defaultAction = useFormAction();\n  return React.useCallback(function (target, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (typeof document === \"undefined\") {\n      throw new Error(\"You are calling submit during the server render. \" + \"Try calling submit within a `useEffect` or callback instead.\");\n    }\n\n    let {\n      method,\n      encType,\n      formData,\n      url\n    } = getFormSubmissionInfo(target, defaultAction, options);\n    let href = url.pathname + url.search;\n    let opts = {\n      replace: options.replace,\n      preventScrollReset: options.preventScrollReset,\n      formData,\n      formMethod: method,\n      formEncType: encType\n    };\n\n    if (fetcherKey) {\n      !(routeId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for useFetcher()\") : UNSAFE_invariant(false) : void 0;\n      router.fetch(fetcherKey, routeId, href, opts);\n    } else {\n      router.navigate(href, opts);\n    }\n  }, [defaultAction, router, fetcherKey, routeId]);\n}\n\nfunction useFormAction(action, _temp2) {\n  let {\n    relative\n  } = _temp2 === void 0 ? {} : _temp2;\n  let {\n    basename\n  } = React.useContext(UNSAFE_NavigationContext);\n  let routeContext = React.useContext(UNSAFE_RouteContext);\n  !routeContext ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFormAction must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  let [match] = routeContext.matches.slice(-1); // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n\n  let path = _extends({}, useResolvedPath(action ? action : \".\", {\n    relative\n  })); // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params and the hash of the resolved\n  // URL. This is the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n\n\n  let location = useLocation();\n\n  if (action == null) {\n    // Safe to write to these directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    // or hash\n    path.search = location.search;\n    path.hash = location.hash; // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n\n    if (match.route.index) {\n      let params = new URLSearchParams(path.search);\n      params.delete(\"index\");\n      path.search = params.toString() ? \"?\" + params.toString() : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n  } // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n\n\n  if (basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nfunction createFetcherForm(fetcherKey, routeId) {\n  let FetcherForm = /*#__PURE__*/React.forwardRef((props, ref) => {\n    return /*#__PURE__*/React.createElement(FormImpl, _extends({}, props, {\n      ref: ref,\n      fetcherKey: fetcherKey,\n      routeId: routeId\n    }));\n  });\n\n  if (process.env.NODE_ENV !== \"production\") {\n    FetcherForm.displayName = \"fetcher.Form\";\n  }\n\n  return FetcherForm;\n}\n\nlet fetcherId = 0;\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\n\nfunction useFetcher() {\n  var _route$matches;\n\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let route = React.useContext(UNSAFE_RouteContext);\n  !route ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher must be used inside a RouteContext\") : UNSAFE_invariant(false) : void 0;\n  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;\n  !(routeId != null) ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"useFetcher can only be used on routes that contain a unique \\\"id\\\"\") : UNSAFE_invariant(false) : void 0;\n  let [fetcherKey] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => {\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.Form()\") : UNSAFE_invariant(false) : void 0;\n    return createFetcherForm(fetcherKey, routeId);\n  });\n  let [load] = React.useState(() => href => {\n    !router ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No router available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\n    !routeId ? process.env.NODE_ENV !== \"production\" ? UNSAFE_invariant(false, \"No routeId available for fetcher.load()\") : UNSAFE_invariant(false) : void 0;\n    router.fetch(fetcherKey, routeId, href);\n  });\n  let submit = useSubmitImpl(fetcherKey, routeId);\n  let fetcher = router.getFetcher(fetcherKey);\n  let fetcherWithComponents = React.useMemo(() => _extends({\n    Form,\n    submit,\n    load\n  }, fetcher), [fetcher, Form, submit, load]);\n  React.useEffect(() => {\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => {\n      if (!router) {\n        console.warn(\"No fetcher available to clean up from useFetcher()\");\n        return;\n      }\n\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n  return fetcherWithComponents;\n}\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\n\nfunction useFetchers() {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return [...state.fetchers.values()];\n}\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions = {};\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\n\nfunction useScrollRestoration(_temp3) {\n  let {\n    getKey,\n    storageKey\n  } = _temp3 === void 0 ? {} : _temp3;\n  let {\n    router\n  } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let {\n    restoreScrollPosition,\n    preventScrollReset\n  } = useDataRouterState(DataRouterStateHook.UseScrollRestoration);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation(); // Trigger manual scroll restoration while we're active\n\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []); // Save positions on pagehide\n\n  usePageHide(React.useCallback(() => {\n    if (navigation.state === \"idle\") {\n      let key = (getKey ? getKey(location, matches) : null) || location.key;\n      savedScrollPositions[key] = window.scrollY;\n    }\n\n    sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));\n    window.history.scrollRestoration = \"auto\";\n  }, [storageKey, getKey, navigation.state, location, matches])); // Read in any saved scroll locations\n\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);\n\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {// no-op, use default empty object\n      }\n    }, [storageKey]); // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n\n    React.useLayoutEffect(() => {\n      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKey);\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, getKey]); // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      } // been here before, scroll to it\n\n\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      } // try to scroll to the hash\n\n\n      if (location.hash) {\n        let el = document.getElementById(location.hash.slice(1));\n\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      } // Don't reset if this navigation opted out\n\n\n      if (preventScrollReset === true) {\n        return;\n      } // otherwise go to the top on new locations\n\n\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\n\nfunction useBeforeUnload(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\n\nfunction usePageHide(callback, options) {\n  let {\n    capture\n  } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? {\n      capture\n    } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\n\n\nfunction usePrompt(_ref8) {\n  let {\n    when,\n    message\n  } = _ref8;\n  let blocker = unstable_useBlocker(when);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n\n      if (proceed) {\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n}\n //#endregion\n\nexport { BrowserRouter, Form, HashRouter, Link, NavLink, ScrollRestoration, useScrollRestoration as UNSAFE_useScrollRestoration, createBrowserRouter, createHashRouter, createSearchParams, HistoryRouter as unstable_HistoryRouter, usePrompt as unstable_usePrompt, useBeforeUnload, useFetcher, useFetchers, useFormAction, useLinkClickHandler, useSearchParams, useSubmit };\n//# sourceMappingURL=index.js.map\n","import { Attachment } from 'app/types/Attachment';\n\nexport enum BarnType {\n    FØDT = 'født',\n    UFØDT = 'ufødt',\n    ADOPTERT_STEBARN = 'adoptertStebarn',\n    ADOPTERT_ANNET_BARN = 'adoptertAnnetBarn',\n    IKKE_UTFYLT = 'ikkeUtfylt',\n}\n\ninterface Common {\n    type: BarnType;\n    antallBarn: number;\n    dokumentasjonAvAleneomsorg?: Attachment[];\n    datoForAleneomsorg?: Date;\n}\n\nexport interface IkkeUtfyltTypeBarn extends Common {\n    type: BarnType.IKKE_UTFYLT;\n    fødselsdatoer: Date[];\n    fnr?: string[];\n}\n\nexport interface FødtBarn extends Common {\n    type: BarnType.FØDT;\n    fødselsdatoer: Date[];\n    termindato?: Date;\n    fnr?: string[];\n}\n\nexport interface UfødtBarn extends Common {\n    type: BarnType.UFØDT;\n    termindato: Date;\n    terminbekreftelse?: Attachment[];\n    terminbekreftelsedato?: Date;\n}\n\nexport interface AdoptertBarn extends Common {\n    type: BarnType.ADOPTERT_STEBARN | BarnType.ADOPTERT_ANNET_BARN;\n    adopsjonsdato: Date;\n    fødselsdatoer: Date[];\n    omsorgsovertakelse: Attachment[];\n    fnr?: string[];\n}\n\nexport interface AdoptertStebarn extends AdoptertBarn {\n    type: BarnType.ADOPTERT_STEBARN;\n}\n\nexport interface AdoptertAnnetBarn extends AdoptertBarn {\n    type: BarnType.ADOPTERT_ANNET_BARN;\n    adoptertIUtlandet: boolean;\n    ankomstdato?: Date;\n}\n\nexport type Barn = FødtBarn | UfødtBarn | AdoptertBarn | AdoptertStebarn | AdoptertAnnetBarn | IkkeUtfyltTypeBarn;\n\nexport interface BarnFraNesteSak {\n    familiehendelsesdato: Date;\n    startdatoFørsteStønadsperiode: Date;\n    fnr: string[] | undefined;\n    annenForelderFnr: string | undefined;\n}\n\nexport const isIkkeUtfyltTypeBarn = (barn: Barn): barn is IkkeUtfyltTypeBarn => {\n    return barn.type === BarnType.IKKE_UTFYLT;\n};\n\nexport const isFødtBarn = (barn: Barn): barn is FødtBarn => {\n    return barn.type === BarnType.FØDT;\n};\n\nexport const isUfødtBarn = (barn: Barn): barn is UfødtBarn => {\n    return barn.type === BarnType.UFØDT;\n};\n\nexport const isAdoptertBarn = (barn: Barn): barn is AdoptertBarn => {\n    return barn.type === BarnType.ADOPTERT_STEBARN || barn.type === BarnType.ADOPTERT_ANNET_BARN;\n};\n\nexport const isAdoptertStebarn = (barn: Barn): barn is AdoptertStebarn => {\n    return barn.type === BarnType.ADOPTERT_STEBARN;\n};\n\nexport const isAdoptertAnnetBarn = (barn: Barn): barn is AdoptertAnnetBarn => {\n    return barn.type === BarnType.ADOPTERT_ANNET_BARN;\n};\n\nexport default Barn;\n","import { Søkerrolle } from 'app/types/Søkerrolle';\n\nconst isFarEllerMedmor = (rolle: Søkerrolle) => {\n    if (rolle === 'far' || rolle === 'medmor') {\n        return true;\n    }\n\n    return false;\n};\n\nexport default isFarEllerMedmor;\n","import { formatDate, intlUtils } from '@navikt/fp-common';\nimport { dateToISOString } from '@navikt/sif-common-formik-ds/lib';\nimport Barn, { isFødtBarn, isIkkeUtfyltTypeBarn, isUfødtBarn } from 'app/context/types/Barn';\nimport { RegistrertBarn } from 'app/types/Person';\nimport dayjs from 'dayjs';\nimport utc from 'dayjs/plugin/utc';\nimport { IntlShape } from 'react-intl';\n\ndayjs.extend(utc);\n\nexport const getFamiliehendelsedato = (barn: Barn): string => {\n    if (isFødtBarn(barn) || isIkkeUtfyltTypeBarn(barn)) {\n        return dateToISOString(barn.fødselsdatoer[0]);\n    }\n    if (isUfødtBarn(barn)) {\n        return dateToISOString(barn.termindato);\n    }\n\n    return dateToISOString(barn.adopsjonsdato);\n};\n\nconst barnFødselsdatoLikSakFødselsdato = (fødselsdatoer: Date[] | undefined, regBarnFødselsdato: Date | undefined) => {\n    return fødselsdatoer !== undefined && regBarnFødselsdato !== undefined\n        ? fødselsdatoer.find((fødselsdato) => dayjs(fødselsdato).isSame(regBarnFødselsdato)) !== undefined\n        : false;\n};\n\nexport const getRegistrerteBarnOmDeFinnes = (\n    barn: Barn,\n    registrerteBarn: RegistrertBarn[]\n): RegistrertBarn[] | undefined => {\n    return registrerteBarn.length > 0 && !isUfødtBarn(barn)\n        ? registrerteBarn.filter(\n              (regBarn) =>\n                  barn.fnr?.includes(regBarn.fnr) ||\n                  barnFødselsdatoLikSakFødselsdato(barn.fødselsdatoer, regBarn.fødselsdato)\n          )\n        : undefined;\n};\n\nexport const getTermindato = (barn: Barn): Date | undefined => {\n    return isFødtBarn(barn) || isUfødtBarn(barn) ? barn.termindato : undefined;\n};\n\nexport const getFødselsdato = (barn: Barn): Date | undefined => {\n    return isFødtBarn(barn) ? barn.fødselsdatoer[0] : undefined;\n};\n\nexport const getDødeBarnetForMerEnn3MånederSiden = (registrerteBarn: RegistrertBarn) => {\n    const dato3MånederTilbake = dayjs(new Date()).subtract(3, 'month');\n    return (\n        registrerteBarn.dødsdato !== undefined && dayjs(registrerteBarn.dødsdato).isBefore(dato3MånederTilbake, 'day')\n    );\n};\n\nexport const getTekstForAntallBarn = (antallBarn: number, intl: IntlShape): string => {\n    if (antallBarn === 1) {\n        return intlUtils(intl, 'barn');\n    } else if (antallBarn === 2) {\n        return intlUtils(intl, 'tvillinger');\n    } else if (antallBarn === 3) {\n        return intlUtils(intl, 'trillinger');\n    }\n    return intlUtils(intl, 'flerlinger');\n};\n\nexport const getLeverBarnet = (barn: RegistrertBarn) => {\n    return !barn.dødsdato;\n};\n\nexport const getAndreBarnFødtSammenMedBarnet = (\n    barnFnr: string | undefined,\n    barnFødselsdato: Date,\n    registrerteBarn: RegistrertBarn[]\n) => {\n    const dagenFørFødsel = dayjs(barnFødselsdato).subtract(1, 'day');\n    const dagenEtterFødsel = dayjs(barnFødselsdato).add(1, 'day');\n    return registrerteBarn.filter(\n        (b) =>\n            b.fnr !== barnFnr &&\n            dayjs(b.fødselsdato).isSameOrAfter(dagenFørFødsel, 'day') &&\n            dayjs(b.fødselsdato).isSameOrBefore(dagenEtterFødsel, 'day')\n    );\n};\n\nexport const getTittelBarnNårNavnSkalIkkeVises = (\n    omsorgsovertagelsesdato: Date | undefined,\n    fødselsdatoer: Date[] | undefined,\n    antallBarn: number,\n    intl: IntlShape\n): string => {\n    if (omsorgsovertagelsesdato !== undefined) {\n        return intlUtils(intl, 'velkommen.barnVelger.adoptertBarn', {\n            adopsjonsdato: formatDate(omsorgsovertagelsesdato),\n        });\n    } else {\n        const fødselsdatoTekst = formaterFødselsdatoerPåBarn(fødselsdatoer);\n        const barnTekst = getTekstForAntallBarn(antallBarn, intl);\n\n        return fødselsdatoer !== undefined && fødselsdatoer.length > 0\n            ? intlUtils(intl, 'velkommen.barnVelger.fødtBarn.barn', {\n                  barnTekst,\n                  fødselsdato: fødselsdatoTekst,\n              })\n            : '';\n    }\n};\n\nexport const formaterNavnPåBarn = (\n    fornavn: string[] | undefined,\n    fødselsdatoer: Date[] | undefined,\n    omsorgsovertagelsesdato: Date | undefined,\n    alleBarnaLever: boolean,\n    antallBarn: number,\n    intl: IntlShape\n): string => {\n    if (fornavn === undefined || fornavn.length === 0 || !alleBarnaLever) {\n        return getTittelBarnNårNavnSkalIkkeVises(omsorgsovertagelsesdato, fødselsdatoer, antallBarn, intl);\n    }\n\n    if (fornavn.length > 1) {\n        const fornavnene = fornavn.slice(0, -1).join(', ');\n        const sisteFornavn = fornavn[fornavn.length - 1];\n        return `${fornavnene} og ${sisteFornavn}`;\n    }\n    return `${fornavn[0]}`;\n};\n\nexport const formaterFødselsdatoerPåBarn = (fødselsdatoer: Date[] | undefined): string | undefined => {\n    if (fødselsdatoer === undefined) {\n        return undefined;\n    }\n    const unikeFødselsdatoer = [] as Date[];\n    fødselsdatoer.forEach((f) => {\n        const finnesIUnikeFødselsdatoer = unikeFødselsdatoer.find((dato) => dayjs(dato).isSame(f, 'day'));\n        if (finnesIUnikeFødselsdatoer === undefined) {\n            unikeFødselsdatoer.push(f);\n        }\n    });\n\n    if (unikeFødselsdatoer.length > 1) {\n        const fødselsdatoerTekst = unikeFødselsdatoer.map((fd) => formatDate(fd));\n        const førsteFødselsdaoer = fødselsdatoerTekst.slice(0, -1).join(', ');\n        const sisteFødselsdato = fødselsdatoerTekst[fødselsdatoerTekst.length - 1];\n        return `${førsteFødselsdaoer} og ${sisteFødselsdato}`;\n    }\n    return formatDate(unikeFødselsdatoer[0]);\n};\n","import { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport { Søknad } from 'app/context/types/Søknad';\n\nconst useSøknad = (): Søknad => {\n    const { state } = useForeldrepengesøknadContext();\n    return state.søknad;\n};\n\nexport default useSøknad;\n"],"names":["BrowserRouter","_ref","basename","children","window","historyRef","React.useRef","createBrowserHistory","history","state","setState","React.useState","React.useLayoutEffect","React.createElement","Router","DataRouterHook","DataRouterStateHook","BarnType","isIkkeUtfyltTypeBarn","barn","isFødtBarn","isUfødtBarn","isAdoptertBarn","isAdoptertStebarn","isAdoptertAnnetBarn","isFarEllerMedmor","rolle","dayjs","utc","getFamiliehendelsedato","dateToISOString","barnFødselsdatoLikSakFødselsdato","fødselsdatoer","regBarnFødselsdato","fødselsdato","getRegistrerteBarnOmDeFinnes","registrerteBarn","regBarn","_a","getTermindato","getFødselsdato","getDødeBarnetForMerEnn3MånederSiden","dato3MånederTilbake","getTekstForAntallBarn","antallBarn","intl","intlUtils","getLeverBarnet","getAndreBarnFødtSammenMedBarnet","barnFnr","barnFødselsdato","dagenFørFødsel","dagenEtterFødsel","b","getTittelBarnNårNavnSkalIkkeVises","omsorgsovertagelsesdato","formatDate","fødselsdatoTekst","formaterFødselsdatoerPåBarn","barnTekst","formaterNavnPåBarn","fornavn","alleBarnaLever","fornavnene","sisteFornavn","unikeFødselsdatoer","f","dato","fødselsdatoerTekst","fd","førsteFødselsdaoer","sisteFødselsdato","useSøknad","useForeldrepengesøknadContext"],"mappings":"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","x_google_ignoreList":[0]}