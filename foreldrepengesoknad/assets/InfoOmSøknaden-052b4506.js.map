{"version":3,"file":"InfoOmSøknaden-052b4506.js","sources":["../../src/app/steps/uttaksplan-info/utils/stønadskontoer.ts","../../src/app/types/ForeldreparSituasjonTypes.ts","../../src/app/utils/foreldreparSituasjonUtils.ts","../../src/app/components/info-eksisterende-sak/illustrasjoner/situasjon-sirkel/SituasjonSirkel.tsx","../../src/app/components/info-eksisterende-sak/InfoEksisterendePerioder.tsx","../../src/app/components/info-eksisterende-sak/InfoOmSøknaden.tsx"],"sourcesContent":["import { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\n\nexport const getVelgbareStønadskontotyper = (stønadskontoTyper: TilgjengeligStønadskonto[]): StønadskontoType[] =>\n    stønadskontoTyper\n        .filter(\n            (kontoType) =>\n                kontoType.konto === StønadskontoType.Fellesperiode ||\n                kontoType.konto === StønadskontoType.Fedrekvote ||\n                kontoType.konto === StønadskontoType.Mødrekvote ||\n                kontoType.konto === StønadskontoType.Foreldrepenger ||\n                kontoType.konto === StønadskontoType.AktivitetsfriKvote\n        )\n        .map((kontoType) => kontoType.konto);\n\nexport const getStønadskontoSortOrder = (konto: StønadskontoType): number => (stønadskontoSortOrder as any)[konto];\n\nexport const stønadskontoSortOrder = {\n    [StønadskontoType.ForeldrepengerFørFødsel]: 1,\n    [StønadskontoType.Mødrekvote]: 2,\n    [StønadskontoType.Fedrekvote]: 3,\n    [StønadskontoType.Fellesperiode]: 4,\n    [StønadskontoType.Foreldrepenger]: 5,\n    [StønadskontoType.AktivitetsfriKvote]: 6,\n};\n\nexport const getAntallUker = (kontoer: TilgjengeligStønadskonto[]): number => {\n    return kontoer.reduce((sum: number, konto: TilgjengeligStønadskonto) => sum + konto.dager / 5, 0);\n};\n\nexport const getAntallUkerMødrekvote = (kontoer: TilgjengeligStønadskonto[]): number => {\n    return kontoer\n        .filter((konto: TilgjengeligStønadskonto) => konto.konto === StønadskontoType.Mødrekvote)\n        .reduce((sum: number, konto: TilgjengeligStønadskonto) => sum + konto.dager / 5, 0);\n};\n\nexport const getAntallUkerFedrekvote = (kontoer: TilgjengeligStønadskonto[]): number => {\n    return kontoer\n        .filter((konto: TilgjengeligStønadskonto) => konto.konto === StønadskontoType.Fedrekvote)\n        .reduce((sum: number, konto: TilgjengeligStønadskonto) => sum + konto.dager / 5, 0);\n};\n\nexport const getAntallUkerFellesperiode = (kontoer: TilgjengeligStønadskonto[]): number => {\n    return kontoer\n        .filter((konto: TilgjengeligStønadskonto) => konto.konto === StønadskontoType.Fellesperiode)\n        .reduce((sum: number, konto: TilgjengeligStønadskonto) => sum + konto.dager / 5, 0);\n};\n\nexport const getAntallUkerMinsterett = (minsteRettDager: number | undefined): number | undefined => {\n    if (minsteRettDager !== undefined) {\n        return minsteRettDager / 5;\n    }\n    return undefined;\n};\n","export type ForeldreparForelder = 'far1' | 'far2' | 'far3' | 'far4' | 'medmor1' | 'medmor2' | 'mor1' | 'mor2';\n\nexport type ForeldreparIllustrasjonsvariant =\n    | 'førsteForelderHalvtSynlig'\n    | 'andreForelderHalvtSynlig'\n    | 'foreldreSeparert'\n    | 'foreldreNærmere';\n\nexport enum ForeldreparSituasjon {\n    farOgMor = 'farOgMor',\n    bareFar = 'bareFar',\n    bareMor = 'bareMor',\n    aleneomsorg = 'aleneomsorg',\n    aleneomsorgMedmor = 'aleneomsorgMedmor',\n    farOgFar = 'farOgFar',\n    morOgMedmor = 'morOgMedmor',\n    bareMedmor = 'bareMedmor',\n}\n","import { Kjønn } from '@navikt/fp-common';\nimport { ForeldreparSituasjon } from 'app/types/ForeldreparSituasjonTypes';\nimport { SituasjonForelderSvg } from 'app/types/SituasjonForelderSvg';\nimport { Søkerrolle } from 'app/types/Søkerrolle';\n\nexport const getForeldreparSituasjon = (\n    søkerKjønn: Kjønn,\n    annenForelderKjønn: Kjønn | undefined,\n    erDeltUttak: boolean,\n    morErAleneOmOmsorg: boolean,\n    farMedmorErAleneOmOmsorg: boolean,\n    rolle: Søkerrolle\n): ForeldreparSituasjon => {\n    if (erDeltUttak) {\n        if (annenForelderKjønn === undefined && rolle === 'medmor') {\n            return ForeldreparSituasjon.morOgMedmor;\n        }\n        if (søkerKjønn !== annenForelderKjønn) {\n            return ForeldreparSituasjon.farOgMor;\n        }\n        return søkerKjønn === 'M' ? ForeldreparSituasjon.farOgFar : ForeldreparSituasjon.morOgMedmor;\n    } else {\n        if (søkerKjønn === 'K') {\n            if (morErAleneOmOmsorg) {\n                return ForeldreparSituasjon.aleneomsorg;\n            }\n            if (farMedmorErAleneOmOmsorg) {\n                return ForeldreparSituasjon.aleneomsorgMedmor;\n            }\n            return rolle === 'mor' ? ForeldreparSituasjon.bareMor : ForeldreparSituasjon.bareMedmor;\n        } else {\n            return farMedmorErAleneOmOmsorg ? ForeldreparSituasjon.aleneomsorg : ForeldreparSituasjon.bareFar;\n        }\n    }\n};\n\nexport const getAntallForeldreISituasjon = (situasjon: ForeldreparSituasjon) => {\n    switch (situasjon) {\n        case ForeldreparSituasjon.aleneomsorg:\n        case ForeldreparSituasjon.aleneomsorgMedmor:\n        case ForeldreparSituasjon.bareFar:\n        case ForeldreparSituasjon.bareMor:\n        case ForeldreparSituasjon.bareMedmor:\n            return 1;\n        default:\n            return 2;\n    }\n};\n\nexport const getSituasjonForelderSvg = (situasjon: ForeldreparSituasjon): SituasjonForelderSvg => {\n    switch (situasjon) {\n        case ForeldreparSituasjon.farOgMor:\n            return {\n                mor: 'mor1',\n                farMedmor: 'far1',\n            };\n        case ForeldreparSituasjon.bareFar:\n            return {\n                mor: 'mor1',\n                farMedmor: 'far1',\n                variant: 'førsteForelderHalvtSynlig',\n            };\n        case ForeldreparSituasjon.bareMor:\n            return {\n                mor: 'mor1',\n                farMedmor: 'far1',\n                variant: 'andreForelderHalvtSynlig',\n            };\n        case ForeldreparSituasjon.bareMedmor:\n            return {\n                mor: 'mor1',\n                farMedmor: 'medmor2',\n                variant: 'førsteForelderHalvtSynlig',\n            };\n        case ForeldreparSituasjon.aleneomsorg:\n            return {\n                mor: 'mor2',\n                farMedmor: 'far2',\n                variant: 'foreldreSeparert',\n            };\n        case ForeldreparSituasjon.aleneomsorgMedmor:\n            return {\n                mor: 'mor2',\n                farMedmor: 'medmor2',\n                variant: 'foreldreSeparert',\n            };\n        case ForeldreparSituasjon.morOgMedmor:\n            return {\n                mor: 'medmor2',\n                farMedmor: 'medmor1',\n            };\n        case ForeldreparSituasjon.farOgFar:\n            return {\n                mor: 'far3',\n                farMedmor: 'far4',\n            };\n    }\n};\n","import React from 'react';\nimport { Forelder } from 'app/types/Forelder';\nimport { bemUtils } from '@navikt/fp-common';\nimport { ForeldreparSituasjon } from 'app/types/ForeldreparSituasjonTypes';\nimport Sirkelmaske from 'app/components/sirkelmaske/Sirkelmaske';\nimport { getAntallForeldreISituasjon, getSituasjonForelderSvg } from 'app/utils/foreldreparSituasjonUtils';\nimport Foreldrepar from 'app/components/foreldrepar/Foreldrepar';\n\nimport './situasjonSirkel.less';\n\ninterface Props {\n    situasjon: ForeldreparSituasjon;\n    valgtForelder?: Forelder;\n}\n\nconst SituasjonSirkel: React.FunctionComponent<Props> = ({ situasjon, valgtForelder }) => {\n    const info = getSituasjonForelderSvg(situasjon);\n    const bem = bemUtils('situasjonSirkel');\n\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('ikon')}>\n                <Sirkelmaske diameter=\"5rem\">\n                    {getAntallForeldreISituasjon(situasjon) === 1 && valgtForelder ? (\n                        <Foreldrepar forelder1={valgtForelder === Forelder.mor ? info.mor : info.farMedmor} />\n                    ) : (\n                        <Foreldrepar\n                            forelder1={info.mor}\n                            forelder2={info.farMedmor}\n                            variant={info.variant}\n                            kompakt={true}\n                        />\n                    )}\n                </Sirkelmaske>\n            </div>\n        </div>\n    );\n};\n\nexport default SituasjonSirkel;\n","import { bemUtils } from '@navikt/fp-common';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { formaterDato } from 'app/utils/dateUtils';\nimport { getNavnGenitivEierform } from 'app/utils/personUtils';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport { getPeriodeTittel } from 'uttaksplan/utils/periodeUtils';\n\nimport './infoEksisterendePerioder.less';\n\ninterface Props {\n    oppgittePerioder: Periode[];\n    navnForOverskrift?: string;\n    navnPåForeldre: NavnPåForeldre;\n    familiehendelsesdato: Date;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n}\n\nconst InfoEksisterendePerioder: FunctionComponent<Props> = ({\n    oppgittePerioder,\n    navnForOverskrift,\n    navnPåForeldre,\n    familiehendelsesdato,\n    termindato,\n    situasjon,\n}) => {\n    const intl = useIntl();\n    const dateFormat = 'DD. MMM YYYY';\n    const bem = bemUtils('infoEksisterendePerioder');\n\n    return (\n        <div className={bem.block}>\n            {navnForOverskrift && (\n                <Normaltekst>\n                    <FormattedMessage\n                        id=\"eksisterendeSak.label.annenPartsPlan\"\n                        values={{\n                            navn: getNavnGenitivEierform(navnForOverskrift, intl.locale),\n                        }}\n                    />\n                </Normaltekst>\n            )}\n            <ol className={bem.element('list')}>\n                {oppgittePerioder.map((periode) => {\n                    return (\n                        <li key={guid()}>\n                            <div className={bem.element('listInfo')}>\n                                <Element className={bem.element('listInfoPeriode')}>\n                                    {formaterDato(periode.tidsperiode.fom, dateFormat)} -{' '}\n                                    {formaterDato(periode.tidsperiode.tom, dateFormat)}:\n                                </Element>\n                                <Normaltekst>\n                                    {getPeriodeTittel(\n                                        intl,\n                                        periode,\n                                        navnPåForeldre,\n                                        familiehendelsesdato,\n                                        termindato,\n                                        situasjon\n                                    )}\n                                </Normaltekst>\n                            </div>\n                        </li>\n                    );\n                })}\n            </ol>\n        </div>\n    );\n};\n\nexport default InfoEksisterendePerioder;\n","import React from 'react';\nimport { useIntl, IntlShape, FormattedMessage } from 'react-intl';\nimport SituasjonSirkel from './illustrasjoner/situasjon-sirkel/SituasjonSirkel';\nimport UkerSirkel from './illustrasjoner/uker-sirkel/UkerSirkel';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport { EksisterendeSak } from 'app/types/EksisterendeSak';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { bemUtils, Block, formatDate, hasValue, intlUtils, UtvidetInformasjon } from '@navikt/fp-common';\nimport { getAntallUker } from 'app/steps/uttaksplan-info/utils/stønadskontoer';\nimport { Forelder } from 'app/types/Forelder';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport {\n    getFarMedmorErAleneOmOmsorg,\n    getKjønnFromFnr,\n    getMorErAleneOmOmsorg,\n    getNavnGenitivEierform,\n    getNavnPåForeldre,\n} from 'app/utils/personUtils';\nimport { InfoPeriode, isInfoPeriode, Periodetype } from 'uttaksplan/types/Periode';\nimport InnholdMedIllustrasjon from '../innhold-med-illustrasjon/InnholdMedIllustrasjon';\nimport { formaterDato, getToTetteReglerGjelder, getVarighetString, ISOStringToDate } from 'app/utils/dateUtils';\nimport links from 'app/links/links';\nimport { getForeldreparSituasjon } from 'app/utils/foreldreparSituasjonUtils';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport InfoEksisterendePerioder from './InfoEksisterendePerioder';\n\nimport './infoOmSøknaden.less';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\n\ninterface Props {\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[];\n    eksisterendeSak: EksisterendeSak | undefined;\n    erIUttaksplanenSteg: boolean;\n    minsterettUkerToTette?: number;\n}\n\nconst getHvem = (\n    intl: IntlShape,\n    erDeltUttak: boolean,\n    navnAnnenForelder: string | undefined,\n    erAnnenPartsEksisterendeSak?: boolean\n): string => {\n    if (erDeltUttak && navnAnnenForelder !== undefined) {\n        return erAnnenPartsEksisterendeSak\n            ? intlUtils(intl, 'eksisterendeSak.tekst.benevning.førstegangssøknaMedEkisterndeSakAnnenPart', {\n                  navn: navnAnnenForelder,\n              })\n            : intlUtils(intl, 'eksisterendeSak.tekst.benevning.deltOmsorg', { navn: navnAnnenForelder });\n    }\n\n    return intlUtils(intl, 'eksisterendeSak.tekst.benevning.aleneomsorg');\n};\n\nconst InfoOmSøknaden: React.FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer,\n    eksisterendeSak,\n    erIUttaksplanenSteg,\n    minsterettUkerToTette,\n}) => {\n    const bem = bemUtils('infoOmSøknaden');\n    const intl = useIntl();\n    const søkerinfo = useSøkerinfo();\n    const søknad = useSøknad();\n    const { state } = useForeldrepengesøknadContext();\n    const { barnFraNesteSak } = state;\n    const { annenForelder, søker, barn, søkersituasjon } = søknad;\n    const { person } = søkerinfo;\n    const uker = getAntallUker(tilgjengeligeStønadskontoer);\n    const annenForelderKjønn = getKjønnFromFnr(annenForelder);\n    const erFarEllerMedmor = isFarEllerMedmor(søknad.søkersituasjon.rolle);\n    const annenForelderNavn = isAnnenForelderOppgitt(annenForelder) ? annenForelder.fornavn : '';\n    const erDeltUttak = isAnnenForelderOppgitt(annenForelder)\n        ? !!annenForelder.harRettPåForeldrepengerINorge || !!annenForelder.harRettPåForeldrepengerIEØS\n        : false;\n    const erDeltUttakINorge = isAnnenForelderOppgitt(annenForelder) && !!annenForelder.harRettPåForeldrepengerINorge;\n    const erAleneOmOmsorg = søker.erAleneOmOmsorg;\n    const morErAleneOmOmsorg = getMorErAleneOmOmsorg(!erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const farMedmorErAleneOmOmsorg = getFarMedmorErAleneOmOmsorg(erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const { dekningsgrad } = søknad;\n    const { rolle } = søkersituasjon;\n    const dekningsgradGrunnlag = eksisterendeSak ? eksisterendeSak.grunnlag.dekningsgrad : undefined;\n    const situasjon = getForeldreparSituasjon(\n        person.kjønn,\n        annenForelderKjønn,\n        erDeltUttak,\n        morErAleneOmOmsorg,\n        farMedmorErAleneOmOmsorg,\n        rolle\n    );\n    const skalViseInfoOmMorsSak = hasValue(annenForelderNavn) && erFarEllerMedmor && erDeltUttak;\n\n    const forelderVedAleneomsorg = erDeltUttak ? undefined : erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n\n    const hvem = getHvem(\n        intl,\n        erDeltUttakINorge,\n        annenForelderNavn,\n        eksisterendeSak ? eksisterendeSak.erAnnenPartsSak : false\n    );\n    const navnPåForeldre = getNavnPåForeldre(person, annenForelder, erFarEllerMedmor, intl);\n    const familiehendelsedatoNesteBarn =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.familiehendelsesdato : undefined;\n    const familiehendelsesdato = ISOStringToDate(getFamiliehendelsedato(barn));\n    const erToTette = getToTetteReglerGjelder(familiehendelsesdato, familiehendelsedatoNesteBarn);\n    const minsterettToTetteAntallUkerTekst = [minsterettUkerToTette, intlUtils(intl, 'uker')].join(' ');\n    const startStønadsperiodeNyttBarn =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n    const sisteUttaksdagDetteBarnet =\n        startStønadsperiodeNyttBarn !== undefined ? Uttaksdagen(startStønadsperiodeNyttBarn).forrige() : undefined;\n    const termindato = getTermindato(barn);\n    let sisteInfoPeriode;\n    if (eksisterendeSak) {\n        sisteInfoPeriode = eksisterendeSak.uttaksplan\n            ? Periodene(eksisterendeSak.uttaksplan).finnSisteInfoperiode()\n            : undefined;\n    }\n    const nesteMuligeUttaksdagEtterAnnenPart =\n        eksisterendeSak && eksisterendeSak.uttaksplan && sisteInfoPeriode\n            ? Uttaksdagen(sisteInfoPeriode.tidsperiode.tom).neste()\n            : undefined;\n\n    const navnGenitivEierform = getNavnGenitivEierform(annenForelderNavn, intl.locale);\n\n    const infoperioder: InfoPeriode[] =\n        eksisterendeSak !== undefined ? eksisterendeSak.uttaksplan.filter(isInfoPeriode) : [];\n\n    const visPlanTekst: string = erIUttaksplanenSteg\n        ? 'eksisterendeSak.label.seAnnenPartsPlanIPlanen'\n        : 'eksisterendeSak.label.seAnnenPartsPlan';\n\n    const søkersPerioder =\n        eksisterendeSak &&\n        eksisterendeSak.uttaksplan &&\n        eksisterendeSak.uttaksplan.filter((p) => p.type !== Periodetype.Info);\n\n    return (\n        <Block padBottom=\"l\" className={bem.block}>\n            <InnholdMedIllustrasjon\n                tittel={intlUtils(intl, `eksisterendeSak.tittel.${erDeltUttakINorge ? 'deltUttak' : 'aleneomsorg'}`)}\n                illustrasjoner={[\n                    <SituasjonSirkel key=\"situasjon\" situasjon={situasjon} valgtForelder={forelderVedAleneomsorg} />,\n                    <UkerSirkel key=\"uker\" uker={uker} />,\n                ]}\n            >\n                <Block padBottom=\"l\">\n                    <Normaltekst>\n                        <FormattedMessage\n                            id=\"eksisterendeSak.tekst.html\"\n                            values={{\n                                uker: <strong>{getVarighetString(uker * 5, intl)}</strong>,\n                                dekningsgrad: <strong>{dekningsgrad ?? dekningsgradGrunnlag}</strong>,\n                                navn: hvem,\n                            }}\n                        />\n                    </Normaltekst>\n                </Block>\n                {skalViseInfoOmMorsSak && hasValue(annenForelderNavn) && nesteMuligeUttaksdagEtterAnnenPart && (\n                    <Normaltekst>\n                        <FormattedMessage\n                            id=\"eksisterendeSak.tekst.nesteMuligeUttaksdato\"\n                            values={{\n                                dato: formaterDato(nesteMuligeUttaksdagEtterAnnenPart, 'DD. MMM YYYY'),\n                                navn: annenForelderNavn,\n                                b: (msg: any) => <b>{msg}</b>,\n                            }}\n                        />\n                    </Normaltekst>\n                )}\n\n                {skalViseInfoOmMorsSak &&\n                    hasValue(annenForelderNavn) &&\n                    infoperioder !== undefined &&\n                    infoperioder.length > 0 && (\n                        <UtvidetInformasjon\n                            apneLabel={intlUtils(intl, visPlanTekst, {\n                                navn: navnGenitivEierform,\n                            })}\n                        >\n                            <InfoEksisterendePerioder\n                                oppgittePerioder={infoperioder}\n                                navnForOverskrift={annenForelderNavn}\n                                navnPåForeldre={navnPåForeldre}\n                                familiehendelsesdato={familiehendelsesdato!}\n                                termindato={termindato}\n                                situasjon={søknad.søkersituasjon.situasjon}\n                            />\n                        </UtvidetInformasjon>\n                    )}\n            </InnholdMedIllustrasjon>\n            {skalViseInfoOmMorsSak && søkersPerioder !== undefined && søkersPerioder.length > 0 && (\n                <InnholdMedIllustrasjon\n                    tittel={intlUtils(intl, 'eksisterendeSak.tittel.dineDagerMedForeldrepenger')}\n                    illustrasjoner={[]}\n                    infoboks={\n                        erIUttaksplanenSteg === false ? (\n                            <>\n                                <UtvidetInformasjon apneLabel=\"Se perioder oppgitt av annen forelder\">\n                                    Periodene med foreldrepenger oppgitt av annen forelder\n                                    <InfoEksisterendePerioder\n                                        oppgittePerioder={søkersPerioder}\n                                        navnPåForeldre={navnPåForeldre}\n                                        familiehendelsesdato={familiehendelsesdato!}\n                                        termindato={termindato}\n                                        situasjon={søknad.søkersituasjon.situasjon}\n                                    />\n                                </UtvidetInformasjon>\n                            </>\n                        ) : undefined\n                    }\n                ></InnholdMedIllustrasjon>\n            )}\n            {erToTette && startStønadsperiodeNyttBarn !== undefined && (\n                <Block padBottom=\"l\">\n                    <Normaltekst>\n                        <strong>\n                            <FormattedMessage\n                                id=\"infoOmSøknaden.toTette.finnesBarnMedNesteSak.tittel\"\n                                values={{ antallUkerToTette: minsterettUkerToTette }}\n                            ></FormattedMessage>\n                        </strong>\n                    </Normaltekst>\n                    <Normaltekst>\n                        <FormattedMessage\n                            id=\"infoOmSøknaden.toTette.finnesBarnMedNesteSak\"\n                            values={{\n                                startStønadsperiodeNyttBarn: formatDate(startStønadsperiodeNyttBarn),\n                                minsterettAntallUker: <strong>{minsterettToTetteAntallUkerTekst}</strong>,\n                            }}\n                        />\n                    </Normaltekst>\n                </Block>\n            )}\n            {!erToTette && startStønadsperiodeNyttBarn !== undefined && (\n                <Block padBottom=\"l\">\n                    <Normaltekst>\n                        <strong>\n                            <FormattedMessage\n                                id=\"infoOmSøknaden.ikkeToTette.finnesBarnMedNesteSak.tittel\"\n                                values={{ sisteUttaksdagDetteBarnet: formaterDato(sisteUttaksdagDetteBarnet) }}\n                            ></FormattedMessage>\n                        </strong>\n                    </Normaltekst>\n                    <Normaltekst>\n                        <FormattedMessage\n                            id=\"infoOmSøknaden.ikkeToTette.finnesBarnMedNesteSak\"\n                            values={{\n                                startStønadsperiodeNyttBarn: formatDate(startStønadsperiodeNyttBarn),\n                                sisteUttaksdagDetteBarnet: formaterDato(sisteUttaksdagDetteBarnet),\n                            }}\n                        />\n                    </Normaltekst>\n                </Block>\n            )}\n            <Normaltekst>\n                <FormattedMessage\n                    id=\"uttaksplan.informasjon.lesMer\"\n                    values={{\n                        a: (msg: any) => (\n                            <a href={links.viktigeFrister} className=\"lenke\" rel=\"noreferrer\" target=\"_blank\">\n                                {msg}\n                            </a>\n                        ),\n                    }}\n                />\n            </Normaltekst>\n        </Block>\n    );\n};\n\nexport default InfoOmSøknaden;\n"],"names":["StønadskontoType","getAntallUker","kontoer","sum","konto","getAntallUkerMødrekvote","getAntallUkerFedrekvote","getAntallUkerFellesperiode","getAntallUkerMinsterett","minsteRettDager","ForeldreparSituasjon","getForeldreparSituasjon","søkerKjønn","annenForelderKjønn","erDeltUttak","morErAleneOmOmsorg","farMedmorErAleneOmOmsorg","rolle","getAntallForeldreISituasjon","situasjon","getSituasjonForelderSvg","SituasjonSirkel","valgtForelder","info","bem","bemUtils","jsx","Sirkelmaske","Foreldrepar","Forelder","InfoEksisterendePerioder","oppgittePerioder","navnForOverskrift","navnPåForeldre","familiehendelsesdato","termindato","intl","useIntl","dateFormat","jsxs","Normaltekst","FormattedMessage","getNavnGenitivEierform","periode","Element","formaterDato","getPeriodeTittel","guid","getHvem","navnAnnenForelder","erAnnenPartsEksisterendeSak","intlUtils","InfoOmSøknaden","tilgjengeligeStønadskontoer","eksisterendeSak","erIUttaksplanenSteg","minsterettUkerToTette","søkerinfo","useSøkerinfo","søknad","useSøknad","state","useForeldrepengesøknadContext","barnFraNesteSak","annenForelder","søker","barn","søkersituasjon","person","uker","getKjønnFromFnr","erFarEllerMedmor","isFarEllerMedmor","annenForelderNavn","isAnnenForelderOppgitt","erDeltUttakINorge","erAleneOmOmsorg","getMorErAleneOmOmsorg","getFarMedmorErAleneOmOmsorg","dekningsgrad","dekningsgradGrunnlag","skalViseInfoOmMorsSak","hasValue","forelderVedAleneomsorg","hvem","getNavnPåForeldre","familiehendelsedatoNesteBarn","ISOStringToDate","getFamiliehendelsedato","erToTette","getToTetteReglerGjelder","minsterettToTetteAntallUkerTekst","startStønadsperiodeNyttBarn","sisteUttaksdagDetteBarnet","Uttaksdagen","getTermindato","sisteInfoPeriode","Periodene","nesteMuligeUttaksdagEtterAnnenPart","navnGenitivEierform","infoperioder","isInfoPeriode","visPlanTekst","søkersPerioder","p","Periodetype","Block","InnholdMedIllustrasjon","UkerSirkel","getVarighetString","msg","UtvidetInformasjon","Fragment","formatDate","links","InfoOmSøknaden$1"],"mappings":"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"}