{"version":3,"file":"Oppsummering-d04fa02e.js","sources":["../../src/app/steps/oppsummering/components/OppsummeringsPunkt.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/InnholdMedLedetekst.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/kompleks-feltoppsummering/KompleksFeltoppsummering.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon.tsx","../../src/app/steps/oppsummering/components/annen-forelder-oppsummering/AnnenForelderOppsummering.tsx","../../src/app/steps/oppsummering/components/barn-oppsummering/BarnAdoptertIUtlandetDetaljer.tsx","../../src/app/steps/oppsummering/components/barn-oppsummering/BarnOppsummering.tsx","../../../../node_modules/.pnpm/nav-frontend-ekspanderbartpanel@4.0.4_patch_hash=b5w2oy47ffnonley6bfxkflvqi_@types+react-coll_me7b2nnwdpuacwdxrnwm26a2ka/node_modules/nav-frontend-ekspanderbartpanel/lib/ekspanderbartpanel-base.js","../../../../node_modules/.pnpm/nav-frontend-ekspanderbartpanel@4.0.4_patch_hash=b5w2oy47ffnonley6bfxkflvqi_@types+react-coll_me7b2nnwdpuacwdxrnwm26a2ka/node_modules/nav-frontend-ekspanderbartpanel/lib/index.js","../../src/app/steps/oppsummering/components/OppsummeringsPanel.tsx","../../src/app/assets/KvinneIkon.tsx","../../src/app/assets/MannIkon.tsx","../../src/app/steps/oppsummering/components/Personalia.tsx","../../src/app/steps/oppsummering/components/utenlandsopphold-oppsummering/UtenlandsoppholdOppsummeringListe.tsx","../../src/app/steps/oppsummering/components/utenlandsopphold-oppsummering/UtenlandsoppholdOppsummering.tsx","../../src/app/steps/oppsummering/oppsummeringFormConfig.ts","../../src/app/steps/oppsummering/validation/oppsummeringValidation.ts","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/AnnenInntektDetaljer.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/InntekterTabell.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/AndreInntekterOppsummering.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/FrilansOppsummering.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/Næringsdetaljer.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/SelvstendigNæringsdrivendeOppsummering.tsx","../../src/app/steps/oppsummering/components/andre-inntekter-oppsummering/ArbeidsforholdOgAndreInntekterOppsummering.tsx","../../src/app/utils/tilleggsopplysningerUtils.ts","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/feltoppsummering/Feltoppsummering.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/oppsummeringsliste/list/List.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/oppsummeringsliste/Oppsummeringsliste.tsx","../../src/app/utils/manglendeVedleggUtils.ts","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/OppsummeringUtils.ts","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/detaljer/Overføringsperiodedetaljer.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/detaljer/MorsaktiviteterDetaljer.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/detaljer/Uttaksperiodedetaljer.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/detaljer/Uttsettelsesperiodedetaljer.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/UttaksplanOppsummeringsliste.tsx","../../src/app/steps/oppsummering/components/uttaksplan-oppsummering/UttaksplanOppsummering.tsx","../../src/app/steps/oppsummering/Oppsummering.tsx"],"sourcesContent":["import { Block } from '@navikt/fp-common';\nimport { Element } from 'nav-frontend-typografi';\nimport React, { FunctionComponent, ReactNode } from 'react';\n\ninterface Props {\n    title: string;\n    visible?: boolean;\n    children?: ReactNode;\n}\n\nconst OppsummeringsPunkt: FunctionComponent<Props> = ({ title, visible, children }) => {\n    return (\n        <Block padBottom=\"l\" visible={visible}>\n            <Element>{title}</Element>\n            {children}\n        </Block>\n    );\n};\n\nexport default OppsummeringsPunkt;\n","import * as React from 'react';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\nimport { guid } from 'nav-frontend-js-utils';\n\ninterface InnholdMedLedetekstProps {\n    ledetekst: string;\n    children: JSX.Element | JSX.Element[];\n    className?: string;\n}\n\nconst hasListOfChildren = (children: string | string[]): boolean => Array.isArray(children);\n\nconst InnholdMedLedetekst: React.FunctionComponent<InnholdMedLedetekstProps> = ({ ledetekst, children, className }) => {\n    return (\n        <div className={className}>\n            <Element>{ledetekst}</Element>\n            {!Array.isArray(children) && hasListOfChildren((children as JSX.Element).props.children)\n                ? (children as JSX.Element).props.children.map((child: string) => (\n                      <Normaltekst className=\"feltoppsummering__verdi\" key={guid()}>\n                          {child}\n                      </Normaltekst>\n                  ))\n                : children}\n        </div>\n    );\n};\n\nexport default InnholdMedLedetekst;\n","import * as React from 'react';\nimport InnholdMedLedetekst from '../InnholdMedLedetekst';\n\ninterface Props {\n    className?: string;\n    ledetekst: string;\n    children: JSX.Element | JSX.Element[];\n}\n\nconst KompleksFeltoppsummering: React.FunctionComponent<Props> = ({ ledetekst, children, className }) => (\n    <InnholdMedLedetekst className={`feltoppsummering ${className}`} ledetekst={ledetekst}>\n        {children}\n    </InnholdMedLedetekst>\n);\n\nexport default KompleksFeltoppsummering;\n","import { intlUtils } from '@navikt/fp-common';\nimport { Attachment } from 'app/types/Attachment';\nimport { isAttachmentWithError } from 'app/utils/vedleggUtils';\nimport EtikettBase from 'nav-frontend-etiketter';\nimport Lenke from 'nav-frontend-lenker';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport KompleksFeltoppsummering from '../kompleks-feltoppsummering/KompleksFeltoppsummering';\n\nimport './oppsummeringAvDokumentasjon.less';\n\ninterface OppsummeringAvDokumentasjonProps {\n    ledetekst?: string;\n    vedlegg: Attachment[];\n}\n\ntype Props = OppsummeringAvDokumentasjonProps;\n\nconst OppsummeringAvDokumentasjon: React.FunctionComponent<Props> = (props) => {\n    const { ledetekst, vedlegg } = props;\n    const intl = useIntl();\n\n    const renderListOfAttachmentPreviewLinks = () => {\n        return vedlegg\n            .filter((a: Attachment) => !isAttachmentWithError(a))\n            .map(({ url, id, filename }) => (\n                <Lenke href={url!} key={id} target=\"_blank\">\n                    {filename}\n                </Lenke>\n            ));\n    };\n\n    return (\n        <KompleksFeltoppsummering\n            className=\"oppsummeringAvDokumentasjon\"\n            ledetekst={ledetekst || intlUtils(intl, 'vedlagtdokumentasjon')}\n        >\n            {vedlegg && vedlegg.filter((a: Attachment) => !isAttachmentWithError(a)).length > 0 ? (\n                renderListOfAttachmentPreviewLinks()\n            ) : (\n                <EtikettBase type=\"fokus\">\n                    {intlUtils(intl, 'oppsummering.andreInntekter.dokumentasjon.mangler')}\n                </EtikettBase>\n            )}\n        </KompleksFeltoppsummering>\n    );\n};\n\nexport default OppsummeringAvDokumentasjon;\n","import { intlUtils } from '@navikt/fp-common';\nimport AnnenForelder, { isAnnenForelderIkkeOppgitt, isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport Barn from 'app/context/types/Barn';\nimport Søker from 'app/context/types/Søker';\nimport { Søkerrolle } from 'app/types/Søkerrolle';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport OppsummeringAvDokumentasjon from '../uttaksplan-oppsummering/oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon';\n\ninterface Props {\n    annenForelder: AnnenForelder;\n    søker: Søker;\n    søkerrolle: Søkerrolle;\n    barn: Barn;\n    farMedmorErAleneOmOmsorg: boolean;\n}\n\nconst AnnenForelderOppsummering: FunctionComponent<Props> = ({\n    annenForelder,\n    søker,\n    søkerrolle,\n    barn,\n    farMedmorErAleneOmOmsorg,\n}) => {\n    const intl = useIntl();\n    const erFarEllerMedmor = isFarEllerMedmor(søkerrolle);\n    const { dokumentasjonAvAleneomsorg } = barn;\n\n    return (\n        <>\n            {isAnnenForelderIkkeOppgitt(annenForelder) && (\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.annenForelder.ikkeOppgitt')} />\n            )}\n            {isAnnenForelderOppgitt(annenForelder) && (\n                <>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.annenForelder.navn')}>\n                        <Normaltekst>{`${annenForelder.fornavn} ${annenForelder.etternavn}`}</Normaltekst>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.annenForelder.fnr')}>\n                        <Normaltekst>{annenForelder.fnr}</Normaltekst>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt\n                        title={\n                            !søker.erAleneOmOmsorg\n                                ? intlUtils(intl, 'oppsummering.annenForelder.fellesOmsorg.tittel')\n                                : intlUtils(intl, 'oppsummering.annenForelder.aleneOmOmsorg.tittel')\n                        }\n                    >\n                        <Normaltekst>\n                            <FormattedMessage\n                                id={\n                                    !søker.erAleneOmOmsorg\n                                        ? 'oppsummering.annenForelder.fellesOmsorg.tekst'\n                                        : 'oppsummering.annenForelder.aleneOmOmsorg.tekst'\n                                }\n                            />\n                        </Normaltekst>\n                    </OppsummeringsPunkt>\n                    {!søker.erAleneOmOmsorg && (\n                        <OppsummeringsPunkt\n                            title={intlUtils(intl, 'oppsummering.annenForelder.rettPåForeldrepengerINorge', {\n                                navn: annenForelder.fornavn,\n                            })}\n                        >\n                            <Normaltekst>\n                                <FormattedMessage id={annenForelder.harRettPåForeldrepengerINorge ? 'ja' : 'nei'} />\n                            </Normaltekst>\n                        </OppsummeringsPunkt>\n                    )}\n                    {!søker.erAleneOmOmsorg && !annenForelder.harRettPåForeldrepengerINorge && (\n                        <OppsummeringsPunkt\n                            title={intlUtils(intl, 'oppsummering.annenForelder.harOppholdtSegIEØS', {\n                                navn: annenForelder.fornavn,\n                            })}\n                        >\n                            <Normaltekst>\n                                <FormattedMessage id={annenForelder.harOppholdtSegIEØS ? 'ja' : 'nei'} />\n                            </Normaltekst>\n                        </OppsummeringsPunkt>\n                    )}\n                    {!søker.erAleneOmOmsorg && annenForelder.harOppholdtSegIEØS === true && (\n                        <OppsummeringsPunkt\n                            title={intlUtils(intl, 'oppsummering.annenForelder.rettPåForeldrepengerIEØS', {\n                                navn: annenForelder.fornavn,\n                            })}\n                        >\n                            <Normaltekst>\n                                <FormattedMessage id={annenForelder.harRettPåForeldrepengerIEØS ? 'ja' : 'nei'} />\n                            </Normaltekst>\n                        </OppsummeringsPunkt>\n                    )}\n                    {erFarEllerMedmor &&\n                        !søker.erAleneOmOmsorg &&\n                        !annenForelder.harRettPåForeldrepengerINorge &&\n                        !annenForelder.harRettPåForeldrepengerIEØS && (\n                            <OppsummeringsPunkt\n                                title={intlUtils(intl, 'annenForelder.erMorUfør', {\n                                    navn: annenForelder.fornavn,\n                                })}\n                            >\n                                <Normaltekst>\n                                    <FormattedMessage id={annenForelder.erUfør ? 'ja' : 'nei'} />\n                                </Normaltekst>\n                            </OppsummeringsPunkt>\n                        )}\n                </>\n            )}\n            {farMedmorErAleneOmOmsorg && erFarEllerMedmor && (\n                <OppsummeringAvDokumentasjon\n                    vedlegg={dokumentasjonAvAleneomsorg || []}\n                    ledetekst={intlUtils(intl, 'oppsummering.annenForelder.dokumentasjonAvAleneomsorg')}\n                />\n            )}\n        </>\n    );\n};\n\nexport default AnnenForelderOppsummering;\n","import { formatDate, hasValue, intlUtils } from '@navikt/fp-common';\nimport { AdoptertAnnetBarn, AdoptertStebarn, isAdoptertStebarn } from 'app/context/types/Barn';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\n\ninterface Props {\n    barn: AdoptertAnnetBarn | AdoptertStebarn;\n}\n\nconst BarnAdoptertIUtlandetDetaljer: FunctionComponent<Props> = ({ barn }) => {\n    const intl = useIntl();\n\n    if (isAdoptertStebarn(barn)) {\n        return null;\n    }\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.barn.adoptertIUtlandet')}>\n                <Normaltekst>\n                    <FormattedMessage id={barn.adoptertIUtlandet ? 'ja' : 'nei'} />\n                </Normaltekst>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt\n                title={intlUtils(intl, 'oppsummering.barn.ankomstdato')}\n                visible={hasValue(barn.ankomstdato)}\n            >\n                <Normaltekst>{formatDate(barn.ankomstdato!)}</Normaltekst>\n            </OppsummeringsPunkt>\n        </>\n    );\n};\n\nexport default BarnAdoptertIUtlandetDetaljer;\n","import { formatDate, intlUtils } from '@navikt/fp-common';\nimport Barn, { BarnType, isAdoptertAnnetBarn, isAdoptertStebarn, isUfødtBarn } from 'app/context/types/Barn';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport BarnAdoptertIUtlandetDetaljer from './BarnAdoptertIUtlandetDetaljer';\n\ninterface Props {\n    barn: Barn;\n}\n\nconst getAntallBarnTekst = (antallBarn: number, intl: IntlShape): string => {\n    if (antallBarn === 1) {\n        return intlUtils(intl, 'oppsummering.barn.antallBarn.ettBarn');\n    }\n\n    if (antallBarn === 2) {\n        return intlUtils(intl, 'oppsummering.barn.antallBarn.toBarn');\n    }\n\n    return intlUtils(intl, 'oppsummering.barn.antallBarn.flere', { antallBarn });\n};\n\nconst getTerminEllerFødselTittel = (type: BarnType) => {\n    if (type === BarnType.UFØDT) {\n        return 'Termin';\n    }\n\n    return 'Fødselsdato';\n};\n\nconst getTerminEllerFødselsdato = (barn: Barn) => {\n    if (isUfødtBarn(barn)) {\n        return formatDate(barn.termindato);\n    }\n\n    return formatDate(barn.fødselsdatoer[0]);\n};\n\nconst BarnOppsummering: FunctionComponent<Props> = ({ barn }) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.barn.søknadenGjelder')}>\n                <Normaltekst>{getAntallBarnTekst(barn.antallBarn, intl)}</Normaltekst>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt title={getTerminEllerFødselTittel(barn.type)}>\n                <Normaltekst>{getTerminEllerFødselsdato(barn)}</Normaltekst>\n            </OppsummeringsPunkt>\n            {(isAdoptertAnnetBarn(barn) || isAdoptertStebarn(barn)) && (\n                <>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.barn.gjelderSøknadenStebarnsadopsjon')}>\n                        <Normaltekst>\n                            <FormattedMessage id={barn.type === BarnType.ADOPTERT_STEBARN ? 'ja' : 'nei'} />\n                        </Normaltekst>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.barn.adopsjonsdato')}>\n                        <Normaltekst>{formatDate(barn.adopsjonsdato)}</Normaltekst>\n                    </OppsummeringsPunkt>\n                    <BarnAdoptertIUtlandetDetaljer barn={barn} />\n                </>\n            )}\n        </>\n    );\n};\n\nexport default BarnOppsummering;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst React = __importStar(require(\"react\"));\nconst classnames_1 = __importDefault(require(\"classnames\"));\nconst react_collapse_1 = require(\"react-collapse\");\nrequire(\"nav-frontend-ekspanderbartpanel-style/dist/main.css\");\nconst nav_frontend_js_utils_1 = require(\"nav-frontend-js-utils\");\nconst cls = (props) => (0, classnames_1.default)(\"ekspanderbartPanel\", props.className, {\n    \"ekspanderbartPanel--lukket\": !props.apen,\n    \"ekspanderbartPanel--apen\": props.apen,\n    \"ekspanderbartPanel--border\": props.border,\n});\nclass EkspanderbartpanelBase extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.isCloseAnimation = false;\n        this.onRestProxy = (args) => {\n            this.isCloseAnimation = false;\n            const { collapseProps } = this.props;\n            if (collapseProps && collapseProps.onRest) {\n                collapseProps.onRest(args);\n            }\n        };\n        this.handleKeyDown = (event) => {\n            if (event.keyCode === nav_frontend_js_utils_1.keyCodes.tab && this.isCloseAnimation) {\n                event.preventDefault();\n            }\n        };\n        this.buttonId = this.props.id || (0, nav_frontend_js_utils_1.guid)();\n        this.contentId = (0, nav_frontend_js_utils_1.guid)();\n    }\n    componentDidUpdate(prevProps) {\n        if (!this.props.apen && prevProps.apen) {\n            this.isCloseAnimation = true;\n        }\n    }\n    render() {\n        const _a = this.props, { className, children, apen, tittel, onClick, collapseProps, border, renderContentWhenClosed } = _a, rest = __rest(_a, [\"className\", \"children\", \"apen\", \"tittel\", \"onClick\", \"collapseProps\", \"border\", \"renderContentWhenClosed\"]);\n        const CollapseComponent = renderContentWhenClosed\n            ? react_collapse_1.Collapse\n            : react_collapse_1.UnmountClosed;\n        return (React.createElement(\"div\", { className: cls(this.props) },\n            React.createElement(\"button\", Object.assign({ id: this.buttonId, className: \"ekspanderbartPanel__hode\", onKeyDown: this.handleKeyDown, onClick: onClick, \"aria-expanded\": apen, \"aria-controls\": this.contentId, type: \"button\" }, rest),\n                React.createElement(\"div\", { className: \"ekspanderbartPanel__flex-wrapper\" },\n                    React.createElement(\"span\", { className: \"ekspanderbartPanel__tittel\" }, tittel),\n                    React.createElement(\"span\", { className: \"ekspanderbartPanel__indikator\" }))),\n            React.createElement(\"div\", { role: \"region\", id: this.contentId, \"aria-labelledby\": this.buttonId },\n                React.createElement(CollapseComponent, Object.assign({ isOpened: !!apen, onRest: this.onRestProxy }, collapseProps),\n                    React.createElement(\"div\", { className: \"ekspanderbartPanel__innhold\" }, children)))));\n    }\n}\nEkspanderbartpanelBase.defaultProps = {\n    border: true,\n};\nexports.default = EkspanderbartpanelBase;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EkspanderbartpanelBase = void 0;\nconst React = __importStar(require(\"react\"));\nrequire(\"nav-frontend-ekspanderbartpanel-style/dist/main.css\");\nconst ekspanderbartpanel_base_1 = __importDefault(require(\"./ekspanderbartpanel-base\"));\nclass Ekspanderbartpanel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            apen: this.props.apen,\n        };\n        this.handleClick = this.handleClick.bind(this);\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.apen !== undefined && this.props.apen !== prevProps.apen) {\n            this.setState({ apen: this.props.apen });\n        }\n    }\n    handleClick(event) {\n        event.preventDefault();\n        this.setState({ apen: !this.state.apen });\n        if (this.props.onClick) {\n            this.props.onClick(event);\n        }\n    }\n    render() {\n        return (React.createElement(ekspanderbartpanel_base_1.default, Object.assign({}, this.props, { apen: this.state.apen, onClick: this.handleClick })));\n    }\n}\nexports.default = Ekspanderbartpanel;\nvar ekspanderbartpanel_base_2 = require(\"./ekspanderbartpanel-base\");\nObject.defineProperty(exports, \"EkspanderbartpanelBase\", { enumerable: true, get: function () { return __importDefault(ekspanderbartpanel_base_2).default; } });\n","import React, { FunctionComponent, ReactNode } from 'react';\nimport EkspanderbartPanel from 'nav-frontend-ekspanderbartpanel';\n\nimport './oppsummeringsPanel.less';\nimport { bemUtils } from '@navikt/fp-common';\n\ninterface Props {\n    title: string;\n    children: ReactNode;\n}\n\nconst OppsummeringsPanel: FunctionComponent<Props> = ({ title, children }) => {\n    const bem = bemUtils('oppsummeringsPanel');\n\n    return (\n        <EkspanderbartPanel className={bem.block} tittel={title}>\n            <div className={bem.element('content')}>{children}</div>\n        </EkspanderbartPanel>\n    );\n};\n\nexport default OppsummeringsPanel;\n","import * as React from 'react';\n\nconst KvinneIkon = () => (\n    <svg\n        width={40}\n        height={40}\n        role=\"img\"\n        aria-hidden=\"true\"\n        viewBox=\"0 0 32 32\"\n        display=\"block\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n    >\n        <defs />\n        <g\n            id=\"Component/static/person-header\"\n            stroke=\"none\"\n            strokeWidth=\"1\"\n            fill=\"none\"\n            fillRule=\"evenodd\"\n            transform=\"translate(0.000000, -11.000000)\"\n        >\n            <g id=\"⚙️/-ikon/-id-markering-/-kvinne\" transform=\"translate(0.000000, 11.000000)\">\n                <circle id=\"Oval\" fill=\"#FFFFFF\" cx=\"16\" cy=\"16\" r=\"16\" />\n                <g id=\"kvinne\" strokeWidth=\"1\" fill=\"#C86151\">\n                    <g id=\"Layer_1\">\n                        <g id=\"Layer_1_1_\">\n                            <path\n                                d=\"M16,0 C7.164,0 0,7.1635 0,16 C0,24.836 7.1635,32 16,32 C24.8365,32 32,24.8365 32,16 C32,7.164 24.836,0 16,0 L16,0 Z M15.999,3.9745 C17.0685,3.9745 17.937,4.8415 17.937,5.9115 C17.937,6.9815 17.0685,7.849 15.999,7.849 C14.9295,7.849 14.0625,6.981 14.0625,5.9115 C14.0625,4.8415 14.929,3.9745 15.999,3.9745 L15.999,3.9745 Z M21.9015,17.855 C21.462,17.988 20.9965,17.767 20.7995,17.354 L19.3165,12.537 C19.2445,12.3005 18.9945,12.167 18.7575,12.239 C18.544,12.304 18.4235,12.514 18.4525,12.728 C18.446,12.7365 20.6445,19.9185 20.981,21.0175 L18.5695,21.0175 L18.5695,26.921 C18.5695,27.5305 18.0765,28.024 17.4675,28.024 C16.8585,28.024 16.364,27.53 16.364,26.921 L16.364,26.906 L16.364,21.193 L16.364,21.0175 L16,21.0175 L15.6355,21.0175 L15.6355,21.193 L15.6355,26.9065 L15.6355,26.9215 C15.6355,27.531 15.1415,28.0245 14.532,28.0245 C13.923,28.0245 13.43,27.5305 13.43,26.9215 L13.43,21.018 L11.0185,21.018 C11.3545,19.9185 13.5535,12.737 13.547,12.7285 C13.5765,12.5145 13.4555,12.304 13.242,12.2395 C13.0055,12.1675 12.755,12.3005 12.683,12.5375 L11.2,17.3545 C11.0035,17.7675 10.538,17.988 10.098,17.8555 C9.6115,17.7085 9.34,17.183 9.492,16.684 C9.492,16.684 11.5495,10.1765 11.5725,10.13 C12.1325,8.3815 13.5445,8.387 14.8435,8.384 L17.155,8.384 C18.4545,8.387 19.8665,8.3815 20.426,10.13 C20.4495,10.177 22.5065,16.684 22.5065,16.684 C22.6595,17.1825 22.3875,17.7075 21.9015,17.855 L21.9015,17.855 Z\"\n                                id=\"Shape\"\n                            />\n                        </g>\n                    </g>\n                </g>\n            </g>\n        </g>\n    </svg>\n);\nexport default KvinneIkon;\n","import * as React from 'react';\n\nconst MannIkon = () => (\n    <svg\n        width={40}\n        height={40}\n        role=\"img\"\n        aria-hidden=\"true\"\n        viewBox=\"0 0 32 32\"\n        display=\"block\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n    >\n        <defs>\n            <path\n                d=\"M16,0 C7.164,0 0,7.164 0,16 C0,24.836 7.1635,32 16,32 C24.8365,32 32,24.8365 32,16 C32,7.164 24.836,0 16,0 L16,0 Z M15.9995,3.9745 C17.069,3.9745 17.9375,4.8415 17.9375,5.9115 C17.9375,6.9815 17.0685,7.849 15.9995,7.849 C14.93,7.849 14.063,6.981 14.063,5.9115 C14.063,4.842 14.93,3.9745 15.9995,3.9745 L15.9995,3.9745 Z M21.0465,11.765 L21.0465,17.1645 C21.0465,17.6 20.6585,17.9515 20.1795,17.9515 C19.7,17.9515 19.3115,17.6 19.3115,17.1645 L19.3115,14.2465 L19.3115,13.287 L19.3115,12.6895 L19.3115,12.689 C19.3115,12.486 19.147,12.321 18.9435,12.321 C18.749,12.321 18.594,12.473 18.5805,12.664 C18.578,12.6735 18.57,12.6795 18.57,12.6895 L18.57,14.3645 L18.57,26.923 C18.57,27.5325 18.077,28.026 17.468,28.026 C16.859,28.026 16.3645,27.532 16.3645,26.923 L16.3645,26.908 L16.3645,21.194 L16.3645,18.43 L16.3645,17.8995 C16.3645,17.6995 16.2015,17.536 16,17.5355 C15.798,17.5355 15.6355,17.6995 15.6355,17.8995 L15.6355,18.43 L15.6355,21.194 L15.6355,26.9075 L15.6355,26.9225 C15.6355,27.532 15.1415,28.0255 14.532,28.0255 C13.923,28.0255 13.43,27.5315 13.43,26.9225 L13.43,14.364 L13.43,12.689 C13.43,12.679 13.4215,12.6725 13.4195,12.6635 C13.406,12.4725 13.251,12.3205 13.0565,12.3205 C12.8535,12.3205 12.6885,12.485 12.6885,12.6885 L12.6885,12.689 L12.6885,13.2865 L12.6885,14.246 L12.6885,17.164 C12.6885,17.5995 12.3,17.951 11.8205,17.951 C11.341,17.951 10.9535,17.5995 10.9535,17.164 L10.9535,11.7645 L10.9535,11.4155 C10.9535,9.7225 12.758,8.4885 14.4285,8.395 L15.6325,8.387 L15.6325,8.3825 L16.0005,8.385 L16.3685,8.3825 L16.3685,8.387 L17.5725,8.395 C19.2425,8.488 21.0475,9.7225 21.0475,11.4155 C21.0465,11.4915 21.0465,11.729 21.0465,11.765 L21.0465,11.765 Z\"\n                id=\"path-1\"\n            />\n        </defs>\n        <g\n            id=\"Component/static/person-header\"\n            stroke=\"none\"\n            strokeWidth=\"1\"\n            fill=\"none\"\n            fillRule=\"evenodd\"\n            transform=\"translate(0.000000, -11.000000)\"\n        >\n            <g id=\"⚙️/-ikon/-id-markering-/-mann\" transform=\"translate(0.000000, 11.000000)\">\n                <circle id=\"Oval\" fill=\"#FFFFFF\" cx=\"16\" cy=\"16\" r=\"16\" />\n                <g id=\"mann\" strokeWidth=\"1\">\n                    <g id=\"Layer_1\">\n                        <g id=\"Layer_1_1_\">\n                            <g id=\"Shape\">\n                                <use fill=\"#FFFFFF\" xlinkHref=\"#path-1\" />\n                                <use fill=\"#3385D1\" xlinkHref=\"#path-1\" />\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </g>\n        </g>\n    </svg>\n);\n\nexport default MannIkon;\n","import { bemUtils } from '@navikt/fp-common';\nimport KvinneIkon from 'app/assets/KvinneIkon';\nimport MannIkon from 'app/assets/MannIkon';\nimport { Søkerinfo } from 'app/types/Søkerinfo';\nimport { getKjønnFromFnrString } from 'app/utils/personUtils';\nimport { Normaltekst, Undertittel } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\n\nimport './personalia.less';\n\ninterface Props {\n    søkerinfo: Søkerinfo;\n}\n\nconst Personalia: FunctionComponent<Props> = ({ søkerinfo }) => {\n    const bem = bemUtils('personalia');\n    const { person } = søkerinfo;\n\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('icon')}>\n                {getKjønnFromFnrString(person.fnr) === 'K' ? <KvinneIkon /> : <MannIkon />}\n            </div>\n            <div>\n                <Undertittel>{`${søkerinfo.person.fornavn} ${søkerinfo.person.etternavn}`}</Undertittel>\n                <Normaltekst>{søkerinfo.person.fnr}</Normaltekst>\n            </div>\n        </div>\n    );\n};\n\nexport default Personalia;\n","import { bemUtils, formatDate, intlUtils } from '@navikt/fp-common';\nimport { Utenlandsopphold } from 'app/context/types/InformasjonOmUtenlandsopphold';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport countries from 'i18n-iso-countries';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport './utenlandsoppholdOppsummeringListe.less';\n\ninterface Props {\n    utenlandsopphold: Utenlandsopphold[];\n    tidligereOpphold: boolean;\n}\n\nconst UtenlandsoppholdOppsummeringListe: FunctionComponent<Props> = ({ utenlandsopphold, tidligereOpphold }) => {\n    const intl = useIntl();\n    const bem = bemUtils('utenlandsoppholdOppsummeringListe');\n\n    return (\n        <ul className={bem.block}>\n            {utenlandsopphold.map((opphold) => {\n                return (\n                    <li\n                        className={bem.element('listElement')}\n                        key={`${opphold.land}${opphold.tidsperiode.fom}${opphold.tidsperiode.tom}`}\n                    >\n                        <Normaltekst>\n                            {tidligereOpphold\n                                ? intlUtils(intl, 'oppsummering.utenlandsopphold.harBoddINorge.utenlands', {\n                                      land: countries.getName(opphold.land, 'nb'),\n                                  })\n                                : intlUtils(intl, 'oppsummering.utenlandsopphold.skalBoINorge.utenlands', {\n                                      land: countries.getName(opphold.land, 'nb'),\n                                  })}\n                        </Normaltekst>\n                        <Normaltekst>\n                            {formatDate(opphold.tidsperiode.fom)} - {formatDate(opphold.tidsperiode.tom)}\n                        </Normaltekst>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n\nexport default UtenlandsoppholdOppsummeringListe;\n","import { doesTidsperiodeContainDate, intlUtils } from '@navikt/fp-common';\nimport Barn, { isAdoptertAnnetBarn, isAdoptertStebarn } from 'app/context/types/Barn';\nimport InformasjonOmUtenlandsopphold, { Utenlandsopphold } from 'app/context/types/InformasjonOmUtenlandsopphold';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport UtenlandsoppholdListe from './UtenlandsoppholdOppsummeringListe';\n\ninterface Props {\n    informasjonOmUtenlandsopphold: InformasjonOmUtenlandsopphold;\n    barn: Barn;\n}\n\nconst getErINorgePåFamiliehendelsedato = (\n    familiehendelsedato: string,\n    tidligereOpphold: Utenlandsopphold[],\n    senereOpphold: Utenlandsopphold[]\n): boolean => {\n    let erINorge = true;\n\n    tidligereOpphold.forEach((tidOpphold) => {\n        if (doesTidsperiodeContainDate(tidOpphold.tidsperiode, familiehendelsedato)) {\n            erINorge = false;\n        }\n    });\n\n    senereOpphold.forEach((senOpphold) => {\n        if (doesTidsperiodeContainDate(senOpphold.tidsperiode, familiehendelsedato)) {\n            erINorge = false;\n        }\n    });\n\n    return erINorge;\n};\n\nconst erAdoptertBarn = (barn: Barn): boolean => {\n    return isAdoptertAnnetBarn(barn) || isAdoptertStebarn(barn);\n};\n\nconst UtenlandsoppholdOppsummering: FunctionComponent<Props> = ({ informasjonOmUtenlandsopphold, barn }) => {\n    const intl = useIntl();\n    const { senereOpphold, tidligereOpphold } = informasjonOmUtenlandsopphold;\n    const familiehendelsedato = getFamiliehendelsedato(barn);\n    const erINorgePåFamiliehendelsedato = getErINorgePåFamiliehendelsedato(\n        familiehendelsedato,\n        tidligereOpphold,\n        senereOpphold\n    );\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.utenlandsopphold.harBoddINorge')}>\n                {informasjonOmUtenlandsopphold.iNorgeSiste12Mnd ? (\n                    <Normaltekst>{intlUtils(intl, 'oppsummering.utenlandsopphold.harBoddINorge.norge')}</Normaltekst>\n                ) : null}\n\n                <UtenlandsoppholdListe\n                    utenlandsopphold={informasjonOmUtenlandsopphold.tidligereOpphold}\n                    tidligereOpphold={true}\n                />\n            </OppsummeringsPunkt>\n\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.utenlandsopphold.skalBoINorge')}>\n                {informasjonOmUtenlandsopphold.iNorgeNeste12Mnd ? (\n                    <Normaltekst>{intlUtils(intl, 'oppsummering.utenlandsopphold.skalBoINorge.norge')}</Normaltekst>\n                ) : null}\n\n                <UtenlandsoppholdListe\n                    utenlandsopphold={informasjonOmUtenlandsopphold.senereOpphold}\n                    tidligereOpphold={false}\n                />\n            </OppsummeringsPunkt>\n\n            <OppsummeringsPunkt\n                title={\n                    erAdoptertBarn(barn)\n                        ? intlUtils(intl, 'oppsummering.utenlandsopphold.erINorgeOmsorgsovertakelsesdato')\n                        : intlUtils(intl, 'oppsummering.utenlandsopphold.erINorgePåFødselstidspunkt')\n                }\n            >\n                <Normaltekst>\n                    <FormattedMessage id={erINorgePåFamiliehendelsedato ? 'ja' : 'nei'} />\n                </Normaltekst>\n            </OppsummeringsPunkt>\n        </>\n    );\n};\n\nexport default UtenlandsoppholdOppsummering;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\n\nexport enum OppsummeringFormField {\n    harGodkjentOppsummering = 'harGodkjentOppsummering',\n}\n\nexport interface OppsummeringFormData {\n    [OppsummeringFormField.harGodkjentOppsummering]: boolean;\n}\n\nconst initialOppsummeringValues: OppsummeringFormData = {\n    [OppsummeringFormField.harGodkjentOppsummering]: false,\n};\n\nexport const getInitialOppsummeringValues = (): OppsummeringFormData => {\n    return initialOppsummeringValues;\n};\n\nexport const OppsummeringFormComponents = getTypedFormComponents<OppsummeringFormField, OppsummeringFormData, string>();\n","import { intlUtils } from '@navikt/fp-common';\nimport { IntlShape } from 'react-intl';\n\nexport const validateHarGodkjentOppsummering = (intl: IntlShape) => (value: boolean) => {\n    if (value !== true) {\n        return intlUtils(intl, 'valideringsfeil.oppsummering.harGodkjentOppsummering.påkrevd');\n    }\n\n    return undefined;\n};\n","import React, { FunctionComponent } from 'react';\nimport * as countries from 'i18n-iso-countries';\nimport { AnnenInntekt, AnnenInntektType, JobbIUtlandetInntekt } from 'app/context/types/AnnenInntekt';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport { useIntl } from 'react-intl';\nimport { intlUtils } from '@navikt/fp-common';\nimport { Attachment } from 'app/types/Attachment';\nimport EtikettBase from 'nav-frontend-etiketter';\nimport Lenke from 'nav-frontend-lenker';\nimport { isAttachmentWithError } from 'app/utils/vedleggUtils';\n\ninterface Props {\n    annenInntekt: AnnenInntekt;\n}\n\nconst AnnenInntektDetaljer: FunctionComponent<Props> = ({ annenInntekt }) => {\n    const intl = useIntl();\n    const { type, vedlegg } = annenInntekt;\n    if (type === AnnenInntektType.JOBB_I_UTLANDET) {\n        const jobbIUtlandetInntekt = annenInntekt as JobbIUtlandetInntekt;\n        return (\n            <>\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.arbeidsgiverNavn')}>\n                    <Normaltekst>{jobbIUtlandetInntekt.arbeidsgiverNavn}</Normaltekst>\n                </OppsummeringsPunkt>\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.arbeidsgiverLand')}>\n                    <Normaltekst>{countries.getName(jobbIUtlandetInntekt.land, 'nb')}</Normaltekst>\n                </OppsummeringsPunkt>\n            </>\n        );\n    }\n    if (\n        type === AnnenInntektType.VENTELØNN ||\n        type === AnnenInntektType.SLUTTPAKKE ||\n        type === AnnenInntektType.MILITÆRTJENESTE\n    ) {\n        const renderListOfAttachmentPreviewLinks = () => {\n            return vedlegg\n                .filter((a: Attachment) => !isAttachmentWithError(a))\n                .map(({ url, id, filename }) => (\n                    <Lenke href={url!} key={id} target=\"_blank\">\n                        {filename}\n                    </Lenke>\n                ));\n        };\n        return (\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.vedlagtdokumentasjon')}>\n                {(vedlegg || []).filter((a: Attachment) => !isAttachmentWithError(a)).length > 0 ? (\n                    renderListOfAttachmentPreviewLinks()\n                ) : (\n                    <EtikettBase type=\"fokus\">\n                        {intlUtils(intl, 'oppsummering.andreInntekter.dokumentasjon.mangler')}\n                    </EtikettBase>\n                )}\n            </OppsummeringsPunkt>\n        );\n    }\n    return null;\n};\n\nexport default AnnenInntektDetaljer;\n","import { Element, Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent, ReactElement } from 'react';\n\nimport './inntekterTabell.less';\n\ninterface Props {\n    list: Array<{\n        key: string;\n        headerVenstre: string;\n        headerHøyre: string;\n        content?: ReactElement;\n    }>;\n}\n\nconst InntekterTabell: FunctionComponent<Props> = ({ list }) => {\n    return (\n        <ul className=\"oppsummeringsliste\">\n            {list.map((l) => (\n                <li key={l.key} className=\"oppsummeringsliste__element\">\n                    <div className=\"oppsummeringsliste__element__heading\">\n                        <Element>{l.headerVenstre}</Element>\n                        <div className=\"høyrestiltTekst\">\n                            <Normaltekst>{l.headerHøyre}</Normaltekst>\n                        </div>\n                    </div>\n                    {l.content && <div className=\"oppsummeringsliste__element__content\">{l.content}</div>}\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default InntekterTabell;\n","import { formatDate, intlUtils } from '@navikt/fp-common';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\n\nimport AnnenInntektDetaljer from './AnnenInntektDetaljer';\nimport InntekterTabell from './InntekterTabell';\n\nconst AndreInntekterOppsummering: FunctionComponent = () => {\n    const intl = useIntl();\n    const {\n        søker: { harHattAnnenInntektSiste10Mnd, andreInntekterSiste10Mnd },\n    } = useSøknad();\n\n    if (!harHattAnnenInntektSiste10Mnd || !andreInntekterSiste10Mnd) {\n        return (\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.tittel')}>\n                <Normaltekst>{intlUtils(intl, 'oppsummering.andreInntekter.ikkeHattAndreInntekter')}</Normaltekst>\n            </OppsummeringsPunkt>\n        );\n    }\n\n    return (\n        <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.tittel')}>\n            <InntekterTabell\n                list={andreInntekterSiste10Mnd.map((annenInntekt) => ({\n                    key: annenInntekt.type + annenInntekt.tidsperiode,\n                    headerVenstre: intlUtils(intl, `inntektstype.${annenInntekt.type.toLowerCase()}`),\n                    headerHøyre: intlUtils(intl, 'tidsintervall', {\n                        fom: formatDate(ISOStringToDate(annenInntekt.tidsperiode.fom)!),\n                        tom: annenInntekt.pågående\n                            ? 'pågående'\n                            : formatDate(ISOStringToDate(annenInntekt.tidsperiode.tom)!),\n                    }),\n                    content: <AnnenInntektDetaljer annenInntekt={annenInntekt} />,\n                }))}\n            />\n        </OppsummeringsPunkt>\n    );\n};\n\nexport default AndreInntekterOppsummering;\n","import { Block, formatDate, intlUtils } from '@navikt/fp-common';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport InntekterTabell from './InntekterTabell';\n\nconst FrilansOppsummering: FunctionComponent = () => {\n    const intl = useIntl();\n    const {\n        søker: { frilansInformasjon, harJobbetSomFrilansSiste10Mnd },\n    } = useSøknad();\n\n    if (!frilansInformasjon || !harJobbetSomFrilansSiste10Mnd) {\n        return (\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.tittel')}>\n                <Normaltekst>{intlUtils(intl, 'oppsummering.frilans.ikkeFrilans')}</Normaltekst>\n            </OppsummeringsPunkt>\n        );\n    }\n    const {\n        oppstart,\n        jobberFremdelesSomFrilans,\n        driverFosterhjem,\n        harJobbetForNærVennEllerFamilieSiste10Mnd,\n        oppdragForNæreVennerEllerFamilieSiste10Mnd,\n    } = frilansInformasjon;\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.tittel')} />\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.oppstartsdato')}>\n                <Normaltekst>{formatDate(oppstart)}</Normaltekst>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.fremdelesFrilans')}>\n                <Normaltekst>{jobberFremdelesSomFrilans ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}</Normaltekst>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.driverFosterhjem')}>\n                <Normaltekst>{driverFosterhjem ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}</Normaltekst>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt\n                title={intlUtils(intl, 'oppsummering.frilans.frilansArbeidForNæreVennerEllerFamilieSiste10Mnd')}\n            >\n                <Block visible={!harJobbetForNærVennEllerFamilieSiste10Mnd} margin=\"none\">\n                    <Normaltekst>\n                        {intlUtils(\n                            intl,\n                            'oppsummering.frilans.harIkkeUtførtFrilansArbeidForNæreVennerEllerFamilieSiste10Mnd'\n                        )}\n                    </Normaltekst>\n                </Block>\n                <Block visible={harJobbetForNærVennEllerFamilieSiste10Mnd} margin=\"none\">\n                    <InntekterTabell\n                        list={oppdragForNæreVennerEllerFamilieSiste10Mnd.map(\n                            ({ navnPåArbeidsgiver, tidsperiode, pågående }) => ({\n                                key: navnPåArbeidsgiver + tidsperiode,\n                                headerVenstre: navnPåArbeidsgiver,\n                                headerHøyre: intlUtils(intl, 'tidsintervall', {\n                                    fom: formatDate(tidsperiode.fom!),\n                                    tom: pågående ? 'pågående' : formatDate(tidsperiode.tom!),\n                                }),\n                            })\n                        )}\n                    />\n                </Block>\n            </OppsummeringsPunkt>\n        </>\n    );\n};\n\nexport default FrilansOppsummering;\n","import { formatDate, intlUtils } from '@navikt/fp-common';\nimport { Næring } from 'app/context/types/Næring';\nimport * as countries from 'i18n-iso-countries';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\n\ninterface Props {\n    næring: Næring;\n}\n\nconst Næringsdetaljer: FunctionComponent<Props> = ({ næring }) => {\n    const intl = useIntl();\n    const {\n        næringstyper,\n        organisasjonsnummer,\n        næringsinntekt,\n        registrertINorge,\n        registrertILand,\n        harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene,\n        hattVarigEndringAvNæringsinntektSiste4Kalenderår,\n        endringAvNæringsinntektInformasjon,\n        harRegnskapsfører,\n        regnskapsfører,\n    } = næring;\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.næringstype')}>\n                <Normaltekst>{intlUtils(intl, `næringstype.${næringstyper[0].toLowerCase()}`)}</Normaltekst>\n            </OppsummeringsPunkt>\n            {organisasjonsnummer && (\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.orgnr')}>\n                    <Normaltekst>{organisasjonsnummer}</Normaltekst>\n                </OppsummeringsPunkt>\n            )}\n            {næringsinntekt && (\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.næringsinntekt')}>\n                    <Normaltekst>{næringsinntekt}</Normaltekst>\n                </OppsummeringsPunkt>\n            )}\n            {registrertINorge ||\n                (registrertILand && (\n                    <OppsummeringsPunkt\n                        title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.registrertLand')}\n                    >\n                        <Normaltekst>\n                            {registrertINorge ? 'Norge' : countries.getName(registrertILand, 'nb')}\n                        </Normaltekst>\n                    </OppsummeringsPunkt>\n                ))}\n            {harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene && (\n                <OppsummeringsPunkt\n                    title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.blittYrkesaktivSiste3År')}\n                >\n                    <Normaltekst>\n                        {harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n                            ? intlUtils(intl, 'ja')\n                            : intlUtils(intl, 'nei')}\n                    </Normaltekst>\n                </OppsummeringsPunkt>\n            )}\n            {hattVarigEndringAvNæringsinntektSiste4Kalenderår === true && (\n                <>\n                    <OppsummeringsPunkt\n                        title={intlUtils(\n                            intl,\n                            'oppsummering.selvstendigNæringsdrivende.datoForEndringAvNæringsinntekt'\n                        )}\n                    >\n                        <Normaltekst>{formatDate(endringAvNæringsinntektInformasjon!.dato)}</Normaltekst>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt\n                        title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.næringsinntektEtterEndring')}\n                    >\n                        <Normaltekst>{endringAvNæringsinntektInformasjon!.næringsinntektEtterEndring}</Normaltekst>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.forklaring')}>\n                        <Normaltekst>{endringAvNæringsinntektInformasjon!.forklaring}</Normaltekst>\n                    </OppsummeringsPunkt>\n                </>\n            )}\n            {harRegnskapsfører === true && regnskapsfører && (\n                <>\n                    <OppsummeringsPunkt\n                        title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.regnskapsførerNavn')}\n                    >\n                        <Normaltekst>{regnskapsfører.navn}</Normaltekst>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt\n                        title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.regnskapsførerTlf')}\n                    >\n                        <Normaltekst>{regnskapsfører.telefonnummer}</Normaltekst>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt\n                        title={intlUtils(\n                            intl,\n                            'oppsummering.selvstendigNæringsdrivende.regnskapsførerNærVennEllerFamilie'\n                        )}\n                    >\n                        <Normaltekst>\n                            {regnskapsfører.erNærVennEllerFamilie ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}\n                        </Normaltekst>\n                    </OppsummeringsPunkt>\n                </>\n            )}\n            {harRegnskapsfører === false && (\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.regnskapsfører')}>\n                    <Normaltekst>\n                        {intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.harIkkeRegnskapsfører')}\n                    </Normaltekst>\n                </OppsummeringsPunkt>\n            )}\n        </>\n    );\n};\n\nexport default Næringsdetaljer;\n","import { formatDate, intlUtils } from '@navikt/fp-common';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport InntekterTabell from './InntekterTabell';\nimport Næringsdetaljer from './Næringsdetaljer';\n\nconst SelvstendigNæringsdrivendeOppsummering: FunctionComponent = () => {\n    const intl = useIntl();\n    const {\n        søker: { selvstendigNæringsdrivendeInformasjon, harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd },\n    } = useSøknad();\n\n    if (!selvstendigNæringsdrivendeInformasjon || !harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd) {\n        return (\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.tittel')}>\n                <Normaltekst>\n                    {intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.ikkeSelvstendigNæringsdrivende')}\n                </Normaltekst>\n            </OppsummeringsPunkt>\n        );\n    }\n\n    return (\n        <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.tittel')}>\n            <InntekterTabell\n                list={selvstendigNæringsdrivendeInformasjon.map((næring) => ({\n                    key: næring.navnPåNæringen + næring.tidsperiode,\n                    headerVenstre: næring.navnPåNæringen,\n                    headerHøyre: intlUtils(intl, 'tidsintervall', {\n                        fom: formatDate(næring.tidsperiode.fom)!,\n                        tom: næring.pågående ? 'pågående' : formatDate(næring.tidsperiode.tom!),\n                    }),\n                    content: <Næringsdetaljer næring={næring} />,\n                }))}\n            />\n        </OppsummeringsPunkt>\n    );\n};\n\nexport default SelvstendigNæringsdrivendeOppsummering;\n","import { intlUtils } from '@navikt/fp-common';\nimport HarArbeidsforhold from 'app/steps/inntektsinformasjon/components/arbeidsforhold-informasjon/HarArbeidsforhold';\nimport HarIkkeArbeidsforhold from 'app/steps/inntektsinformasjon/components/arbeidsforhold-informasjon/HarIkkeArbeidsforhold';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport AndreInntekterOppsummering from './AndreInntekterOppsummering';\nimport FrilansOppsummering from './FrilansOppsummering';\nimport SelvstendigNæringsdrivendeOppsummering from './SelvstendigNæringsdrivendeOppsummering';\n\nconst ArbeidsforholdOgAndreInntekterOppsummering: FunctionComponent = () => {\n    const intl = useIntl();\n    const { arbeidsforhold } = useSøkerinfo();\n    const harArbeidsforhold = arbeidsforhold !== undefined && arbeidsforhold.length > 0;\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.inntekt.registrerteArbeidsforhold')}>\n                <HarIkkeArbeidsforhold harArbeidsforhold={harArbeidsforhold} />\n                <HarArbeidsforhold harArbeidsforhold={harArbeidsforhold} arbeidsforhold={arbeidsforhold} />\n            </OppsummeringsPunkt>\n            <FrilansOppsummering />\n            <SelvstendigNæringsdrivendeOppsummering />\n            <AndreInntekterOppsummering />\n        </>\n    );\n};\n\nexport default ArbeidsforholdOgAndreInntekterOppsummering;\n","import { Tilleggsopplysning, Tilleggsopplysninger } from 'app/context/types/Tilleggsopplysninger';\nimport { replaceInvisibleCharsWithSpace } from './stringUtils';\n\nconst TIL_SAKSBEHANDLER = {\n    'tilleggsopplysning.begrunnelseForSenEndring': 'Begrunnelse for å søke om utsettelse',\n    'tilleggsopplysning.begrunnelseForSenEndring.SYKDOM': 'på grunn av sykdom tilbake i tid',\n    'tilleggsopplysning.begrunnelseForSenEndring.UTTAK': 'på grunn av uttak mer enn tre måneder tilbake i tid',\n    'tilleggsopplysning.begrunnelseForSenEndring.SYKDOM_OG_UTTAK':\n        'på grunn av sykdom tilbake i tid og uttak mer enn tre måneder tilbake i tid',\n};\n\nexport interface TilleggsopplysningMedBeskrivelse {\n    beskrivelse: string;\n    tekst: string;\n    ekstraInformasjon?: string;\n}\n\nexport const beskrivTilleggsopplysning = (tilleggsopplysning: Tilleggsopplysning): TilleggsopplysningMedBeskrivelse => {\n    const { tekst, ekstraInformasjon } = tilleggsopplysning;\n    const beskrivelseMessageId = `tilleggsopplysning.begrunnelseForSenEndring`;\n    const beskrivelseAvOpplysning = TIL_SAKSBEHANDLER[beskrivelseMessageId];\n    const ekstraMessageId = `tilleggsopplysning.begrunnelseForSenEndring.${ekstraInformasjon}`;\n    const ekstraInfoTilSaksbehandling = (TIL_SAKSBEHANDLER as any)[ekstraMessageId];\n\n    return {\n        beskrivelse: beskrivelseAvOpplysning,\n        ekstraInformasjon: ekstraInfoTilSaksbehandling,\n        tekst,\n    };\n};\n\nexport const cleanupInvisibleCharsFromTilleggsopplysninger = (\n    tilleggsopplysninger: Tilleggsopplysninger\n): Tilleggsopplysninger => {\n    return tilleggsopplysninger.begrunnelseForSenEndring\n        ? {\n              ...tilleggsopplysninger,\n              begrunnelseForSenEndring: {\n                  ...tilleggsopplysninger.begrunnelseForSenEndring,\n                  tekst: replaceInvisibleCharsWithSpace(tilleggsopplysninger.begrunnelseForSenEndring.tekst),\n              },\n          }\n        : tilleggsopplysninger;\n};\n","import * as React from 'react';\nimport './feltoppsummering.less';\nimport InnholdMedLedetekst from '../InnholdMedLedetekst';\n\ninterface Props {\n    feltnavn: string;\n    verdi: string | string[];\n}\n\nconst Feltoppsummering: React.FunctionComponent<Props> = ({ feltnavn, verdi }) => (\n    <InnholdMedLedetekst className=\"feltoppsummering\" ledetekst={feltnavn}>\n        <div className=\"feltoppsummering__verdi\">{verdi}</div>\n    </InnholdMedLedetekst>\n);\n\nexport default Feltoppsummering;\n","import * as React from 'react';\nimport './list.less';\nimport { bemUtils } from '@navikt/fp-common';\n\ninterface ListProps {\n    data: any[];\n    renderElement: (data: any, index: number) => JSX.Element;\n    className?: string;\n}\n\nconst bem = bemUtils('list');\nconst List: React.FunctionComponent<ListProps> = (props: ListProps) => {\n    const { data, renderElement, className } = props;\n    return (\n        <ul className={`${bem.block} ${className}`}>\n            {data.map((dataObject: any, i: number) => renderElement(dataObject, i))}\n        </ul>\n    );\n};\n\nexport default List;\n","import classNames from 'classnames';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\nimport * as React from 'react';\nimport List from './list/List';\n\nexport interface OppsummeringslisteelementProps {\n    venstrestiltTekst: string;\n    høyrestiltTekst: string;\n    venstrestiltTag?: string;\n    content?: React.ReactNode;\n    kompakt?: boolean;\n}\n\ninterface OppsummeringslisteProps {\n    data: OppsummeringslisteelementProps[];\n    kompakt?: boolean;\n}\n\nconst Oppsummeringsliste: React.FunctionComponent<OppsummeringslisteProps> = (props: OppsummeringslisteProps) => {\n    const { data, kompakt } = props;\n    return (\n        <List\n            className=\"oppsummeringsliste\"\n            data={data}\n            renderElement={(elementProps: OppsummeringslisteelementProps) => (\n                <Oppsummeringslisteelement {...elementProps} kompakt={kompakt} key={guid()} />\n            )}\n        />\n    );\n};\n\nconst Oppsummeringslisteelement: React.FunctionComponent<OppsummeringslisteelementProps> = ({\n    venstrestiltTekst,\n    venstrestiltTag = 'h4',\n    høyrestiltTekst,\n    content,\n    kompakt,\n}: OppsummeringslisteelementProps) => (\n    <li\n        className={classNames('oppsummeringsliste__element', {\n            'oppsummeringsliste__element--kompakt': kompakt === true,\n        })}\n    >\n        <div className=\"oppsummeringsliste__element__heading\">\n            <Element tag={venstrestiltTag}>{venstrestiltTekst}</Element>\n            <div className=\"høyrestiltTekst\">\n                <Normaltekst>{høyrestiltTekst}</Normaltekst>\n            </div>\n        </div>\n        {content && <div className=\"oppsummeringsliste__element__content\">{content}</div>}\n    </li>\n);\n\nexport default Oppsummeringsliste;\n","import AnnenForelder from 'app/context/types/AnnenForelder';\nimport { Attachment, InnsendingsType } from 'app/types/Attachment';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { MissingAttachment } from 'app/types/MissingAttachment';\nimport { Skjemanummer } from 'app/types/Skjemanummer';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { OverføringÅrsakType } from 'uttaksplan/types/OverføringÅrsakType';\nimport {\n    isOverføringsperiode,\n    isUtsettelsesperiode,\n    isUttaksperiode,\n    Overføringsperiode,\n    Periode,\n    Periodetype,\n    PeriodeUtenUttakUtsettelse,\n    Utsettelsesperiode,\n    Uttaksperiode,\n} from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport { erÅrsakSykdomEllerInstitusjonsopphold } from 'uttaksplan/utils/periodeUtils';\nimport { aktivitetskravMorSkalBesvares } from 'uttaksplan/utils/uttaksskjema/aktivitetskravMorSkalBesvares';\nimport { Søknadsinfo } from 'uttaksplan/validering/utils/types/Søknadsinfo';\nimport { aktivitetskravMorUtil, getMorsAktivitetSkjemanummer } from './morsAktivitetUtils';\n\nconst createMissingAttachment = (\n    index: number,\n    skjemanummer: Skjemanummer,\n    type: AttachmentType,\n    periodeId?: string\n): MissingAttachment => {\n    return {\n        index,\n        skjemanummer,\n        type,\n        periodeId,\n    };\n};\n\nconst isAttachmentMissing = (attachments?: Attachment[], type?: AttachmentType): boolean =>\n    attachments === undefined ||\n    attachments.length === 0 ||\n    (type !== undefined && attachments.find((a) => a.type === type) === undefined);\n\nexport const shouldPeriodeHaveAttachment = (\n    periode: Periode,\n    søkerErFarEllerMedmor: boolean,\n    annenForelder: AnnenForelder\n): boolean => {\n    switch (periode.type) {\n        case Periodetype.Overføring:\n            return dokumentasjonBehøvesForOverføringsperiode(søkerErFarEllerMedmor, periode);\n        case Periodetype.Utsettelse:\n            return dokumentasjonBehøvesForUtsettelsesperiode(\n                periode,\n                aktivitetskravMorUtil.skalBesvaresVedUtsettelse(søkerErFarEllerMedmor, annenForelder)\n            );\n        case Periodetype.Uttak:\n            return dokumentasjonBehøvesForUttaksperiode(periode);\n        default:\n            return false;\n    }\n};\n\nexport const hasPeriodeMissingAttachment = (periode: Periode, søknadsinfo: Søknadsinfo): boolean => {\n    const shouldHave = shouldPeriodeHaveAttachment(\n        periode,\n        søknadsinfo.søkerErFarEllerMedmor,\n        søknadsinfo.annenForelder\n    );\n\n    return (\n        shouldHave &&\n        isAttachmentMissing(periode.vedlegg?.filter((p) => p.innsendingsType !== InnsendingsType.SEND_SENERE))\n    );\n};\n\nexport const findMissingAttachmentsForPerioder = (søknadsinfo: Søknadsinfo): MissingAttachment[] => {\n    const perioder = søknadsinfo.perioderSomSkalSendesInn;\n    if (!perioder) {\n        return [];\n    }\n    const missingAttachments: MissingAttachment[] = [];\n    for (const periode of perioder) {\n        if (hasPeriodeMissingAttachment(periode, søknadsinfo)) {\n            const index = perioder.indexOf(periode);\n            if (\n                (isUtsettelsesperiode(periode) || isUttaksperiode(periode)) &&\n                missingAttachmentForAktivitetskrav(periode, søknadsinfo)\n            ) {\n                missingAttachments.push(\n                    createMissingAttachment(\n                        index,\n                        getMorsAktivitetSkjemanummer(periode.morsAktivitetIPerioden),\n                        AttachmentType.MORS_AKTIVITET_DOKUMENTASJON,\n                        periode.id\n                    )\n                );\n            } else {\n                if (isUtsettelsesperiode(periode)) {\n                    if (periode.årsak === UtsettelseÅrsakType.HvØvelse) {\n                        missingAttachments.push(\n                            createMissingAttachment(index, Skjemanummer.HV_ØVELSE, AttachmentType.HV_ØVELSE, periode.id)\n                        );\n                    }\n\n                    if (\n                        periode.årsak === UtsettelseÅrsakType.Fri &&\n                        søknadsinfo.søkerErFarEllerMedmor &&\n                        !søknadsinfo.morErUfør &&\n                        !søknadsinfo.morHarRett\n                    ) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM,\n                                AttachmentType.MORS_AKTIVITET_DOKUMENTASJON,\n                                periode.id\n                            )\n                        );\n                    }\n\n                    if (periode.årsak === UtsettelseÅrsakType.NavTiltak) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.NAV_TILTAK,\n                                AttachmentType.NAV_TILTAK,\n                                periode.id\n                            )\n                        );\n                    }\n\n                    if (\n                        periode.årsak === UtsettelseÅrsakType.InstitusjonSøker ||\n                        periode.årsak === UtsettelseÅrsakType.InstitusjonBarnet\n                    ) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_INNLEGGELSE,\n                                AttachmentType.UTSETTELSE_SYKDOM,\n                                periode.id\n                            )\n                        );\n                    }\n\n                    if (periode.årsak === UtsettelseÅrsakType.Sykdom) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_OVERFØRING_FOR_SYK,\n                                AttachmentType.UTSETTELSE_SYKDOM,\n                                periode.id\n                            )\n                        );\n                    }\n                }\n\n                if (isOverføringsperiode(periode)) {\n                    if (\n                        periode.årsak === OverføringÅrsakType.institusjonsoppholdAnnenForelder ||\n                        periode.årsak === OverføringÅrsakType.sykdomAnnenForelder\n                    ) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_OVERFØRING_FOR_SYK,\n                                AttachmentType.OVERFØRING_KVOTE,\n                                periode.id\n                            )\n                        );\n                    }\n                }\n\n                if (isUttaksperiode(periode)) {\n                    if (periode.konto === StønadskontoType.Fedrekvote && periode.erMorForSyk === true) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM,\n                                AttachmentType.UTSETTELSE_SYKDOM,\n                                periode.id\n                            )\n                        );\n                    }\n                }\n            }\n        }\n    }\n    return missingAttachments;\n};\n\nconst dokumentasjonBehøvesForUttaksperiode = (periode: Uttaksperiode): boolean => {\n    if (periode.harIkkeAktivitetskrav) {\n        return false;\n    }\n\n    return (\n        (periode.morsAktivitetIPerioden !== undefined && periode.morsAktivitetIPerioden !== MorsAktivitet.Uføre) ||\n        (periode.konto === StønadskontoType.Fedrekvote && periode.erMorForSyk === true)\n    );\n};\n\nconst dokumentasjonBehøvesForUtsettelsesperiode = (\n    { årsak }: Utsettelsesperiode | PeriodeUtenUttakUtsettelse,\n    harMorAktivitetskrav: boolean\n): boolean => {\n    return (\n        harMorAktivitetskrav ||\n        erÅrsakSykdomEllerInstitusjonsopphold(årsak) ||\n        årsak === UtsettelseÅrsakType.HvØvelse ||\n        årsak === UtsettelseÅrsakType.NavTiltak\n    );\n};\n\nexport const dokumentasjonBehøvesForOverføringsperiode = (\n    erFarEllerMedmor: boolean,\n    periode: Overføringsperiode\n): boolean =>\n    (erFarEllerMedmor || periode.årsak !== OverføringÅrsakType.aleneomsorg) &&\n    periode.årsak !== OverføringÅrsakType.ikkeRettAnnenForelder;\n\nconst missingAttachmentForAktivitetskrav = (\n    periode: Utsettelsesperiode | Uttaksperiode,\n    søknadsinfo: Søknadsinfo\n): boolean => {\n    const søkerErMor = !søknadsinfo.søkerErFarEllerMedmor;\n    const ønskerFlerBarnsdager = isUttaksperiode(periode) ? periode.ønskerFlerbarnsdager : undefined;\n    const erSamtidigUttak = isUttaksperiode(periode) ? periode.ønskerSamtidigUttak : undefined;\n    const morErForSyk = isUttaksperiode(periode) ? periode.erMorForSyk : undefined;\n    const konto = isUttaksperiode(periode) ? periode.konto : undefined;\n    return (\n        aktivitetskravMorSkalBesvares(\n            ønskerFlerBarnsdager,\n            erSamtidigUttak,\n            morErForSyk,\n            periode.type,\n            konto,\n            søkerErMor,\n            søknadsinfo.søkerErAleneOmOmsorg,\n            søknadsinfo.annenForelder.kanIkkeOppgis,\n            søknadsinfo.søkerHarMidlertidigOmsorg,\n            periode.tidsperiode,\n            søknadsinfo.familiehendelsesdato,\n            søknadsinfo.termindato,\n            søknadsinfo.søkersituasjon.situasjon,\n            søknadsinfo.stønadskontoer,\n            !søknadsinfo.morHarRett\n        ) &&\n        isAttachmentMissing(\n            periode.vedlegg?.filter((p) => p.innsendingsType !== InnsendingsType.SEND_SENERE),\n            AttachmentType.MORS_AKTIVITET_DOKUMENTASJON\n        )\n    );\n};\n","import { intlUtils } from '@navikt/fp-common';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { IntlShape } from 'react-intl';\nimport {\n    Arbeidsform,\n    Overføringsperiode,\n    Periodetype,\n    PeriodeUtenUttakUtsettelse,\n    Utsettelsesperiode,\n} from 'uttaksplan/types/Periode';\n\ntype MessageValue = string | number | boolean | Date | null | undefined;\n\nconst getValgtArbeidsgiverNavn = (arbeidsforhold: Arbeidsforhold[], orgnr?: string) => {\n    if (orgnr) {\n        const valgtArbeidsgiver = arbeidsforhold.find(\n            ({ arbeidsgiverId, arbeidsgiverIdType }) => arbeidsgiverIdType === 'orgnr' && arbeidsgiverId === orgnr\n        );\n        if (valgtArbeidsgiver) {\n            return valgtArbeidsgiver.arbeidsgiverNavn;\n        }\n    }\n    return '';\n};\n\nexport const getArbeidsformTekst = (\n    intl: IntlShape,\n    arbeidsformer: Arbeidsform[],\n    orgnumre?: string[],\n    arbeidsforhold?: Arbeidsforhold[]\n) => {\n    let arbeidstakerTekster: string[] = [];\n    let arbeidsformerTekster: string[] = [];\n\n    if (orgnumre !== undefined && orgnumre.length > 0 && arbeidsforhold && arbeidsforhold.length > 0) {\n        arbeidstakerTekster = orgnumre.map((orgnr) => {\n            const arbeidsgiverNavn = getValgtArbeidsgiverNavn(arbeidsforhold, orgnr);\n            return intlUtils(intl, `oppsummering.uttak.arbeidstaker`, { orgnr, arbeidsgiverNavn });\n        });\n    }\n\n    if (arbeidsformer !== undefined && arbeidsformer.length > 0) {\n        arbeidsformerTekster = arbeidsformer\n            .filter((arbeidsform) => arbeidsform !== Arbeidsform.arbeidstaker)\n            .map((arbeidsform) => {\n                return intlUtils(intl, `oppsummering.uttak.${arbeidsform.toLowerCase()}`);\n            });\n    }\n\n    return arbeidstakerTekster.concat(arbeidsformerTekster);\n};\n\nexport const getÅrsakTekst = (\n    intl: IntlShape,\n    { type, årsak }: Utsettelsesperiode | Overføringsperiode | PeriodeUtenUttakUtsettelse,\n    messageValues?: { [key: string]: MessageValue }\n) => {\n    const intlKeyPrefix = type === Periodetype.Utsettelse ? 'utsettelsesårsak.' : 'overføringsårsaktype.';\n    return intlUtils(intl, `uttaksplan.${intlKeyPrefix + årsak}`, messageValues);\n};\n","import * as React from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { Overføringsperiode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport Feltoppsummering from '../feltoppsummering/Feltoppsummering';\nimport { intlUtils } from '@navikt/fp-common';\nimport OppsummeringAvDokumentasjon from '../oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon';\nimport { dokumentasjonBehøvesForOverføringsperiode } from 'app/utils/manglendeVedleggUtils';\nimport { getÅrsakTekst } from '../OppsummeringUtils';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\n\ninterface OverføringsperiodedetaljerProps {\n    periode: Overføringsperiode;\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor: boolean;\n    periodeErNyEllerEndret: boolean;\n}\n\ntype Props = OverføringsperiodedetaljerProps;\n\nconst getNavnPåAnnenForelder = (navnPåForeldre: NavnPåForeldre, konto: StønadskontoType, intl: IntlShape) => {\n    if (konto === StønadskontoType.Fedrekvote) {\n        return navnPåForeldre.farMedmor;\n    } else if (konto === StønadskontoType.Mødrekvote) {\n        return navnPåForeldre.mor;\n    }\n    return intlUtils(intl, 'annen.forelder');\n};\n\nconst Overføringsperiodedetaljer: React.FunctionComponent<Props> = ({\n    periode,\n    navnPåForeldre,\n    erFarEllerMedmor,\n    periodeErNyEllerEndret,\n}) => {\n    const { vedlegg } = periode;\n    const intl = useIntl();\n    const navnAnnenForelder = getNavnPåAnnenForelder(navnPåForeldre, periode.konto, intl);\n    return (\n        <>\n            <Feltoppsummering\n                feltnavn={intlUtils(intl, 'oppsummering.uttak.årsak')}\n                verdi={getÅrsakTekst(intl, periode, { navnAnnenForelder })}\n            />\n\n            {dokumentasjonBehøvesForOverføringsperiode(erFarEllerMedmor, periode) && periodeErNyEllerEndret && (\n                <OppsummeringAvDokumentasjon vedlegg={vedlegg || []} />\n            )}\n        </>\n    );\n};\n\nexport default Overføringsperiodedetaljer;\n","import * as React from 'react';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { Attachment } from 'app/types/Attachment';\nimport { IntlShape, useIntl } from 'react-intl';\nimport OppsummeringAvDokumentasjon from '../oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon';\nimport Feltoppsummering from '../feltoppsummering/Feltoppsummering';\nimport { intlUtils } from '@navikt/fp-common';\nimport { assertUnreachable } from 'app/utils/globalUtil';\n\ninterface MorsAktivitetDetaljerProps {\n    morsAktivitet: MorsAktivitet;\n    dokumentasjonAvMorsAktivitet: Attachment[];\n    visOppsummeringAvDokumentasjon: boolean;\n}\n\ntype Props = MorsAktivitetDetaljerProps;\n\nconst getMorsAktivitetTekst = (intl: IntlShape, aktivitet: MorsAktivitet): string => {\n    switch (aktivitet) {\n        case MorsAktivitet.Arbeid:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Arbeid');\n        case MorsAktivitet.ArbeidOgUtdanning:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.ArbeidOgUtdanning');\n        case MorsAktivitet.Innlagt:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Innlagt');\n        case MorsAktivitet.Introduksjonsprogrammet:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Introduksjonsprogrammet');\n        case MorsAktivitet.Kvalifiseringsprogrammet:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Kvalifiseringsprogrammet');\n        case MorsAktivitet.TrengerHjelp:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.TrengerHjelp');\n        case MorsAktivitet.Uføre:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Uføre');\n        case MorsAktivitet.Utdanning:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Utdanning');\n        case MorsAktivitet.IkkeOppgitt:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.UtenAktivitetsKrav');\n        default:\n            return assertUnreachable(aktivitet, 'Mor har ingen aktivitet');\n    }\n};\n\nconst MorsAktivitetDetaljer: React.FunctionComponent<Props> = ({\n    morsAktivitet,\n    dokumentasjonAvMorsAktivitet,\n    visOppsummeringAvDokumentasjon,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Feltoppsummering\n                feltnavn={intlUtils(intl, 'oppsummering.morsAktivitet')}\n                verdi={getMorsAktivitetTekst(intl, morsAktivitet)}\n            />\n            {visOppsummeringAvDokumentasjon && (\n                <OppsummeringAvDokumentasjon\n                    ledetekst={intlUtils(intl, 'oppsummering.morsAktivitet.dokumentasjon')}\n                    vedlegg={dokumentasjonAvMorsAktivitet}\n                />\n            )}\n        </>\n    );\n};\n\nexport default MorsAktivitetDetaljer;\n","import { intlUtils } from '@navikt/fp-common';\nimport AnnenForelder, { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { shouldPeriodeHaveAttachment } from 'app/utils/manglendeVedleggUtils';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { UttaksperiodeBase } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport Feltoppsummering from '../feltoppsummering/Feltoppsummering';\nimport MorsAktivitetDetaljer from './MorsaktiviteterDetaljer';\nimport { getArbeidsformTekst } from '../OppsummeringUtils';\n\ninterface UttaksperiodedetaljerProps {\n    periode: UttaksperiodeBase;\n    registrerteArbeidsforhold: Arbeidsforhold[] | undefined;\n    periodeErNyEllerEndret: boolean;\n    søkerErFarEllerMedmor: boolean;\n    annenForelder: AnnenForelder;\n}\n\ntype Props = UttaksperiodedetaljerProps;\n\nconst Uttaksperiodedetaljer: React.FunctionComponent<Props> = ({\n    periode,\n    registrerteArbeidsforhold,\n    periodeErNyEllerEndret,\n    søkerErFarEllerMedmor,\n    annenForelder,\n}) => {\n    const {\n        konto,\n        morsAktivitetIPerioden,\n        ønskerSamtidigUttak,\n        gradert,\n        stillingsprosent,\n        orgnumre,\n        arbeidsformer,\n        vedlegg,\n        ønskerFlerbarnsdager,\n    } = periode;\n    const intl = useIntl();\n\n    let arbeidsformTekst = '';\n    if (arbeidsformer) {\n        arbeidsformTekst = getArbeidsformTekst(intl, arbeidsformer, orgnumre, registrerteArbeidsforhold).join('\\r\\n');\n    }\n\n    const erDeltUttakINorge = isAnnenForelderOppgitt(annenForelder) && annenForelder.harRettPåForeldrepengerINorge;\n\n    return (\n        <>\n            {ønskerFlerbarnsdager !== undefined && erDeltUttakINorge && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.ønskerFlerbarnsdager')}\n                    verdi={ønskerFlerbarnsdager ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}\n                />\n            )}\n            {ønskerSamtidigUttak !== undefined && erDeltUttakINorge && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.samtidigUttak')}\n                    verdi={ønskerSamtidigUttak ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}\n                />\n            )}\n            {konto !== StønadskontoType.ForeldrepengerFørFødsel && ønskerSamtidigUttak !== true && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.kombineresMedarbeid')}\n                    verdi={gradert ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}\n                />\n            )}\n\n            {gradert === true && stillingsprosent && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.stillingsprosent')}\n                    verdi={stillingsprosent}\n                />\n            )}\n\n            {arbeidsformer && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.arbeidstaker.label')}\n                    verdi={arbeidsformTekst}\n                />\n            )}\n            {shouldPeriodeHaveAttachment(periode, søkerErFarEllerMedmor, annenForelder) && morsAktivitetIPerioden && (\n                <MorsAktivitetDetaljer\n                    morsAktivitet={morsAktivitetIPerioden}\n                    dokumentasjonAvMorsAktivitet={vedlegg || []}\n                    visOppsummeringAvDokumentasjon={periodeErNyEllerEndret}\n                />\n            )}\n        </>\n    );\n};\n\nexport default Uttaksperiodedetaljer;\n","import { intlUtils } from '@navikt/fp-common';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { shouldPeriodeHaveAttachment } from 'app/utils/manglendeVedleggUtils';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { PeriodeUtenUttakUtsettelse, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport Feltoppsummering from '../feltoppsummering/Feltoppsummering';\nimport OppsummeringAvDokumentasjon from '../oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon';\nimport { getÅrsakTekst } from '../OppsummeringUtils';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport MorsAktivitetDetaljer from './MorsaktiviteterDetaljer';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\n\ninterface UtsettelsesperiodedetaljerProps {\n    periode: Utsettelsesperiode | PeriodeUtenUttakUtsettelse;\n    registrerteArbeidsforhold: Arbeidsforhold[];\n    søkerErFarEllerMedmor: boolean;\n    annenForelder: AnnenForelder;\n    periodeErNyEllerEndret: boolean;\n}\n\nconst Utsettelsesperiodedetaljer: React.FunctionComponent<UtsettelsesperiodedetaljerProps> = ({\n    periode,\n    søkerErFarEllerMedmor,\n    annenForelder,\n    periodeErNyEllerEndret,\n}) => {\n    const { årsak, morsAktivitetIPerioden, vedlegg, bekrefterArbeidIPerioden } = periode;\n    const intl = useIntl();\n    const bekreftErIArbeidSvar = bekrefterArbeidIPerioden === true ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei');\n\n    return (\n        <>\n            <Feltoppsummering\n                feltnavn={intlUtils(intl, 'oppsummering.uttak.årsak')}\n                verdi={getÅrsakTekst(intl, periode)}\n            />\n            {shouldPeriodeHaveAttachment(periode, søkerErFarEllerMedmor, annenForelder) &&\n                periodeErNyEllerEndret &&\n                periode.årsak !== UtsettelseÅrsakType.Fri && (\n                    <OppsummeringAvDokumentasjon\n                        vedlegg={(vedlegg || []).filter(\n                            (currentVedlegg) => currentVedlegg.type !== AttachmentType.MORS_AKTIVITET_DOKUMENTASJON\n                        )}\n                    />\n                )}\n            {årsak === UtsettelseÅrsakType.Arbeid && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.bekreft100ProsentIArbeid.label')}\n                    verdi={bekreftErIArbeidSvar}\n                />\n            )}\n            {shouldPeriodeHaveAttachment(periode, søkerErFarEllerMedmor, annenForelder) && morsAktivitetIPerioden && (\n                <MorsAktivitetDetaljer\n                    morsAktivitet={morsAktivitetIPerioden}\n                    dokumentasjonAvMorsAktivitet={(vedlegg || []).filter(\n                        (currentVedlegg) => currentVedlegg.type === AttachmentType.MORS_AKTIVITET_DOKUMENTASJON\n                    )}\n                    visOppsummeringAvDokumentasjon={periodeErNyEllerEndret}\n                />\n            )}\n        </>\n    );\n};\n\nexport default Utsettelsesperiodedetaljer;\n","import React, { FunctionComponent } from 'react';\nimport { formatDate, intlUtils, TidsperiodeDate } from '@navikt/fp-common';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport { Tilleggsopplysning } from 'app/context/types/Tilleggsopplysninger';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { beskrivTilleggsopplysning, TilleggsopplysningMedBeskrivelse } from 'app/utils/tilleggsopplysningerUtils';\nimport { useIntl } from 'react-intl';\nimport {\n    Oppholdsperiode,\n    Overføringsperiode,\n    Periode,\n    Periodetype,\n    PeriodeUtenUttakUtsettelse,\n    Utsettelsesperiode,\n    Uttaksperiode,\n} from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { finnesPeriodeIOpprinneligPlan, getPeriodeTittel } from 'uttaksplan/utils/periodeUtils';\nimport { getStønadskontoNavn } from 'uttaksplan/utils/stønadskontoerUtils';\nimport Feltoppsummering from './feltoppsummering/Feltoppsummering';\nimport Oppsummeringsliste, { OppsummeringslisteelementProps } from './oppsummeringsliste/Oppsummeringsliste';\nimport Overføringsperiodedetaljer from './detaljer/Overføringsperiodedetaljer';\nimport Uttaksperiodedetaljer from './detaljer/Uttaksperiodedetaljer';\nimport Utsettelsesperiodedetaljer from './detaljer/Uttsettelsesperiodedetaljer';\nimport { appendPeriodeNavnHvisUttakRundtFødselFarMedmor, uttaksperiodeKanJusteresVedFødsel } from 'app/utils/wlbUtils';\nimport { Situasjon } from 'app/types/Situasjon';\n\ninterface UttaksplanOppsummeringslisteProps {\n    perioder: Periode[];\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor: boolean;\n    registrerteArbeidsforhold: Arbeidsforhold[];\n    annenForelder: AnnenForelder;\n    begrunnelseForSenEndring?: Tilleggsopplysning;\n    eksisterendeUttaksplan?: Periode[];\n    familiehendelsesdato: Date;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n    ønskerJustertUttakVedFødsel: boolean | undefined;\n}\n\nconst UttaksplanOppsummeringsliste: FunctionComponent<UttaksplanOppsummeringslisteProps> = ({\n    perioder,\n    navnPåForeldre,\n    erFarEllerMedmor,\n    registrerteArbeidsforhold,\n    annenForelder,\n    begrunnelseForSenEndring,\n    eksisterendeUttaksplan,\n    familiehendelsesdato,\n    termindato,\n    situasjon,\n    erAleneOmOmsorg,\n    ønskerJustertUttakVedFødsel,\n}) => {\n    const intl = useIntl();\n\n    const getStønadskontoNavnFromKonto = (konto: StønadskontoType) => {\n        return getStønadskontoNavn(intl, konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg);\n    };\n\n    const getUttaksperiodeNavn = (periode: Uttaksperiode) => {\n        const tittel = getStønadskontoNavnFromKonto(periode.konto);\n        return appendPeriodeNavnHvisUttakRundtFødselFarMedmor(\n            intl,\n            tittel,\n            periode,\n            situasjon,\n            familiehendelsesdato,\n            termindato\n        );\n    };\n\n    const formatTidsperiode = (tidsperiode: TidsperiodeDate): string => {\n        const formatertTidsperiode = intlUtils(intl, 'tidsintervall', {\n            fom: formatDate(tidsperiode.fom),\n            tom: formatDate(tidsperiode.tom),\n        });\n        if (uttaksperiodeKanJusteresVedFødsel(ønskerJustertUttakVedFødsel, termindato, tidsperiode.fom)) {\n            const justeringTekst = intlUtils(intl, 'oppsummering.uttak.periodenBlirAutomatiskJustert');\n            return justeringTekst.concat(formatertTidsperiode);\n        }\n        return formatertTidsperiode;\n    };\n    const createOppsummeringslisteelementPropsForUttaksperiode = (\n        periode: Uttaksperiode,\n        periodeErNyEllerEndret = true\n    ): OppsummeringslisteelementProps => {\n        return {\n            venstrestiltTekst: getUttaksperiodeNavn(periode),\n            venstrestiltTag: 'h3',\n            høyrestiltTekst: formatTidsperiode(periode.tidsperiode),\n            content: (\n                <Uttaksperiodedetaljer\n                    periode={periode}\n                    registrerteArbeidsforhold={registrerteArbeidsforhold}\n                    periodeErNyEllerEndret={periodeErNyEllerEndret}\n                    søkerErFarEllerMedmor={erFarEllerMedmor}\n                    annenForelder={annenForelder}\n                />\n            ),\n        };\n    };\n\n    const createOppsummeringslisteelementPropsForOppholdsperiode = (\n        periode: Oppholdsperiode\n    ): OppsummeringslisteelementProps => {\n        return {\n            venstrestiltTekst: getPeriodeTittel(\n                intl,\n                periode,\n                navnPåForeldre,\n                familiehendelsesdato,\n                termindato,\n                situasjon\n            ),\n            venstrestiltTag: 'h3',\n            høyrestiltTekst: formatTidsperiode(periode.tidsperiode),\n        };\n    };\n\n    const createOppsummeringslisteelementPropsForUtsettelsesperiode = (\n        periode: Utsettelsesperiode | PeriodeUtenUttakUtsettelse,\n        periodeErNyEllerEndret: boolean\n    ): OppsummeringslisteelementProps => {\n        return {\n            venstrestiltTekst: intlUtils(intl, 'oppsummering.utsettelse.pga'),\n            venstrestiltTag: 'h3',\n            høyrestiltTekst: formatTidsperiode(periode.tidsperiode),\n            content: (\n                <Utsettelsesperiodedetaljer\n                    periode={periode}\n                    registrerteArbeidsforhold={registrerteArbeidsforhold}\n                    søkerErFarEllerMedmor={erFarEllerMedmor}\n                    annenForelder={annenForelder}\n                    periodeErNyEllerEndret={periodeErNyEllerEndret}\n                />\n            ),\n        };\n    };\n\n    const createOppsummeringslisteelementPropsForOverføringsperiode = (\n        periode: Overføringsperiode,\n        periodeErNyEllerEndret: boolean\n    ): OppsummeringslisteelementProps => {\n        const kontonavn = getStønadskontoNavnFromKonto(periode.konto);\n        return {\n            venstrestiltTekst: intlUtils(intl, 'oppsummering.overtakelse.pga', {\n                konto: kontonavn,\n            }),\n            venstrestiltTag: 'h3',\n            høyrestiltTekst: formatTidsperiode(periode.tidsperiode),\n            content: (\n                <Overføringsperiodedetaljer\n                    periode={periode}\n                    navnPåForeldre={navnPåForeldre}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    periodeErNyEllerEndret={periodeErNyEllerEndret}\n                />\n            ),\n        };\n    };\n\n    const createOppsummeringslisteelementPropsForBegrunnelseForSenEndring = (\n        begrunnelse: TilleggsopplysningMedBeskrivelse\n    ): OppsummeringslisteelementProps => {\n        return {\n            venstrestiltTekst: begrunnelse.beskrivelse,\n            venstrestiltTag: 'h3',\n            høyrestiltTekst: '',\n            content: (\n                <>\n                    <Feltoppsummering feltnavn={begrunnelse.ekstraInformasjon || ''} verdi={begrunnelse.tekst} />\n                </>\n            ),\n        };\n    };\n\n    const createOppsummeringslisteelementProps = (periode: Periode) => {\n        const periodeErNyEllerEndret = eksisterendeUttaksplan\n            ? finnesPeriodeIOpprinneligPlan(periode, eksisterendeUttaksplan) === false\n            : true;\n        switch (periode.type) {\n            case Periodetype.Uttak:\n                return createOppsummeringslisteelementPropsForUttaksperiode(periode, periodeErNyEllerEndret);\n            case Periodetype.Utsettelse:\n                return createOppsummeringslisteelementPropsForUtsettelsesperiode(periode, periodeErNyEllerEndret);\n            case Periodetype.Overføring:\n                return createOppsummeringslisteelementPropsForOverføringsperiode(periode, periodeErNyEllerEndret);\n            case Periodetype.Opphold:\n                return createOppsummeringslisteelementPropsForOppholdsperiode(periode);\n            default:\n                return null;\n        }\n    };\n\n    const oppsummeringslisteData = (): OppsummeringslisteelementProps[] => {\n        const periodeliste = perioder\n            .map((periode) => createOppsummeringslisteelementProps(periode))\n            .filter((v) => v !== null) as OppsummeringslisteelementProps[];\n        if (begrunnelseForSenEndring) {\n            const begrunnelse = beskrivTilleggsopplysning(begrunnelseForSenEndring);\n            const begrunnelseForSenEndringList =\n                createOppsummeringslisteelementPropsForBegrunnelseForSenEndring(begrunnelse);\n            return periodeliste.concat(begrunnelseForSenEndringList);\n        }\n\n        return periodeliste;\n    };\n\n    return <Oppsummeringsliste data={oppsummeringslisteData()} />;\n};\n\nexport default UttaksplanOppsummeringsliste;\n","import { intlUtils } from '@navikt/fp-common';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\n\nimport React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport UttaksplanOppsummeringsliste from './UttaksplanOppsummeringsliste';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport { Tilleggsopplysning } from 'app/context/types/Tilleggsopplysninger';\nimport { Situasjon } from 'app/types/Situasjon';\n\ninterface Props {\n    perioder: Periode[];\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor: boolean;\n    registrerteArbeidsforhold: Arbeidsforhold[];\n    dekningsgrad: Dekningsgrad;\n    antallUkerUttaksplan: number;\n    annenForelder: AnnenForelder;\n    familiehendelsesdato: Date;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n    antallBarn: number;\n    ønskerJustertUttakVedFødsel: boolean | undefined;\n    begrunnelseForSenEndring?: Tilleggsopplysning;\n    eksisterendeUttaksplan?: Periode[];\n}\n\nconst UttaksplanOppsummering: React.FunctionComponent<Props> = ({\n    dekningsgrad,\n    antallUkerUttaksplan,\n    ønskerJustertUttakVedFødsel,\n    antallBarn,\n    ...rest\n}) => {\n    const intl = useIntl();\n\n    const dekningsgradTekst =\n        dekningsgrad === Dekningsgrad.HUNDRE_PROSENT\n            ? intlUtils(intl, 'oppsummering.uttak.dekningsgrad.verdi100', { antallUker: antallUkerUttaksplan })\n            : intlUtils(intl, 'oppsummering.uttak.dekningsgrad.verdi80', { antallUker: antallUkerUttaksplan });\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.uttak.dekningsgrad.label')}>\n                <Normaltekst>{dekningsgradTekst}</Normaltekst>\n            </OppsummeringsPunkt>\n            <UttaksplanOppsummeringsliste\n                ønskerJustertUttakVedFødsel={ønskerJustertUttakVedFødsel}\n                {...rest}\n            ></UttaksplanOppsummeringsliste>\n            {ønskerJustertUttakVedFødsel !== undefined && (\n                <OppsummeringsPunkt\n                    title={intlUtils(intl, 'oppsummering.uttak.ønskerAutomatiskJustering.label', {\n                        antallBarn,\n                    })}\n                >\n                    <Normaltekst>\n                        <FormattedMessage id={ønskerJustertUttakVedFødsel ? 'ja' : 'nei'} />\n                    </Normaltekst>\n                </OppsummeringsPunkt>\n            )}\n        </>\n    );\n};\n\nexport default UttaksplanOppsummering;\n","import { bemUtils, Block, intlUtils, Step } from '@navikt/fp-common';\nimport VeilederNormal from 'app/assets/VeilederNormal';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport useAvbrytSøknad from 'app/utils/hooks/useAvbrytSøknad';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport stepConfig, { getPreviousStepHref, getPreviousStepHrefEndringssøknad } from '../stepsConfig';\nimport AnnenForelderOppsummering from './components/annen-forelder-oppsummering/AnnenForelderOppsummering';\nimport BarnOppsummering from './components/barn-oppsummering/BarnOppsummering';\nimport OppsummeringsPanel from './components/OppsummeringsPanel';\nimport Personalia from './components/Personalia';\nimport UtenlandsoppholdOppsummering from './components/utenlandsopphold-oppsummering/UtenlandsoppholdOppsummering';\nimport {\n    getInitialOppsummeringValues,\n    OppsummeringFormComponents,\n    OppsummeringFormData,\n    OppsummeringFormField,\n} from './oppsummeringFormConfig';\nimport { validateHarGodkjentOppsummering } from './validation/oppsummeringValidation';\nimport ArbeidsforholdOgAndreInntekterOppsummering from './components/andre-inntekter-oppsummering/ArbeidsforholdOgAndreInntekterOppsummering';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport Api from 'app/api/api';\nimport actionCreator from 'app/context/action/actionCreator';\nimport {\n    FEIL_VED_INNSENDING,\n    FOR_MANGE_VEDLEGG_ERROR,\n    getErrorCallId,\n    getSøknadsdataForInnsending,\n    UKJENT_UUID,\n} from 'app/api/apiUtils';\nimport { useNavigate } from 'react-router-dom';\n\nimport './oppsummering.less';\nimport SøknadRoutes from 'app/routes/routes';\nimport UttaksplanOppsummering from './components/uttaksplan-oppsummering/UttaksplanOppsummering';\nimport { getErSøkerFarEllerMedmor, getFarMedmorErAleneOmOmsorg, getNavnPåForeldre } from 'app/utils/personUtils';\nimport { beskrivTilleggsopplysning } from 'app/utils/tilleggsopplysningerUtils';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport { redirectToLogin } from 'app/utils/redirectToLogin';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport { sendErrorMessageToSentry } from '../../api/apiUtils';\nimport useSaveLoadedRoute from 'app/utils/hooks/useSaveLoadedRoute';\n\nconst Oppsummering = () => {\n    const intl = useIntl();\n    const { dispatch, state } = useForeldrepengesøknadContext();\n    const navigate = useNavigate();\n    const { kvittering, eksisterendeSak } = state;\n    const bem = bemUtils('oppsummering');\n\n    const [submitError, setSubmitError] = useState<any>(undefined);\n    const [formSubmitted, setFormSubmitted] = useState(false);\n    const [isSendingSøknad, setIsSendingSøknad] = useState(false);\n    const {\n        barn,\n        annenForelder,\n        søker,\n        informasjonOmUtenlandsopphold,\n        søkersituasjon,\n        dekningsgrad,\n        uttaksplan,\n        tilleggsopplysninger,\n        erEndringssøknad,\n    } = useSøknad();\n\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n    const søkerinfo = useSøkerinfo();\n    const { person, arbeidsforhold } = søkerinfo;\n    const { erAleneOmOmsorg } = søker;\n    const søknad = useSøknad();\n    const onAvbrytSøknad = useAvbrytSøknad();\n    const søkerErFarEllerMedmor = getErSøkerFarEllerMedmor(søkersituasjon.rolle);\n    const navnPåForeldre = getNavnPåForeldre(person, annenForelder, søkerErFarEllerMedmor, intl);\n    const antallUkerUttaksplan = state.antallUkerIUttaksplan;\n    const begrunnelseForSenEndring = tilleggsopplysninger.begrunnelseForSenEndring\n        ? beskrivTilleggsopplysning(tilleggsopplysninger.begrunnelseForSenEndring)\n        : undefined;\n    const farMedmorErAleneOmOmsorg = getFarMedmorErAleneOmOmsorg(søkerErFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const familiehendelsesdato = ISOStringToDate(getFamiliehendelsedato(søknad.barn));\n    const termindato = getTermindato(søknad.barn);\n    const erEndringssøknadOgAnnenForelderHarRett =\n        erEndringssøknad && isAnnenForelderOppgitt(annenForelder) && annenForelder.harRettPåForeldrepengerINorge;\n    const erklæringOmAnnenForelderInformert = erEndringssøknadOgAnnenForelderHarRett\n        ? intlUtils(intl, 'oppsummering.harGodkjentOppsummering.endringssøknadMedAnnenForelder', {\n              navnAnnenForelder: annenForelder.fornavn,\n          })\n        : '';\n    const egenerklæringTekst = intlUtils(intl, 'oppsummering.harGodkjentOppsummering').concat(\n        erklæringOmAnnenForelderInformert\n    );\n    const cleanedSøknad = useMemo(\n        () =>\n            getSøknadsdataForInnsending(\n                søknad,\n                state.perioderSomSkalSendesInn,\n                familiehendelsesdato!,\n                state.endringstidspunkt\n            ),\n        [søknad, state.perioderSomSkalSendesInn, familiehendelsesdato, state.endringstidspunkt]\n    );\n    useSaveLoadedRoute(SøknadRoutes.OPPSUMMERING);\n\n    useEffect(() => {\n        if (formSubmitted && !isSendingSøknad) {\n            setIsSendingSøknad(true);\n            if (cleanedSøknad.uttaksplan.length === 0 && cleanedSøknad.erEndringssøknad) {\n                throw new Error('Søknaden din inneholder ingen nye perioder.');\n            }\n            Api.sendSøknad(cleanedSøknad, søkerinfo.person.fnr)\n                .then((response) => {\n                    dispatch(actionCreator.setKvittering(response.data));\n                })\n                .catch((error) => {\n                    if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n                        redirectToLogin();\n                    } else {\n                        setSubmitError(error);\n                    }\n                });\n        }\n    }, [dispatch, søkerinfo.person.fnr, formSubmitted, cleanedSøknad, isSendingSøknad]);\n\n    useEffect(() => {\n        if (kvittering !== undefined) {\n            setFormSubmitted(false);\n            navigate(SøknadRoutes.SØKNAD_SENDT);\n        }\n    }, [kvittering, navigate]);\n\n    useEffect(() => {\n        if (submitError !== undefined) {\n            sendErrorMessageToSentry(submitError);\n            if (\n                submitError.response &&\n                submitError.response.status === 400 &&\n                submitError.response.data &&\n                submitError.response.data.messages &&\n                submitError.response.data.messages.includes(\n                    'Vedleggslisten kan ikke inneholde flere enn 40 opplastede vedlegg'\n                )\n            ) {\n                throw new Error(FOR_MANGE_VEDLEGG_ERROR);\n            }\n            sendErrorMessageToSentry(submitError);\n            const submitErrorCallId = getErrorCallId(submitError);\n            const callIdForBruker =\n                submitErrorCallId !== UKJENT_UUID ? submitErrorCallId.slice(0, 8) : submitErrorCallId;\n            throw new Error(FEIL_VED_INNSENDING + callIdForBruker);\n        }\n    }, [submitError]);\n\n    const handleSubmit = (values: Partial<OppsummeringFormData>) => {\n        dispatch(actionCreator.setGodkjentOppsummering(values.harGodkjentOppsummering!));\n        setFormSubmitted(true);\n    };\n\n    const submitKnappTekst = formSubmitted\n        ? intlUtils(intl, 'oppsummering.senderInnSøknad')\n        : intlUtils(intl, 'oppsummering.sendInnSøknad');\n\n    return (\n        <OppsummeringFormComponents.FormikWrapper\n            initialValues={getInitialOppsummeringValues()}\n            onSubmit={handleSubmit}\n            renderForm={() => {\n                return (\n                    <OppsummeringFormComponents.Form includeButtons={false}>\n                        <Step\n                            bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n                            backLinkHref={\n                                søknad.erEndringssøknad\n                                    ? getPreviousStepHrefEndringssøknad('oppsummering')\n                                    : getPreviousStepHref('oppsummering')\n                            }\n                            activeStepId=\"oppsummering\"\n                            pageTitle={intlUtils(intl, 'søknad.oppsummering')}\n                            stepTitle={intlUtils(intl, 'søknad.oppsummering')}\n                            onCancel={onAvbrytSøknad}\n                            onContinueLater={onFortsettSøknadSenere}\n                            steps={stepConfig(intl)}\n                            kompakt={true}\n                        >\n                            <Block padBottom=\"l\">\n                                <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                                    <FormattedMessage id=\"oppsummering.veileder\" />\n                                </Veilederpanel>\n                            </Block>\n                            <Block padBottom=\"l\">\n                                <div className={bem.block}>\n                                    <Block padBottom=\"l\">\n                                        <Personalia søkerinfo={søkerinfo} />\n                                    </Block>\n                                    {!erEndringssøknad && (\n                                        <OppsummeringsPanel title=\"Om barnet\">\n                                            <BarnOppsummering barn={barn} />\n                                        </OppsummeringsPanel>\n                                    )}\n                                    {!erEndringssøknad && (\n                                        <OppsummeringsPanel title=\"Den andre forelderen\">\n                                            <AnnenForelderOppsummering\n                                                annenForelder={annenForelder}\n                                                søker={søker}\n                                                søkerrolle={søkersituasjon.rolle}\n                                                barn={barn}\n                                                farMedmorErAleneOmOmsorg={farMedmorErAleneOmOmsorg}\n                                            />\n                                        </OppsummeringsPanel>\n                                    )}\n                                    {!erEndringssøknad && (\n                                        <OppsummeringsPanel title=\"Utenlandsopphold\">\n                                            <UtenlandsoppholdOppsummering\n                                                informasjonOmUtenlandsopphold={informasjonOmUtenlandsopphold}\n                                                barn={barn}\n                                            />\n                                        </OppsummeringsPanel>\n                                    )}\n                                    {!erEndringssøknad && (\n                                        <OppsummeringsPanel title=\"Arbeidsforhold og andre inntektskilder\">\n                                            <ArbeidsforholdOgAndreInntekterOppsummering />\n                                        </OppsummeringsPanel>\n                                    )}\n                                    <OppsummeringsPanel title={intlUtils(intl, 'oppsummering.uttak')}>\n                                        <UttaksplanOppsummering\n                                            perioder={uttaksplan}\n                                            navnPåForeldre={navnPåForeldre}\n                                            annenForelder={annenForelder}\n                                            erFarEllerMedmor={søkerErFarEllerMedmor}\n                                            registrerteArbeidsforhold={arbeidsforhold}\n                                            dekningsgrad={dekningsgrad}\n                                            antallUkerUttaksplan={antallUkerUttaksplan}\n                                            begrunnelseForSenEndring={begrunnelseForSenEndring}\n                                            //begrunnelseForSenEndringVedlegg={søknad.vedleggForSenEndring}\n                                            eksisterendeUttaksplan={\n                                                eksisterendeSak ? eksisterendeSak.uttaksplan : undefined\n                                            }\n                                            familiehendelsesdato={familiehendelsesdato!}\n                                            termindato={termindato}\n                                            situasjon={søkersituasjon.situasjon}\n                                            erAleneOmOmsorg={erAleneOmOmsorg}\n                                            antallBarn={søknad.barn.antallBarn}\n                                            ønskerJustertUttakVedFødsel={søknad.ønskerJustertUttakVedFødsel}\n                                        />\n                                    </OppsummeringsPanel>\n                                </div>\n                            </Block>\n                            <Block padBottom=\"l\">\n                                <OppsummeringFormComponents.ConfirmationCheckbox\n                                    name={OppsummeringFormField.harGodkjentOppsummering}\n                                    label={egenerklæringTekst}\n                                    validate={validateHarGodkjentOppsummering(intl)}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\">\n                                <div style={{ textAlign: 'center' }}>\n                                    <Hovedknapp disabled={formSubmitted} spinner={formSubmitted}>\n                                        {submitKnappTekst}\n                                    </Hovedknapp>\n                                </div>\n                            </Block>\n                        </Step>\n                    </OppsummeringFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default Oppsummering;\n"],"names":["OppsummeringsPunkt","title","visible","children","jsxs","Block","jsx","Element","hasListOfChildren","InnholdMedLedetekst","ledetekst","className","child","Normaltekst","guid","KompleksFeltoppsummering","OppsummeringAvDokumentasjon","props","vedlegg","intl","useIntl","renderListOfAttachmentPreviewLinks","a","isAttachmentWithError","url","id","filename","Lenke","intlUtils","EtikettBase","AnnenForelderOppsummering","annenForelder","søker","søkerrolle","barn","farMedmorErAleneOmOmsorg","erFarEllerMedmor","isFarEllerMedmor","dokumentasjonAvAleneomsorg","Fragment","isAnnenForelderIkkeOppgitt","isAnnenForelderOppgitt","FormattedMessage","BarnAdoptertIUtlandetDetaljer","isAdoptertStebarn","hasValue","formatDate","getAntallBarnTekst","antallBarn","getTerminEllerFødselTittel","type","BarnType","getTerminEllerFødselsdato","isUfødtBarn","BarnOppsummering","isAdoptertAnnetBarn","__createBinding","this","o","m","k","k2","__setModuleDefault","v","__importStar","mod","result","__rest","s","e","t","p","i","__importDefault","ekspanderbartpanelBase","React","require$$0","classnames_1","require$$1","react_collapse_1","require$$2","nav_frontend_js_utils_1","require$$4","cls","EkspanderbartpanelBase","args","collapseProps","event","prevProps","_a","apen","tittel","onClick","border","renderContentWhenClosed","rest","CollapseComponent","exports","ekspanderbartpanel_base_1","Ekspanderbartpanel","ekspanderbartpanel_base_2","OppsummeringsPanel","bem","bemUtils","EkspanderbartPanel","KvinneIkon","MannIkon","Personalia","søkerinfo","person","getKjønnFromFnrString","Undertittel","UtenlandsoppholdOppsummeringListe","utenlandsopphold","tidligereOpphold","opphold","countries","getErINorgePåFamiliehendelsedato","familiehendelsedato","senereOpphold","erINorge","tidOpphold","doesTidsperiodeContainDate","senOpphold","erAdoptertBarn","UtenlandsoppholdOppsummering","informasjonOmUtenlandsopphold","getFamiliehendelsedato","erINorgePåFamiliehendelsedato","UtenlandsoppholdListe","OppsummeringFormField","initialOppsummeringValues","getInitialOppsummeringValues","OppsummeringFormComponents","getTypedFormComponents","validateHarGodkjentOppsummering","value","AnnenInntektDetaljer","annenInntekt","AnnenInntektType","jobbIUtlandetInntekt","countries.getName","InntekterTabell","list","l","AndreInntekterOppsummering","harHattAnnenInntektSiste10Mnd","andreInntekterSiste10Mnd","useSøknad","ISOStringToDate","FrilansOppsummering","frilansInformasjon","harJobbetSomFrilansSiste10Mnd","oppstart","jobberFremdelesSomFrilans","driverFosterhjem","harJobbetForNærVennEllerFamilieSiste10Mnd","oppdragForNæreVennerEllerFamilieSiste10Mnd","navnPåArbeidsgiver","tidsperiode","pågående","Næringsdetaljer","næring","næringstyper","organisasjonsnummer","næringsinntekt","registrertINorge","registrertILand","harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene","hattVarigEndringAvNæringsinntektSiste4Kalenderår","endringAvNæringsinntektInformasjon","harRegnskapsfører","regnskapsfører","SelvstendigNæringsdrivendeOppsummering","selvstendigNæringsdrivendeInformasjon","harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd","ArbeidsforholdOgAndreInntekterOppsummering","arbeidsforhold","useSøkerinfo","harArbeidsforhold","HarIkkeArbeidsforhold","HarArbeidsforhold","TIL_SAKSBEHANDLER","beskrivTilleggsopplysning","tilleggsopplysning","tekst","ekstraInformasjon","beskrivelseAvOpplysning","ekstraMessageId","ekstraInfoTilSaksbehandling","cleanupInvisibleCharsFromTilleggsopplysninger","tilleggsopplysninger","replaceInvisibleCharsWithSpace","Feltoppsummering","feltnavn","verdi","List","data","renderElement","dataObject","Oppsummeringsliste","kompakt","elementProps","createElement","Oppsummeringslisteelement","venstrestiltTekst","venstrestiltTag","høyrestiltTekst","content","classNames","createMissingAttachment","index","skjemanummer","periodeId","isAttachmentMissing","attachments","shouldPeriodeHaveAttachment","periode","søkerErFarEllerMedmor","Periodetype","dokumentasjonBehøvesForOverføringsperiode","dokumentasjonBehøvesForUtsettelsesperiode","aktivitetskravMorUtil","dokumentasjonBehøvesForUttaksperiode","hasPeriodeMissingAttachment","søknadsinfo","InnsendingsType","findMissingAttachmentsForPerioder","perioder","missingAttachments","isUtsettelsesperiode","isUttaksperiode","missingAttachmentForAktivitetskrav","getMorsAktivitetSkjemanummer","AttachmentType","UtsettelseÅrsakType","Skjemanummer","isOverføringsperiode","OverføringÅrsakType","StønadskontoType","MorsAktivitet","årsak","harMorAktivitetskrav","erÅrsakSykdomEllerInstitusjonsopphold","søkerErMor","ønskerFlerBarnsdager","erSamtidigUttak","morErForSyk","konto","aktivitetskravMorSkalBesvares","getValgtArbeidsgiverNavn","orgnr","valgtArbeidsgiver","arbeidsgiverId","arbeidsgiverIdType","getArbeidsformTekst","arbeidsformer","orgnumre","arbeidstakerTekster","arbeidsformerTekster","arbeidsgiverNavn","arbeidsform","Arbeidsform","getÅrsakTekst","messageValues","intlKeyPrefix","getNavnPåAnnenForelder","navnPåForeldre","Overføringsperiodedetaljer","periodeErNyEllerEndret","navnAnnenForelder","getMorsAktivitetTekst","aktivitet","assertUnreachable","MorsAktivitetDetaljer","morsAktivitet","dokumentasjonAvMorsAktivitet","visOppsummeringAvDokumentasjon","Uttaksperiodedetaljer","registrerteArbeidsforhold","morsAktivitetIPerioden","ønskerSamtidigUttak","gradert","stillingsprosent","ønskerFlerbarnsdager","arbeidsformTekst","erDeltUttakINorge","Utsettelsesperiodedetaljer","bekrefterArbeidIPerioden","bekreftErIArbeidSvar","currentVedlegg","UttaksplanOppsummeringsliste","begrunnelseForSenEndring","eksisterendeUttaksplan","familiehendelsesdato","termindato","situasjon","erAleneOmOmsorg","ønskerJustertUttakVedFødsel","getStønadskontoNavnFromKonto","getStønadskontoNavn","getUttaksperiodeNavn","appendPeriodeNavnHvisUttakRundtFødselFarMedmor","formatTidsperiode","formatertTidsperiode","uttaksperiodeKanJusteresVedFødsel","createOppsummeringslisteelementPropsForUttaksperiode","createOppsummeringslisteelementPropsForOppholdsperiode","getPeriodeTittel","createOppsummeringslisteelementPropsForUtsettelsesperiode","createOppsummeringslisteelementPropsForOverføringsperiode","kontonavn","createOppsummeringslisteelementPropsForBegrunnelseForSenEndring","begrunnelse","createOppsummeringslisteelementProps","finnesPeriodeIOpprinneligPlan","periodeliste","begrunnelseForSenEndringList","UttaksplanOppsummering","dekningsgrad","antallUkerUttaksplan","dekningsgradTekst","Dekningsgrad","Oppsummering","dispatch","state","useForeldrepengesøknadContext","navigate","useNavigate","kvittering","eksisterendeSak","submitError","setSubmitError","useState","formSubmitted","setFormSubmitted","isSendingSøknad","setIsSendingSøknad","søkersituasjon","uttaksplan","erEndringssøknad","onFortsettSøknadSenere","useFortsettSøknadSenere","søknad","onAvbrytSøknad","useAvbrytSøknad","getErSøkerFarEllerMedmor","getNavnPåForeldre","getFarMedmorErAleneOmOmsorg","getTermindato","erklæringOmAnnenForelderInformert","egenerklæringTekst","cleanedSøknad","useMemo","getSøknadsdataForInnsending","useSaveLoadedRoute","SøknadRoutes","useEffect","Api","response","actionCreator","error","redirectToLogin","sendErrorMessageToSentry","FOR_MANGE_VEDLEGG_ERROR","submitErrorCallId","getErrorCallId","callIdForBruker","UKJENT_UUID","FEIL_VED_INNSENDING","handleSubmit","values","submitKnappTekst","Step","getPreviousStepHrefEndringssøknad","getPreviousStepHref","stepConfig","Veilederpanel","VeilederNormal","Hovedknapp","Oppsummering$1"],"mappings":"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","x_google_ignoreList":[7,8]}