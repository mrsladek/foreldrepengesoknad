{"version":3,"file":"Utenlandsopphold-22fef44c.js","sources":["../../src/app/steps/utenlandsopphold/utenlandsoppholdFormTypes.ts","../../src/app/steps/utenlandsopphold/utenlandsoppholdFormQuestions.ts","../../src/app/steps/utenlandsopphold/bostedUtlandListAndDialog/types.ts","../../src/app/steps/utenlandsopphold/bostedUtlandListAndDialog/BostedUtlandForm.tsx","../../src/app/steps/utenlandsopphold/bostedUtlandListAndDialog/BostedUtlandList.tsx","../../src/app/steps/utenlandsopphold/bostedUtlandListAndDialog/BostedUtlandListAndDialog.tsx","../../src/app/steps/utenlandsopphold/utenlandsoppholdFormUtils.ts","../../src/app/steps/utenlandsopphold/utenlandsoppholdValidering.ts","../../src/app/steps/utenlandsopphold/Utenlandsopphold.tsx"],"sourcesContent":["import { BostedUtland } from './bostedUtlandListAndDialog/types';\nimport { YesOrNo, getTypedFormComponents } from '@navikt/sif-common-formik/lib';\n\nexport enum UtenlandsoppholdFieldNames {\n    harBoddINorgeSiste12Mnd = 'harBoddINorgeSiste12Mnd',\n    utenlandsoppholdSiste12Mnd = 'utenlandsoppholdSiste12Mnd',\n    skalBoINorgeNeste12Mnd = 'skalBoINorgeNeste12Mnd',\n    utenlandsoppholdNeste12Mnd = 'utenlandsoppholdNeste12Mnd',\n}\n\nexport interface UtenlandsoppholdFormData {\n    [UtenlandsoppholdFieldNames.harBoddINorgeSiste12Mnd]: YesOrNo;\n    [UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd]: BostedUtland[];\n    [UtenlandsoppholdFieldNames.skalBoINorgeNeste12Mnd]: YesOrNo;\n    [UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd]: BostedUtland[];\n}\n\nexport const initialUtenlandsoppholdFormData: UtenlandsoppholdFormData = {\n    [UtenlandsoppholdFieldNames.harBoddINorgeSiste12Mnd]: YesOrNo.UNANSWERED,\n    [UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd]: [],\n    [UtenlandsoppholdFieldNames.skalBoINorgeNeste12Mnd]: YesOrNo.UNANSWERED,\n    [UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd]: [],\n};\n\nexport const UtenlandsoppholdFormComponents = getTypedFormComponents<\n    UtenlandsoppholdFieldNames,\n    UtenlandsoppholdFormData,\n    string\n>();\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { UtenlandsoppholdFormData, UtenlandsoppholdFieldNames } from './utenlandsoppholdFormTypes';\n\nconst UtenlandsoppholdFormConfig: QuestionConfig<UtenlandsoppholdFormData, UtenlandsoppholdFieldNames> = {\n    [UtenlandsoppholdFieldNames.harBoddINorgeSiste12Mnd]: {\n        isAnswered: ({ harBoddINorgeSiste12Mnd }) => harBoddINorgeSiste12Mnd !== YesOrNo.UNANSWERED,\n        isIncluded: () => true,\n        visibilityFilter: ({ skalBoINorgeNeste12Mnd }) => skalBoINorgeNeste12Mnd !== YesOrNo.UNANSWERED,\n    },\n    [UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd]: {\n        isAnswered: ({ utenlandsoppholdSiste12Mnd }) => utenlandsoppholdSiste12Mnd.length > 0,\n        isOptional: () => true,\n        isIncluded: ({ harBoddINorgeSiste12Mnd }) => harBoddINorgeSiste12Mnd === YesOrNo.NO,\n    },\n    [UtenlandsoppholdFieldNames.skalBoINorgeNeste12Mnd]: {\n        isAnswered: ({ skalBoINorgeNeste12Mnd }) => skalBoINorgeNeste12Mnd !== YesOrNo.UNANSWERED,\n        isIncluded: () => true,\n    },\n    [UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd]: {\n        isAnswered: ({ utenlandsoppholdNeste12Mnd }) => utenlandsoppholdNeste12Mnd.length > 0,\n        isOptional: () => true,\n        isIncluded: ({ skalBoINorgeNeste12Mnd }) => skalBoINorgeNeste12Mnd === YesOrNo.NO,\n    },\n};\n\nexport const utenlandsoppholdFormQuestions = Questions<UtenlandsoppholdFormData, UtenlandsoppholdFieldNames>(\n    UtenlandsoppholdFormConfig\n);\n","export interface BostedUtland {\n    id?: string;\n    fom: string;\n    tom: string;\n    landkode: string;\n}\n\nexport const isValidBostedUtland = (bosted: Partial<BostedUtland>): bosted is BostedUtland => {\n    const { fom, landkode, tom } = bosted;\n    return fom !== undefined && landkode !== undefined && tom !== undefined;\n};\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { BostedUtland, isValidBostedUtland } from './types';\nimport { Block, intlUtils, validateRequiredField } from '@navikt/fp-common';\nimport { dateRangeValidation, ISOStringToDate } from 'app/utils/dateUtils';\nimport dayjs from 'dayjs';\n\nexport interface BostedUtlandFormLabels {\n    tittel: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    bosted?: BostedUtland;\n    onSubmit: (values: BostedUtland) => void;\n    onCancel: () => void;\n    erFremtidigOpphold: boolean;\n}\n\nenum BostedUtlandFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n}\n\ntype FormValues = Partial<{\n    [BostedUtlandFormFields.fom]: string;\n    [BostedUtlandFormFields.tom]: string;\n    [BostedUtlandFormFields.landkode]: string;\n}>;\n\nconst Form = getTypedFormComponents<BostedUtlandFormFields, FormValues, string>();\n\nconst mapBostedToFormValues = (bosted: BostedUtland): FormValues => {\n    return {\n        fom: bosted.fom,\n        tom: bosted.tom,\n        landkode: bosted.landkode,\n    };\n};\n\nconst BostedUtlandForm: React.FunctionComponent<Props> = ({\n    maxDate,\n    minDate,\n    bosted,\n    onSubmit,\n    onCancel,\n    erFremtidigOpphold,\n}) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        const updatedBosted: Partial<BostedUtland> = {\n            ...bosted,\n            fom: formValues.fom,\n            tom: formValues.tom,\n            landkode: formValues.landkode,\n        };\n        if (isValidBostedUtland(updatedBosted)) {\n            onSubmit(updatedBosted);\n        } else {\n            throw new Error('BostedUtlandForm: Formvalues is not a valid BostedUtland on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={bosted ? mapBostedToFormValues(bosted) : {}}\n            onSubmit={onFormikSubmit}\n            renderForm={({ values }) => {\n                return (\n                    <Form.Form onCancel={onCancel}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id={'utenlandsopphold.leggTilUtenlandsopphold.tittel'} />\n                        </Systemtittel>\n                        <Block>\n                            <Form.DateIntervalPicker\n                                legend={intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.tidsrom')}\n                                fromDatepickerProps={{\n                                    name: BostedUtlandFormFields.fom,\n                                    label: intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.fraogmed'),\n                                    fullscreenOverlay: true,\n                                    placeholder: 'dd.mm.åååå',\n                                    minDate,\n                                    maxDate: ISOStringToDate(values.tom) || maxDate,\n                                    validate: (value) => {\n                                        if (values.tom && values.fom && dayjs(values.tom).isSame(values.fom)) {\n                                            return 'Fra og med dato kan ikke være samme som til og med dato';\n                                        }\n\n                                        return dateRangeValidation.validateFromDateInRange({\n                                            intl,\n                                            date: ISOStringToDate(value),\n                                            minDate,\n                                            maxDate,\n                                            errorKey: 'valideringsfeil.fraOgMedDato.førTilDato',\n                                            toDate: ISOStringToDate(values.tom),\n                                            disableWeekend: false,\n                                        });\n                                    },\n                                }}\n                                toDatepickerProps={{\n                                    name: BostedUtlandFormFields.tom,\n                                    label: intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.tilogmed'),\n                                    fullscreenOverlay: true,\n                                    placeholder: 'dd.mm.åååå',\n                                    minDate: ISOStringToDate(values.fom) || minDate,\n                                    maxDate,\n                                    validate: (value) => {\n                                        if (values.tom && values.fom && dayjs(values.tom).isSame(values.fom)) {\n                                            return 'Til og med dato kan ikke være samme som fra og med dato';\n                                        }\n\n                                        return dateRangeValidation.validateToDateInRange({\n                                            intl,\n                                            date: ISOStringToDate(value),\n                                            minDate,\n                                            maxDate,\n                                            errorKey: 'valideringsfeil.tilOgMedDato.etterFraDato',\n                                            fromDate: ISOStringToDate(values.fom),\n                                            disableWeekend: false,\n                                        });\n                                    },\n                                }}\n                            />\n                        </Block>\n                        <Block margin=\"xl\">\n                            <Form.CountrySelect\n                                name={BostedUtlandFormFields.landkode}\n                                label={\n                                    erFremtidigOpphold\n                                        ? intlUtils(\n                                              intl,\n                                              'utenlandsopphold.leggTilUtenlandsopphold.spørsmål.hvilketLandSkalDuBoI'\n                                          )\n                                        : intlUtils(\n                                              intl,\n                                              'utenlandsopphold.leggTilUtenlandsopphold.spørsmål.hvilketLandHarDuBoddI'\n                                          )\n                                }\n                                validate={(country) =>\n                                    validateRequiredField(\n                                        country,\n                                        intlUtils(\n                                            intl,\n                                            erFremtidigOpphold\n                                                ? 'valideringsfeil.utenlandsopphold.landDuSkalBoIPåkrevd'\n                                                : 'valideringsfeil.utenlandsopphold.landDuHarBoddIPåkrevd'\n                                        )\n                                    )\n                                }\n                                useAlpha3Code={false}\n                            />\n                        </Block>\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default BostedUtlandForm;\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { BostedUtland } from './types';\nimport { ActionLink, bemUtils, formatDateExtended, ItemList } from '@navikt/fp-common';\n\nimport dayjs from 'dayjs';\n\nimport './bostedUtlandList.less';\n\ninterface Props {\n    bosteder: BostedUtland[];\n    onEdit?: (opphold: BostedUtland) => void;\n    onDelete?: (opphold: BostedUtland) => void;\n}\n\nconst bem = bemUtils('bostedUtlandList');\n\nconst BostedUtlandList: React.FunctionComponent<Props> = ({ bosteder, onDelete, onEdit }) => {\n    const intl = useIntl();\n    const renderBostedUtlandLabel = (opphold: BostedUtland): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {formatDateExtended(dayjs(opphold.fom).toDate())} -{' '}\n                    {formatDateExtended(dayjs(opphold.tom).toDate())}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<BostedUtland>\n            getItemId={(opphold: BostedUtland) => opphold.id}\n            getItemTitle={(opphold: BostedUtland) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderBostedUtlandLabel}\n            items={bosteder}\n        />\n    );\n};\n\nexport default BostedUtlandList;\n","import React from 'react';\nimport { FormikModalFormAndList, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport BostedUtlandForm from './BostedUtlandForm';\nimport BostedUtlandListe from './BostedUtlandList';\nimport { BostedUtland } from './types';\nimport { sortItemsByFom } from '@navikt/fp-common';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: any;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n    erFremtidigOpphold: boolean;\n}\n\nfunction BostedUtlandListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    labels,\n    erFremtidigOpphold,\n}: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, BostedUtland, string>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item }) => (\n                <BostedUtlandForm\n                    bosted={item}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                    erFremtidigOpphold={erFremtidigOpphold}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <BostedUtlandListe bosteder={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default BostedUtlandListAndDialog;\n","import { initialUtenlandsoppholdFormData, UtenlandsoppholdFormData } from './utenlandsoppholdFormTypes';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport InformasjonOmUtenlandsopphold, { Utenlandsopphold } from 'app/context/types/InformasjonOmUtenlandsopphold';\nimport { convertBooleanOrUndefinedToYesOrNo, convertYesOrNoOrUndefinedToBoolean } from 'app/utils/formUtils';\nimport { BostedUtland } from './bostedUtlandListAndDialog/types';\n\nconst mapUtenlandsoppholdTilBostedUtland = (opphold: Utenlandsopphold): BostedUtland => ({\n    fom: opphold.tidsperiode.fom,\n    tom: opphold.tidsperiode.tom!,\n    landkode: opphold.land,\n});\n\nexport const getInitialUtenlandsoppholdValuesFromState = (\n    init: InformasjonOmUtenlandsopphold\n): UtenlandsoppholdFormData => {\n    return {\n        ...initialUtenlandsoppholdFormData,\n        harBoddINorgeSiste12Mnd: convertBooleanOrUndefinedToYesOrNo(init.iNorgeSiste12Mnd),\n        skalBoINorgeNeste12Mnd: convertBooleanOrUndefinedToYesOrNo(init.iNorgeNeste12Mnd),\n        utenlandsoppholdNeste12Mnd: init.senereOpphold.map(mapUtenlandsoppholdTilBostedUtland),\n        utenlandsoppholdSiste12Mnd: init.tidligereOpphold.map(mapUtenlandsoppholdTilBostedUtland),\n    };\n};\n\nconst mapBostedUtlandToUtenlandsopphold = (bostedUtland: BostedUtland[]): Utenlandsopphold[] => {\n    return bostedUtland.map((bosted) => ({\n        land: bosted.landkode,\n        tidsperiode: {\n            fom: bosted.fom,\n            tom: bosted.tom,\n        },\n    }));\n};\n\nexport const mapUtenlandsoppholdFormDataToState = (\n    formValues: Partial<UtenlandsoppholdFormData>\n): InformasjonOmUtenlandsopphold => {\n    const { harBoddINorgeSiste12Mnd, skalBoINorgeNeste12Mnd, utenlandsoppholdNeste12Mnd, utenlandsoppholdSiste12Mnd } =\n        formValues;\n\n    return {\n        iNorgeSiste12Mnd: convertYesOrNoOrUndefinedToBoolean(harBoddINorgeSiste12Mnd)!,\n        iNorgeNeste12Mnd: convertYesOrNoOrUndefinedToBoolean(skalBoINorgeNeste12Mnd)!,\n        senereOpphold:\n            skalBoINorgeNeste12Mnd === YesOrNo.NO ? mapBostedUtlandToUtenlandsopphold(utenlandsoppholdNeste12Mnd!) : [],\n        tidligereOpphold:\n            harBoddINorgeSiste12Mnd === YesOrNo.NO\n                ? mapBostedUtlandToUtenlandsopphold(utenlandsoppholdSiste12Mnd!)\n                : [],\n    };\n};\n","import {\n    date1YearAgo,\n    date1YearFromNow,\n    dateRangesCollide,\n    dateRangesExceedsRange,\n    intlUtils,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { BostedUtland } from './bostedUtlandListAndDialog/types';\nimport { IntlShape } from 'react-intl';\nimport { SkjemaelementFeil } from 'app/types/SkjemaelementFeil';\n\nexport const validateUtenlandsoppholdNeste12Mnd =\n    (intl: IntlShape) =>\n    (utenlandsopphold: BostedUtland[]): SkjemaelementFeil => {\n        if (utenlandsopphold.length === 0) {\n            return intlUtils(intl, 'valideringsfeil.utenlandsopphold.neste12Måneder.ikkeRegistrert');\n        }\n\n        const dateRanges = utenlandsopphold.map((u) => ({ from: dayjs(u.fom).toDate(), to: dayjs(u.tom).toDate() }));\n\n        if (dateRangesCollide(dateRanges)) {\n            return intlUtils(intl, 'valideringsfeil.utenlandsopphold.overlapp');\n        }\n\n        if (dateRangesExceedsRange(dateRanges, { from: new Date(), to: date1YearFromNow })) {\n            return intlUtils(intl, 'valideringsfeil.utenlandsoppholdUtenforPeriode');\n        }\n\n        return undefined;\n    };\n\nexport const validateUtenlandsoppholdSiste12Mnd =\n    (intl: IntlShape) =>\n    (utenlandsopphold: BostedUtland[]): SkjemaelementFeil => {\n        if (utenlandsopphold.length === 0) {\n            return intlUtils(intl, 'valideringsfeil.utenlandsopphold.siste12Måneder.ikkeRegistrert');\n        }\n\n        const dateRanges = utenlandsopphold.map((u) => ({ from: dayjs(u.fom).toDate(), to: dayjs(u.tom).toDate() }));\n\n        if (dateRangesCollide(dateRanges)) {\n            return intlUtils(intl, 'valideringsfeil.utenlandsopphold.overlapp');\n        }\n\n        if (dateRangesExceedsRange(dateRanges, { from: date1YearAgo, to: new Date() })) {\n            return intlUtils(intl, 'valideringsfeil.utenlandsoppholdUtenforPeriode');\n        }\n\n        return undefined;\n    };\n","import React from 'react';\nimport {\n    Block,\n    date1YearAgo,\n    date1YearFromNow,\n    dateToday,\n    intlUtils,\n    Step,\n    UtvidetInformasjon,\n    validateYesOrNoIsAnswered,\n} from '@navikt/fp-common';\nimport {\n    UtenlandsoppholdFieldNames,\n    UtenlandsoppholdFormComponents,\n    UtenlandsoppholdFormData,\n} from './utenlandsoppholdFormTypes';\nimport { useIntl } from 'react-intl';\nimport actionCreator from 'app/context/action/actionCreator';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport useAvbrytSøknad from 'app/utils/hooks/useAvbrytSøknad';\nimport { utenlandsoppholdFormQuestions } from './utenlandsoppholdFormQuestions';\nimport BostedUtlandListAndDialog from './bostedUtlandListAndDialog/BostedUtlandListAndDialog';\nimport stepConfig, { getPreviousStepHref } from '../stepsConfig';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport {\n    getInitialUtenlandsoppholdValuesFromState,\n    mapUtenlandsoppholdFormDataToState,\n} from './utenlandsoppholdFormUtils';\nimport SøknadRoutes from 'app/routes/routes';\nimport { validateUtenlandsoppholdNeste12Mnd, validateUtenlandsoppholdSiste12Mnd } from './utenlandsoppholdValidering';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport useSaveLoadedRoute from 'app/utils/hooks/useSaveLoadedRoute';\n\nconst Utenlandsopphold: React.FunctionComponent = () => {\n    const intl = useIntl();\n    const { informasjonOmUtenlandsopphold } = useSøknad();\n\n    const onValidSubmitHandler = (values: Partial<UtenlandsoppholdFormData>) => {\n        const utenlandsopphold = mapUtenlandsoppholdFormDataToState(values);\n        return [actionCreator.setInformasjonOmUtenlandsopphold(utenlandsopphold)];\n    };\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.INNTEKTSINFORMASJON,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state)\n    );\n    const onAvbrytSøknad = useAvbrytSøknad();\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n    useSaveLoadedRoute(SøknadRoutes.UTENLANDSOPPHOLD);\n\n    return (\n        <UtenlandsoppholdFormComponents.FormikWrapper\n            initialValues={getInitialUtenlandsoppholdValuesFromState(informasjonOmUtenlandsopphold)}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues }) => {\n                const visibility = utenlandsoppholdFormQuestions.getVisbility(formValues);\n\n                return (\n                    <Step\n                        bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n                        activeStepId=\"utenlandsopphold\"\n                        pageTitle={intlUtils(intl, 'søknad.utenlandsopphold')}\n                        stepTitle={intlUtils(intl, 'søknad.utenlandsopphold')}\n                        backLinkHref={getPreviousStepHref('utenlandsopphold')}\n                        onCancel={onAvbrytSøknad}\n                        onContinueLater={onFortsettSøknadSenere}\n                        steps={stepConfig(intl)}\n                        kompakt={true}\n                    >\n                        <UtenlandsoppholdFormComponents.Form includeButtons={false} includeValidationSummary={true}>\n                            <Block\n                                visible={visibility.isVisible(UtenlandsoppholdFieldNames.skalBoINorgeNeste12Mnd)}\n                                padBottom=\"l\"\n                            >\n                                <UtenlandsoppholdFormComponents.YesOrNoQuestion\n                                    legend={intlUtils(intl, 'utenlandsopphold.neste12Måneder.spørsmål')}\n                                    name={UtenlandsoppholdFieldNames.skalBoINorgeNeste12Mnd}\n                                    description={\n                                        <UtvidetInformasjon\n                                            apneLabel={intlUtils(\n                                                intl,\n                                                'utenlandsopphold.neste12MånederInfotekst.apneLabel'\n                                            )}\n                                        >\n                                            {intlUtils(intl, 'utenlandsopphold.neste12MånederInfotekst')}\n                                        </UtvidetInformasjon>\n                                    }\n                                    labels={{\n                                        yes: intlUtils(\n                                            intl,\n                                            'utenlandsopphold.neste12MånederInfotekst.radiobutton.boddINorge'\n                                        ),\n                                        no: intlUtils(\n                                            intl,\n                                            'utenlandsopphold.neste12MånederInfotekst.radiobutton.boddIUtlandet'\n                                        ),\n                                    }}\n                                    validate={(skalBoINorgeNeste12Mnd) =>\n                                        validateYesOrNoIsAnswered(\n                                            skalBoINorgeNeste12Mnd,\n                                            'valideringsfeil.utenlandsopphold.skalBoINorgePåkrevd'\n                                        )\n                                    }\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd)}\n                            >\n                                <BostedUtlandListAndDialog<UtenlandsoppholdFieldNames>\n                                    name={UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd}\n                                    minDate={dateToday}\n                                    maxDate={date1YearFromNow}\n                                    labels={{\n                                        addLabel: intlUtils(intl, 'utenlandsopphold.knapp.leggTilLand'),\n                                        modalTitle: 'Utenlandsopphold neste 12 måneder',\n                                    }}\n                                    erFremtidigOpphold={true}\n                                    validate={validateUtenlandsoppholdNeste12Mnd(intl)}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(UtenlandsoppholdFieldNames.harBoddINorgeSiste12Mnd)}\n                            >\n                                <UtenlandsoppholdFormComponents.YesOrNoQuestion\n                                    legend={intlUtils(intl, 'utenlandsopphold.siste12Måneder.spørsmål')}\n                                    name={UtenlandsoppholdFieldNames.harBoddINorgeSiste12Mnd}\n                                    description={\n                                        <UtvidetInformasjon\n                                            apneLabel={intlUtils(\n                                                intl,\n                                                'utenlandsopphold.siste12MånederInfotekst.apneLabel'\n                                            )}\n                                        >\n                                            {intlUtils(intl, 'utenlandsopphold.siste12MånederInfotekst')}\n                                        </UtvidetInformasjon>\n                                    }\n                                    labels={{\n                                        yes: intlUtils(\n                                            intl,\n                                            'utenlandsopphold.siste12MånederInfotekst.radiobutton.boddINorge'\n                                        ),\n                                        no: intlUtils(\n                                            intl,\n                                            'utenlandsopphold.siste12MånederInfotekst.radiobutton.boddIUtlandet'\n                                        ),\n                                    }}\n                                    validate={(harBoddINorgeSiste12Mnd) =>\n                                        validateYesOrNoIsAnswered(\n                                            harBoddINorgeSiste12Mnd,\n                                            'valideringsfeil.utenlandsopphold.harBoddINorgePåkrevd'\n                                        )\n                                    }\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd)}\n                            >\n                                <BostedUtlandListAndDialog<UtenlandsoppholdFieldNames>\n                                    minDate={date1YearAgo}\n                                    maxDate={dateToday}\n                                    name={UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd}\n                                    labels={{\n                                        addLabel: intlUtils(intl, 'utenlandsopphold.knapp.leggTilLand'),\n                                        modalTitle: 'Utenlandsopphold siste 12 måneder',\n                                    }}\n                                    erFremtidigOpphold={false}\n                                    validate={validateUtenlandsoppholdSiste12Mnd(intl)}\n                                />\n                            </Block>\n                            <Block visible={visibility.areAllQuestionsAnswered()} textAlignCenter={true}>\n                                <Hovedknapp disabled={isSubmitting} spinner={isSubmitting}>\n                                    {intlUtils(intl, 'søknad.gåVidere')}\n                                </Hovedknapp>\n                            </Block>\n                        </UtenlandsoppholdFormComponents.Form>\n                    </Step>\n                );\n            }}\n        />\n    );\n};\n\nexport default Utenlandsopphold;\n"],"names":["UtenlandsoppholdFieldNames","initialUtenlandsoppholdFormData","YesOrNo","UtenlandsoppholdFormComponents","getTypedFormComponents","UtenlandsoppholdFormConfig","harBoddINorgeSiste12Mnd","skalBoINorgeNeste12Mnd","utenlandsoppholdSiste12Mnd","utenlandsoppholdNeste12Mnd","utenlandsoppholdFormQuestions","Questions","isValidBostedUtland","bosted","fom","landkode","tom","Form","mapBostedToFormValues","BostedUtlandForm","maxDate","minDate","onSubmit","onCancel","erFremtidigOpphold","intl","useIntl","onFormikSubmit","formValues","updatedBosted","jsx","values","jsxs","Systemtittel","FormattedMessage","Block","intlUtils","ISOStringToDate","value","dayjs","dateRangeValidation","country","validateRequiredField","bem","bemUtils","BostedUtlandList","bosteder","onDelete","onEdit","ItemList","opphold","getCountryName","navn","ActionLink","formatDateExtended","BostedUtlandListAndDialog","name","validate","labels","FormikModalFormAndList","sortItemsByFom","item","items","BostedUtlandListe","mapUtenlandsoppholdTilBostedUtland","getInitialUtenlandsoppholdValuesFromState","init","convertBooleanOrUndefinedToYesOrNo","mapBostedUtlandToUtenlandsopphold","bostedUtland","mapUtenlandsoppholdFormDataToState","convertYesOrNoOrUndefinedToBoolean","validateUtenlandsoppholdNeste12Mnd","utenlandsopphold","dateRanges","u","dateRangesCollide","dateRangesExceedsRange","date1YearFromNow","validateUtenlandsoppholdSiste12Mnd","date1YearAgo","Utenlandsopphold","informasjonOmUtenlandsopphold","useSøknad","onValidSubmitHandler","actionCreator","handleSubmit","isSubmitting","useOnValidSubmit","SøknadRoutes","state","storeAppState","onAvbrytSøknad","useAvbrytSøknad","onFortsettSøknadSenere","useFortsettSøknadSenere","useSaveLoadedRoute","visibility","Step","getPreviousStepHref","stepConfig","UtvidetInformasjon","validateYesOrNoIsAnswered","dateToday","Hovedknapp","Utenlandsopphold$1"],"mappings":"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"}