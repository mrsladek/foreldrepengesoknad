{"version":3,"file":"AppContainer.stories-1ea0873b.js","sources":["../../../../packages/fp-common/lib/components/info-block/InfoBlock.js","../../../../packages/fp-common/lib/utils/localeUtils.js","../../src/app/pages/feilside/Feilside.tsx","../../src/app/pages/ikkeMyndig/IkkeMyndig.tsx","../../src/uttaksplan/components/utsettelse-tidsperiode-spørsmål/UtsettelseTidsperiodeSpørsmål.tsx","../../src/uttaksplan/components/uttaks-forms/periode-utsettelse-form/periodeUtsettelseFormConfig.ts","../../src/uttaksplan/components/uttaks-forms/periode-utsettelse-form/periodeUtsettelseFormUtils.ts","../../src/uttaksplan/components/uttaks-forms/periode-utsettelse-form/periodeUtsettelseFormQuestionsConfig.ts","../../src/uttaksplan/components/uttaks-forms/spørsmål/utsettelse-årsak/UtsettelseÅrsakSpørsmål.tsx","../../src/uttaksplan/components/uttaks-forms/periode-utsettelse-form/PeriodeUtsettelseForm.tsx","../../src/uttaksplan/components/uttaks-forms/ny-periode/NyPeriode.tsx","../../src/uttaksplan/assets/ArbeidIkon.tsx","../../src/uttaksplan/assets/FerieIkon.tsx","../../src/uttaksplan/assets/SykdomIkon.tsx","../../src/uttaksplan/assets/TerminIkon.tsx","../../src/uttaksplan/assets/UttakIkon.tsx","../../src/uttaksplan/components/uttaksplan-ikon/UttaksplanIkon.tsx","../../src/uttaksplan/validering/veilederInfo/components/VeilederMelding.tsx","../../src/uttaksplan/validering/veilederInfo/VeilederMeldinger.tsx","../../src/uttaksplan/types/UttaksplanColor.ts","../../src/uttaksplan/utils/styleUtils.ts","../../src/uttaksplan/components/icon-box/IconBox.tsx","../../src/uttaksplan/components/stønadskonto-ikon/StønadskontoIkon.tsx","../../src/uttaksplan/components/utsettelse-ikon/UtsettelseIkon.tsx","../../src/uttaksplan/assets/UttaksplanAdvarselIkon.tsx","../../src/uttaksplan/components/periodeliste-item-header/PeriodelisteItemHeader.tsx","../../src/uttaksplan/components/perioder/PeriodeHull.tsx","../../src/uttaksplan/components/perioder/PeriodeInfo.tsx","../../src/uttaksplan/components/perioder/PeriodeUtenUttak.tsx","../../src/uttaksplan/components/uttaks-forms/periode-før-fødsel-form/periodeFørFødselFormConfig.ts","../../src/uttaksplan/components/uttaks-forms/periode-før-fødsel-form/periodeFørFødselFormQuestionsConfig.ts","../../src/uttaksplan/components/uttaks-forms/periode-før-fødsel-form/periodeFørFødselFormUtils.ts","../../src/uttaksplan/components/uttaks-forms/periode-før-fødsel-form/PeriodeFørFødselForm.tsx","../../src/uttaksplan/components/periodeliste-item/PeriodelisteItem.tsx","../../src/uttaksplan/assets/HjerteIkon.tsx","../../src/uttaksplan/components/familiehendelsedato-display/FamiliehendelsedatoDisplay.tsx","../../src/uttaksplan/components/periodeliste/Periodeliste.tsx","../../src/uttaksplan/components/planlegger/Planlegger.tsx","../../src/app/components/foreldrepar/ForelderIkon.tsx","../../src/uttaksplan/utils/uttaksPlanStatus.ts","../../src/uttaksplan/utils/brukteDagerUtils.ts","../../src/uttaksplan/utils/uttaksstatus.ts","../../src/uttaksplan/components/oversikt-kvoter/konto-status/Kontostatus.tsx","../../src/uttaksplan/components/oversikt-kvoter/tilesList/TilesList.tsx","../../src/uttaksplan/components/oversikt-kvoter/OversiktKvoter.tsx","../../src/uttaksplan/validering/tester/inneholderUttaksplanPerioderTest.ts","../../src/uttaksplan/validering/utils/uttakValideringUtils.ts","../../src/uttaksplan/validering/tester/harMorSøktUgyldigUttakFørsteSeksUkerTest.ts","../../src/uttaksplan/validering/tester/stønadskontoInneholderForMyeUttakKunSøkerTest.ts","../../src/uttaksplan/validering/tester/harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest.ts","../../src/uttaksplan/validering/tester/erUttaksplanBareOppholdTest.ts","../../src/uttaksplan/validering/tester/slutterUttaksplanMedOppholdTest.ts","../../src/uttaksplan/validering/tester/starterUttaksplanMedOppholdTest.ts","../../src/uttaksplan/validering/tester/erUttaksplanGraderingStørreEnnSamtidigUttakTest.ts","../../src/uttaksplan/validering/tester/erTilleggsopplysningerGyldigTest.ts","../../src/uttaksplan/validering/tester/harTilleggsopplysningerGyldigeCharsTest.ts","../../src/uttaksplan/validering/tester/harUttaksplanForMangeFlerbarnsdagerTest.ts","../../src/uttaksplan/validering/tester/inneholderUttaksplanDatoSomIkkeErUttaksdagTest.ts","../../src/uttaksplan/validering/tester/harPerioderManglendeVedleggTest.ts","../../src/uttaksplan/validering/tester/inneholderSenUtsettelsePgaFerieTest.ts","../../src/uttaksplan/validering/tester/inneholderTapteDagerTest.ts","../../src/uttaksplan/validering/tester/inneholderBareUtsettelserTest.ts","../../src/uttaksplan/validering/tester/inneholderSenUtsettelsePgaArbeidTest.ts","../../src/uttaksplan/validering/tester/overskriverEndringerAnnenPartsPerioder.ts","../../src/uttaksplan/validering/tester/overlapperPeriodeAndrePerioderTest.ts","../../src/uttaksplan/validering/utils/types/regelTypes.ts","../../src/uttaksplan/validering/utils/regelUtils.ts","../../src/uttaksplan/validering/utils/stillingsprosentValideringUtils.ts","../../src/uttaksplan/validering/utils/periodeValideringUtils.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/harUttaksperiodeGyldigGradering.ts","../../src/uttaksplan/validering/utils/validatorUtils.ts","../../src/uttaksplan/validering/utils/tidsperiodeValideringUtils.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/harPeriodeGyldigTidsperiode.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/harUttaksperiodeStønadskonto.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/erSamtidigUttakGyldig.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/erUtsettelseEtterFamiliehendelsesdato.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/starterUttaksperiodeRundtFødselEtter2UkerFørFødsel.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/periodeDeFørsteSeksUkeneHarUlovligUttakBFHR.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/harBekreftet100ProsentArbeidIUtsettelsePgaArbeid.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/forSenUttakVedPåfølgendeBarn.ts","../../src/uttaksplan/validering/tester/periodevalideringstester/index.ts","../../src/uttaksplan/validering/tester/harSøktOmFerieUtenArbeidsforholdTest.ts","../../src/uttaksplan/validering/tester/inneholderForMyeFerie.ts","../../src/uttaksplan/validering/tester/kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme.ts","../../src/uttaksplan/validering/tester/erUttaksmengdeForFarMedmorForHøyTest.ts","../../src/uttaksplan/validering/tester/burdeKanskjeSøkeGraderingTest.tsx","../../src/uttaksplan/validering/tester/ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest.ts","../../src/uttaksplan/validering/tester/inneholderPerioderUtenAktivitetskrav.ts","../../src/uttaksplan/validering/tester/inneholderUtsettelserUtenÅrsak.ts","../../src/uttaksplan/validering/tester/farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest.ts","../../src/uttaksplan/validering/tester/harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest.ts","../../src/uttaksplan/validering/tester/farMedMorHarRettPåUttakRundtFødselTest.ts","../../src/app/utils/minsterettUtils.ts","../../src/uttaksplan/validering/tester/farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest.tsx","../../src/uttaksplan/validering/tester/inneholderUttaksperioderMedUbesvartGradering.ts","../../src/uttaksplan/validering/tester/inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest.ts","../../src/uttaksplan/validering/tester/farMedmorHarRettPåFlerbarnsdagerTest.tsx","../../src/uttaksplan/validering/tester/overstigerMinsterettVedToTette.ts","../../src/uttaksplan/validering/tester/harPerioderEtterFørsteStønadsdagNesteBarnDerToTette.ts","../../src/uttaksplan/validering/index.ts","../../src/uttaksplan/validering/validerUttaksplan.ts","../../src/uttaksplan/validering/veilederInfo/VeilederInfo.tsx","../../src/app/intl/utils.tsx","../../src/uttaksplan/validering/veilederInfo/utils.ts","../../src/uttaksplan/components/oppgi-tilleggsopplysninger/OppgiTilleggsopplysninger.tsx","../../src/uttaksplan/components/slett-uttaksplan-modal/SlettUttaksplanModal.tsx","../../src/uttaksplan/builder/slettPeriode.ts","../../src/uttaksplan/builder/oppdaterPeriode.ts","../../src/uttaksplan/builder/Uttaksplanbuilder.ts","../../src/app/steps/uttaksplan/UttaksplanFormConfig.ts","../../src/app/steps/uttaksplan/UttaksplanFormUtils.ts","../../src/uttaksplan/components/automatisk-justering-form/AutomatiskJusteringForm.tsx","../../src/uttaksplan/components/reset-uttaksplan-modal/ResetUttaksplanModal.tsx","../../src/uttaksplan/Uttaksplan.tsx","../../src/app/utils/hooks/useDebounce.ts","../../src/app/steps/uttaksplan/components/vil-du-gå-tilbake-modal/VilDuGåTilbakeModal.tsx","../../src/uttaksplan/components/automatisk-justering-form/automatiskJusteringUtils.ts","../../src/app/steps/uttaksplan/uttaksplanQuestionConfig.ts","../../src/app/steps/uttaksplan/UttaksplanStep.tsx","../../src/app/routes/isAvailable.ts","../../src/app/routes/ForeldrepengesøknadRoutes.tsx","../../src/app/utils/mellomlagringUtils.ts","../../src/app/Foreldrepengesøknad.tsx","../../src/app/errorBoundary/ErrorBoundary.tsx","../../src/app/AppContainer.tsx"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport bemUtils from './../../utils/bemUtils';\nimport './infoBlock.less';\nconst InfoBlock = ({ children }) => {\n    const bem = bemUtils('infoBlock');\n    return _jsx(\"div\", { className: bem.block, children: children });\n};\nexport default InfoBlock;\n//# sourceMappingURL=InfoBlock.js.map","const LocaleSessionKey = 'selectedLocale';\nexport const getLocaleFromSessionStorage = () => {\n    return sessionStorage.getItem(LocaleSessionKey) || 'nb';\n};\nexport const setLocaleInSessionStorage = (locale) => {\n    sessionStorage.setItem(LocaleSessionKey, locale);\n};\nexport const getNynorskLocale = () => {\n    if (Intl.NumberFormat.supportedLocalesOf('no-NN').length > 0) {\n        return 'no-NN';\n    }\n    return 'nn';\n};\nexport const getBokmålLocale = () => {\n    if (Intl.NumberFormat.supportedLocalesOf('no-NB').length > 0) {\n        return 'no-NB';\n    }\n    return 'nb';\n};\nexport const getLocaleForApi = (locale) => {\n    switch (locale) {\n        case 'nn':\n        case 'no-NN':\n            return 'nn';\n        default:\n            return 'nb';\n    }\n};\n//# sourceMappingURL=localeUtils.js.map","import React, { useCallback } from 'react';\nimport Lenke from 'nav-frontend-lenker';\nimport { Innholdstittel, Normaltekst } from 'nav-frontend-typografi';\nimport { VeilederProps } from '@navikt/fp-common/lib/components/veileder/Veileder';\nimport { bemUtils, Block, LanguageToggle, Locale, Sidebanner, useDocumentTitle } from '@navikt/fp-common';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport { logAmplitudeEvent } from 'app/amplitude/amplitude';\nimport actionCreator from 'app/context/action/actionCreator';\nimport Api from 'app/api/api';\n\nimport './feilside.less';\n\nexport interface Props {\n    containerId?: string;\n    dokumenttittel: string;\n    illustrasjon?: {\n        tittel: string;\n        tekst: React.ReactNode;\n        lenke?: {\n            url: string;\n            tekst: string;\n        };\n        veileder?: VeilederProps;\n    };\n    tittel: React.ReactNode;\n    ingress: React.ReactNode;\n    skalKunneGåTilbakeTilSøknad: boolean;\n    språkkode?: Locale;\n    setLanguage?: (languageCode: string) => void;\n}\n\nconst Feilside: React.FunctionComponent<Props> = ({\n    containerId,\n    dokumenttittel,\n    illustrasjon,\n    tittel,\n    ingress,\n    skalKunneGåTilbakeTilSøknad,\n    språkkode,\n    setLanguage,\n}) => {\n    const bem = bemUtils('feilside');\n    const { dispatch, state } = useForeldrepengesøknadContext();\n    const { søkerinfo } = state;\n\n    const avbrytSøknadHandler = useCallback(async () => {\n        if (!søkerinfo) {\n            return;\n        }\n\n        logAmplitudeEvent('applikasjon-hendelse', {\n            app: 'foreldrepengesoknad',\n            team: 'foreldrepenger',\n            hendelse: 'avbrutt',\n        });\n\n        dispatch(actionCreator.avbrytSøknad());\n        await Api.deleteStoredAppState(søkerinfo.person.fnr);\n        window.location.href = 'http://localhost:8080';\n    }, [dispatch, søkerinfo]);\n\n    const gåTilbakeTilSøknadenHandler = useCallback(() => {\n        window.location.reload();\n    }, []);\n\n    useDocumentTitle(dokumenttittel);\n\n    return (\n        <>\n            {setLanguage && språkkode && (\n                <LanguageToggle locale={språkkode} availableLocales={['en', 'nb', 'nn']} toggle={setLanguage} />\n            )}\n            {illustrasjon && (\n                <Sidebanner\n                    veileder={illustrasjon.veileder}\n                    dialog={{\n                        title: illustrasjon.tittel,\n                        text: (\n                            <>\n                                <Block padBottom=\"m\">{illustrasjon.tekst}</Block>\n                                {illustrasjon.lenke && (\n                                    <Lenke href={illustrasjon.lenke.url}>{illustrasjon.lenke.tekst}</Lenke>\n                                )}\n                            </>\n                        ),\n                    }}\n                />\n            )}\n            <div id={containerId} className={bem.block}>\n                <Block padBottom=\"l\">\n                    <Innholdstittel>{tittel}</Innholdstittel>\n                </Block>\n                <Block padBottom=\"l\">\n                    <Normaltekst>{ingress}</Normaltekst>\n                </Block>\n                {søkerinfo !== undefined && !skalKunneGåTilbakeTilSøknad && (\n                    <div className={bem.element('avbrytKnapp')}>\n                        <Hovedknapp onClick={avbrytSøknadHandler}>Start søknaden på nytt</Hovedknapp>\n                    </div>\n                )}\n                {søkerinfo !== undefined && skalKunneGåTilbakeTilSøknad && (\n                    <div className={bem.element('avbrytKnapp')}>\n                        <Hovedknapp onClick={gåTilbakeTilSøknadenHandler}>Gå tilbake til søknaden</Hovedknapp>\n                    </div>\n                )}\n            </div>\n        </>\n    );\n};\n\nexport default Feilside;\n","import { intlUtils } from '@navikt/fp-common';\nimport links from 'app/links/links';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport Feilside from '../feilside/Feilside';\n\ninterface Props {\n    fornavn: string;\n}\n\nconst IkkeMyndig: FunctionComponent<Props> = ({ fornavn }) => {\n    const intl = useIntl();\n\n    return (\n        <Feilside\n            dokumenttittel=\"NAV Foreldrepengesøknad\"\n            ingress={intlUtils(intl, 'velkommen.ingress')}\n            tittel={intlUtils(intl, 'velkommen.tittel')}\n            illustrasjon={{\n                tittel: intlUtils(intl, 'velkommen.ikkeMyndig.tittel', {\n                    navn: fornavn.toLowerCase(),\n                }),\n                tekst: intlUtils(intl, 'velkommen.ikkeMyndig.ingress'),\n                veileder: {\n                    ansikt: 'skeptisk',\n                },\n                lenke: {\n                    tekst: intlUtils(intl, 'velkommen.ikkeMyndig.boblelenketekst'),\n                    url: links.papirsøknad,\n                },\n            }}\n            skalKunneGåTilbakeTilSøknad={false}\n        />\n    );\n};\n\nexport default IkkeMyndig;\n","import { intlUtils, Tidsperiode, TidsperiodeDate } from '@navikt/fp-common';\nimport Modal from 'nav-frontend-modal';\nimport { getTidsperiode, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { getUkerOgDagerFromDager } from 'app/utils/dateUtils';\nimport UkerDagerTeller from './../uker-dager-teller/UkerDagerTeller';\nimport dayjs from 'dayjs';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport { isForeldrepengerFørFødselUttaksperiode, Periode, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport TidsperiodeForm, { TidsperiodeFormValues } from '../uttaks-forms/tidsperiode-form/TidsperiodeForm';\nimport { Situasjon } from 'app/types/Situasjon';\n\ninterface Props {\n    periode: Periode;\n    tidsperiode: TidsperiodeDate;\n    familiehendelsesdato: Date;\n    ugyldigeTidsperioder: Tidsperiode[] | undefined;\n    utsettelserIPlan: Utsettelsesperiode[];\n    visible: boolean;\n    erFarEllerMedmor: boolean;\n    morHarRett: boolean;\n    situasjon: Situasjon;\n    erFarMedmorOgHarAleneomsorg: boolean;\n    onAvbryt: () => void;\n    onBekreft: (tidsperiode: TidsperiodeFormValues) => void;\n    changeTidsperiode: (tidsperiode: Partial<TidsperiodeDate>) => void;\n}\n\nconst UtsettelseEndreTidsperiodeSpørsmål: React.FunctionComponent<Props> = ({\n    onBekreft,\n    onAvbryt,\n    changeTidsperiode,\n    visible,\n    periode,\n    tidsperiode,\n    familiehendelsesdato,\n    ugyldigeTidsperioder,\n    utsettelserIPlan,\n    erFarEllerMedmor,\n    morHarRett,\n    situasjon,\n    erFarMedmorOgHarAleneomsorg,\n}) => {\n    const intl = useIntl();\n    const erForeldrepengerFørFødsel = isForeldrepengerFørFødselUttaksperiode(periode);\n    const initialMonth = erForeldrepengerFørFødsel ? familiehendelsesdato : undefined;\n    const varighetIDager =\n        tidsperiode &&\n        tidsperiode.fom &&\n        tidsperiode.tom &&\n        dayjs(tidsperiode.fom).isSameOrBefore(tidsperiode.tom, 'day')\n            ? Tidsperioden({\n                  fom: tidsperiode.fom,\n                  tom: tidsperiode.tom,\n              }).getAntallUttaksdager()\n            : undefined;\n    const { uker, dager } = varighetIDager ? getUkerOgDagerFromDager(Math.abs(varighetIDager)) : { uker: 0, dager: 0 };\n    const handleOnSubmit = (values: TidsperiodeFormValues) => {\n        onBekreft(values);\n    };\n\n    const getDagValue = (uker: number, dager: number): number => {\n        if (dager >= 5) {\n            return 0;\n        }\n\n        if (uker === 0 && dager === 0) {\n            return 1;\n        }\n\n        return dager;\n    };\n\n    return (\n        <>\n            <Modal isOpen={visible} closeButton={true} onRequestClose={onAvbryt} contentLabel=\"Test\">\n                <TidsperiodeForm\n                    familiehendelsesdato={familiehendelsesdato}\n                    onBekreft={handleOnSubmit}\n                    periode={periode}\n                    tidsperiode={tidsperiode}\n                    ugyldigeTidsperioder={ugyldigeTidsperioder}\n                    utsettelserIPlan={utsettelserIPlan}\n                    initialMonth={initialMonth}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    morHarRett={morHarRett}\n                    situasjon={situasjon}\n                    erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                />\n            </Modal>\n            <UkerDagerTeller\n                ukeLegend={intlUtils(intl, 'uker.label')}\n                dagLegend={intlUtils(intl, 'dager.label')}\n                ukeStepper={{\n                    value: uker !== undefined ? uker : 0,\n                    min: 0,\n                    max: 100,\n                    onChange: (nyUker: number) => {\n                        const date = tidsperiode.fom;\n                        if (date) {\n                            changeTidsperiode({\n                                fom: date,\n                                tom: getTidsperiode(date, Math.min(nyUker, 200) * 5 + getDagValue(nyUker, dager)).tom,\n                            });\n                        }\n                    },\n                    increaseAriaLabel: 'Øk antall uker med en uke',\n                    decreaseAriaLabel: 'Mink antall uker med en uke',\n                }}\n                dagStepper={{\n                    value: getDagValue(uker, dager),\n                    min: uker === 0 ? 1 : 0,\n                    max: 5,\n                    onChange: (nyDager: number) => {\n                        const date = tidsperiode.fom;\n                        const ekstraUke = nyDager === 5 ? 1 : 0;\n\n                        if (date) {\n                            changeTidsperiode({\n                                fom: date,\n                                tom: getTidsperiode(date, (uker + ekstraUke) * 5 + getDagValue(uker, nyDager)).tom,\n                            });\n                        }\n                    },\n                    increaseAriaLabel: 'Øk antall dager med en dag',\n                    decreaseAriaLabel: 'Mink antall dager med en dag',\n                }}\n            />\n        </>\n    );\n};\n\nexport default UtsettelseEndreTidsperiodeSpørsmål;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Attachment } from 'app/types/Attachment';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { Arbeidsform } from 'uttaksplan/types/Periode';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\n\nexport enum PeriodeUtsettelseFormField {\n    fom = 'fom',\n    tom = 'tom',\n    årsak = 'årsak',\n    vedlegg = 'vedlegg',\n    morsAktivitetIPeriodenDokumentasjon = 'morsAktivitetIPeriodenDokumentasjon',\n    morsAktivitetIPerioden = 'morsAktivitetIPerioden',\n    bekrefterArbeidIPerioden = 'bekrefterArbeidIPerioden',\n}\n\nexport type ArbeidUnderUtsettelse = Arbeidsform | string;\n\nexport interface PeriodeUtsettelseFormData {\n    [PeriodeUtsettelseFormField.fom]: Date | undefined;\n    [PeriodeUtsettelseFormField.tom]: Date | undefined;\n    [PeriodeUtsettelseFormField.årsak]: UtsettelseÅrsakType | '';\n    [PeriodeUtsettelseFormField.morsAktivitetIPerioden]: MorsAktivitet | '';\n    [PeriodeUtsettelseFormField.morsAktivitetIPeriodenDokumentasjon]: Attachment[];\n    [PeriodeUtsettelseFormField.vedlegg]: Attachment[];\n    [PeriodeUtsettelseFormField.bekrefterArbeidIPerioden]: boolean | undefined;\n}\n\nexport const PeriodeUtsettelseFormComponents = getTypedFormComponents<\n    PeriodeUtsettelseFormField,\n    PeriodeUtsettelseFormData,\n    string\n>();\n","import { Attachment } from 'app/types/Attachment';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { Forelder } from 'app/types/Forelder';\nimport { isUtsettelsePgaArbeid, isUtsettelsesperiode, Periode, Periodetype } from 'uttaksplan/types/Periode';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport { PeriodeUtsettelseFormData, PeriodeUtsettelseFormField } from './periodeUtsettelseFormConfig';\n\nexport const initialValues: PeriodeUtsettelseFormData = {\n    [PeriodeUtsettelseFormField.fom]: undefined,\n    [PeriodeUtsettelseFormField.tom]: undefined,\n    [PeriodeUtsettelseFormField.årsak]: '',\n    [PeriodeUtsettelseFormField.morsAktivitetIPerioden]: '',\n    [PeriodeUtsettelseFormField.morsAktivitetIPeriodenDokumentasjon]: [],\n    [PeriodeUtsettelseFormField.vedlegg]: [],\n    [PeriodeUtsettelseFormField.bekrefterArbeidIPerioden]: undefined,\n};\n\nconst getFormStateFraVedlegg = (vedlegg: Attachment[], gjelderMorsAktivitet: boolean): Attachment[] => {\n    return gjelderMorsAktivitet\n        ? vedlegg.filter((v) => v.type === AttachmentType.MORS_AKTIVITET_DOKUMENTASJON)\n        : vedlegg.filter((v) => v.type !== AttachmentType.MORS_AKTIVITET_DOKUMENTASJON);\n};\n\nexport const getPeriodeUtsettelseFormInitialValues = (periode: Periode): PeriodeUtsettelseFormData => {\n    if (isUtsettelsesperiode(periode)) {\n        return {\n            ...initialValues,\n            fom: periode.tidsperiode.fom,\n            tom: periode.tidsperiode.tom,\n            årsak: periode.årsak,\n            morsAktivitetIPerioden: periode.morsAktivitetIPerioden ? periode.morsAktivitetIPerioden : '',\n            morsAktivitetIPeriodenDokumentasjon: getFormStateFraVedlegg(periode.vedlegg || [], true),\n            vedlegg: getFormStateFraVedlegg(periode.vedlegg || [], false),\n            bekrefterArbeidIPerioden: isUtsettelsePgaArbeid(periode) ? periode.bekrefterArbeidIPerioden : undefined,\n        };\n    }\n\n    return initialValues;\n};\n\nconst getVedleggFraFormState = (\n    morsAktivitetIPeriodenDokumentasjon: Attachment[],\n    vedlegg: Attachment[]\n): Attachment[] => {\n    return [...morsAktivitetIPeriodenDokumentasjon, ...vedlegg];\n};\n\nexport const mapPeriodeUtsettelseFormToPeriode = (\n    values: Partial<PeriodeUtsettelseFormData>,\n    id: string,\n    erFarEllerMedmor: boolean\n): Periode => {\n    return {\n        id,\n        type: Periodetype.Utsettelse,\n        årsak: values.årsak as UtsettelseÅrsakType,\n        morsAktivitetIPerioden: values.morsAktivitetIPerioden ? values.morsAktivitetIPerioden : undefined,\n        forelder: erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor,\n        tidsperiode: {\n            fom: values.fom!,\n            tom: values.tom!,\n        },\n        vedlegg: getVedleggFraFormState(values.morsAktivitetIPeriodenDokumentasjon || [], values.vedlegg || []),\n        bekrefterArbeidIPerioden: values.bekrefterArbeidIPerioden,\n        erArbeidstaker: !!values.bekrefterArbeidIPerioden,\n    };\n};\n\nexport const cleanupPeriodeUtsettelseFormData = (values: PeriodeUtsettelseFormData): PeriodeUtsettelseFormData => {\n    if (values.årsak !== UtsettelseÅrsakType.Arbeid) {\n        return {\n            ...values,\n            bekrefterArbeidIPerioden: undefined,\n        };\n    }\n    return values;\n};\n","import { hasValue } from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { PeriodeUtsettelseFormData, PeriodeUtsettelseFormField } from './periodeUtsettelseFormConfig';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\n\ninterface PeriodeUtsettelseFormConfigPayload {\n    values: PeriodeUtsettelseFormData;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n}\n\nconst PeriodeUtsettelseFormConfig: QuestionConfig<PeriodeUtsettelseFormConfigPayload, PeriodeUtsettelseFormField> = {\n    [PeriodeUtsettelseFormField.fom]: {\n        isAnswered: ({ values }) => hasValue(values.fom),\n        isIncluded: () => true,\n    },\n    [PeriodeUtsettelseFormField.tom]: {\n        isAnswered: ({ values }) => hasValue(values.tom),\n        isIncluded: () => true,\n    },\n    [PeriodeUtsettelseFormField.årsak]: {\n        isAnswered: ({ values }) => hasValue(values.årsak),\n        isIncluded: () => true,\n        visibilityFilter: ({ values }) => isValidTidsperiode({ fom: values.fom, tom: values.tom }),\n    },\n    [PeriodeUtsettelseFormField.bekrefterArbeidIPerioden]: {\n        isAnswered: ({ values }) =>\n            values.årsak !== UtsettelseÅrsakType.Arbeid ||\n            (hasValue(values.bekrefterArbeidIPerioden) && values.bekrefterArbeidIPerioden !== undefined),\n        isIncluded: ({ values }) => hasValue(values.årsak) && values.årsak === UtsettelseÅrsakType.Arbeid,\n        visibilityFilter: ({ values }) => hasValue(values.årsak),\n    },\n    [PeriodeUtsettelseFormField.vedlegg]: {\n        isAnswered: () => true,\n        isIncluded: ({ values }) => hasValue(values.årsak),\n        visibilityFilter: ({ values }) => hasValue(values.årsak),\n    },\n    [PeriodeUtsettelseFormField.morsAktivitetIPerioden]: {\n        isAnswered: ({ values, søkerErFarEllerMedmorOgKunDeHarRett }) =>\n            hasValue(values.morsAktivitetIPerioden) || !søkerErFarEllerMedmorOgKunDeHarRett,\n        isIncluded: ({ søkerErFarEllerMedmorOgKunDeHarRett }) => søkerErFarEllerMedmorOgKunDeHarRett,\n        visibilityFilter: ({ values }) => hasValue(values.årsak),\n    },\n};\n\nexport const periodeUtsettelseFormQuestionsConfig = Questions<\n    PeriodeUtsettelseFormConfigPayload,\n    PeriodeUtsettelseFormField\n>(PeriodeUtsettelseFormConfig);\n","import { Block, intlUtils } from '@navikt/fp-common';\nimport VeilederNormal from 'app/assets/VeilederNormal';\nimport FormikFileUploader from 'app/components/formik-file-uploader/FormikFileUploader';\nimport { Attachment } from 'app/types/Attachment';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { Skjemanummer } from 'app/types/Skjemanummer';\nimport { RadioProps } from 'nav-frontend-skjema';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport {\n    PeriodeUtsettelseFormComponents,\n    PeriodeUtsettelseFormField,\n} from '../../periode-utsettelse-form/periodeUtsettelseFormConfig';\n\ninterface Props {\n    periodenErKunHelligdager: boolean;\n    skalViseGamleUtsettelseÅrsaker: boolean;\n    erFarEllerMedmor: boolean;\n    tidsperiodenErInnenforFørsteSeksUker: boolean;\n    utsettelseårsak: UtsettelseÅrsakType | '';\n    vedlegg: Attachment[];\n    erMorUfør: boolean;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n}\n\nconst getUtsettelseÅrsakOptions = (\n    intl: IntlShape,\n    periodenErKunHelligdager: boolean,\n    skalViseGamleUtsettelseÅrsaker: boolean,\n    erFarEllerMedmor: boolean,\n    tidsperiodenErInnenforFørsteSeksUker: boolean,\n    erMorUfør: boolean,\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean\n) => {\n    const allRadios: RadioProps[] = [\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.jegskalhaferie'),\n            value: UtsettelseÅrsakType.Ferie,\n            disabled: periodenErKunHelligdager === true,\n            name: 'utsettelseÅrsak',\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.jegskaljobbeheltid'),\n            value: UtsettelseÅrsakType.Arbeid,\n            name: 'utsettelseÅrsak',\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.pgasykdom'),\n            value: UtsettelseÅrsakType.Sykdom,\n            name: 'utsettelseÅrsak',\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.institusjonBarn'),\n            value: UtsettelseÅrsakType.InstitusjonBarnet,\n            name: 'utsettelseÅrsak',\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.institusjonSøker'),\n            value: UtsettelseÅrsakType.InstitusjonSøker,\n            name: 'utsettelseÅrsak',\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.hv_øvelse'),\n            value: UtsettelseÅrsakType.HvØvelse,\n            name: 'utsettelseÅrsak',\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.navtiltak'),\n            value: UtsettelseÅrsakType.NavTiltak,\n            name: 'utsettelseÅrsak',\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.fri'),\n            value: UtsettelseÅrsakType.Fri,\n            name: 'utsettelseÅrsak',\n        },\n    ];\n\n    const defaultRadios = allRadios.filter((option) => {\n        if (skalViseGamleUtsettelseÅrsaker) {\n            if (option.value === UtsettelseÅrsakType.Fri) {\n                return false;\n            }\n\n            return true;\n        }\n\n        if (!skalViseGamleUtsettelseÅrsaker && !erFarEllerMedmor) {\n            if (tidsperiodenErInnenforFørsteSeksUker) {\n                return (\n                    option.value === UtsettelseÅrsakType.Sykdom ||\n                    option.value === UtsettelseÅrsakType.InstitusjonBarnet ||\n                    option.value === UtsettelseÅrsakType.InstitusjonSøker\n                );\n            }\n\n            return false;\n        }\n\n        if (!skalViseGamleUtsettelseÅrsaker && erFarEllerMedmor) {\n            if (!erMorUfør) {\n                if (option.value === UtsettelseÅrsakType.Fri && søkerErFarEllerMedmorOgKunDeHarRett) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            if (tidsperiodenErInnenforFørsteSeksUker) {\n                return (\n                    option.value === UtsettelseÅrsakType.Sykdom ||\n                    option.value === UtsettelseÅrsakType.InstitusjonBarnet ||\n                    option.value === UtsettelseÅrsakType.InstitusjonSøker\n                );\n            }\n\n            return option.value === UtsettelseÅrsakType.Fri;\n        }\n\n        return option.value === UtsettelseÅrsakType.Sykdom || option.value === UtsettelseÅrsakType.Fri;\n    });\n\n    return defaultRadios;\n};\n\nconst getUtsettelseårsakSkjemanummer = (årsak: UtsettelseÅrsakType | '') => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n            return Skjemanummer.DOK_OVERFØRING_FOR_SYK;\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n            return Skjemanummer.DOK_INNLEGGELSE;\n        case UtsettelseÅrsakType.HvØvelse:\n            return Skjemanummer.HV_ØVELSE;\n        case UtsettelseÅrsakType.NavTiltak:\n            return Skjemanummer.NAV_TILTAK;\n        default:\n            return Skjemanummer.ANNET;\n    }\n};\n\nconst showAttachmentUploader = (årsak: UtsettelseÅrsakType | ''): boolean => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n        case UtsettelseÅrsakType.HvØvelse:\n        case UtsettelseÅrsakType.NavTiltak:\n            return true;\n        default:\n            return false;\n    }\n};\n\nconst getAttachmentUploaderLabel = (årsak: UtsettelseÅrsakType | ''): string => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n            return 'Last opp dokumentasjon for sykdom';\n        case UtsettelseÅrsakType.HvØvelse:\n            return 'Last opp dokumentasjon for HV-øvelse';\n        case UtsettelseÅrsakType.NavTiltak:\n            return 'Last opp dokumentasjon for NAV tiltak';\n        default:\n            return '';\n    }\n};\n\nconst getAttachmentUploaderType = (årsak: UtsettelseÅrsakType | ''): AttachmentType => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n            return AttachmentType.UTSETTELSE_SYKDOM;\n        case UtsettelseÅrsakType.HvØvelse:\n            return AttachmentType.HV_ØVELSE;\n        case UtsettelseÅrsakType.NavTiltak:\n            return AttachmentType.NAV_TILTAK;\n        default:\n            return AttachmentType.UTSETTELSE_SYKDOM; // Should never happen\n    }\n};\n\nconst getVeilederTekst = (årsak: UtsettelseÅrsakType | ''): React.ReactElement => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n            return <FormattedMessage id=\"uttaksplan.veileder.sykdom\" />;\n        case UtsettelseÅrsakType.HvØvelse:\n            return <FormattedMessage id=\"uttaksplan.veileder.hvØvelse\" />;\n        case UtsettelseÅrsakType.NavTiltak:\n            return <FormattedMessage id=\"uttaksplan.veileder.navTiltak\" />;\n        default:\n            return <FormattedMessage id=\"uttaksplan.veileder.sykdom\" />; // Should never happen\n    }\n};\n\nconst UtsettelseÅrsakSpørsmål: FunctionComponent<Props> = ({\n    periodenErKunHelligdager,\n    skalViseGamleUtsettelseÅrsaker,\n    erFarEllerMedmor,\n    tidsperiodenErInnenforFørsteSeksUker,\n    utsettelseårsak,\n    vedlegg,\n    erMorUfør,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n}) => {\n    const intl = useIntl();\n    const årsakOptions = getUtsettelseÅrsakOptions(\n        intl,\n        periodenErKunHelligdager,\n        skalViseGamleUtsettelseÅrsaker,\n        erFarEllerMedmor,\n        tidsperiodenErInnenforFørsteSeksUker,\n        erMorUfør,\n        søkerErFarEllerMedmorOgKunDeHarRett\n    );\n\n    if (årsakOptions.length === 0) {\n        return (\n            <Veilederpanel fargetema=\"normal\" type=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                <Block padBottom=\"l\">\n                    <Normaltekst>\n                        <b>\n                            <FormattedMessage id=\"uttaksplan.veileder.trengerIkkeUtsettelse.del1\" />\n                        </b>\n                    </Normaltekst>\n                </Block>\n                <Block padBottom=\"l\">\n                    <Normaltekst>\n                        <FormattedMessage id=\"uttaksplan.veileder.trengerIkkeUtsettelse.del2\" />\n                    </Normaltekst>\n                </Block>\n                <Block padBottom=\"l\">\n                    <Normaltekst>\n                        <FormattedMessage id=\"uttaksplan.veileder.trengerIkkeUtsettelse.del3\" />\n                    </Normaltekst>\n                </Block>\n            </Veilederpanel>\n        );\n    }\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUtsettelseFormComponents.RadioPanelGroup\n                    name={PeriodeUtsettelseFormField.årsak}\n                    radios={årsakOptions}\n                    useTwoColumns={true}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={showAttachmentUploader(utsettelseårsak)}>\n                <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                    {getVeilederTekst(utsettelseårsak)}\n                </Veilederpanel>\n            </Block>\n            <Block padBottom=\"l\" visible={showAttachmentUploader(utsettelseårsak)}>\n                <FormikFileUploader\n                    label={getAttachmentUploaderLabel(utsettelseårsak)}\n                    name={PeriodeUtsettelseFormField.vedlegg}\n                    attachments={vedlegg || []}\n                    attachmentType={getAttachmentUploaderType(utsettelseårsak)}\n                    skjemanummer={getUtsettelseårsakSkjemanummer(utsettelseårsak)}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default UtsettelseÅrsakSpørsmål;\n","import { bemUtils, Block, hasValue, intlUtils } from '@navikt/fp-common';\nimport { isValidTidsperiode, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Hovedknapp, Knapp } from 'nav-frontend-knapper';\nimport React, { Dispatch, FunctionComponent, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport LinkButton from 'uttaksplan/components/link-button/LinkButton';\nimport TidsperiodeDisplay from 'uttaksplan/components/tidsperiode-display/TidsperiodeDisplay';\nimport UtsettelseEndreTidsperiodeSpørsmål from 'uttaksplan/components/utsettelse-tidsperiode-spørsmål/UtsettelseTidsperiodeSpørsmål';\nimport { Periode, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { getSlettPeriodeTekst } from 'uttaksplan/utils/periodeUtils';\nimport { SubmitListener } from '../submit-listener/SubmitListener';\nimport TidsperiodeForm from '../tidsperiode-form/TidsperiodeForm';\nimport { PeriodeUtsettelseFormComponents, PeriodeUtsettelseFormField } from './periodeUtsettelseFormConfig';\nimport {\n    cleanupPeriodeUtsettelseFormData,\n    getPeriodeUtsettelseFormInitialValues,\n    mapPeriodeUtsettelseFormToPeriode,\n} from './periodeUtsettelseFormUtils';\n\nimport './periodeUtsettelseForm.less';\nimport { periodeUtsettelseFormQuestionsConfig } from './periodeUtsettelseFormQuestionsConfig';\nimport UtsettelseÅrsakSpørsmål from '../spørsmål/utsettelse-årsak/UtsettelseÅrsakSpørsmål';\nimport { førsteOktober2021ReglerGjelder, ISOStringToDate } from 'app/utils/dateUtils';\nimport AktivitetskravSpørsmål from '../spørsmål/aktivitetskrav/AktivitetskravSpørsmål';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Situasjon } from 'app/types/Situasjon';\n\ninterface Props {\n    periode: Periode;\n    familiehendelsesdato: Date;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    handleAddPeriode?: (nyPeriode: Periode, familiehendelsedato: Date) => void;\n    setNyPeriodeFormIsVisible?: Dispatch<React.SetStateAction<boolean>>;\n    toggleIsOpen?: (id: string) => void;\n    handleDeletePeriode?: (periodeId: string) => void;\n    isNyPeriode?: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    erMorUfør: boolean;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    arbeidsforhold: Arbeidsforhold[];\n    situasjon: Situasjon;\n    utsettelserIPlan: Utsettelsesperiode[];\n}\n\nconst PeriodeUtsettelseForm: FunctionComponent<Props> = ({\n    periode,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n    handleAddPeriode,\n    handleDeletePeriode,\n    toggleIsOpen,\n    isNyPeriode = false,\n    setNyPeriodeFormIsVisible,\n    navnPåForeldre,\n    erMorUfør,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    situasjon,\n    utsettelserIPlan,\n}) => {\n    const intl = useIntl();\n    const { tidsperiode, id } = periode;\n    const [tidsperiodeIsOpen, setTidsperiodeIsOpen] = useState(false);\n    const bem = bemUtils('periodeUtsettelseForm');\n\n    const antallHelligdager = Tidsperioden(tidsperiode).getAntallFridager();\n    const antallUttaksdager = Tidsperioden(tidsperiode).getAntallUttaksdager();\n    const periodenErKunHelligdager = antallHelligdager === antallUttaksdager;\n    const skalViseGamleUtsettelseÅrsaker = førsteOktober2021ReglerGjelder(familiehendelsesdato) === false; // Utsettelseårsaker som gjelder for søknader sendt før 1. oktober 2021\n    const erFarMedmorOgHarAleneomsorg = erFarEllerMedmor && erAleneOmOmsorg;\n\n    const toggleVisTidsperiode = () => {\n        setTidsperiodeIsOpen(!tidsperiodeIsOpen);\n    };\n\n    return (\n        <PeriodeUtsettelseFormComponents.FormikWrapper\n            initialValues={getPeriodeUtsettelseFormInitialValues(periode)}\n            onSubmit={(values) =>\n                handleUpdatePeriode(\n                    mapPeriodeUtsettelseFormToPeriode(values, id, erFarEllerMedmor),\n                    familiehendelsesdato\n                )\n            }\n            renderForm={({ setFieldValue, values }) => {\n                const visibility = periodeUtsettelseFormQuestionsConfig.getVisbility({\n                    values,\n                    erFarEllerMedmor,\n                    erAleneOmOmsorg,\n                    søkerErFarEllerMedmorOgKunDeHarRett,\n                });\n\n                return (\n                    <>\n                        <Block visible={!isValidTidsperiode(tidsperiode)} padBottom=\"l\">\n                            <TidsperiodeForm\n                                tidsperiode={tidsperiode}\n                                familiehendelsesdato={familiehendelsesdato}\n                                onBekreft={(values) => {\n                                    setFieldValue(PeriodeUtsettelseFormField.fom, ISOStringToDate(values.fom));\n                                    setFieldValue(PeriodeUtsettelseFormField.tom, ISOStringToDate(values.tom));\n                                }}\n                                ugyldigeTidsperioder={undefined}\n                                utsettelserIPlan={utsettelserIPlan}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                                situasjon={situasjon}\n                                erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                            />\n                        </Block>\n                        <PeriodeUtsettelseFormComponents.Form includeButtons={false}>\n                            <SubmitListener cleanup={() => cleanupPeriodeUtsettelseFormData(values)} />\n\n                            <Block visible={isValidTidsperiode(tidsperiode)} padBottom=\"l\">\n                                <TidsperiodeDisplay\n                                    tidsperiode={tidsperiode}\n                                    toggleVisTidsperiode={toggleVisTidsperiode}\n                                />\n                                <UtsettelseEndreTidsperiodeSpørsmål\n                                    periode={periode}\n                                    familiehendelsesdato={familiehendelsesdato}\n                                    ugyldigeTidsperioder={undefined}\n                                    utsettelserIPlan={utsettelserIPlan}\n                                    onBekreft={(values) => {\n                                        toggleVisTidsperiode();\n                                        setFieldValue(PeriodeUtsettelseFormField.fom, ISOStringToDate(values.fom));\n                                        setFieldValue(PeriodeUtsettelseFormField.tom, ISOStringToDate(values.tom));\n                                    }}\n                                    changeTidsperiode={(values) => {\n                                        setFieldValue(PeriodeUtsettelseFormField.fom, values.fom);\n                                        setFieldValue(PeriodeUtsettelseFormField.tom, values.tom);\n                                    }}\n                                    tidsperiode={tidsperiode}\n                                    onAvbryt={() => toggleVisTidsperiode()}\n                                    visible={tidsperiodeIsOpen}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                                    situasjon={situasjon}\n                                    erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                                />\n                            </Block>\n                            <Block visible={visibility.isVisible(PeriodeUtsettelseFormField.årsak)} padBottom=\"l\">\n                                <UtsettelseÅrsakSpørsmål\n                                    periodenErKunHelligdager={periodenErKunHelligdager}\n                                    skalViseGamleUtsettelseÅrsaker={skalViseGamleUtsettelseÅrsaker}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    tidsperiodenErInnenforFørsteSeksUker={Tidsperioden(\n                                        tidsperiode\n                                    ).erInnenforFørsteSeksUker(familiehendelsesdato)}\n                                    utsettelseårsak={values.årsak}\n                                    vedlegg={values.vedlegg}\n                                    erMorUfør={erMorUfør}\n                                    søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                                />\n                            </Block>\n                            <Block\n                                visible={visibility.isVisible(PeriodeUtsettelseFormField.bekrefterArbeidIPerioden)}\n                                padBottom=\"l\"\n                            >\n                                <PeriodeUtsettelseFormComponents.Checkbox\n                                    name={PeriodeUtsettelseFormField.bekrefterArbeidIPerioden}\n                                    label={intlUtils(intl, 'uttaksplan.bekrefterArbeidIPerioden')}\n                                    validate={(value) => {\n                                        if (!hasValue(value) || value === undefined || value === false) {\n                                            return intlUtils(intl, 'uttaksplan.validering.bekrefterArbeidIPerioden');\n                                        }\n\n                                        return undefined;\n                                    }}\n                                />\n                            </Block>\n                            <Block\n                                visible={visibility.isVisible(PeriodeUtsettelseFormField.morsAktivitetIPerioden)}\n                                padBottom=\"l\"\n                            >\n                                <AktivitetskravSpørsmål\n                                    aktivitetskravMorValue={values.morsAktivitetIPerioden}\n                                    aktivitetskravVedlegg={values.morsAktivitetIPeriodenDokumentasjon}\n                                    fieldName={PeriodeUtsettelseFormField.morsAktivitetIPerioden}\n                                    navnPåForeldre={navnPåForeldre}\n                                    FormComponents={PeriodeUtsettelseFormComponents}\n                                    vedleggFieldName={PeriodeUtsettelseFormField.morsAktivitetIPeriodenDokumentasjon}\n                                />\n                            </Block>\n                            <Block\n                                visible={\n                                    !isNyPeriode && handleDeletePeriode !== undefined && toggleIsOpen !== undefined\n                                }\n                            >\n                                <div style={{ textAlign: 'center', position: 'relative' }}>\n                                    <Knapp htmlType=\"button\" onClick={() => toggleIsOpen!(periode.id)}>\n                                        <FormattedMessage id=\"uttaksplan.lukk\" />\n                                    </Knapp>\n                                    <div className={bem.element('slettPeriodeWrapper')}>\n                                        <LinkButton\n                                            onClick={() => handleDeletePeriode!(periode.id)}\n                                            className={bem.element('slettPeriode')}\n                                        >\n                                            <FormattedMessage id={getSlettPeriodeTekst(periode.type)} />\n                                        </LinkButton>\n                                    </div>\n                                </div>\n                            </Block>\n                            <Block\n                                visible={\n                                    isNyPeriode &&\n                                    setNyPeriodeFormIsVisible !== undefined &&\n                                    handleAddPeriode !== undefined\n                                }\n                            >\n                                <div className={bem.element('knapperad')}>\n                                    <Knapp htmlType=\"button\" onClick={() => setNyPeriodeFormIsVisible!(false)}>\n                                        <FormattedMessage id=\"uttaksplan.avbryt\" />\n                                    </Knapp>\n                                    {visibility.areAllQuestionsAnswered() ? (\n                                        <Hovedknapp\n                                            htmlType=\"button\"\n                                            onClick={() => {\n                                                handleAddPeriode!(\n                                                    mapPeriodeUtsettelseFormToPeriode(values, guid(), erFarEllerMedmor),\n                                                    familiehendelsesdato\n                                                );\n                                                setNyPeriodeFormIsVisible!(false);\n                                            }}\n                                        >\n                                            <FormattedMessage id=\"uttaksplan.leggTil\" />\n                                        </Hovedknapp>\n                                    ) : null}\n                                </div>\n                            </Block>\n                        </PeriodeUtsettelseFormComponents.Form>\n                    </>\n                );\n            }}\n        />\n    );\n};\n\nexport default PeriodeUtsettelseForm;\n","import { Block } from '@navikt/fp-common';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport React, { Dispatch, FunctionComponent, SetStateAction, useState } from 'react';\nimport { Periode, Periodetype, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport PeriodeUttakForm from '../periode-uttak-form/PeriodeUttakForm';\nimport PeriodeUtsettelseForm from '../periode-utsettelse-form/PeriodeUtsettelseForm';\nimport { FormattedMessage, IntlShape } from 'react-intl';\nimport { Situasjon } from 'app/types/Situasjon';\n\ninterface Props {\n    familiehendelsesdato: Date;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    setNyPeriodeFormIsVisible: Dispatch<SetStateAction<boolean>>;\n    arbeidsforhold: Arbeidsforhold[];\n    isUtsettelse: boolean;\n    handleAddPeriode: (nyPeriode: Periode, familiehendelsedato: Date) => void;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    erMorUfør: boolean;\n    setPeriodeErGyldig: Dispatch<SetStateAction<boolean>>;\n    nesteLedigeUttaksdato: Date | undefined;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    erEndringssøknad: boolean;\n    termindato: Date | undefined;\n    antallBarn: number;\n    utsettelserIPlan: Utsettelsesperiode[];\n    intl: IntlShape;\n}\n\nconst NyPeriode: FunctionComponent<Props> = ({\n    setNyPeriodeFormIsVisible,\n    isUtsettelse,\n    annenForelder,\n    arbeidsforhold,\n    navnPåForeldre,\n    stønadskontoer,\n    familiehendelsesdato,\n    handleAddPeriode,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    erMorUfør,\n    setPeriodeErGyldig,\n    nesteLedigeUttaksdato,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    erEndringssøknad,\n    termindato,\n    antallBarn,\n    utsettelserIPlan,\n    intl,\n}) => {\n    const [periode, setPeriode] = useState<Periode>({\n        type: isUtsettelse ? Periodetype.Utsettelse : Periodetype.Uttak,\n        tidsperiode: { fom: isUtsettelse ? undefined : nesteLedigeUttaksdato },\n    } as Periode);\n\n    return !isUtsettelse ? (\n        <>\n            <Block padBottom=\"l\">\n                <Undertittel>\n                    <FormattedMessage id=\"uttaksplan.nyPeriode.tittel\" />\n                </Undertittel>\n            </Block>\n            <PeriodeUttakForm\n                periode={periode}\n                handleUpdatePeriode={setPeriode}\n                handleAddPeriode={handleAddPeriode}\n                annenForelder={annenForelder}\n                arbeidsforhold={arbeidsforhold}\n                familiehendelsesdato={familiehendelsesdato}\n                navnPåForeldre={navnPåForeldre}\n                stønadskontoer={stønadskontoer}\n                setNyPeriodeFormIsVisible={setNyPeriodeFormIsVisible}\n                isNyPeriode={true}\n                erFarEllerMedmor={erFarEllerMedmor}\n                erFlerbarnssøknad={erFlerbarnssøknad}\n                erAleneOmOmsorg={erAleneOmOmsorg}\n                erDeltUttak={erDeltUttak}\n                situasjon={situasjon}\n                erMorUfør={erMorUfør}\n                setPeriodeErGyldig={setPeriodeErGyldig}\n                erEndringssøknad={erEndringssøknad}\n                termindato={termindato}\n                morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                antallBarn={antallBarn}\n                utsettelserIPlan={utsettelserIPlan}\n                intl={intl}\n            />\n        </>\n    ) : (\n        <PeriodeUtsettelseForm\n            periode={periode}\n            familiehendelsesdato={familiehendelsesdato}\n            handleUpdatePeriode={setPeriode}\n            erFarEllerMedmor={erFarEllerMedmor}\n            erAleneOmOmsorg={erAleneOmOmsorg}\n            handleAddPeriode={handleAddPeriode}\n            setNyPeriodeFormIsVisible={setNyPeriodeFormIsVisible}\n            isNyPeriode={true}\n            navnPåForeldre={navnPåForeldre}\n            erMorUfør={erMorUfør}\n            søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n            arbeidsforhold={arbeidsforhold}\n            situasjon={situasjon}\n            utsettelserIPlan={utsettelserIPlan}\n        />\n    );\n};\n\nexport default NyPeriode;\n","import React from 'react';\nimport { UttaksplanIkonProps } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\n\nconst ArbeidIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={32}\n            height={32}\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <rect id=\"a\" width={32} height={32} rx={10} />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#FFF\"\n                    fillRule=\"nonzero\"\n                    d=\"M23.378 7.79l-.001-.002-1.666-1.665A.413.413 0 0 0 21.417 6H10.583a.417.417 0 0 0-.295.123L8.622 7.788l-.002.002a.463.463 0 0 0-.12.293v17.5c0 .23.187.417.417.417h5.416v-3.75c0-.23.187-.417.417-.417h2.5c.23 0 .417.187.417.417V26h5.416c.23 0 .417-.187.417-.417v-17.5a.46.46 0 0 0-.122-.293zM12.667 20.167h-2.5v-2.5h2.5v2.5zm0-4.167h-2.5v-2.5h2.5V16zm0-4.167h-2.5v-2.5h2.5v2.5zm5 8.334h-3.334v-2.5h3.334v2.5zm0-4.167h-3.334v-2.5h3.334V16zm0-4.167h-3.334v-2.5h3.334v2.5zm4.166 8.334h-2.5v-2.5h2.5v2.5zm0-4.167h-2.5v-2.5h2.5V16zm0-4.167h-2.5v-2.5h2.5v2.5zM9.923 7.667l.833-.834h10.488l.834.834H9.923z\"\n                />\n            </g>\n        </svg>\n    );\n};\n\nexport default ArbeidIkon;\n","import React from 'react';\nimport { UttaksplanIkonProps } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\n\nconst FerieIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={32}\n            height={32}\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <rect id=\"a\" width={32} height={32} rx={10} />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g stroke=\"#FFF\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                    <path d=\"M25.583 19.737h-5c-2.042 0-3.85.657-4.991 1.667m4.991-1.654l-2.763-6.973m-2.149-5.423l-.307-.774\" />\n                    <path\n                        fill=\"#FFF\"\n                        d=\"M15.671 7.354c-4.065 1.61-6.704 4.571-5.517 7.566l.306.775 1.937-.769.468-1.081 1.082.468 7.747-3.07.467-1.082 1.082.467 1.937-.768-.307-.775c-1.188-2.995-5.138-3.342-9.202-1.731z\"\n                    />\n                    <path d=\"M25.583 24.75c-.833 0-1.666-.747-1.666-1.667 0 .92-.834 1.667-1.667 1.667-.833 0-1.667-.747-1.667-1.667 0 .92-.833 1.667-1.666 1.667-.834 0-1.667-.747-1.667-1.667 0 .92-.833 1.667-1.667 1.667-.833 0-1.666-.747-1.666-1.667 0 .92-.834 1.667-1.667 1.667-.833 0-1.667-.747-1.667-1.667 0 .92-.833 1.667-1.666 1.667-.834 0-1.667-.747-1.667-1.667 0 .575-.386 1.083-.833 1.383\" />\n                </g>\n            </g>\n        </svg>\n    );\n};\n\nexport default FerieIkon;\n","import React from 'react';\nimport { UttaksplanIkonProps } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\n\nconst SykdomIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={32}\n            height={32}\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <rect id=\"a\" width={32} height={32} rx={10} />\n                <path\n                    id=\"c\"\n                    d=\"M8.294 1.518l10.19 10.19c1.823 1.822 1.785 4.82-.086 6.69s-4.867 1.91-6.69.086L1.518 8.294c-1.823-1.822-1.786-4.818.086-6.69 1.872-1.871 4.867-1.91 6.69-.086zm6.27 7.4l-3.473-3.476-5.648 5.647 3.475 3.476 5.646-5.648zM3.258 6.65a.472.472 0 0 0-.138.339.499.499 0 0 0 .49.489A.472.472 0 0 0 4.085 7a.497.497 0 0 0-.489-.489.472.472 0 0 0-.34.138zM4.96 4.963a.47.47 0 0 0-.137.34.498.498 0 0 0 .488.488.47.47 0 0 0 .476-.476.496.496 0 0 0-.488-.488.466.466 0 0 0-.34.136zm-2.005-.31a.468.468 0 0 0-.138.338.499.499 0 0 0 .49.49.47.47 0 0 0 .476-.478.497.497 0 0 0-.489-.489.468.468 0 0 0-.34.138zm1.694-1.694a.472.472 0 0 0-.138.34.496.496 0 0 0 .488.487.467.467 0 0 0 .477-.477.496.496 0 0 0-.488-.488.472.472 0 0 0-.34.138zm.622 4.009a.47.47 0 0 0-.136.34.496.496 0 0 0 .489.488.466.466 0 0 0 .476-.476.498.498 0 0 0-.488-.489.474.474 0 0 0-.341.137zm1.694-1.693a.472.472 0 0 0-.138.34.496.496 0 0 0 .488.487.467.467 0 0 0 .477-.477.495.495 0 0 0-.488-.487.472.472 0 0 0-.34.137zM6.654 3.27a.472.472 0 0 0-.138.339.5.5 0 0 0 .49.49.47.47 0 0 0 .477-.477.5.5 0 0 0-.49-.49.472.472 0 0 0-.34.138zm5.993 12.771a.468.468 0 0 0-.138.34.498.498 0 0 0 .49.488.47.47 0 0 0 .337-.139.47.47 0 0 0 .14-.337.499.499 0 0 0-.49-.49.468.468 0 0 0-.34.138zm1.694-1.696a.473.473 0 0 0-.137.339c.002.268.22.486.489.489a.466.466 0 0 0 .476-.476.499.499 0 0 0-.49-.49.476.476 0 0 0-.338.138zm.31 2.006a.472.472 0 0 0-.137.339.499.499 0 0 0 .49.489.472.472 0 0 0 .476-.477.497.497 0 0 0-.489-.489.472.472 0 0 0-.34.138zm1.696-1.693a.469.469 0 0 0-.137.338c.002.267.22.485.489.49a.469.469 0 0 0 .476-.477.499.499 0 0 0-.49-.489.472.472 0 0 0-.338.138zm-4.011-.623a.469.469 0 0 0-.137.338.497.497 0 0 0 .489.49.469.469 0 0 0 .476-.477.499.499 0 0 0-.489-.489.472.472 0 0 0-.34.138zm1.694-1.694a.472.472 0 0 0-.138.339.499.499 0 0 0 .489.489.472.472 0 0 0 .476-.476.495.495 0 0 0-.489-.49.469.469 0 0 0-.338.138zm2.005.31a.472.472 0 0 0-.137.34.499.499 0 0 0 .489.489.466.466 0 0 0 .475-.476.495.495 0 0 0-.489-.488.466.466 0 0 0-.338.136z\"\n                />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g transform=\"translate(6 6)\">\n                    <mask id=\"d\" fill=\"#fff\">\n                        <use xlinkHref=\"#c\" />\n                    </mask>\n                    <g fill=\"#FFF\" mask=\"url(#d)\">\n                        <path d=\"M0 20h20V0H0z\" />\n                    </g>\n                </g>\n            </g>\n        </svg>\n    );\n};\n\nexport default SykdomIkon;\n","import React from 'react';\nimport { UttaksplanIkonProps } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\n\nconst TerminIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg focusable=\"false\" role=\"img\" aria-hidden=\"true\" width={24} height={24} viewBox=\"0 0 24 24\" {...rest}>\n            <title>{props.title}</title>\n            <path\n                fill=\"none\"\n                fillRule=\"evenodd\"\n                stroke=\"#3E3832\"\n                strokeLinejoin=\"round\"\n                d=\"M12 22.993s10.5-8.128 10.5-15.82-9.316-8.284-10.5-.59C10.816-1.112 1.5-.52 1.5 7.764S12 22.993 12 22.993z\"\n            />\n        </svg>\n    );\n};\n\nexport default TerminIkon;\n","import React from 'react';\nimport { UttaksplanIkonProps } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\n\nconst UttakIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={32}\n            height={32}\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <rect id=\"a\" width={32} height={32} rx={10} />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g transform=\"translate(6 6)\">\n                    <circle cx={14.583} cy={17.083} r={1.083} stroke=\"#FFF\" strokeWidth={2} />\n                    <circle cx={7.083} cy={17.083} r={1.083} stroke=\"#FFF\" strokeWidth={2} />\n                    <path\n                        fill=\"#FFF\"\n                        d=\"M19.928 8.718c0 3.453-1.997 6.282-5.586 6.282H7.106c-2.586 0-4.682-2.21-4.682-4.936 0-.467.062-.918.176-1.346 3.038 0 14.084-.004 17.328 0zM13.886 2.5c3.734 0 6.042 2.836 6.042 5.385-1.835 0-4.85-.005-8.841-.005l2.8-5.38z\"\n                    />\n                    <path\n                        stroke=\"#FFF\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        d=\"M3.107 9.612c0-2.314-1.218-3.962-2.678-3.962\"\n                    />\n                </g>\n            </g>\n        </svg>\n    );\n};\n\nexport default UttakIkon;\n","import React, { SVGProps } from 'react';\nimport Ikon from 'nav-frontend-ikoner-assets';\nimport ArbeidIkon from 'uttaksplan/assets/ArbeidIkon';\nimport FerieIkon from 'uttaksplan/assets/FerieIkon';\nimport SykdomIkon from 'uttaksplan/assets/SykdomIkon';\nimport TerminIkon from 'uttaksplan/assets/TerminIkon';\nimport UttakIkon from 'uttaksplan/assets/UttakIkon';\n\nexport interface UttaksplanIkonProps extends SVGProps<any> {\n    title: string;\n}\n\nexport enum UttaksplanIkonKeys {\n    'arbeid' = 'arbeid',\n    'ferie' = 'ferie',\n    'sykdom' = 'sykdom',\n    'termin' = 'termin',\n    'uttak' = 'uttak',\n    'info' = 'info',\n    'advarsel' = 'advarsel',\n    'feil' = 'feil',\n}\n\nexport interface Props {\n    ikon: UttaksplanIkonKeys;\n    title: string;\n}\n\nconst UttaksplanIkon: React.FunctionComponent<Props> = ({ ikon, title }) => {\n    switch (ikon) {\n        case 'arbeid':\n            return <ArbeidIkon title={title} />;\n        case 'ferie':\n            return <FerieIkon title={title} />;\n        case 'sykdom':\n            return <SykdomIkon title={title} />;\n        case 'termin':\n            return <TerminIkon title={title} />;\n        case 'info':\n            return <Ikon kind=\"info-sirkel-fyll\" size=\"1.5rem\" />;\n        case 'advarsel':\n            return <Ikon kind=\"advarsel-sirkel-fyll\" size=\"1.5rem\" />;\n        case 'feil':\n            return <Ikon kind=\"feil-sirkel-fyll\" size=\"1.5rem\" />;\n        default:\n            return <UttakIkon title={title} />;\n    }\n};\n\nexport default UttaksplanIkon;\n","import React from 'react';\nimport { VeilederMessage } from '../types';\nimport { FormattedMessage } from 'react-intl';\nimport AlertStripe, { AlertStripeType } from 'nav-frontend-alertstriper';\nimport { Element } from 'nav-frontend-typografi';\n\nimport './veilederMelding.less';\nimport { bemUtils } from '@navikt/fp-common';\nimport { UttaksplanIkonKeys } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\n\nexport type VeilederMeldingStil = 'transparent' | 'default';\n\ninterface VeilederpanelInnholdContentProps {\n    message: VeilederMessage;\n    stil?: VeilederMeldingStil;\n    skjulMeldingIkon?: boolean;\n}\n\nconst getAlertStripeTypeFromMessageType = (message: VeilederMessage): AlertStripeType => {\n    switch (message.type) {\n        case 'normal':\n        case 'info':\n            return 'info';\n        case 'advarsel':\n            return 'advarsel';\n        case 'feil':\n            return 'feil';\n    }\n};\n\nexport const getIkonForVeilederMelding = (melding: VeilederMessage): UttaksplanIkonKeys => {\n    switch (melding.type) {\n        case 'feil':\n            return UttaksplanIkonKeys.feil;\n        case 'advarsel':\n            return UttaksplanIkonKeys.advarsel;\n        default:\n            return UttaksplanIkonKeys.info;\n    }\n};\n\nconst renderAlert = (message: VeilederMessage, skjulMeldingIkon: boolean) => {\n    const content = (\n        <>\n            {message.titleIntlKey !== undefined && (\n                <Element>\n                    <FormattedMessage id={message.titleIntlKey} />\n                </Element>\n            )}\n            <FormattedMessage id={message.contentIntlKey} values={message.values} />\n        </>\n    );\n    return skjulMeldingIkon ? (\n        <div>{content}</div>\n    ) : (\n        <AlertStripe type={getAlertStripeTypeFromMessageType(message)}>{content}</AlertStripe>\n    );\n};\n\nconst VeilederMelding: React.FunctionComponent<VeilederpanelInnholdContentProps> = ({\n    message,\n    stil = 'default',\n    skjulMeldingIkon = false,\n}) => {\n    const bem = bemUtils('veilederMelding');\n    return (\n        <div className={bem.classNames(bem.block, bem.modifier(stil))}>\n            {message.type !== 'normal' ? (\n                renderAlert(message, skjulMeldingIkon)\n            ) : (\n                <div className=\"veilederMelding__padding\">\n                    <FormattedMessage id={message.contentIntlKey} values={message.values} />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default VeilederMelding;\n","import * as React from 'react';\nimport { VeilederMessage } from '../veilederInfo/types';\nimport VeilederMelding, { VeilederMeldingStil } from './components/VeilederMelding';\n\ninterface Props {\n    meldinger: VeilederMessage[];\n    stil?: VeilederMeldingStil;\n    skjulMeldingIkon?: boolean;\n}\n\nconst VeilederMeldinger: React.FunctionComponent<Props> = ({ meldinger, stil, skjulMeldingIkon }) => {\n    return (\n        <div>\n            {meldinger.map((melding: VeilederMessage) => (\n                <VeilederMelding\n                    key={melding.contentIntlKey + melding.periodeId}\n                    message={melding}\n                    stil={stil}\n                    skjulMeldingIkon={skjulMeldingIkon}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default VeilederMeldinger;\n","export enum UttaksplanColor {\n    'purple' = 'purple',\n    'blue' = 'blue',\n    'green' = 'green',\n    'purpleBlue' = 'purpleBlue',\n    'yellow' = 'yellow',\n    'white' = 'white',\n    'transparent' = 'transparent',\n    'infoBlue' = 'infoBlue',\n}\n","import { Forelder } from 'app/types/Forelder';\nimport { Oppholdsperiode, Periode, Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { UttaksplanColor } from 'uttaksplan/types/UttaksplanColor';\n\nexport const getForelderFarge = (forelder: Forelder) => {\n    return forelder === Forelder.mor ? UttaksplanColor.purple : UttaksplanColor.blue;\n};\n\nexport const getStønadskontoFarge = (\n    konto: StønadskontoType,\n    forelder: Forelder | undefined,\n    forIkon?: boolean,\n    harMidlertidigOmsorg?: boolean\n): UttaksplanColor => {\n    if (forIkon && konto === StønadskontoType.Fellesperiode) {\n        return UttaksplanColor.purpleBlue;\n    }\n\n    if (harMidlertidigOmsorg) {\n        return UttaksplanColor.purple;\n    }\n\n    if (forelder === undefined) {\n        switch (konto) {\n            case StønadskontoType.Fedrekvote:\n            case StønadskontoType.AktivitetsfriKvote:\n                return UttaksplanColor.blue;\n            case StønadskontoType.Mødrekvote:\n            case StønadskontoType.Foreldrepenger:\n            case StønadskontoType.ForeldrepengerFørFødsel:\n                return UttaksplanColor.purple;\n            case StønadskontoType.Fellesperiode:\n                return UttaksplanColor.purpleBlue;\n            default:\n                return UttaksplanColor.transparent;\n        }\n    }\n    return getForelderFarge(forelder);\n};\n\nexport const getUtsettelseFarge = (): UttaksplanColor => {\n    return UttaksplanColor.green;\n};\n\nexport const getOppholdFarge = (periode: Oppholdsperiode): UttaksplanColor => {\n    return getForelderFarge(periode.forelder);\n};\n\nexport const getPeriodeFarge = (\n    periode: Periode,\n    forelder?: Forelder,\n    harMidlertidligOmsorg?: boolean\n): UttaksplanColor | undefined => {\n    if (harMidlertidligOmsorg) {\n        return UttaksplanColor.purple;\n    }\n\n    if (periode.type === Periodetype.Uttak || periode.type === Periodetype.Overføring) {\n        return getStønadskontoFarge(periode.konto, periode.forelder || forelder);\n    }\n    if (periode.type === Periodetype.Utsettelse) {\n        return getUtsettelseFarge();\n    }\n    if (periode.type === Periodetype.Opphold) {\n        return getOppholdFarge(periode);\n    }\n    return undefined;\n};\n","import React from 'react';\nimport classnames from 'classnames';\n\nimport './iconBox.less';\nimport { UttaksplanColor } from 'uttaksplan/types/UttaksplanColor';\nimport { bemUtils } from '@navikt/fp-common';\n\nexport interface Props {\n    color: UttaksplanColor;\n    stripes?: boolean;\n    children?: React.ReactNode;\n}\n\nconst IconBox: React.FunctionComponent<Props> = ({ children, color, stripes }) => {\n    const bem = bemUtils('iconBox');\n\n    return (\n        <div className={classnames(bem.block, bem.modifier(`${color}${stripes ? '--striped' : ''}`))}>{children}</div>\n    );\n};\n\nexport default IconBox;\n","import { Forelder } from 'app/types/Forelder';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { Situasjon } from 'app/types/Situasjon';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { getStønadskontoFarge } from 'uttaksplan/utils/styleUtils';\nimport { getStønadskontoNavn } from 'uttaksplan/utils/stønadskontoerUtils';\nimport IconBox from '../icon-box/IconBox';\nimport UttaksplanIkon, { UttaksplanIkonKeys } from '../uttaksplan-ikon/UttaksplanIkon';\n\nexport interface Props {\n    konto: StønadskontoType;\n    forelder?: Forelder;\n    gradert?: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor?: boolean;\n    situasjon?: Situasjon;\n    erAleneOmOmsorg?: boolean;\n    harMidlertidigOmsorg?: boolean;\n}\n\nconst StønadskontoIkon: FunctionComponent<Props> = ({\n    konto,\n    forelder,\n    gradert,\n    navnPåForeldre,\n    harMidlertidigOmsorg,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <IconBox color={getStønadskontoFarge(konto, forelder, true, harMidlertidigOmsorg)} stripes={gradert}>\n            <UttaksplanIkon\n                ikon={UttaksplanIkonKeys.uttak}\n                title={getStønadskontoNavn(intl, konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg)}\n            />\n        </IconBox>\n    );\n};\n\nexport default StønadskontoIkon;\n","import { intlUtils } from '@navikt/fp-common';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport { getUtsettelseFarge } from 'uttaksplan/utils/styleUtils';\nimport IconBox from '../icon-box/IconBox';\nimport UttaksplanIkon, { UttaksplanIkonKeys } from '../uttaksplan-ikon/UttaksplanIkon';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\n\nexport interface Props {\n    årsak: UtsettelseÅrsakType;\n    gradert?: boolean;\n}\n\nconst getIkonForKonto = (årsak: UtsettelseÅrsakType): UttaksplanIkonKeys => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Ferie:\n            return UttaksplanIkonKeys.ferie;\n        case UtsettelseÅrsakType.Arbeid:\n        case UtsettelseÅrsakType.HvØvelse:\n        case UtsettelseÅrsakType.NavTiltak:\n        case UtsettelseÅrsakType.Fri:\n            return UttaksplanIkonKeys.arbeid;\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.Sykdom:\n            return UttaksplanIkonKeys.sykdom;\n    }\n};\n\nconst UtsettelseIkon: React.FunctionComponent<Props> = ({ årsak, gradert }) => {\n    const intl = useIntl();\n\n    return (\n        <IconBox color={getUtsettelseFarge()} stripes={gradert}>\n            <UttaksplanIkon\n                ikon={getIkonForKonto(årsak)}\n                title={intlUtils(intl, `uttaksplan.utsettelsesårsak.${årsak || 'ukjent'}`)}\n            />\n        </IconBox>\n    );\n};\n\nexport default UtsettelseIkon;\n","import React, { SVGProps } from 'react';\n\nexport interface OwnProps {\n    type?: 'advarsel' | 'feil';\n    title?: string;\n}\n\ntype Props = OwnProps & SVGProps<any>;\n\nconst UttaksplanAdvarselIkon = (props: Props) => {\n    const farge = props.type === 'feil' ? '#ba3a26' : '#ff9100';\n    const { title, ...rest } = props;\n\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={24}\n            height={24}\n            viewBox=\"0 0 24 24\"\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <path\n                    id=\"advarsel-a\"\n                    d=\"M23.892 22.23L12.462 1.243c-.178-.324-.758-.324-.934 0L.055 22.307a.445.445 0 0 0 .022.465c.094.14.264.228.446.228h22.955c.287 0 .522-.214.522-.479 0-.109-.04-.21-.108-.29zM11.474 8.784c0-.264.233-.479.521-.479.287 0 .522.215.522.48v7.326c0 .264-.235.479-.522.479-.288 0-.521-.215-.521-.479V8.784zm.521 11.447c-.551 0-.998-.41-.998-.915 0-.505.447-.916.998-.916.55 0 .997.411.997.916 0 .506-.447.915-.997.915z\"\n                />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <mask id=\"advarsel-b\" fill=\"#fff\">\n                    <use xlinkHref=\"#advarsel-a\" />\n                </mask>\n                <g fill={farge} mask=\"url(#advarsel-b)\">\n                    <path d=\"M0 24h24V0H0z\" />\n                </g>\n            </g>\n        </svg>\n    );\n};\n\nexport default UttaksplanAdvarselIkon;\n","import { bemUtils, intlUtils } from '@navikt/fp-common';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { getUkerOgDagerFromDager, måned, måned3bokstaver, år } from 'app/utils/dateUtils';\nimport classNames from 'classnames';\nimport dayjs from 'dayjs';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport {\n    isForeldrepengerFørFødselUttaksperiode,\n    isUtsettelseAnnenPart,\n    isUttakAnnenPart,\n    Periode,\n    Periodetype,\n} from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport StønadskontoIkon from '../stønadskonto-ikon/StønadskontoIkon';\nimport UtsettelseIkon from '../utsettelse-ikon/UtsettelseIkon';\nimport { getForelderNavn, getPeriodeTittel } from 'uttaksplan/utils/periodeUtils';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { getValidTidsperiode, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\n\nimport './periodelisteItemHeader.less';\nimport UttaksplanIkon from '../uttaksplan-ikon/UttaksplanIkon';\nimport { getIkonForVeilederMelding } from 'uttaksplan/validering/veilederInfo/components/VeilederMelding';\nimport { VeilederMessage } from 'uttaksplan/validering/veilederInfo/types';\nimport UttaksplanAdvarselIkon from 'uttaksplan/assets/UttaksplanAdvarselIkon';\nimport { Forelder } from 'app/types/Forelder';\nimport { Situasjon } from 'app/types/Situasjon';\n\ninterface Props {\n    egenPeriode: boolean;\n    periode: Periode;\n    navnPåForeldre: NavnPåForeldre;\n    melding: VeilederMessage | undefined;\n    annenForelderSamtidigUttakPeriode?: Periode;\n    familiehendelsesdato: Date;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n}\n\nconst bem = bemUtils('periodelisteItemHeader');\n\nexport const getPeriodeIkon = (\n    periode: Periode,\n    navnPåForeldre: NavnPåForeldre,\n    harMidlertidigOmsorg?: boolean,\n    erFarEllerMedmor?: boolean,\n    situasjon?: Situasjon,\n    erAleneOmOmsorg?: boolean\n): React.ReactNode | undefined => {\n    switch (periode.type) {\n        case Periodetype.Uttak:\n            return (\n                <StønadskontoIkon\n                    konto={periode.konto}\n                    forelder={periode.forelder}\n                    gradert={periode.gradert}\n                    navnPåForeldre={navnPåForeldre}\n                    harMidlertidigOmsorg={harMidlertidigOmsorg}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    situasjon={situasjon}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                />\n            );\n        case Periodetype.Overføring:\n            return (\n                <StønadskontoIkon konto={periode.konto} forelder={periode.forelder} navnPåForeldre={navnPåForeldre} />\n            );\n        case Periodetype.Utsettelse:\n            return <UtsettelseIkon årsak={periode.årsak} />;\n        case Periodetype.Opphold:\n            return (\n                <StønadskontoIkon\n                    konto={StønadskontoType.Foreldrepenger}\n                    forelder={periode.forelder}\n                    navnPåForeldre={navnPåForeldre}\n                />\n            );\n        case Periodetype.Info:\n            if (isUtsettelseAnnenPart(periode)) {\n                return <UtsettelseIkon årsak={periode.årsak} />;\n            } else {\n                return (\n                    <StønadskontoIkon\n                        konto={StønadskontoType.Foreldrepenger}\n                        forelder={periode.forelder}\n                        navnPåForeldre={navnPåForeldre}\n                    />\n                );\n            }\n        case Periodetype.Hull:\n            return <UttaksplanAdvarselIkon />;\n    }\n    return undefined;\n};\n\ntype VarighetFormat = 'full' | 'normal';\n\nexport const getVarighetString = (antallDager: number, intl: IntlShape, format: VarighetFormat = 'full'): string => {\n    const { uker, dager } = getUkerOgDagerFromDager(Math.abs(antallDager));\n    const dagerStr = intl.formatMessage(\n        { id: 'common.varighet.dager' },\n        {\n            dager,\n        }\n    );\n    if (uker === 0) {\n        return dagerStr;\n    }\n    const ukerStr = intl.formatMessage({ id: 'common.varighet.uker' }, { uker });\n    if (dager > 0) {\n        return `${ukerStr}${intl.formatMessage({\n            id: `common.varighet.separator--${format}`,\n        })}${dagerStr}`;\n    }\n    return ukerStr;\n};\n\nconst renderDagMnd = (dato: Date, visÅr = true): JSX.Element => {\n    const d = dayjs(dato);\n\n    return (\n        <div className={bem.element('dagmnd')}>\n            <span className={bem.element('dagmnd__dato')}>\n                <Normaltekst>\n                    {d.get('date')}. {måned3bokstaver(d)}.\n                </Normaltekst>\n            </span>\n            {visÅr && (\n                <Normaltekst tag=\"span\" className={bem.element('dagmnd__mnd')}>\n                    <abbr title={`${måned(d)} ${år(d)}`}>{år(d)}</abbr>\n                </Normaltekst>\n            )}\n        </div>\n    );\n};\n\nconst PeriodelisteItemHeader: FunctionComponent<Props> = ({\n    egenPeriode,\n    periode,\n    navnPåForeldre,\n    melding,\n    annenForelderSamtidigUttakPeriode,\n    familiehendelsesdato,\n    termindato,\n    situasjon,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n}) => {\n    const intl = useIntl();\n\n    let varighetString;\n    const erFpFørTerminUtenUttak =\n        isForeldrepengerFørFødselUttaksperiode(periode) && periode.skalIkkeHaUttakFørTermin === true;\n    if (erFpFørTerminUtenUttak) {\n        varighetString = intlUtils(intl, 'uttaksplan.periodeliste.header.skalIkkeHaUttakFørTermin');\n    } else {\n        varighetString = getVarighetString(Tidsperioden(periode.tidsperiode).getAntallUttaksdager(), intl);\n    }\n\n    let annenForelderIsMor;\n    let annenForelderNavn;\n    let beskrivelseSamtidigUttak;\n    if (annenForelderSamtidigUttakPeriode && isUttakAnnenPart(annenForelderSamtidigUttakPeriode)) {\n        annenForelderIsMor = annenForelderSamtidigUttakPeriode.forelder === Forelder.mor;\n        annenForelderNavn = getForelderNavn(annenForelderSamtidigUttakPeriode.forelder, navnPåForeldre);\n        beskrivelseSamtidigUttak = getVarighetString(\n            getValidTidsperiode(annenForelderSamtidigUttakPeriode.tidsperiode)\n                ? Tidsperioden(annenForelderSamtidigUttakPeriode.tidsperiode).getAntallUttaksdager()\n                : 0,\n            intl\n        );\n    }\n\n    return (\n        <div>\n            <div className={bem.block}>\n                <div\n                    className={classNames(\n                        bem.element('content'),\n                        egenPeriode ? bem.modifier('egenPeriode') : bem.modifier('annenPart')\n                    )}\n                >\n                    <div className={bem.element('ikon')}>{getPeriodeIkon(periode, navnPåForeldre)}</div>\n                    <div className={bem.element('tittel')}>\n                        <Element tag=\"h3\">\n                            {getPeriodeTittel(\n                                intl,\n                                periode,\n                                navnPåForeldre,\n                                familiehendelsesdato,\n                                termindato,\n                                situasjon,\n                                erFarEllerMedmor,\n                                erAleneOmOmsorg\n                            )}\n                        </Element>\n                        <Normaltekst>{varighetString}</Normaltekst>\n                    </div>\n                    <div className={bem.element('advarsel')}>\n                        {melding && (\n                            <span role=\"presentation\">\n                                <UttaksplanIkon\n                                    ikon={getIkonForVeilederMelding(melding)}\n                                    title={melding.contentIntlKey}\n                                />\n                            </span>\n                        )}\n                    </div>\n                    {!erFpFørTerminUtenUttak && (\n                        <div className={bem.element('dato-container')}>\n                            {renderDagMnd(periode.tidsperiode.fom)}\n                            {renderDagMnd(periode.tidsperiode.tom)}\n                        </div>\n                    )}\n                </div>\n            </div>\n\n            {annenForelderSamtidigUttakPeriode && (\n                <div\n                    className={classNames(bem.element('samtidig-uttak'), {\n                        [bem.element('samtidig-uttak-mor')]: annenForelderIsMor,\n                        [bem.element('samtidig-uttak-far')]: !annenForelderIsMor,\n                    })}\n                >\n                    <div>\n                        <Element>\n                            <FormattedMessage id=\"oppsummering.morsAktivitet.SamtidigUttak\" />\n                        </Element>\n                    </div>\n                    <div className={bem.element('beskrivelse')}>\n                        <em className={bem.element('beskrivelse__tekst')}>\n                            {beskrivelseSamtidigUttak}\n                            <em className={bem.element('hvem')}> - {annenForelderNavn}</em>\n                        </em>\n                    </div>\n                    {annenForelderSamtidigUttakPeriode.tidsperiode && (\n                        <div className={bem.element('tidsrom')}>\n                            {renderDagMnd(annenForelderSamtidigUttakPeriode.tidsperiode.fom, false)}\n                            {renderDagMnd(annenForelderSamtidigUttakPeriode.tidsperiode.tom, false)}\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default PeriodelisteItemHeader;\n","import { ActionLink, bemUtils, Block, intlUtils } from '@navikt/fp-common';\nimport { Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { førsteOktober2021ReglerGjelder } from 'app/utils/dateUtils';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Periode, Periodetype } from 'uttaksplan/types/Periode';\n\nimport './periodeHull.less';\n\ninterface Props {\n    periode: Periode;\n    navnAnnenForelder: string;\n    erDeltUttak: boolean;\n    familiehendelsesdato: Date;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n}\n\nconst PeriodeHull: FunctionComponent<Props> = ({\n    periode,\n    navnAnnenForelder,\n    erDeltUttak,\n    familiehendelsesdato,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n    handleUpdatePeriode,\n}) => {\n    const intl = useIntl();\n    const bem = bemUtils('periodeHull');\n\n    const antallDager = Tidsperioden(periode.tidsperiode).getAntallUttaksdager();\n    const antallHelligdager = Tidsperioden(periode.tidsperiode).getAntallFridager();\n    const antallUttaksdager = Tidsperioden(periode.tidsperiode).getAntallUttaksdager();\n    const kunHelligdager = antallHelligdager === antallUttaksdager;\n    const kunUttaksdager = antallHelligdager === 0;\n\n    const onLeggInnNyPeriode = () => {\n        const { id, tidsperiode } = periode;\n\n        handleUpdatePeriode({ id, type: Periodetype.Uttak, tidsperiode } as Periode, familiehendelsesdato);\n    };\n\n    const leggInnNyUtsettelse = () => {\n        const { id, tidsperiode } = periode;\n\n        handleUpdatePeriode({ id, type: Periodetype.Utsettelse, tidsperiode } as Periode, familiehendelsesdato);\n    };\n\n    const nyeRegler = førsteOktober2021ReglerGjelder(familiehendelsesdato);\n\n    return (\n        <div className={bem.block}>\n            <Block padBottom=\"l\" visible={kunHelligdager}>\n                <Normaltekst>\n                    <FormattedMessage id=\"uttaksplan.hull.helligdager\" />\n                </Normaltekst>\n            </Block>\n            <Block padBottom=\"l\" visible={kunUttaksdager || (kunUttaksdager === false && kunHelligdager === false)}>\n                <Normaltekst>\n                    {erDeltUttak ? (\n                        <FormattedMessage\n                            id=\"uttaksplan.hull.uttaksdager.deltUttak\"\n                            values={{\n                                navn: navnAnnenForelder,\n                                dager: antallDager,\n                            }}\n                        />\n                    ) : (\n                        <FormattedMessage\n                            id={\n                                nyeRegler && erFarEllerMedmor && !erAleneOmOmsorg\n                                    ? 'uttaksplan.hull.uttaksdager.ikkeDeltUttak.nyeRegler'\n                                    : 'uttaksplan.hull.uttaksdager.ikkeDeltUttak'\n                            }\n                            values={{\n                                dager: antallDager,\n                            }}\n                        />\n                    )}\n                </Normaltekst>\n            </Block>\n            <div className={bem.element('lenker')}>\n                <ActionLink onClick={onLeggInnNyPeriode}>{intlUtils(intl, 'uttaksplan.leggInnNyPeriode')}</ActionLink>\n                <ActionLink onClick={leggInnNyUtsettelse}>\n                    {intlUtils(intl, 'uttaksplan.leggInnNyUtsettelse')}\n                </ActionLink>\n            </div>\n        </div>\n    );\n};\n\nexport default PeriodeHull;\n","import { intlUtils } from '@navikt/fp-common';\nimport { Forelder } from 'app/types/Forelder';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { formaterDatoKompakt } from 'app/utils/dateUtils';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { isUttakAnnenPart, UtsettelseAnnenPartInfoPeriode, UttakAnnenPartInfoPeriode } from 'uttaksplan/types/Periode';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport { getForelderNavn, getOppholdskontoNavn } from 'uttaksplan/utils/periodeUtils';\n\nexport interface Props {\n    periode: UttakAnnenPartInfoPeriode | UtsettelseAnnenPartInfoPeriode;\n    navnPåForeldre: NavnPåForeldre;\n}\n\nconst getUtsettelseTekst = (intl: IntlShape, årsak: UtsettelseÅrsakType, foreldernavn: string, erMor: boolean) => {\n    return erMor\n        ? intlUtils(intl, `uttaksplan.utsettelseårsaktype.foreldernavn.far.${årsak}`, { foreldernavn })\n        : intlUtils(intl, `uttaksplan.utsettelseårsaktype.foreldernavn.mor.${årsak}`, { foreldernavn });\n};\n\nconst PeriodeInfo: FunctionComponent<Props> = ({ periode, navnPåForeldre }) => {\n    const intl = useIntl();\n\n    return (\n        <Normaltekst>\n            <strong>\n                <span>{formaterDatoKompakt(periode.tidsperiode.fom)}</span>\n                <span>&mdash;</span>\n                <span>{formaterDatoKompakt(periode.tidsperiode.tom)}:</span>\n            </strong>{' '}\n            {isUttakAnnenPart(periode)\n                ? getOppholdskontoNavn(\n                      intl,\n                      periode.årsak,\n                      getForelderNavn(periode.forelder, navnPåForeldre),\n                      periode.forelder === Forelder.mor\n                  )\n                : getUtsettelseTekst(\n                      intl,\n                      periode.årsak,\n                      getForelderNavn(periode.forelder, navnPåForeldre),\n                      periode.forelder === Forelder.mor\n                  )}\n        </Normaltekst>\n    );\n};\n\nexport default PeriodeInfo;\n","import { ActionLink, Block, intlUtils } from '@navikt/fp-common';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Periode, Periodetype } from 'uttaksplan/types/Periode';\n\ninterface Props {\n    periode: Periode;\n    handleUpdatePeriode: (periode: Periode, familiehendelsesdato: Date) => void;\n    familiehendelsesdato: Date;\n}\n\nconst PeriodeUtenUttak: FunctionComponent<Props> = ({ periode, handleUpdatePeriode, familiehendelsesdato }) => {\n    const intl = useIntl();\n\n    const onLeggTilNyPeriode = () => {\n        const { id, tidsperiode } = periode;\n\n        handleUpdatePeriode({ id, type: Periodetype.Uttak, tidsperiode } as Periode, familiehendelsesdato);\n    };\n\n    return (\n        <div>\n            <Block padBottom=\"l\">\n                <Normaltekst>\n                    <FormattedMessage id=\"uttaksplan.periodeUtenUttak.info.del1\" />\n                </Normaltekst>\n            </Block>\n            <Block padBottom=\"l\">\n                <Normaltekst>\n                    <FormattedMessage id=\"uttaksplan.periodeUtenUttak.info.del2\" />\n                </Normaltekst>\n            </Block>\n            <ActionLink onClick={onLeggTilNyPeriode}>{intlUtils(intl, 'uttaksplan.leggInnNyPeriode')}</ActionLink>\n        </div>\n    );\n};\n\nexport default PeriodeUtenUttak;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\n\nexport enum PeriodeFørFødselFormField {\n    fom = 'fom',\n    tom = 'tom',\n    skalIkkeHaUttakFørTermin = 'skalIkkeHaUttakFørTermin',\n}\n\nexport interface PeriodeFørFødselFormData {\n    [PeriodeFørFødselFormField.fom]: Date | undefined;\n    [PeriodeFørFødselFormField.tom]: Date | undefined;\n    [PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin]: boolean;\n}\n\nexport const PeriodeFørFødselFormComponents = getTypedFormComponents<\n    PeriodeFørFødselFormField,\n    PeriodeFørFødselFormData,\n    string\n>();\n","import { hasValue } from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { PeriodeFørFødselFormData, PeriodeFørFødselFormField } from './periodeFørFødselFormConfig';\n\nconst PeriodeFørFødselFormConfig: QuestionConfig<PeriodeFørFødselFormData, PeriodeFørFødselFormField> = {\n    [PeriodeFørFødselFormField.fom]: {\n        isAnswered: ({ fom }) => hasValue(fom),\n        isIncluded: ({ skalIkkeHaUttakFørTermin }) => !skalIkkeHaUttakFørTermin,\n    },\n    [PeriodeFørFødselFormField.tom]: {\n        isAnswered: ({ tom }) => hasValue(tom),\n        isIncluded: ({ skalIkkeHaUttakFørTermin }) => !skalIkkeHaUttakFørTermin,\n    },\n    [PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin]: {\n        isAnswered: () => true,\n        isIncluded: () => true,\n        visibilityFilter: ({ fom, tom, skalIkkeHaUttakFørTermin }) =>\n            skalIkkeHaUttakFørTermin ? true : isValidTidsperiode({ fom, tom }),\n    },\n};\n\nexport const periodeFørFødselFormQuestionsConfig = Questions<PeriodeFørFødselFormData, PeriodeFørFødselFormField>(\n    PeriodeFørFødselFormConfig\n);\n","import uttaksConstants from 'app/constants';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport dayjs from 'dayjs';\nimport { ForeldrepengerFørFødselUttaksperiode, Periode, Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { PeriodeFørFødselFormData, PeriodeFørFødselFormField } from './periodeFørFødselFormConfig';\n\nexport const initialValues: PeriodeFørFødselFormData = {\n    [PeriodeFørFødselFormField.fom]: undefined,\n    [PeriodeFørFødselFormField.tom]: undefined,\n    [PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin]: false,\n};\n\nexport const getPeriodeFørFødselFormInitialValues = (\n    periode: ForeldrepengerFørFødselUttaksperiode,\n    familiehendelsesdato: Date\n): PeriodeFørFødselFormData => {\n    const sisteUttaksagFørFødsel = Uttaksdagen(dayjs(familiehendelsesdato).toDate()).forrige();\n    const førsteUttaksdag3UkerFørFødsel = Uttaksdagen(sisteUttaksagFørFødsel).trekkFra(\n        uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1\n    );\n    const fom = periode.tidsperiode.fom !== undefined ? periode.tidsperiode.fom : førsteUttaksdag3UkerFørFødsel;\n    const tom = periode.tidsperiode.tom !== undefined ? periode.tidsperiode.tom : sisteUttaksagFørFødsel;\n    return {\n        ...initialValues,\n        fom,\n        tom,\n        skalIkkeHaUttakFørTermin: periode.skalIkkeHaUttakFørTermin,\n    };\n};\n\nexport const mapPeriodeFørFødselFormToPeriode = (\n    values: Partial<PeriodeFørFødselFormData>,\n    periode: ForeldrepengerFørFødselUttaksperiode\n): Periode => {\n    return {\n        type: Periodetype.Uttak,\n        id: periode.id,\n        forelder: periode.forelder,\n        konto: StønadskontoType.ForeldrepengerFørFødsel,\n        tidsperiode: {\n            fom: values.fom!,\n            tom: values.tom!,\n        },\n        skalIkkeHaUttakFørTermin: !!values.skalIkkeHaUttakFørTermin,\n    };\n};\n","import { Block, intlUtils } from '@navikt/fp-common';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport React, { FunctionComponent, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport TidsperiodeDisplay from 'uttaksplan/components/tidsperiode-display/TidsperiodeDisplay';\nimport UttakEndreTidsperiodeSpørsmål from 'uttaksplan/components/uttak-endre-tidsperiode-spørsmål/UttakEndreTidsperiodeSpørsmål';\nimport { ForeldrepengerFørFødselUttaksperiode, Periode, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { SubmitListener } from '../submit-listener/SubmitListener';\nimport TidsperiodeForm from '../tidsperiode-form/TidsperiodeForm';\nimport {\n    PeriodeFørFødselFormComponents,\n    PeriodeFørFødselFormData,\n    PeriodeFørFødselFormField,\n} from './periodeFørFødselFormConfig';\nimport { periodeFørFødselFormQuestionsConfig } from './periodeFørFødselFormQuestionsConfig';\nimport { getPeriodeFørFødselFormInitialValues, mapPeriodeFørFødselFormToPeriode } from './periodeFørFødselFormUtils';\n\ninterface Props {\n    periode: ForeldrepengerFørFødselUttaksperiode;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    familiehendelsesdato: Date;\n    erFarEllerMedmor: boolean;\n    morHarRett: boolean;\n    situasjon: Situasjon;\n    utsettelserIPlan: Utsettelsesperiode[];\n}\n\nconst PeriodeFørFødselForm: FunctionComponent<Props> = ({\n    periode,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    erFarEllerMedmor,\n    morHarRett,\n    situasjon,\n    utsettelserIPlan,\n}) => {\n    const { tidsperiode } = periode;\n    const [tidsperiodeIsOpen, setTidsperiodeIsOpen] = useState(false);\n    const intl = useIntl();\n\n    const toggleVisTidsperiode = () => {\n        setTidsperiodeIsOpen(!tidsperiodeIsOpen);\n    };\n\n    const handleCleanup = (\n        values: PeriodeFørFødselFormData,\n        _visibility: QuestionVisibility<PeriodeFørFødselFormField, undefined>\n    ): PeriodeFørFødselFormData => {\n        return values;\n    };\n\n    return (\n        <PeriodeFørFødselFormComponents.FormikWrapper\n            initialValues={getPeriodeFørFødselFormInitialValues(periode, familiehendelsesdato)}\n            onSubmit={(values) =>\n                handleUpdatePeriode(mapPeriodeFørFødselFormToPeriode(values, periode), familiehendelsesdato)\n            }\n            renderForm={({ setFieldValue, values }) => {\n                const visibility = periodeFørFødselFormQuestionsConfig.getVisbility(values);\n\n                return (\n                    <>\n                        <Block\n                            visible={\n                                !isValidTidsperiode(tidsperiode) && visibility.isVisible(PeriodeFørFødselFormField.fom)\n                            }\n                            padBottom=\"l\"\n                        >\n                            <TidsperiodeForm\n                                tidsperiode={tidsperiode}\n                                familiehendelsesdato={familiehendelsesdato}\n                                onBekreft={(values) => {\n                                    setFieldValue(PeriodeFørFødselFormField.fom, ISOStringToDate(values.fom));\n                                    setFieldValue(PeriodeFørFødselFormField.tom, ISOStringToDate(values.tom));\n                                }}\n                                ugyldigeTidsperioder={undefined}\n                                utsettelserIPlan={utsettelserIPlan}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                morHarRett={morHarRett}\n                                situasjon={situasjon}\n                                erFarMedmorOgHarAleneomsorg={false}\n                            />\n                        </Block>\n                        <PeriodeFørFødselFormComponents.Form includeButtons={false}>\n                            <SubmitListener cleanup={() => handleCleanup(values, visibility)} />\n\n                            <Block\n                                visible={\n                                    isValidTidsperiode(tidsperiode) &&\n                                    visibility.isVisible(PeriodeFørFødselFormField.fom)\n                                }\n                                padBottom=\"l\"\n                            >\n                                <TidsperiodeDisplay\n                                    tidsperiode={tidsperiode}\n                                    toggleVisTidsperiode={toggleVisTidsperiode}\n                                />\n                                <UttakEndreTidsperiodeSpørsmål\n                                    periode={periode}\n                                    familiehendelsesdato={familiehendelsesdato}\n                                    ugyldigeTidsperioder={undefined}\n                                    utsettelserIPlan={utsettelserIPlan}\n                                    onBekreft={(values) => {\n                                        toggleVisTidsperiode();\n                                        setFieldValue(PeriodeFørFødselFormField.fom, values.fom);\n                                        setFieldValue(PeriodeFørFødselFormField.tom, values.tom);\n                                    }}\n                                    changeTidsperiode={(values) => {\n                                        setFieldValue(PeriodeFørFødselFormField.fom, values.fom);\n                                        setFieldValue(PeriodeFørFødselFormField.tom, values.tom);\n                                    }}\n                                    tidsperiode={tidsperiode}\n                                    onAvbryt={() => toggleVisTidsperiode()}\n                                    visible={tidsperiodeIsOpen}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    morHarRett={morHarRett}\n                                    situasjon={situasjon}\n                                    erFarMedmorOgHarAleneomsorg={false}\n                                />\n                            </Block>\n\n                            <Block\n                                visible={visibility.isVisible(PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin)}\n                                padBottom=\"l\"\n                            >\n                                <PeriodeFørFødselFormComponents.Checkbox\n                                    name={PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin}\n                                    label={intlUtils(intl, 'uttaksplan.periodeFørFødselForm.skalIkkeHaUttakFørTermin')}\n                                />\n                            </Block>\n                        </PeriodeFørFødselFormComponents.Form>\n                    </>\n                );\n            }}\n        />\n    );\n};\n\nexport default PeriodeFørFødselForm;\n","import { IntlShape } from 'react-intl';\nimport { bemUtils, Block } from '@navikt/fp-common';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport classNames from 'classnames';\nimport { EkspanderbartpanelBase } from 'nav-frontend-ekspanderbartpanel';\nimport React, { Dispatch, FunctionComponent, SetStateAction } from 'react';\nimport {\n    isAvslåttPeriode,\n    isForeldrepengerFørFødselUttaksperiode,\n    isInfoPeriode,\n    Periode,\n    Periodetype,\n    Utsettelsesperiode,\n} from 'uttaksplan/types/Periode';\nimport { VeilederMessage } from 'uttaksplan/validering/veilederInfo/types';\nimport VeilederMeldinger from 'uttaksplan/validering/veilederInfo/VeilederMeldinger';\nimport PeriodelisteItemHeader from '../periodeliste-item-header/PeriodelisteItemHeader';\nimport PeriodeHull from '../perioder/PeriodeHull';\nimport PeriodeInfo from '../perioder/PeriodeInfo';\nimport PeriodeUtenUttak from '../perioder/PeriodeUtenUttak';\nimport PeriodeFørFødselForm from '../uttaks-forms/periode-før-fødsel-form/PeriodeFørFødselForm';\nimport PeriodeUtsettelseForm from '../uttaks-forms/periode-utsettelse-form/PeriodeUtsettelseForm';\nimport PeriodeUttakForm from '../uttaks-forms/periode-uttak-form/PeriodeUttakForm';\n\nimport './periodelisteItem.less';\n\ninterface Props {\n    egenPeriode: boolean;\n    periode: Periode;\n    isOpen: boolean;\n    toggleIsOpen: (id: string) => void;\n    familiehendelsesdato: Date;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    handleDeletePeriode: (periodeId: string) => void;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    meldinger?: VeilederMessage[];\n    erMorUfør: boolean;\n    annenForelderSamtidigUttakPeriode: Periode | undefined;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    setPeriodeErGyldig: Dispatch<SetStateAction<boolean>>;\n    erEndringssøknad: boolean;\n    termindato: Date | undefined;\n    antallBarn: number;\n    utsettelserIPlan: Utsettelsesperiode[];\n    intl: IntlShape;\n}\n\nconst renderPeriodeListeInnhold = (\n    periode: Periode,\n    familiehendelsesdato: Date,\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void,\n    stønadskontoer: TilgjengeligStønadskonto[],\n    navnPåForeldre: NavnPåForeldre,\n    annenForelder: AnnenForelder,\n    toggleIsOpen: (id: string) => void,\n    arbeidsforhold: Arbeidsforhold[],\n    handleDeletePeriode: (periodeId: string) => void,\n    erFarEllerMedmor: boolean,\n    erFlerbarnssøknad: boolean,\n    erAleneOmOmsorg: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon,\n    erMorUfør: boolean,\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean,\n    setPeriodeErGyldig: Dispatch<SetStateAction<boolean>>,\n    erEndringssøknad: boolean,\n    termindato: Date | undefined,\n    antallBarn: number,\n    utsettelserIPlan: Utsettelsesperiode[],\n    intl: IntlShape\n) => {\n    switch (periode.type) {\n        case Periodetype.Uttak:\n        case Periodetype.Overføring:\n        case Periodetype.Opphold:\n            if (isForeldrepengerFørFødselUttaksperiode(periode)) {\n                return (\n                    <PeriodeFørFødselForm\n                        periode={periode}\n                        familiehendelsesdato={familiehendelsesdato}\n                        handleUpdatePeriode={handleUpdatePeriode}\n                        erFarEllerMedmor={erFarEllerMedmor}\n                        morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                        situasjon={situasjon}\n                        utsettelserIPlan={utsettelserIPlan}\n                    />\n                );\n            }\n\n            return (\n                <PeriodeUttakForm\n                    periode={periode}\n                    familiehendelsesdato={familiehendelsesdato}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                    stønadskontoer={stønadskontoer}\n                    navnPåForeldre={navnPåForeldre}\n                    annenForelder={annenForelder}\n                    toggleIsOpen={toggleIsOpen}\n                    arbeidsforhold={arbeidsforhold}\n                    handleDeletePeriode={handleDeletePeriode}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    erFlerbarnssøknad={erFlerbarnssøknad}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    erDeltUttak={erDeltUttak}\n                    situasjon={situasjon}\n                    erMorUfør={erMorUfør}\n                    erEndringssøknad={erEndringssøknad}\n                    setPeriodeErGyldig={setPeriodeErGyldig}\n                    termindato={termindato}\n                    morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                    antallBarn={antallBarn}\n                    utsettelserIPlan={utsettelserIPlan}\n                    intl={intl}\n                />\n            );\n        case Periodetype.Utsettelse:\n            return (\n                <PeriodeUtsettelseForm\n                    periode={periode}\n                    familiehendelsesdato={familiehendelsesdato}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    handleDeletePeriode={handleDeletePeriode}\n                    toggleIsOpen={toggleIsOpen}\n                    navnPåForeldre={navnPåForeldre}\n                    erMorUfør={erMorUfør}\n                    søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                    arbeidsforhold={arbeidsforhold}\n                    situasjon={situasjon}\n                    utsettelserIPlan={utsettelserIPlan}\n                />\n            );\n        case Periodetype.Hull:\n            return (\n                <PeriodeHull\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    erDeltUttak={erDeltUttak}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    periode={periode}\n                    familiehendelsesdato={familiehendelsesdato}\n                    navnAnnenForelder={erFarEllerMedmor ? navnPåForeldre.mor : navnPåForeldre.farMedmor}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                />\n            );\n        case Periodetype.PeriodeUtenUttak:\n            return (\n                <PeriodeUtenUttak\n                    periode={periode}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                    familiehendelsesdato={familiehendelsesdato}\n                />\n            );\n        case Periodetype.Info:\n            return (\n                periode.visPeriodeIPlan &&\n                !isAvslåttPeriode(periode) && <PeriodeInfo periode={periode} navnPåForeldre={navnPåForeldre} />\n            );\n        default:\n            return <div>Ingen visning</div>;\n    }\n};\n\nconst PeriodelisteItem: FunctionComponent<Props> = ({\n    egenPeriode,\n    periode,\n    isOpen,\n    toggleIsOpen,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    stønadskontoer,\n    navnPåForeldre,\n    annenForelder,\n    arbeidsforhold,\n    handleDeletePeriode,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    meldinger = [],\n    erMorUfør,\n    annenForelderSamtidigUttakPeriode,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    erEndringssøknad,\n    setPeriodeErGyldig,\n    termindato,\n    antallBarn,\n    utsettelserIPlan,\n    intl,\n}) => {\n    const bem = bemUtils('periodelisteItem');\n    const melding = meldinger.length > 0 ? meldinger[0] : undefined;\n\n    if (isInfoPeriode(periode) && !periode.visPeriodeIPlan) {\n        return null;\n    }\n\n    const toggleFocusAndOpen = () => {\n        const headerButton = window.document.getElementById(periode.id);\n\n        if (headerButton) {\n            setTimeout(() => {\n                headerButton.focus();\n            }, 150);\n        }\n\n        toggleIsOpen(periode.id);\n    };\n\n    return (\n        <article className={bem.block}>\n            <EkspanderbartpanelBase\n                className={classNames(bem.element('header'), egenPeriode ? undefined : bem.modifier('transparent'))}\n                id={periode.id}\n                tittel={\n                    <PeriodelisteItemHeader\n                        egenPeriode={egenPeriode}\n                        periode={periode}\n                        navnPåForeldre={navnPåForeldre}\n                        melding={melding}\n                        annenForelderSamtidigUttakPeriode={annenForelderSamtidigUttakPeriode}\n                        familiehendelsesdato={familiehendelsesdato}\n                        termindato={termindato}\n                        situasjon={situasjon}\n                        erFarEllerMedmor={erFarEllerMedmor}\n                        erAleneOmOmsorg={erAleneOmOmsorg}\n                    />\n                }\n                apen={isOpen}\n                onClick={() => toggleIsOpen(periode.id)}\n            >\n                <Block visible={meldinger.length > 0}>\n                    <VeilederMeldinger meldinger={meldinger.filter((m) => m.avvikType !== 'skjema')} />\n                </Block>\n                {renderPeriodeListeInnhold(\n                    periode,\n                    familiehendelsesdato,\n                    handleUpdatePeriode,\n                    stønadskontoer,\n                    navnPåForeldre,\n                    annenForelder,\n                    toggleFocusAndOpen,\n                    arbeidsforhold,\n                    handleDeletePeriode,\n                    erFarEllerMedmor,\n                    erFlerbarnssøknad,\n                    erAleneOmOmsorg,\n                    erDeltUttak,\n                    situasjon,\n                    erMorUfør,\n                    søkerErFarEllerMedmorOgKunDeHarRett,\n                    setPeriodeErGyldig,\n                    erEndringssøknad,\n                    termindato,\n                    antallBarn,\n                    utsettelserIPlan,\n                    intl\n                )}\n            </EkspanderbartpanelBase>\n        </article>\n    );\n};\n\nexport default PeriodelisteItem;\n","import React from 'react';\nimport { UttaksplanIkonProps } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\n\ninterface OwnProps {\n    fylt?: boolean;\n}\n\nconst HjerteIkon = (props: UttaksplanIkonProps & OwnProps) => {\n    const { title, fylt, ...rest } = props;\n    return fylt ? (\n        <svg focusable=\"false\" role=\"img\" aria-hidden=\"true\" width={24} height={24} {...rest}>\n            <title>{title}</title>\n            <path\n                fill=\"#ba3a26\"\n                fillRule=\"evenodd\"\n                d=\"M23 7.173c0 .41-.028.823-.083 1.243-.418 3.173-2.345 6.521-5.291 9.882a43.405 43.405 0 0 1-4.856 4.717c-.22.181-.378.307-.464.374a.5.5 0 0 1-.582.021 16.293 16.293 0 0 1-.467-.325 35.073 35.073 0 0 1-4.87-4.255C3.027 15.28 1 11.544 1 7.765 1-.286 9.586-1.719 12.003 4.612 14.42-1.616 23-.464 23 7.173z\"\n            />\n        </svg>\n    ) : (\n        <svg focusable=\"false\" role=\"img\" aria-hidden=\"true\" width={24} height={24} viewBox=\"0 0 24 24\" {...rest}>\n            <title>{title}</title>\n            <path\n                fill=\"none\"\n                fillRule=\"evenodd\"\n                stroke=\"#3E3832\"\n                strokeLinejoin=\"round\"\n                d=\"M12 22.993s10.5-8.128 10.5-15.82-9.316-8.284-10.5-.59C10.816-1.112 1.5-.52 1.5 7.764S12 22.993 12 22.993z\"\n            />\n        </svg>\n    );\n};\nexport default HjerteIkon;\n","import { bemUtils } from '@navikt/fp-common';\nimport Barn, { isAdoptertBarn, isFødtBarn } from 'app/context/types/Barn';\nimport { formaterDatoUtenDag } from 'app/utils/dateUtils';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent, ReactNode } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport HjerteIkon from 'uttaksplan/assets/HjerteIkon';\n\nimport './familiehendelsesdatoDisplay.less';\n\ninterface Props {\n    familiehendelsedato: Date;\n    barn: Barn;\n}\n\nconst getTekst = (barn: Barn, familiehendelsedato: Date, antallBarn: number): ReactNode => {\n    if (!isAdoptertBarn(barn)) {\n        if (isFødtBarn(barn)) {\n            return (\n                <FormattedMessage\n                    id=\"uttaksplan.familiehendelsesdato.født\"\n                    values={{ antallBarn, dato: formaterDatoUtenDag(familiehendelsedato) }}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id=\"uttaksplan.familiehendelsesdato.termin\"\n                values={{ dato: formaterDatoUtenDag(familiehendelsedato) }}\n            />\n        );\n    }\n\n    return (\n        <FormattedMessage\n            id=\"uttaksplan.familiehendelsesdato.adopsjon\"\n            values={{ antallBarn, dato: formaterDatoUtenDag(familiehendelsedato) }}\n        />\n    );\n};\n\nconst FamiliehendelsedatoDisplay: FunctionComponent<Props> = ({ familiehendelsedato, barn }) => {\n    const bem = bemUtils('familiehendelsesdatoDisplay');\n\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('hjerte')}>\n                <HjerteIkon fylt={true} title=\"Hjerte\" />\n            </div>\n            <Normaltekst>{getTekst(barn, familiehendelsedato, barn.antallBarn)}</Normaltekst>\n        </div>\n    );\n};\n\nexport default FamiliehendelsedatoDisplay;\n","import React, { Dispatch, FunctionComponent, SetStateAction, useState } from 'react';\nimport { bemUtils, Block, formatDate } from '@navikt/fp-common';\nimport PeriodelisteItem from './../periodeliste-item/PeriodelisteItem';\nimport { isInfoPeriode, Periode, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\n\nimport './periodeliste.less';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { VeiledermeldingerPerPeriode } from 'uttaksplan/validering/veilederInfo/types';\nimport { getAnnenForelderSamtidigUttakPeriode } from 'uttaksplan/utils/periodeUtils';\nimport dayjs from 'dayjs';\nimport FamiliehendelsedatoDisplay from '../familiehendelsedato-display/FamiliehendelsedatoDisplay';\nimport Barn, { BarnFraNesteSak } from 'app/context/types/Barn';\nimport AlertStripe from 'nav-frontend-alertstriper';\nimport { FormattedMessage, IntlShape } from 'react-intl';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\n\ninterface Props {\n    uttaksplan: Periode[];\n    familiehendelsesdato: Date;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    handleDeletePeriode: (periodeId: string) => void;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    meldingerPerPeriode: VeiledermeldingerPerPeriode;\n    erMorUfør: boolean;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    setPeriodeErGyldig: Dispatch<SetStateAction<boolean>>;\n    erEndringssøknad: boolean;\n    termindato: Date | undefined;\n    antallBarn: number;\n    utsettelserIPlan: Utsettelsesperiode[];\n    barn: Barn;\n    barnFraNesteSak: BarnFraNesteSak | undefined;\n    intl: IntlShape;\n}\n\nconst getIndexOfFørstePeriodeEtterFødsel = (uttaksplan: Periode[], familiehendelsesdato: Date) => {\n    return uttaksplan.findIndex(\n        (p) => isValidTidsperiode(p.tidsperiode) && dayjs(p.tidsperiode.fom).isSameOrAfter(familiehendelsesdato)\n    );\n};\n\nconst getIndexOfSistePeriodeFørDato = (uttaksplan: Periode[], dato: Date | undefined) => {\n    if (dato !== undefined) {\n        return Math.max(0, uttaksplan.filter((p) => dayjs(p.tidsperiode.tom).isBefore(dato, 'day')).length);\n    }\n    return undefined;\n};\n\nconst Periodeliste: FunctionComponent<Props> = ({\n    uttaksplan,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    stønadskontoer,\n    navnPåForeldre,\n    annenForelder,\n    arbeidsforhold,\n    handleDeletePeriode,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    meldingerPerPeriode,\n    erMorUfør,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    setPeriodeErGyldig,\n    erEndringssøknad,\n    termindato,\n    antallBarn,\n    utsettelserIPlan,\n    barn,\n    barnFraNesteSak,\n    intl,\n}) => {\n    const [openPeriodeId, setOpenPeriodeId] = useState<string>(null!);\n    const bem = bemUtils('periodeliste');\n\n    const toggleIsOpen = (id: string) => {\n        if (openPeriodeId === id) {\n            setOpenPeriodeId(null!);\n        } else {\n            setOpenPeriodeId(id);\n        }\n    };\n\n    const indexOfFørstePeriodeEtterFødsel = getIndexOfFørstePeriodeEtterFødsel(uttaksplan, familiehendelsesdato);\n    const erAllePerioderIPlanenFørFødsel = indexOfFørstePeriodeEtterFødsel === -1;\n    const indexOfSistePeriodeFørNyStøndasperiodeNyttBarn =\n        barnFraNesteSak !== undefined\n            ? getIndexOfSistePeriodeFørDato(uttaksplan, barnFraNesteSak.startdatoFørsteStønadsperiode)\n            : undefined;\n    return (\n        <div className={bem.block}>\n            {uttaksplan.map((p, index) => {\n                return (\n                    <>\n                        {indexOfFørstePeriodeEtterFødsel === index ? (\n                            <FamiliehendelsedatoDisplay barn={barn} familiehendelsedato={familiehendelsesdato} />\n                        ) : null}\n                        {barnFraNesteSak !== undefined &&\n                        indexOfSistePeriodeFørNyStøndasperiodeNyttBarn !== undefined &&\n                        indexOfSistePeriodeFørNyStøndasperiodeNyttBarn === index ? (\n                            <Block padBottom=\"s\">\n                                <AlertStripe className=\"nyStønadsperiodeNesteSak\" type=\"info\">\n                                    <FormattedMessage\n                                        id=\"uttaksplan.periodeliste.info.nyStønadsperiodeNesteSak\"\n                                        values={{\n                                            datoStønadsperiodeNyttBarn: formatDate(\n                                                barnFraNesteSak.startdatoFørsteStønadsperiode\n                                            ),\n                                        }}\n                                    />\n                                </AlertStripe>\n                            </Block>\n                        ) : null}\n                        <PeriodelisteItem\n                            key={p.id}\n                            egenPeriode={!isInfoPeriode(p)}\n                            periode={p}\n                            isOpen={openPeriodeId === p.id}\n                            toggleIsOpen={toggleIsOpen}\n                            familiehendelsesdato={familiehendelsesdato}\n                            handleUpdatePeriode={handleUpdatePeriode}\n                            stønadskontoer={stønadskontoer}\n                            navnPåForeldre={navnPåForeldre}\n                            annenForelder={annenForelder}\n                            arbeidsforhold={arbeidsforhold}\n                            handleDeletePeriode={handleDeletePeriode}\n                            erFarEllerMedmor={erFarEllerMedmor}\n                            erFlerbarnssøknad={erFlerbarnssøknad}\n                            erAleneOmOmsorg={erAleneOmOmsorg}\n                            erDeltUttak={erDeltUttak}\n                            situasjon={situasjon}\n                            meldinger={meldingerPerPeriode[p.id]}\n                            erMorUfør={erMorUfør}\n                            annenForelderSamtidigUttakPeriode={getAnnenForelderSamtidigUttakPeriode(p, uttaksplan)}\n                            søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                            setPeriodeErGyldig={setPeriodeErGyldig}\n                            erEndringssøknad={erEndringssøknad}\n                            termindato={termindato}\n                            antallBarn={antallBarn}\n                            utsettelserIPlan={utsettelserIPlan}\n                            intl={intl}\n                        />\n                        {erAllePerioderIPlanenFørFødsel && index === uttaksplan.length - 1 ? (\n                            <FamiliehendelsedatoDisplay barn={barn} familiehendelsedato={familiehendelsesdato} />\n                        ) : null}\n                        {barnFraNesteSak !== undefined &&\n                        index === uttaksplan.length - 1 &&\n                        indexOfSistePeriodeFørNyStøndasperiodeNyttBarn === uttaksplan.length ? (\n                            <Block padBottom=\"s\">\n                                <AlertStripe className=\"nyStønadsperiodeNesteSak\" type=\"info\">\n                                    <FormattedMessage\n                                        id=\"uttaksplan.periodeliste.info.nyStønadsperiodeNesteSak\"\n                                        values={{\n                                            datoStønadsperiodeNyttBarn: formatDate(\n                                                barnFraNesteSak.startdatoFørsteStønadsperiode\n                                            ),\n                                        }}\n                                    />\n                                </AlertStripe>\n                            </Block>\n                        ) : null}\n                    </>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default Periodeliste;\n","import { bemUtils, InfoBlock, intlUtils, Block, ActionLink } from '@navikt/fp-common';\nimport AnnenForelder, { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport Barn, { BarnFraNesteSak } from 'app/context/types/Barn';\nimport { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { Knapp } from 'nav-frontend-knapper';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport React, { Dispatch, FunctionComponent, SetStateAction, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Periode, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { VeiledermeldingerPerPeriode } from 'uttaksplan/validering/veilederInfo/types';\nimport NyPeriode from '../uttaks-forms/ny-periode/NyPeriode';\nimport Periodeliste from './../periodeliste/Periodeliste';\n\nimport './planlegger.less';\n\ninterface Props {\n    uttaksplan: Periode[];\n    familiehendelsesdato: Date;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    handleDeletePeriode: (periodeId: string) => void;\n    handleAddPeriode: (nyPeriode: Periode, familiehendelsedato: Date) => void;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    meldingerPerPeriode: VeiledermeldingerPerPeriode;\n    erMorUfør: boolean;\n    setPeriodeErGyldig: Dispatch<SetStateAction<boolean>>;\n    erEndringssøknad: boolean;\n    setSlettUttaksplanModalOpen: (isOpen: boolean) => void;\n    setResetUttaksplanModalOpen: (isOpen: boolean) => void;\n    termindato: Date | undefined;\n    barn: Barn;\n    utsettelserIPlan: Utsettelsesperiode[];\n    barnFraNesteSak: BarnFraNesteSak | undefined;\n}\n\nconst Planlegger: FunctionComponent<Props> = ({\n    uttaksplan,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    stønadskontoer,\n    navnPåForeldre,\n    annenForelder,\n    arbeidsforhold,\n    handleDeletePeriode,\n    handleAddPeriode,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    meldingerPerPeriode,\n    erMorUfør,\n    setPeriodeErGyldig,\n    erEndringssøknad,\n    setSlettUttaksplanModalOpen,\n    setResetUttaksplanModalOpen,\n    termindato,\n    barn,\n    utsettelserIPlan,\n    barnFraNesteSak,\n}) => {\n    const intl = useIntl();\n    const bem = bemUtils('planlegger');\n    const [nyPeriodeFormIsVisible, setNyPeriodeFormIsVisible] = useState(false);\n    const [isUtsettelse, setIsUtsettelse] = useState(false);\n    const nesteLedigeUttaksdato = Periodene(uttaksplan).getFørsteUttaksdagEtterSistePeriode();\n    const annenForelderErOppgitMenHarIkkeRett =\n        isAnnenForelderOppgitt(annenForelder) &&\n        !annenForelder.harRettPåForeldrepengerINorge &&\n        !annenForelder.harRettPåForeldrepengerIEØS;\n    const søkerErFarEllerMedmorOgKunDeHarRett =\n        erFarEllerMedmor && !erAleneOmOmsorg && annenForelderErOppgitMenHarIkkeRett;\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <InfoBlock>\n                    <Block padBottom=\"xl\">\n                        <section>\n                            <div className={bem.element('tittel')}>\n                                <div className={bem.element('tittelLinkWrapper')}>\n                                    <Systemtittel>{intlUtils(intl, 'uttaksplan.dinPlan')}</Systemtittel>\n                                    {erEndringssøknad && (\n                                        <ActionLink\n                                            onClick={() => setResetUttaksplanModalOpen(true)}\n                                            className={bem.element('resetPlan')}\n                                        >\n                                            <FormattedMessage id=\"uttaksplan.resetPlan.tittel\" />\n                                        </ActionLink>\n                                    )}\n                                    <ActionLink\n                                        onClick={() => setSlettUttaksplanModalOpen(true)}\n                                        className={bem.element('slettPlan')}\n                                    >\n                                        <FormattedMessage id=\"uttaksplan.slettPlan.tittel\" />\n                                    </ActionLink>\n                                </div>\n                            </div>\n\n                            <Periodeliste\n                                uttaksplan={uttaksplan}\n                                familiehendelsesdato={familiehendelsesdato}\n                                handleUpdatePeriode={handleUpdatePeriode}\n                                stønadskontoer={stønadskontoer}\n                                navnPåForeldre={navnPåForeldre}\n                                annenForelder={annenForelder}\n                                arbeidsforhold={arbeidsforhold}\n                                handleDeletePeriode={handleDeletePeriode}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                erFlerbarnssøknad={erFlerbarnssøknad}\n                                erAleneOmOmsorg={erAleneOmOmsorg}\n                                erDeltUttak={erDeltUttak}\n                                situasjon={situasjon}\n                                meldingerPerPeriode={meldingerPerPeriode}\n                                erMorUfør={erMorUfør}\n                                søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                                setPeriodeErGyldig={setPeriodeErGyldig}\n                                erEndringssøknad={erEndringssøknad}\n                                termindato={termindato}\n                                antallBarn={barn.antallBarn}\n                                utsettelserIPlan={utsettelserIPlan}\n                                barn={barn}\n                                barnFraNesteSak={barnFraNesteSak}\n                                intl={intl}\n                            />\n                        </section>\n                    </Block>\n                    {nyPeriodeFormIsVisible && (\n                        <div style={{ backgroundColor: 'white', padding: '1rem' }}>\n                            <NyPeriode\n                                setNyPeriodeFormIsVisible={setNyPeriodeFormIsVisible}\n                                annenForelder={annenForelder}\n                                arbeidsforhold={arbeidsforhold}\n                                familiehendelsesdato={familiehendelsesdato}\n                                isUtsettelse={isUtsettelse}\n                                navnPåForeldre={navnPåForeldre}\n                                stønadskontoer={stønadskontoer}\n                                handleAddPeriode={handleAddPeriode}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                erFlerbarnssøknad={erFlerbarnssøknad}\n                                erAleneOmOmsorg={erAleneOmOmsorg}\n                                erDeltUttak={erDeltUttak}\n                                situasjon={situasjon}\n                                erMorUfør={erMorUfør}\n                                setPeriodeErGyldig={setPeriodeErGyldig}\n                                nesteLedigeUttaksdato={nesteLedigeUttaksdato}\n                                søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                                erEndringssøknad={erEndringssøknad}\n                                termindato={termindato}\n                                antallBarn={barn.antallBarn}\n                                utsettelserIPlan={utsettelserIPlan}\n                                intl={intl}\n                            />\n                        </div>\n                    )}\n                </InfoBlock>\n            </Block>\n            {!nyPeriodeFormIsVisible && (\n                <Block padBottom=\"l\">\n                    <div className={bem.element('knapperad')}>\n                        <Knapp\n                            onClick={() => {\n                                setNyPeriodeFormIsVisible(true);\n                                setIsUtsettelse(false);\n                            }}\n                        >\n                            Legg til ny periode\n                        </Knapp>\n                        <Knapp\n                            onClick={() => {\n                                setNyPeriodeFormIsVisible(true);\n                                setIsUtsettelse(true);\n                            }}\n                        >\n                            Legg til utsettelse\n                        </Knapp>\n                    </div>\n                </Block>\n            )}\n        </>\n    );\n};\n\nexport default Planlegger;\n","import { ForeldreparForelder } from 'app/types/ForeldreparSituasjonTypes';\nimport React from 'react';\nimport { getForeldreparIkon } from './foreldreparUtils';\n\ninterface Props {\n    forelder: ForeldreparForelder;\n    width?: number;\n}\n\nconst ForelderIkon: React.FunctionComponent<Props> = ({ forelder, width }) => {\n    const scale = width ? width / 31 : 1;\n    const scaledWidth = 31 * scale;\n    const scaledHeight = 45 * scale;\n\n    return getForeldreparIkon(forelder, 'forelderIkon', scaledWidth, scaledHeight);\n};\n\nexport default ForelderIkon;\n","import { Perioden } from 'app/steps/uttaksplan-info/utils/Perioden';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { getFloatFromString } from 'app/utils/numberUtils';\nimport {\n    AvslåttPeriode,\n    InfoPeriode,\n    isAvslåttPeriode,\n    isInfoPeriode,\n    isOppholdsperiode,\n    isOverføringsperiode,\n    isUttaksperiode,\n    Oppholdsperiode,\n    Overføringsperiode,\n    Periode,\n    Periodetype,\n    UttakAnnenPartInfoPeriode,\n    Uttaksperiode,\n} from 'uttaksplan/types/Periode';\nimport { PeriodeInfoType } from 'uttaksplan/types/PeriodeInfoType';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport { getStønadskontoFromOppholdsårsak } from './periodeUtils';\n\nexport const finnAntallDagerÅTrekke = (periode: Periode): number => {\n    const dager = Perioden(periode).getAntallUttaksdager();\n    if (isUttaksperiode(periode)) {\n        const periodeErGradert = periode.stillingsprosent !== undefined;\n        const periodeErSamtidigUttak = periode.samtidigUttakProsent !== undefined;\n\n        if ((periodeErGradert && periodeErSamtidigUttak) || periodeErGradert) {\n            const graderingsProsent = (100 - getFloatFromString(periode.stillingsprosent)!) / 100;\n\n            return dager * graderingsProsent;\n        } else if (periodeErSamtidigUttak) {\n            return dager * (getFloatFromString(periode.samtidigUttakProsent)! / 100);\n        } else {\n            return dager;\n        }\n    }\n    return dager;\n};\n\nexport const getAllePerioderMedUttaksinfoFraUttaksplan = (perioder: Periode[]): Uttaksperiode[] => {\n    return [\n        ...perioder.filter(isUttaksperiode),\n        ...getUttakFraOppholdsperioder(perioder.filter(isOppholdsperiode)),\n        ...getUttakFraOverføringsperioder(perioder.filter(isOverføringsperiode)),\n        ...getUttakFraInfoperioder(perioder.filter(isInfoPeriode)),\n        ...getUttakFraAvslåttePerioder(perioder.filter(isAvslåttPeriode)),\n    ];\n};\n\nexport const beregnGjenståendeUttaksdager = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    uttaksplan: Periode[],\n    beregnDagerBrukt: boolean\n): StønadskontoUttak[] => {\n    const alleUttakIUttaksplan = getAllePerioderMedUttaksinfoFraUttaksplan(uttaksplan);\n    return tilgjengeligeStønadskontoer.map((konto): StønadskontoUttak => {\n        let antallDager = beregnDagerBrukt ? 0 : konto.dager;\n        const uttaksplanPerioder = alleUttakIUttaksplan.filter((p) => p.konto === konto.konto);\n        if (uttaksplanPerioder) {\n            uttaksplanPerioder.forEach((p: Periode) => {\n                if (p.type === Periodetype.Uttak || p.type === Periodetype.Overføring || isAvslåttPeriode(p)) {\n                    antallDager = beregnDagerBrukt\n                        ? antallDager + finnAntallDagerÅTrekke(p)\n                        : antallDager - finnAntallDagerÅTrekke(p);\n                }\n            });\n\n            antallDager = beregnDagerBrukt ? Math.floor(antallDager) : Math.ceil(antallDager);\n        }\n\n        return {\n            konto: konto.konto,\n            dager: antallDager,\n        };\n    });\n};\n\nexport const beregnBrukteUttaksdager = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    uttaksplan: Periode[]\n): StønadskontoUttak[] => {\n    return beregnGjenståendeUttaksdager(tilgjengeligeStønadskontoer, uttaksplan, true);\n};\n\nconst getUttakFraOppholdsperioder = (oppholdsperioder: Oppholdsperiode[]): Uttaksperiode[] => {\n    if (oppholdsperioder.length === 0) {\n        return [];\n    }\n    return oppholdsperioder.map(\n        (opphold: Oppholdsperiode): Uttaksperiode => ({\n            id: opphold.id,\n            tidsperiode: opphold.tidsperiode,\n            type: Periodetype.Uttak,\n            konto: getStønadskontoFromOppholdsårsak(opphold.årsak)!,\n            forelder: opphold.forelder,\n        })\n    );\n};\nconst getUttakFraOverføringsperioder = (overføringer: Overføringsperiode[]): Uttaksperiode[] => {\n    if (overføringer.length === 0) {\n        return [];\n    }\n    return overføringer.map(\n        (overføring): Uttaksperiode => ({\n            id: overføring.id,\n            tidsperiode: overføring.tidsperiode,\n            type: Periodetype.Uttak,\n            konto: overføring.konto,\n            forelder: overføring.forelder,\n        })\n    );\n};\n\nconst getUttakFraInfoperioder = (perioder: InfoPeriode[]): Uttaksperiode[] => {\n    if (perioder.length === 0) {\n        return [];\n    }\n    const oppholdAnnenPart: UttakAnnenPartInfoPeriode[] = [];\n    perioder\n        .filter((periode) => isAvslåttPeriode(periode) === false)\n        .forEach((periode) => {\n            if (periode.infotype === PeriodeInfoType.uttakAnnenPart) {\n                oppholdAnnenPart.push(periode);\n            }\n        });\n    return oppholdAnnenPart.map((periode): Uttaksperiode => {\n        const { type, årsak, ...rest } = periode;\n        return {\n            type: Periodetype.Uttak,\n            konto: getStønadskontoFromOppholdsårsak(periode.årsak),\n            ...rest,\n        };\n    });\n};\n\nconst getUttakFraAvslåttePerioder = (perioder: AvslåttPeriode[]): Uttaksperiode[] => {\n    if (perioder.length === 0) {\n        return [];\n    }\n\n    return perioder\n        .filter((p) => p.avslåttPeriodeType === Periodetype.Uttak)\n        .map(\n            (periode): Uttaksperiode => ({\n                type: Periodetype.Uttak,\n                konto: periode.kontoType!,\n                tidsperiode: periode.tidsperiode,\n                id: periode.id,\n                forelder: periode.forelder,\n            })\n        );\n};\n","import { beregnBrukteUttaksdager, getAllePerioderMedUttaksinfoFraUttaksplan } from 'uttaksplan/utils/uttaksPlanStatus';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { isUttaksperiode, Periode, Uttaksperiode } from 'uttaksplan/types/Periode';\nimport { Forelder } from 'app/types/Forelder';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\n\ninterface ForeldersBrukteDager {\n    førTermin: StønadskontoUttak[];\n    etterTermin: StønadskontoUttak[];\n    alle: StønadskontoUttak[];\n    dagerTotalt: number;\n    dagerEgneKvoter: number;\n    dagerAnnenForeldersKvote: number;\n    dagerFellesperiode: number;\n}\n\nexport interface BrukteDager {\n    mor: ForeldersBrukteDager;\n    farMedmor: ForeldersBrukteDager;\n    alle: StønadskontoUttak[];\n}\n\nconst isMorsPeriode = (periode: Uttaksperiode): boolean => {\n    return periode.forelder === Forelder.mor;\n};\nconst isFarsPeriode = (periode: Uttaksperiode): boolean => {\n    return periode.forelder === Forelder.farMedmor;\n};\nconst isFellesperiodeKvote = (uttak: StønadskontoUttak): boolean => uttak.konto === StønadskontoType.Fellesperiode;\n\nconst isMorsKvote = (uttak: StønadskontoUttak): boolean => {\n    switch (uttak.konto) {\n        case StønadskontoType.ForeldrepengerFørFødsel:\n        case StønadskontoType.Mødrekvote:\n            return true;\n        default:\n            return false;\n    }\n};\n\nconst isFarMedmorsKvote = (uttak: StønadskontoUttak): boolean => {\n    return uttak.konto === StønadskontoType.Fedrekvote;\n};\n\nconst summerBrukteUttaksdager = (uttak: StønadskontoUttak[]) => {\n    return uttak.reduce((dager, u) => dager + u.dager, 0);\n};\n\nconst getBrukteDagerForForelder = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    perioder: Uttaksperiode[],\n    familiehendelsesdato: Date,\n    forelder: Forelder\n): ForeldersBrukteDager => {\n    const perioderFørTermin = Periodene(perioder)\n        .getPerioderFørFamiliehendelsesdato(familiehendelsesdato)\n        .filter(isUttaksperiode);\n    const perioderEtterTermin = Periodene(perioder)\n        .getPerioderEtterFamiliehendelsesdato(familiehendelsesdato)\n        .filter(isUttaksperiode);\n    const førTermin = beregnBrukteUttaksdager(tilgjengeligeStønadskontoer, perioderFørTermin);\n    const etterTermin = beregnBrukteUttaksdager(tilgjengeligeStønadskontoer, perioderEtterTermin);\n    const alle = beregnBrukteUttaksdager(tilgjengeligeStønadskontoer, perioder);\n    const dagerTotalt = summerBrukteUttaksdager(alle);\n\n    const isMor = forelder === Forelder.mor;\n    const dagerEgneKvoter = summerBrukteUttaksdager(alle.filter(isMor ? isMorsKvote : isFarMedmorsKvote));\n    const dagerOverført = summerBrukteUttaksdager(alle.filter(isMor ? isFarMedmorsKvote : isMorsKvote));\n    const dagerFellesperiode = summerBrukteUttaksdager(alle.filter(isFellesperiodeKvote));\n\n    return {\n        førTermin,\n        etterTermin,\n        alle,\n        dagerTotalt,\n        dagerEgneKvoter,\n        dagerFellesperiode,\n        dagerAnnenForeldersKvote: dagerOverført,\n    };\n};\n\nexport const getBrukteDager = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    perioder: Periode[],\n    familiehendelsesdato: Date\n): BrukteDager => {\n    const perioderMedUttak = getAllePerioderMedUttaksinfoFraUttaksplan(perioder);\n    return {\n        mor: getBrukteDagerForForelder(\n            tilgjengeligeStønadskontoer,\n            perioderMedUttak.filter(isMorsPeriode),\n            familiehendelsesdato,\n            Forelder.mor\n        ),\n        farMedmor: getBrukteDagerForForelder(\n            tilgjengeligeStønadskontoer,\n            perioderMedUttak.filter(isFarsPeriode),\n            familiehendelsesdato,\n            Forelder.farMedmor\n        ),\n        alle: beregnBrukteUttaksdager(tilgjengeligeStønadskontoer, perioder),\n    };\n};\n","import { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport { beregnGjenståendeUttaksdager } from './uttaksPlanStatus';\n\nexport interface Uttaksstatus {\n    gjelderDagerBrukt: boolean;\n    uttak: StønadskontoUttak[];\n}\n\nexport const getUttaksstatus = ({\n    erDeltUttak,\n    erEndringssøknad,\n    harKomplettUttaksplan,\n    erFarEllerMedmor,\n    tilgjengeligeStønadskontoer,\n    uttaksplan,\n}: UttaksstatusFuncParams): Uttaksstatus => {\n    const gjelderDagerBrukt =\n        (erEndringssøknad && harKomplettUttaksplan !== true) ||\n        (erDeltUttak && erFarEllerMedmor && harKomplettUttaksplan !== true);\n\n    const uttak: StønadskontoUttak[] = beregnGjenståendeUttaksdager(\n        tilgjengeligeStønadskontoer,\n        uttaksplan,\n        gjelderDagerBrukt\n    );\n    return {\n        gjelderDagerBrukt,\n        uttak: erFarEllerMedmor\n            ? uttak.filter((kontouttak) => kontouttak.konto !== StønadskontoType.ForeldrepengerFørFødsel)\n            : uttak,\n    };\n};\n\nexport interface UttaksstatusFuncParams {\n    erDeltUttak: boolean;\n    erEndringssøknad: boolean;\n    harKomplettUttaksplan: boolean;\n    erFarEllerMedmor: boolean;\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[];\n    uttaksplan: Periode[];\n}\n\nexport const getUttaksstatusFunc = ({\n    erDeltUttak,\n    erEndringssøknad,\n    harKomplettUttaksplan,\n    erFarEllerMedmor,\n    tilgjengeligeStønadskontoer,\n    uttaksplan,\n}: UttaksstatusFuncParams): (() => Uttaksstatus) => {\n    return () =>\n        getUttaksstatus({\n            erDeltUttak,\n            erEndringssøknad,\n            harKomplettUttaksplan,\n            erFarEllerMedmor,\n            tilgjengeligeStønadskontoer,\n            uttaksplan,\n        });\n};\n","import React, { FunctionComponent } from 'react';\nimport { injectIntl, IntlShape } from 'react-intl';\nimport { bemUtils } from '@navikt/fp-common';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { getVarighetString } from 'app/utils/dateUtils';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport { getStønadskontoNavn } from 'uttaksplan/utils/stønadskontoerUtils';\nimport StønadskontoIkon from 'uttaksplan/components/stønadskonto-ikon/StønadskontoIkon';\nimport './kontostatus.less';\nimport { Situasjon } from 'app/types/Situasjon';\n\nexport interface Props {\n    uttak: StønadskontoUttak;\n    navnPåForeldre: NavnPåForeldre;\n    erEndringssøknad: boolean;\n    intl: IntlShape;\n    erFarEllerMedmor: boolean;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n}\n\nconst bem = bemUtils('kontostatus');\n\nconst Kontostatus: FunctionComponent<Props> = ({\n    uttak,\n    navnPåForeldre,\n    erEndringssøknad,\n    intl,\n    erFarEllerMedmor,\n    situasjon,\n    erAleneOmOmsorg,\n}) => {\n    if (erEndringssøknad && uttak.konto === StønadskontoType.ForeldrepengerFørFødsel) {\n        uttak.dager = 0;\n    }\n\n    const varighetString = getVarighetString(uttak.dager, intl);\n    const kontoErOvertrukket = uttak.dager < 0;\n\n    return (\n        <Normaltekst className={bem.block} tag=\"div\">\n            <div className={bem.element('ikon')} aria-hidden={true} role=\"presentation\">\n                <StønadskontoIkon\n                    konto={uttak.konto}\n                    navnPåForeldre={navnPåForeldre}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    situasjon={situasjon}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                />\n            </div>\n            <div className={bem.element('content')}>\n                <div className={kontoErOvertrukket ? bem.element('kontoOvertrukket') : bem.element('konto')}>\n                    {getStønadskontoNavn(intl, uttak.konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg)}\n                </div>\n                <strong\n                    className={kontoErOvertrukket ? bem.element('dagerOvertrukket') : bem.element('dager')}\n                    data-name={uttak.konto}\n                >\n                    {kontoErOvertrukket ? `- ${varighetString}` : varighetString}\n                </strong>\n            </div>\n        </Normaltekst>\n    );\n};\n\nexport default injectIntl(Kontostatus);\n","import * as React from 'react';\nimport { bemUtils } from '@navikt/fp-common';\nimport './tilesList.less';\n\nconst bem = bemUtils('tilesList');\n\nconst TilesList: React.FunctionComponent<{ columns?: 1 | 2 | 3 | 'flex'; children?: React.ReactNode }> = ({\n    columns = 3,\n    children,\n}) => (\n    <ol className={bem.classNames(bem.block, bem.modifier(`columns-${columns}`))}>\n        {React.Children.map(children, (child) => (\n            <li className={bem.element('tile')}>{child}</li>\n        ))}\n    </ol>\n);\n\nexport default TilesList;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { bemUtils, guid, intlUtils } from '@navikt/fp-common';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport Personkort from 'app/components/personkort/Personkort';\nimport ForelderIkon from 'app/components/foreldrepar/ForelderIkon';\nimport { getVarighetString } from 'app/utils/dateUtils';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { getNavnPåForeldre } from 'app/utils/personUtils';\nimport { getSituasjonForelderSvg } from 'app/utils/foreldreparSituasjonUtils';\nimport { ForeldreparSituasjon } from 'app/types/ForeldreparSituasjonTypes';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport { BrukteDager, getBrukteDager } from 'uttaksplan/utils/brukteDagerUtils';\nimport { getUttaksstatus, Uttaksstatus } from 'uttaksplan/utils/uttaksstatus';\nimport Kontostatus from './konto-status/Kontostatus';\nimport TilesList from './tilesList/TilesList';\nimport './oversiktKvoter.less';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport { capitalizeFirstLetter } from 'app/utils/stringUtils';\n\nconst bem = bemUtils('oversiktKvoter');\n\nconst filtrerBortAnnenPartsKonto = (\n    uttakskontoer: StønadskontoUttak[],\n    erFarEllerMedmor: boolean\n): StønadskontoUttak[] => {\n    return erFarEllerMedmor\n        ? uttakskontoer.filter((uttak) => uttak.konto !== StønadskontoType.Mødrekvote)\n        : uttakskontoer.filter((uttak) => uttak.konto !== StønadskontoType.Fedrekvote);\n};\ninterface PropsPerForelder {\n    brukteDagerPerForelder: BrukteDager;\n    erDeltUttakINorge: boolean;\n    foreldreparSituasjon: ForeldreparSituasjon;\n    navnPåForeldre: NavnPåForeldre;\n    søkerErFarEllerMedmor: boolean;\n}\n\nconst OversiktPerForelder: FunctionComponent<PropsPerForelder> = ({\n    brukteDagerPerForelder,\n    erDeltUttakINorge,\n    foreldreparSituasjon,\n    navnPåForeldre,\n    søkerErFarEllerMedmor,\n}) => {\n    const intl = useIntl();\n    const søkerErMor = !søkerErFarEllerMedmor;\n    const svgInfo = getSituasjonForelderSvg(foreldreparSituasjon);\n\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('perForelder')}>\n                <Undertittel tag=\"h2\" className=\"blokk-xs\">\n                    {intlUtils(intl, 'uttaksplan.oversiktKvoter.tittel.foreldre')}\n                </Undertittel>\n                <TilesList columns={'flex'}>\n                    {(erDeltUttakINorge || søkerErMor) && (\n                        <Personkort ikon={<ForelderIkon forelder={svgInfo.mor} />} tittel={navnPåForeldre.mor}>\n                            <strong>{getVarighetString(brukteDagerPerForelder.mor.dagerTotalt, intl)}</strong>\n                        </Personkort>\n                    )}\n                    {(erDeltUttakINorge || søkerErFarEllerMedmor) && (\n                        <Personkort\n                            ikon={<ForelderIkon forelder={svgInfo.farMedmor} />}\n                            tittel={capitalizeFirstLetter(navnPåForeldre.farMedmor)}\n                        >\n                            <strong>{getVarighetString(brukteDagerPerForelder.farMedmor.dagerTotalt, intl)}</strong>\n                        </Personkort>\n                    )}\n                </TilesList>\n            </div>\n        </div>\n    );\n};\n\ninterface PropsPerKvote {\n    erDeltUttakINorge: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    erEndringssøknad: boolean;\n    uttaksstatus: Uttaksstatus;\n    erFarEllerMedmor: boolean;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n}\n\nconst OversiktPerKvote: FunctionComponent<PropsPerKvote> = ({\n    erDeltUttakINorge,\n    navnPåForeldre,\n    erEndringssøknad,\n    uttaksstatus,\n    erFarEllerMedmor,\n    situasjon,\n    erAleneOmOmsorg,\n}) => {\n    const uttakÅVise = erDeltUttakINorge\n        ? uttaksstatus.uttak\n        : filtrerBortAnnenPartsKonto(uttaksstatus.uttak, erFarEllerMedmor);\n    return (\n        <div className={bem.element('perKvote')}>\n            <Undertittel tag=\"h2\" className=\"blokk-xs\">\n                <FormattedMessage\n                    id={\n                        uttaksstatus.gjelderDagerBrukt\n                            ? 'uttaksplan.oversiktKvoter.tittel.kontoer.brukteDager'\n                            : 'uttaksplan.oversiktKvoter.tittel.kontoer.ikkeBrukteDager'\n                    }\n                    values={{ antall: erDeltUttakINorge ? 2 : 1 }}\n                />\n            </Undertittel>\n            <TilesList columns={2}>\n                {uttakÅVise.map((uttak) => (\n                    <Kontostatus\n                        key={guid()}\n                        uttak={uttak}\n                        navnPåForeldre={navnPåForeldre}\n                        erEndringssøknad={erEndringssøknad}\n                        erFarEllerMedmor={erFarEllerMedmor}\n                        situasjon={situasjon}\n                        erAleneOmOmsorg={erAleneOmOmsorg}\n                    />\n                ))}\n            </TilesList>\n        </div>\n    );\n};\n\ninterface Props {\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[];\n    uttaksplan: Periode[];\n    erDeltUttak: boolean;\n    foreldreparSituasjon: ForeldreparSituasjon;\n    familiehendelsesdato: Date;\n    annenForelderHarRettINorge: boolean;\n    toTetteReglerGjelder: boolean;\n    intl: IntlShape;\n}\n\nconst OversiktKvoter: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer,\n    uttaksplan,\n    erDeltUttak,\n    foreldreparSituasjon,\n    familiehendelsesdato,\n    annenForelderHarRettINorge,\n    intl,\n}) => {\n    const søker = useSøkerinfo();\n    const søknad = useSøknad();\n    const søkerErFarEllerMedmor = isFarEllerMedmor(søknad.søkersituasjon.rolle);\n    const navnPåForeldre = getNavnPåForeldre(søker.person, søknad.annenForelder, søkerErFarEllerMedmor, intl);\n    const uttaksstatus = getUttaksstatus({\n        erDeltUttak: erDeltUttak,\n        erEndringssøknad: søknad.erEndringssøknad,\n        harKomplettUttaksplan: true,\n        erFarEllerMedmor: søkerErFarEllerMedmor,\n        tilgjengeligeStønadskontoer: tilgjengeligeStønadskontoer,\n        uttaksplan,\n    });\n    const brukteDagerPerForelder = getBrukteDager(tilgjengeligeStønadskontoer, uttaksplan, familiehendelsesdato);\n    const erDeltUttakINorge = erDeltUttak && annenForelderHarRettINorge;\n    return (\n        <div className={bem.block}>\n            <OversiktPerForelder\n                brukteDagerPerForelder={brukteDagerPerForelder}\n                erDeltUttakINorge={erDeltUttakINorge}\n                foreldreparSituasjon={foreldreparSituasjon}\n                navnPåForeldre={navnPåForeldre}\n                søkerErFarEllerMedmor={søkerErFarEllerMedmor}\n            />\n            <OversiktPerKvote\n                erDeltUttakINorge={erDeltUttakINorge}\n                navnPåForeldre={navnPåForeldre}\n                erEndringssøknad={søknad.erEndringssøknad}\n                uttaksstatus={uttaksstatus}\n                erFarEllerMedmor={søkerErFarEllerMedmor}\n                situasjon={søknad.søkersituasjon.situasjon}\n                erAleneOmOmsorg={søknad.søker.erAleneOmOmsorg}\n            />\n        </div>\n    );\n};\n\nexport default OversiktKvoter;\n","import { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { isHull, isInfoPeriode, isPeriodeUtenUttak } from 'uttaksplan/types/Periode';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const inneholderUttaksplanPerioderTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    return {\n        passerer:\n            grunnlag.perioder\n                .filter((p) => !isInfoPeriode(p) && !isPeriodeUtenUttak(p) && !isHull(p))\n                .filter((periode) => isValidTidsperiode(periode.tidsperiode)).length > 0,\n    };\n};\n","import { getTidsperiode, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { Forelder } from 'app/types/Forelder';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { isPeriodeUtenUttak, Periode, Periodetype, Utsettelsesperiode, Uttaksperiode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { uttaksdatoer } from 'uttaksplan/utils/uttaksdatoerUtils';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { OverføringÅrsakType } from 'uttaksplan/types/OverføringÅrsakType';\nimport { erPeriodeFørDato } from 'uttaksplan/utils/periodeUtils';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\n\nconst ANTALL_UTTAKSDAGER_SEKS_UKER = 30;\n\nexport interface InformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor {\n    antallUttaksdagerTapt: number;\n    førsteRegistrerteUttaksdag: Date;\n    sisteUttaksdagInnenforSeksUker: Date;\n}\n\nexport const getInformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor = (\n    uttaksplan: Periode[],\n    familiehendelsesdato: Date,\n    søkerErFarEllerMedmor: boolean,\n    bareFarMedmorHarRett: boolean,\n    morErUfør: boolean,\n    søkerErFarEllerMedmorOgAnnenForelderKanIkkeOppgis: boolean,\n    søkerErFarEllerMedmorOgErAleneOmOmsorgen: boolean\n): InformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor | undefined => {\n    if (søkerErFarEllerMedmor === false || bareFarMedmorHarRett === false || morErUfør === true) {\n        return undefined;\n    }\n\n    if (søkerErFarEllerMedmorOgAnnenForelderKanIkkeOppgis || søkerErFarEllerMedmorOgErAleneOmOmsorgen) {\n        return undefined;\n    }\n\n    const førstePeriode = Periodene(uttaksplan).getFørstePerioderEtterFamiliehendelsesdato(familiehendelsesdato);\n    if (førstePeriode === undefined) {\n        return undefined;\n    }\n\n    const førsteUttaksdag = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n    const førsteRegistrerteUttaksdag = førstePeriode.tidsperiode.fom;\n    const sisteUttaksdagInnenforSeksUker = getTidsperiode(førsteUttaksdag, 30).tom;\n    const antallUttaksdager =\n        Tidsperioden({\n            fom: førsteUttaksdag,\n            tom: førsteRegistrerteUttaksdag,\n        }).getAntallUttaksdager() - 1;\n\n    if (antallUttaksdager === undefined || antallUttaksdager <= ANTALL_UTTAKSDAGER_SEKS_UKER) {\n        return undefined;\n    }\n\n    return {\n        antallUttaksdagerTapt: antallUttaksdager - ANTALL_UTTAKSDAGER_SEKS_UKER,\n        førsteRegistrerteUttaksdag,\n        sisteUttaksdagInnenforSeksUker,\n    };\n};\n\nexport const getUgyldigUttakMor = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    situasjon: Situasjon,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n    flerbarnsFødsel?: boolean,\n    value?: string\n): Periode[] => {\n    if (situasjon == 'adopsjon') {\n        return [];\n    }\n\n    const førsteUttaksdag = uttaksdatoer(\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        termindato\n    ).førsteUttaksdagPåEllerEtterFødsel;\n    const førsteUttaksdagEtterSeksUker = Uttaksdagen(førsteUttaksdag).leggTil(30);\n    const førsteUttaksdagEtterÅtteUker = Uttaksdagen(førsteUttaksdag).leggTil(40);\n\n    let ugyldigUttakRegelFørsteDato: Date;\n    let ugyldigUttakRegelSisteDato: Date;\n\n    if (value === 'førsteSeksUkerForMor') {\n        ugyldigUttakRegelFørsteDato = førsteUttaksdag;\n        ugyldigUttakRegelSisteDato = førsteUttaksdagEtterSeksUker;\n    } else if (value === 'mellomSyvOgÅtteUkerForMor') {\n        ugyldigUttakRegelFørsteDato = førsteUttaksdagEtterSeksUker;\n        ugyldigUttakRegelSisteDato = førsteUttaksdagEtterÅtteUker;\n    }\n\n    const ugyldigPeriode = Periodene(perioder)\n        .getPerioderEtterFamiliehendelsesdato(ugyldigUttakRegelFørsteDato!)\n        .filter((p) => erPeriodeFørDato(p, ugyldigUttakRegelSisteDato));\n\n    let ugyldigeUtsettelser: Utsettelsesperiode[] = [];\n\n    if (value === 'mellomSyvOgÅtteUkerForMor') {\n        ugyldigeUtsettelser = Periodene(ugyldigPeriode)\n            .getUtsettelser()\n            .filter(\n                (p) =>\n                    p.forelder === Forelder.mor &&\n                    (p.årsak === UtsettelseÅrsakType.Ferie || p.årsak === UtsettelseÅrsakType.Arbeid)\n            );\n    } else if (value === 'førsteSeksUkerForMor') {\n        ugyldigeUtsettelser = Periodene(ugyldigPeriode)\n            .getUtsettelser()\n            .filter(\n                (p) =>\n                    p.forelder === Forelder.mor &&\n                    p.årsak !== UtsettelseÅrsakType.InstitusjonSøker &&\n                    p.årsak !== UtsettelseÅrsakType.InstitusjonBarnet &&\n                    p.årsak !== UtsettelseÅrsakType.Sykdom\n            );\n    }\n    const gradertePerioder = Periodene(ugyldigPeriode)\n        .getUttak()\n        .filter((p) => p.forelder === Forelder.mor && p.gradert === true);\n\n    const flernbarnsPerioder = Periodene(ugyldigPeriode)\n        .getUttak()\n        .filter((p) => p.forelder === Forelder.mor && p.ønskerFlerbarnsdager === true);\n\n    const fellesPerioder = Periodene(ugyldigPeriode)\n        .getUttak()\n        .filter((p) => p.forelder === Forelder.mor && p.konto === StønadskontoType.Fellesperiode);\n\n    let samtidigUttaksperioder: Uttaksperiode[] = [];\n\n    if (!flerbarnsFødsel && flerbarnsFødsel !== undefined && !andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n        samtidigUttaksperioder = Periodene(ugyldigPeriode)\n            .getUttak()\n            .filter((p) => p.forelder === Forelder.mor && p.ønskerSamtidigUttak);\n    }\n\n    return [\n        ...flernbarnsPerioder,\n        ...gradertePerioder,\n        ...ugyldigeUtsettelser,\n        ...fellesPerioder,\n        ...samtidigUttaksperioder,\n    ];\n};\n\nexport const unntakFarFørsteSeksUker = (periode: Uttaksperiode, harMidlertidigOmsorg: boolean) => ({\n    erMorForSykDeFørsteSeksUker: (): boolean => {\n        if (harMidlertidigOmsorg) {\n            return true;\n        }\n\n        if (periode.konto === StønadskontoType.Fellesperiode || periode.konto === StønadskontoType.Foreldrepenger) {\n            return (\n                periode.morsAktivitetIPerioden === MorsAktivitet.Innlagt ||\n                periode.morsAktivitetIPerioden === MorsAktivitet.TrengerHjelp ||\n                periode.erMorForSyk === true\n            );\n        }\n\n        if (periode.konto === StønadskontoType.Fedrekvote || periode.konto === StønadskontoType.AktivitetsfriKvote) {\n            return periode.erMorForSyk === true;\n        }\n\n        return false;\n    },\n    erFlerbarnsukerOgUttakAvFlerbarnsdagerEllerFedrekvote: (antallBarn: number): boolean => {\n        return antallBarn > 1 && periode.ønskerFlerbarnsdager === true;\n    },\n});\n\nconst erFarsUttakFørsteSeksUkerGyldig = (\n    periode: Uttaksperiode,\n    antallBarn: number,\n    harMidlertidigOmsorg: boolean\n): boolean => {\n    const unntak = unntakFarFørsteSeksUker(periode, harMidlertidigOmsorg);\n    return (\n        unntak.erMorForSykDeFørsteSeksUker() || unntak.erFlerbarnsukerOgUttakAvFlerbarnsdagerEllerFedrekvote(antallBarn)\n    );\n};\n\nexport const getUgyldigUttakFørsteSeksUkerForFarMedmor = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    antallBarn: number,\n    situasjon: Situasjon,\n    annenForelder: AnnenForelder,\n    erAleneOmOmsorg: boolean,\n    harMidlertidigOmsorg: boolean,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): Periode[] => {\n    if (situasjon === 'adopsjon' || annenForelder.kanIkkeOppgis || erAleneOmOmsorg) {\n        return [];\n    }\n\n    const førsteUttaksdag = uttaksdatoer(\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        termindato\n    ).førsteUttaksdagPåEllerEtterFødsel;\n    const førsteUttaksdagEtterSeksUker = Uttaksdagen(førsteUttaksdag).leggTil(30);\n\n    const farsPerioderInnenforSeksFørsteUker = Periodene(perioder)\n        .getPerioderEtterFamiliehendelsesdato(familiehendelsesdato)\n        .filter((p) => erPeriodeFørDato(p, førsteUttaksdagEtterSeksUker))\n        .filter((p) => p.type !== Periodetype.Hull && !isPeriodeUtenUttak(p) && p.forelder === Forelder.farMedmor);\n\n    const ugyldigeUttak = Periodene(farsPerioderInnenforSeksFørsteUker)\n        .getUttak()\n        .filter((p) => erFarsUttakFørsteSeksUkerGyldig(p, antallBarn, harMidlertidigOmsorg) === false);\n\n    const ugyldigeOverføringer = Periodene(farsPerioderInnenforSeksFørsteUker)\n        .getOverføringer()\n        .filter(\n            (p) =>\n                p.årsak !== OverføringÅrsakType.institusjonsoppholdAnnenForelder &&\n                p.årsak !== OverføringÅrsakType.sykdomAnnenForelder\n        );\n\n    const ugyldigeUtsettelser = Periodene(farsPerioderInnenforSeksFørsteUker)\n        .getUtsettelser()\n        .filter((utsettelse) => utsettelse.årsak !== UtsettelseÅrsakType.InstitusjonBarnet);\n\n    return [...ugyldigeUttak, ...ugyldigeOverføringer, ...ugyldigeUtsettelser];\n};\n","import { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { getUgyldigUttakMor } from '../utils/uttakValideringUtils';\n\nexport const harMorSøktUgyldigUttakFørsteSeksUkerTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const søkerErMor = !grunnlag.søkerErFarEllerMedmor;\n    if (søkerErMor) {\n        const ugyldigePerioder = getUgyldigUttakMor(\n            grunnlag.perioder,\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkersituasjon.situasjon,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.termindato,\n            grunnlag.erFlerbarnssøknad,\n            'førsteSeksUkerForMor'\n        );\n        const passerer = ugyldigePerioder.length === 0;\n        return {\n            passerer,\n            info: ugyldigePerioder.map((periode) => ({\n                intlKey: andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato)\n                    ? 'uttaksplan.validering.feil.morHarSøktUgyldigUttakFørsteSeksUker.etterWLB'\n                    : 'uttaksplan.validering.feil.morHarSøktUgyldigUttakFørsteSeksUker.førWLB',\n                periodeId: periode.id,\n            })),\n        };\n    }\n\n    return { passerer: true };\n};\n","import { IntlShape } from 'react-intl';\nimport { getUttaksstatus } from '../../utils/uttaksstatus';\nimport { getStønadskontoNavn } from '../../utils/stønadskontoerUtils';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat, RegelTestresultatInfo } from '../utils/types/regelTypes';\nimport { getVarighetString } from '../../../app/utils/dateUtils';\n\nexport const stønadskontoInneholderForMyeUttakKunSøkerTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const {\n        navnPåForeldre,\n        perioder,\n        stønadskontoer,\n        erDeltUttak,\n        erEndringssøknad,\n        harKomplettUttaksplan,\n        søkerErFarEllerMedmor,\n        søkerErAleneOmOmsorg,\n    } = grunnlag;\n    const stønadskontoerMedForMyeUttak = getUttaksstatus({\n        erDeltUttak,\n        erEndringssøknad,\n        harKomplettUttaksplan,\n        erFarEllerMedmor: søkerErFarEllerMedmor,\n        tilgjengeligeStønadskontoer: stønadskontoer,\n        uttaksplan: perioder,\n    }).uttak.filter((u) => u.dager < 0);\n    return {\n        passerer: stønadskontoerMedForMyeUttak.length === 0,\n        info: stønadskontoerMedForMyeUttak.map(\n            (uttak): RegelTestresultatInfo => ({\n                intlKey: 'uttaksplan.validering.feil.forMyeUttak',\n                values: {\n                    dager: (intl: IntlShape) => getVarighetString(Math.abs(uttak.dager), intl),\n                    konto: (intl: IntlShape) =>\n                        getStønadskontoNavn(\n                            intl,\n                            uttak.konto,\n                            navnPåForeldre,\n                            søkerErFarEllerMedmor,\n                            søkerErAleneOmOmsorg\n                        ),\n                },\n            })\n        ),\n    };\n};\n","import { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport { erPeriodeInnvilget } from 'uttaksplan/utils/periodeUtils';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { getUgyldigUttakFørsteSeksUkerForFarMedmor } from '../utils/uttakValideringUtils';\n\nexport const harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    const wlbReglerGjelder = andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato);\n    if (grunnlag.søkerErFarEllerMedmor && !wlbReglerGjelder) {\n        const ugyldigePerioder = getUgyldigUttakFørsteSeksUkerForFarMedmor(\n            grunnlag.perioder.filter((p) => !erPeriodeInnvilget(p)),\n            grunnlag.familiehendelsesdato,\n            grunnlag.antallBarn,\n            grunnlag.søkersituasjon.situasjon,\n            grunnlag.annenForelder,\n            grunnlag.søkerErAleneOmOmsorg,\n            grunnlag.søkerHarMidlertidigOmsorg,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.termindato\n        );\n        const passerer = ugyldigePerioder.length === 0;\n        return {\n            passerer,\n            info: ugyldigePerioder.map((periode) => ({\n                periodeId: periode.id,\n            })),\n        };\n    }\n\n    return { passerer: true };\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { uttaksplanErBareOpphold } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const erUttaksplanBareOppholdTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    return { passerer: uttaksplanErBareOpphold(grunnlag.perioder) === false };\n};\n","import { RegelTestresultat, RegelTest } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { uttaksplanSlutterMedOpphold } from 'app/steps/uttaksplan-info/utils/Periodene';\n\nexport const slutterUttaksplanMedOppholdTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    return { passerer: uttaksplanSlutterMedOpphold(grunnlag.perioder) === false };\n};\n","import { uttaksplanStarterMedOpphold } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const starterUttaksplanMedOppholdTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    if (grunnlag.erEndringssøknad) {\n        return { passerer: true };\n    }\n\n    return { passerer: uttaksplanStarterMedOpphold(grunnlag.perioder) === false };\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { isUttaksperiode, Periode } from 'uttaksplan/types/Periode';\nimport { getFloatFromString } from 'app/utils/numberUtils';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nconst uttaksplanGraderingStørreEnnSamtidigUttak = (uttaksplan: Periode[]) => {\n    const result = uttaksplan\n        .slice()\n        .filter(\n            (periode) => isUttaksperiode(periode) && periode.ønskerSamtidigUttak === true && periode.gradert === true\n        )\n        .filter(\n            (periode) =>\n                isUttaksperiode(periode) &&\n                getFloatFromString(periode.stillingsprosent)! + getFloatFromString(periode.samtidigUttakProsent)! >\n                    100.0\n        );\n\n    return result.length > 0;\n};\n\nexport const erUttaksplanGraderingStørreEnnSamtidigUttakTest: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    return { passerer: uttaksplanGraderingStørreEnnSamtidigUttak(grunnlag.perioder) === false };\n};\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const tilleggsopplysningerMaxLength = 1000;\n\nexport const maxLengthIsGreaterThanOrEqualToStringLength = (maxLength: number, value: string) => {\n    return value.length <= maxLength;\n};\n\nexport const tilleggsopplysningerErGyldig = (begrunnelse?: string) =>\n    maxLengthIsGreaterThanOrEqualToStringLength(tilleggsopplysningerMaxLength, begrunnelse || '');\n\nexport function erTilleggsopplysningerGyldigTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const { begrunnelseForSenEndring } = grunnlag.tilleggsopplysninger;\n    const begrunnelseTekst = begrunnelseForSenEndring ? begrunnelseForSenEndring.tekst : '';\n    return tilleggsopplysningerErGyldig(begrunnelseTekst)\n        ? { passerer: true }\n        : {\n              passerer: false,\n              info: {\n                  intlKey: 'uttaksplan.veileder.fritekst.kanIkkeVæreLengreEnn',\n                  values: { maxLength: tilleggsopplysningerMaxLength },\n              },\n          };\n}\n","import { getIllegalChars, validateTextHasLegalChars } from 'app/utils/validationUtil';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport function harTilleggsopplysningerGyldigeCharsTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const { begrunnelseForSenEndring } = grunnlag.tilleggsopplysninger;\n    const tekst = begrunnelseForSenEndring ? begrunnelseForSenEndring.tekst : '';\n    return validateTextHasLegalChars(tekst)\n        ? { passerer: true }\n        : {\n              passerer: false,\n              info: {\n                  intlKey: 'valideringsfeil.begrunnelseForSenEnding.kanIkkeInneholdeTegn',\n                  values: {\n                      ugyldigeTegn: getIllegalChars(tekst),\n                  },\n              },\n          };\n}\n","import { uttaksplanHarForMangeFlerbarnsdager } from 'app/steps/uttaksplan-info/utils/uttaksplanHarForMangeFlerbarnsuker';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const harUttaksplanForMangeFlerbarnsdagerTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const { perioder, dekningsgrad, antallBarn } = grunnlag;\n    return {\n        passerer:\n            dekningsgrad !== undefined &&\n            uttaksplanHarForMangeFlerbarnsdager(perioder, dekningsgrad, antallBarn) === false,\n    };\n};\n","import { RegelTest, RegelTestresultat, RegelTestresultatInfo } from '../utils/types/regelTypes';\nimport { isInfoPeriode } from 'uttaksplan/types/Periode';\nimport { erUttaksdag } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const inneholderUttaksplanDatoSomIkkeErUttaksdag: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const ugyldigePerioder = grunnlag.perioder\n        .filter((p) => !isInfoPeriode(p))\n        .filter(({ tidsperiode: { fom, tom } }) => erUttaksdag(fom) === false || erUttaksdag(tom) === false);\n\n    return {\n        passerer: ugyldigePerioder.length === 0,\n        info: ugyldigePerioder.map((periode): RegelTestresultatInfo => {\n            return {\n                intlKey: `uttaksplan.validering.feil.${\n                    erUttaksdag(periode.tidsperiode.fom)\n                        ? 'periodeSlutterPåDatoSomIkkeErUttaksdag'\n                        : 'periodeStarterPåDatoSomIkkeErUttaksdag'\n                }`,\n                periodeId: periode.id,\n            };\n        }),\n    };\n};\n","import { sorterPerioder } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { MissingAttachment } from 'app/types/MissingAttachment';\nimport { findMissingAttachmentsForPerioder } from 'app/utils/manglendeVedleggUtils';\nimport dayjs from 'dayjs';\nimport { isInfoPeriode } from 'uttaksplan/types/Periode';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const harPerioderManglendeVedleggTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const manglendeVedlegg: MissingAttachment[] = findMissingAttachmentsForPerioder(grunnlag);\n\n    const førsteUttaksEllerUttsettelsesPeriode = grunnlag.perioder\n        .filter((p) => p.tidsperiode.fom !== undefined && !isInfoPeriode(p))\n        .sort(sorterPerioder)\n        .shift();\n    const erLikEllerMindreEnnFireUkerTilUttaketStarter =\n        førsteUttaksEllerUttsettelsesPeriode !== undefined &&\n        dayjs(førsteUttaksEllerUttsettelsesPeriode.tidsperiode.fom).isSameOrBefore(dayjs().add(4, 'weeks'), 'day');\n    const regelTekst = erLikEllerMindreEnnFireUkerTilUttaketStarter\n        ? 'uttaksplan.validering.info.manglendeVedlegg'\n        : 'uttaksplan.validering.advarsel.forTidligUtenDokumentasjon';\n\n    const passerer = manglendeVedlegg.length === 0;\n    const x: RegelTestresultat = {\n        passerer,\n        info: passerer\n            ? undefined\n            : manglendeVedlegg\n                  .filter((vedlegg) => !!vedlegg.periodeId)\n                  .map((vedlegg) => ({\n                      periodeId: vedlegg.periodeId,\n                      intlKey: regelTekst,\n                  })),\n    };\n    return x;\n};\n","import { Periodetype } from 'uttaksplan/types/Periode';\nimport { erPeriodeInnvilget, erSenUtsettelsePgaFerieEllerArbeid } from 'uttaksplan/utils/periodeUtils';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\n\nexport function inneholderSenUtsettelsePgaFerieTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const seneUtsettelsePgaFerie = grunnlag.perioder\n        .filter((p) => !erPeriodeInnvilget(p, grunnlag.eksisterendeSak))\n        .filter(erSenUtsettelsePgaFerieEllerArbeid)\n        .filter((p) => p.type === Periodetype.Utsettelse && p.årsak === UtsettelseÅrsakType.Ferie);\n\n    const passerer = seneUtsettelsePgaFerie.length === 0;\n    return {\n        passerer,\n        info: seneUtsettelsePgaFerie.map((periode) => ({\n            intlKey: 'uttaksplan.validering.advarsel.planenAdvarerOmUtsettelser.ferie',\n            periodeId: periode.id,\n        })),\n    };\n}\n","import { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { isUttaksperiode, Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { getInformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor } from '../utils/uttakValideringUtils';\n\nexport function inneholderTapteDagerTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const { perioder, søkerErFarEllerMedmor } = grunnlag;\n    const infoOmTaptUttakVedUttakEtterSeksUkerFarMedmor = getInformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor(\n        perioder,\n        grunnlag.familiehendelsesdato,\n        søkerErFarEllerMedmor,\n        grunnlag.morHarRett === false,\n        grunnlag.morErUfør,\n        !!(søkerErFarEllerMedmor && grunnlag.annenForelder.kanIkkeOppgis),\n        !!(søkerErFarEllerMedmor && grunnlag.søkerErAleneOmOmsorg)\n    );\n\n    const planInneholderTapteDager =\n        Periodene(perioder).getHull().length > 0 || infoOmTaptUttakVedUttakEtterSeksUkerFarMedmor !== undefined;\n\n    const planInneholderAnnetEnnAktivitetsfriKvote = perioder\n        .filter((p) => p.type !== Periodetype.Hull)\n        .some((p) => (isUttaksperiode(p) && p.konto !== StønadskontoType.AktivitetsfriKvote) || !isUttaksperiode(p));\n\n    const passerer = (planInneholderTapteDager && planInneholderAnnetEnnAktivitetsfriKvote) === false;\n\n    return {\n        passerer,\n        info: {\n            intlKey: 'uttaksplan.validering.info.planenInneholderHull',\n        },\n    };\n}\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { isOverskrivbarPeriode, isUtsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { formaterDato } from 'app/utils/dateUtils';\n\nexport function inneholderBareUtsettelserTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const bareUtsettelser =\n        !grunnlag.perioder.filter((p) => !isOverskrivbarPeriode(p)).some((p) => !isUtsettelsesperiode(p)) &&\n        grunnlag.perioder.length > 0;\n    const passerer = bareUtsettelser === false;\n    const intlKey = grunnlag.erEndringssøknad\n        ? 'uttaksplan.veileder.planenInneholderKunUtsettelser.endringssøknad'\n        : 'uttaksplan.veileder.planenInneholderKunUtsettelser';\n\n    return {\n        passerer,\n        info: {\n            intlKey,\n            values: {\n                sisteDag: formaterDato(\n                    Uttaksdagen(Periodene(grunnlag.perioder).getFørsteUttaksdagEtterSistePeriode()!).forrige(),\n                    'D. MMMM YYYY'\n                ),\n            },\n        },\n    };\n}\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { erPeriodeInnvilget, erSenUtsettelsePgaFerieEllerArbeid } from 'uttaksplan/utils/periodeUtils';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\n\nexport function inneholderSenUtsettelsePgaArbeidTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const seneUtsettelserPgaArbeid = grunnlag.perioder\n        .filter((p) => !erPeriodeInnvilget(p, grunnlag.eksisterendeSak))\n        .filter(erSenUtsettelsePgaFerieEllerArbeid)\n        .filter((p) => p.type === Periodetype.Utsettelse && p.årsak === UtsettelseÅrsakType.Arbeid);\n\n    const passerer = seneUtsettelserPgaArbeid.length === 0;\n    return {\n        passerer,\n        info: seneUtsettelserPgaArbeid.map((periode) => ({\n            intlKey: 'uttaksplan.validering.advarsel.planenAdvarerOmUtsettelser.arbeid',\n            periodeId: periode.id,\n        })),\n    };\n}\n","import { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { IntlShape } from 'react-intl';\nimport { isAvslåttPeriode, isInfoPeriode, isUttaksperiode, Periode } from 'uttaksplan/types/Periode';\nimport { getPeriodeTittel } from 'uttaksplan/utils/periodeUtils';\nimport { getNavnGenitivEierform } from 'uttaksplan/utils/stønadskontoerUtils';\nimport { RegelTest, RegelTestresultat, RegelTestresultatInfo } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const overskriverEndringerAnnenPartsPerioder: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const eksisterendeUttaksplan =\n        grunnlag.eksisterendeSak !== undefined\n            ? grunnlag.eksisterendeSak.uttaksplan.filter((p) => !isAvslåttPeriode(p))\n            : undefined;\n    const fornavnAnnenForelder = grunnlag.søkerErFarEllerMedmor\n        ? grunnlag.navnPåForeldre.mor\n        : grunnlag.navnPåForeldre.farMedmor;\n    if (eksisterendeUttaksplan) {\n        const perioderSomOverlapper: Periode[] = [];\n        const perioderForSjekk = grunnlag.erEndringssøknad\n            ? grunnlag.perioderSomSkalSendesInn\n            : grunnlag.perioder.filter((p) => !isInfoPeriode(p));\n\n        perioderForSjekk.forEach((periode) => {\n            const overlapp = Periodene(eksisterendeUttaksplan.filter(isInfoPeriode)).finnOverlappendePerioder(periode);\n            if (overlapp.length > 0) {\n                perioderSomOverlapper.push(periode);\n            }\n        });\n\n        const perioderSomOverlapperUtenSamtidigUttak = perioderSomOverlapper.filter(\n            (p) => !(isUttaksperiode(p) && p.ønskerSamtidigUttak)\n        );\n\n        const passerer = perioderSomOverlapperUtenSamtidigUttak.length === 0;\n        return {\n            passerer,\n            info: perioderSomOverlapperUtenSamtidigUttak.map((periode) => {\n                const regelInfo: RegelTestresultatInfo = {\n                    periodeId: periode.id,\n                    intlKey: 'uttaksplan.validering.advarsel.periodeOverskriverAnnenPartsPeriode',\n                    renderAsHtml: true,\n                    values: {\n                        periode: (intl: IntlShape) =>\n                            getPeriodeTittel(\n                                intl,\n                                periode,\n                                grunnlag.navnPåForeldre,\n                                grunnlag.familiehendelsesdato,\n                                grunnlag.termindato,\n                                grunnlag.søkersituasjon.situasjon\n                            ),\n                        tidsperiode: (intl: IntlShape) => Tidsperioden(periode.tidsperiode).formaterStringKort(intl),\n                        forelder: fornavnAnnenForelder,\n                        forelders: (intl: IntlShape) => getNavnGenitivEierform(fornavnAnnenForelder, intl.locale),\n                        //strong: (_intl: IntlShape) => (msg: any) => <strong>{msg}</strong>, //TODO: strong does not work.\n                        strong: (_intl: IntlShape) => (msg: any) => msg,\n                    },\n                };\n                return regelInfo;\n            }),\n        };\n    }\n\n    return { passerer: true };\n};\n","import { IntlShape } from 'react-intl';\nimport { RegelTest, RegelTestresultat, RegelTestresultatInfo } from '../utils/types/regelTypes';\nimport { isUttakAnnenPart } from 'uttaksplan/types/Periode';\nimport { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { getPeriodeForelderNavn, getPeriodeTittel } from 'uttaksplan/utils/periodeUtils';\nimport { getNavnGenitivEierform } from 'app/utils/personUtils';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const overlapperPeriodeAndrePerioder: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const { perioder, navnPåForeldre } = grunnlag;\n    const perioderUtenUttakAnnenPart = perioder.filter((p) => !isUttakAnnenPart(p));\n    const perioderSomHarOverlapp = perioderUtenUttakAnnenPart.filter(\n        (periode) => Periodene(perioderUtenUttakAnnenPart).finnOverlappendePerioder(periode).length > 0\n    );\n\n    const passerer = perioderSomHarOverlapp.length === 0;\n    return {\n        passerer,\n        info: perioderSomHarOverlapp.map((periode) => {\n            const info: RegelTestresultatInfo = {\n                periodeId: periode.id,\n                intlKey: 'uttaksplan.validering.feil.periodeoverlapp.oppsummering',\n                renderAsHtml: true,\n                values: {\n                    periode: (intl: IntlShape) =>\n                        getPeriodeTittel(\n                            intl,\n                            periode,\n                            navnPåForeldre,\n                            grunnlag.familiehendelsesdato,\n                            grunnlag.termindato,\n                            grunnlag.søkersituasjon.situasjon\n                        ),\n                    tidsperiode: (intl: IntlShape) => Tidsperioden(periode.tidsperiode).formaterStringKort(intl),\n                    forelder: (intl: IntlShape) =>\n                        getNavnGenitivEierform(getPeriodeForelderNavn(periode, navnPåForeldre), intl.locale),\n                },\n            };\n            return info;\n        }),\n    };\n};\n","import { Dictionary } from 'lodash';\nimport { IntlShape } from 'react-intl';\n\ntype FeilIntlMessage = (intl: IntlShape) => string;\n\nexport enum RegelAlvorlighet {\n    FEIL = 'feil',\n    ADVARSEL = 'advarsel',\n    INFO = 'info',\n}\n\nexport interface UttaksplanRegelTestresultat {\n    resultat: RegelStatus[];\n    avvikPerPeriode: Dictionary<RegelAvvik[]>;\n    avvik: RegelAvvik[];\n    harFeil: boolean;\n}\n\nexport type RegelKategori = 'fordeling' | undefined;\n\nexport interface Regel {\n    key: string;\n    test: RegelTest;\n    alvorlighet: RegelAlvorlighet;\n    overstyresAvRegel?: string;\n    overstyrerRegler?: string[];\n    slåsSammenVedOppsummering?: boolean;\n    skjulesIOppsummering?: boolean;\n    skjulesIPeriode?: boolean;\n    avvikType?: AvvikType;\n    kategori?: RegelKategori;\n}\n\nexport type RegelTest = (grunnlag: any) => RegelTestresultat;\n\nexport interface RegelTestresultat {\n    passerer: boolean;\n    info?: RegelTestresultatInfoObject;\n    periodeId?: string;\n}\n\nexport type RegelTestresultatInfoObject = RegelTestresultatInfo | RegelTestresultatInfo[];\n\nexport interface RegelStatus {\n    key: string;\n    passerer: boolean;\n    regelAvvik?: RegelAvvik[];\n}\n\nexport type AvvikType = 'forretning' | 'skjema';\n\nexport interface RegelAvvik {\n    id: string;\n    regel: Regel;\n    periodeId?: string;\n    info: RegelAvvikInfo;\n}\n\ntype avikValueFunk = (intl: IntlShape) => string;\ntype intlHTMLFragmentFunc = (msg: any) => any;\n\ninterface AvvikInfo {\n    periodeId?: string;\n    values?: {\n        [key: string]: string | number | Date | FeilIntlMessage | avikValueFunk | undefined | intlHTMLFragmentFunc;\n    };\n    renderAsHtml?: boolean;\n}\n\nexport interface RegelAvvikInfo extends AvvikInfo {\n    intlKey: string;\n}\n\nexport interface RegelTestresultatInfo extends AvvikInfo {\n    intlKey?: string;\n}\n","import { IntlShape } from 'react-intl';\nimport { guid } from 'nav-frontend-js-utils';\nimport { flatten, isArray, uniqBy } from 'lodash';\nimport {\n    UttaksplanRegelTestresultat,\n    RegelAvvik,\n    Regel,\n    RegelTestresultatInfo,\n    RegelStatus,\n    RegelTestresultatInfoObject,\n    RegelAvvikInfo,\n    RegelAlvorlighet,\n} from './types/regelTypes';\nimport { Validator } from './types/validatorTypes';\n\nconst getRegelIntlKey = (regel: Regel, intlRegelPrefix: string): string =>\n    `${intlRegelPrefix}.${regel.alvorlighet}.${regel.key}`;\n\nconst alvorlighetSortOrder = {\n    [RegelAlvorlighet.FEIL]: 0,\n    [RegelAlvorlighet.ADVARSEL]: 1,\n    [RegelAlvorlighet.INFO]: 2,\n};\n\nconst sorterAvvik = (a1: RegelAvvik, a2: RegelAvvik): number => {\n    if (a1.regel.alvorlighet === a2.regel.alvorlighet) {\n        return 0;\n    }\n    return alvorlighetSortOrder[a1.regel.alvorlighet] < alvorlighetSortOrder[a2.regel.alvorlighet] ? -1 : 1;\n};\n\nconst ensureRegelAvvikIntlKey = (\n    regel: Regel,\n    intlRegelPrefix: string,\n    info?: Partial<RegelTestresultatInfo>\n): RegelAvvikInfo => ({\n    ...info,\n    intlKey: info ? info.intlKey || getRegelIntlKey(regel, intlRegelPrefix) : getRegelIntlKey(regel, intlRegelPrefix),\n});\n\nconst overstyresAvFilter = (avvik: RegelAvvik, _idx: number, alleAvvik: RegelAvvik[]): boolean => {\n    return (\n        avvik.regel.overstyresAvRegel === undefined &&\n        alleAvvik.some((b2) => b2.regel.key === avvik.regel.overstyresAvRegel) === false\n    );\n};\n\nconst overstyrerAndreFilter = (avvik: RegelAvvik, _idx: number, alleAvvik: RegelAvvik[]): boolean => {\n    const overstyresAvAndre = alleAvvik.some((rb) =>\n        rb.regel.overstyrerRegler\n            ? rb.regel.overstyrerRegler.some((rbo) => {\n                  return rbo === avvik.regel.key;\n              })\n            : false\n    );\n    return overstyresAvAndre === false;\n};\n\nexport const regelHarAvvik = (\n    regel: Regel,\n    intlRegelPrefix: string,\n    info?: RegelTestresultatInfoObject,\n    periodeId?: string\n): RegelStatus => {\n    const mapInfoToRegelAvvik = (i?: Partial<RegelTestresultatInfo>): RegelAvvik => ({\n        id: guid(),\n        regel,\n        info: ensureRegelAvvikIntlKey(regel, intlRegelPrefix, i),\n        periodeId: i ? i.periodeId : periodeId,\n    });\n    const regelAvvik: RegelAvvik[] = [];\n    if (isArray(info)) {\n        info.forEach((i) => regelAvvik.push(mapInfoToRegelAvvik(i)));\n    } else {\n        regelAvvik.push(mapInfoToRegelAvvik(info));\n    }\n    return {\n        key: regel.key,\n        passerer: false,\n        regelAvvik,\n    };\n};\n\nexport const regelPasserer = (regel: Regel): RegelStatus => ({\n    key: regel.key,\n    passerer: true,\n});\n\nexport const getRegelAvvikForPeriode = (resultat: UttaksplanRegelTestresultat, periodeId: string): RegelAvvik[] => {\n    return resultat && resultat.avvikPerPeriode[periodeId] ? resultat.avvikPerPeriode[periodeId] : [];\n};\n\nexport const getRegelAvvik = (resultat: RegelStatus[]): RegelAvvik[] => {\n    if (resultat) {\n        return flatten(\n            resultat.filter((r) => r.passerer === false && r.regelAvvik !== undefined).map((r) => r.regelAvvik!)\n        ).sort(sorterAvvik);\n    }\n    return [];\n};\n\nexport const isRegelFeil = (regelAvvik: RegelAvvik): boolean => regelAvvik.regel.alvorlighet === RegelAlvorlighet.FEIL;\n\nexport const hasRegelFeil = (avvik: RegelAvvik[] = []) => avvik.some((a) => isRegelFeil(a));\n\nexport const trimRelaterteRegelAvvik = (avvik: RegelAvvik[], grupperAvvik: boolean): RegelAvvik[] => {\n    return grupperAvvik\n        ? uniqBy(avvik.filter(overstyresAvFilter).filter(overstyrerAndreFilter), (a) => {\n              return a.regel.slåsSammenVedOppsummering ? a.regel.key : guid();\n          })\n        : avvik.filter(overstyresAvFilter).filter(overstyrerAndreFilter);\n};\n\nexport const getRegelIntlValues = (\n    intl: IntlShape,\n    info: RegelTestresultatInfo\n): { [key: string]: string } | undefined => {\n    const { values } = info;\n    if (values === undefined) {\n        return undefined;\n    }\n    const newValues: { [key: string]: string } = {};\n    Object.keys(values).forEach((key) => {\n        const valueOrFunc = values[key];\n        if (valueOrFunc) {\n            newValues[key] = typeof valueOrFunc === 'function' ? valueOrFunc(intl) : `${valueOrFunc}`;\n        }\n    });\n    return newValues;\n};\n\nexport const hasValueRule = (v: any, failText: string): Validator => ({\n    test: () => v !== undefined && v !== '',\n    failText,\n});\n","import { intlUtils } from '@navikt/fp-common';\nimport { getFloatFromString } from 'app/utils/numberUtils';\nimport { IntlShape } from 'react-intl';\nimport {\n    samtidigUttakProsentIsMax100,\n    stillingsprosentIsLessThan100,\n    stillingsprosentIsMoreThan0,\n} from 'uttaksplan/utils/periodeUtils';\nimport { hasValueRule } from './regelUtils';\nimport { Validator } from './types/validatorTypes';\n\nexport const getStillingsprosentRegler = (\n    erSamtidigUttak: boolean,\n    stillingsprosent: string,\n    intl?: IntlShape\n): Validator[] => {\n    const intlKey = 'valideringsfeil.stillingsprosent';\n    return [\n        hasValueRule(stillingsprosent, intl ? intlUtils(intl, `${intlKey}.required`) : ''),\n        {\n            test: () => getFloatFromString(stillingsprosent) !== undefined,\n            failText: intl ? intlUtils(intl, `${intlKey}.ugyldigTall`) : '',\n        },\n        {\n            test: () => stillingsprosentIsMoreThan0(stillingsprosent),\n            failText: intl ? intlUtils(intl, `${intlKey}.under1`) : '',\n        },\n        {\n            test: () =>\n                erSamtidigUttak\n                    ? samtidigUttakProsentIsMax100(stillingsprosent)\n                    : stillingsprosentIsLessThan100(stillingsprosent),\n            failText: intl ? intlUtils(intl, `${intlKey}.over100prosent`) : '',\n        },\n    ];\n};\n","import { Periode, Periodetype } from 'uttaksplan/types/Periode';\nimport { getStillingsprosentRegler } from './stillingsprosentValideringUtils';\n\nexport const gradertUttaksperiodeErUgyldig = (periode: Periode) => {\n    if (periode.type === Periodetype.Uttak) {\n        const { gradert, stillingsprosent } = periode;\n        if (gradert === true) {\n            const regler = getStillingsprosentRegler(false, stillingsprosent || '');\n            const results = regler.map((regel) => regel.test() === true);\n            return results.some((erGyldig) => erGyldig === false);\n        }\n    }\n    return false;\n};\n\nexport const samtidigUttaksperiodeErUgyldig = (periode: Periode, søkerErFarEllerMedmor: boolean) => {\n    if (periode.type === Periodetype.Uttak) {\n        const { ønskerSamtidigUttak, samtidigUttakProsent } = periode;\n        if (ønskerSamtidigUttak === true && søkerErFarEllerMedmor) {\n            const regler = getStillingsprosentRegler(true, samtidigUttakProsent || '');\n            const results = regler.map((regel) => regel.test() === true);\n            return results.some((erGyldig) => erGyldig === false);\n        }\n    }\n    return false;\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport { gradertUttaksperiodeErUgyldig } from '../../utils/periodeValideringUtils';\n\nexport const harUttaksperiodeGyldigGradering: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const ugyldigePerioder = grunnlag.perioder.filter(gradertUttaksperiodeErUgyldig);\n    return {\n        passerer: ugyldigePerioder.length === 0,\n        info: ugyldigePerioder.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { ValidationResult, ValidationTestVerdict, Validator } from './types/validatorTypes';\n\nexport const runValidators = (validators: Validator[] | undefined, inputName: string): ValidationResult => {\n    if (validators === undefined) {\n        return {\n            name: inputName,\n            tests: [],\n            valid: true,\n        };\n    }\n    const results: Validator[] = validators.filter((validator) => {\n        return validator.test() === false;\n    });\n\n    const valid = results.length === 0;\n    const tests: ValidationTestVerdict[] = valid === false ? [{ verdict: false, failText: results[0].failText }] : [];\n\n    return {\n        name: inputName,\n        tests,\n        valid,\n    };\n};\n\nexport const allValidatorsPass = (validators: Validator[] | undefined): boolean =>\n    validators === undefined ? true : runValidators(validators, 'group').valid;\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport dayjs from 'dayjs';\nimport { isForeldrepengerFørFødselUttaksperiode, Periode, UtsettelseFormPeriodeType } from 'uttaksplan/types/Periode';\nimport { uttaksdatoer } from 'uttaksplan/utils/uttaksdatoerUtils';\nimport { DatoValidatorer, Validator } from './types/validatorTypes';\nimport { allValidatorsPass } from './validatorUtils';\n\ntype DateValue = Date | undefined;\n\nconst erUtfyltTest = (dato: DateValue): Validator => ({\n    test: () => dato !== undefined,\n    failText: { intlKey: `uttaksplan.validering.feil.påkrevd` },\n});\n\nconst erUttaksdagTest = (dato: DateValue) => ({\n    test: () => dato !== undefined && Uttaksdagen(dato).erUttaksdag(),\n    failText: { intlKey: `uttaksplan.validering.feil.datoErIkkeUttaksdag` },\n});\n\nconst slutterInnenforGyldigPermisjonsperiode = (\n    dato: DateValue,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n) => ({\n    test: () =>\n        dato !== undefined &&\n        dayjs(dato).isSameOrBefore(\n            uttaksdatoer(familiehendelsesdato, erFarEllerMedmor, termindato).sisteMuligeUttaksdagEtterTermin,\n            'day'\n        ),\n    failText: { intlKey: 'uttaksplan.validering.feil.etterSistePermisjonsdag' },\n});\n\nconst starterInnenforGyldigAntallUkerFørTermin = (\n    dato: DateValue,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n) => ({\n    test: () =>\n        dato !== undefined &&\n        dayjs(dato).isSameOrAfter(\n            uttaksdatoer(familiehendelsesdato, erFarEllerMedmor, termindato).førsteMuligeUttaksdagFørTermin,\n            'day'\n        ),\n    failText: { intlKey: 'uttaksplan.validering.feil.før12UkerFørTermin' },\n});\n\nexport const getUttakTidsperiodeValidatorer = (\n    skalIkkeHaUttak: boolean,\n    tidsperiode: Partial<TidsperiodeDate>,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): DatoValidatorer | undefined => {\n    if (skalIkkeHaUttak) {\n        return undefined;\n    }\n\n    const { fom, tom } = tidsperiode;\n\n    return {\n        fra: [\n            erUtfyltTest(fom),\n            erUttaksdagTest(fom),\n            starterInnenforGyldigAntallUkerFørTermin(fom, familiehendelsesdato, erFarEllerMedmor, termindato),\n        ],\n        til: [\n            erUtfyltTest(tom),\n            erUttaksdagTest(tom),\n            slutterInnenforGyldigPermisjonsperiode(tom, familiehendelsesdato, erFarEllerMedmor, termindato),\n        ],\n    };\n};\n\nexport const uttakTidsperiodeErGyldig = (\n    uttaksperiode: Periode,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): boolean => {\n    const { tidsperiode } = uttaksperiode;\n    if (!tidsperiode) {\n        return false;\n    }\n    const skalIkkeHaUttak = isForeldrepengerFørFødselUttaksperiode(uttaksperiode)\n        ? uttaksperiode.skalIkkeHaUttakFørTermin\n        : false;\n\n    if (isValidTidsperiode(tidsperiode) === false && !skalIkkeHaUttak) {\n        return false;\n    }\n    const validators = getUttakTidsperiodeValidatorer(\n        skalIkkeHaUttak,\n        tidsperiode,\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        termindato\n    );\n    if (validators === undefined) {\n        return true;\n    }\n    const fraDatoErGyldig = allValidatorsPass(validators.fra);\n    const tilDatoErGyldig = allValidatorsPass(validators.til);\n\n    return fraDatoErGyldig && tilDatoErGyldig;\n};\n\nconst getUtsettelseTidsperiodeValidatorer = (\n    tidsperiode: Partial<TidsperiodeDate>,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): DatoValidatorer | undefined => {\n    return {\n        fra: [erUtfyltTest(tidsperiode.fom), erUttaksdagTest(tidsperiode.fom)],\n        til: [\n            erUtfyltTest(tidsperiode.tom),\n            erUttaksdagTest(tidsperiode.tom),\n            slutterInnenforGyldigPermisjonsperiode(tidsperiode.tom, familiehendelsesdato, erFarEllerMedmor, termindato),\n        ],\n    };\n};\n\nexport const utsettelseTidsperiodeErGyldig = (\n    utsettelesperiode: UtsettelseFormPeriodeType,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): boolean => {\n    const { tidsperiode } = utsettelesperiode;\n\n    if (isValidTidsperiode(tidsperiode) === false) {\n        return false;\n    }\n    const validators = getUtsettelseTidsperiodeValidatorer(\n        tidsperiode,\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        termindato\n    );\n    if (validators === undefined) {\n        return true;\n    }\n    const fraDatoErGyldig = allValidatorsPass(validators.fra);\n    const tilDatoErGyldig = allValidatorsPass(validators.til);\n\n    return fraDatoErGyldig && tilDatoErGyldig;\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { utsettelseTidsperiodeErGyldig, uttakTidsperiodeErGyldig } from '../../utils/tidsperiodeValideringUtils';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\n\nexport const harPeriodeGyldigTidsperiode: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const perioderMedUgyldigTidsperiode = grunnlag.perioder.filter((periode) => {\n        switch (periode.type) {\n            case Periodetype.Overføring:\n            case Periodetype.Uttak:\n            case Periodetype.Opphold:\n                return (\n                    uttakTidsperiodeErGyldig(\n                        periode,\n                        grunnlag.familiehendelsesdato,\n                        grunnlag.søkerErFarEllerMedmor,\n                        grunnlag.termindato\n                    ) === false\n                );\n            case Periodetype.Utsettelse:\n                return (\n                    utsettelseTidsperiodeErGyldig(\n                        periode,\n                        grunnlag.familiehendelsesdato,\n                        grunnlag.søkerErFarEllerMedmor,\n                        grunnlag.termindato\n                    ) === false\n                );\n        }\n        return false;\n    });\n    return {\n        passerer: perioderMedUgyldigTidsperiode.length === 0,\n        info: perioderMedUgyldigTidsperiode.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport { isUttaksperiode } from 'uttaksplan/types/Periode';\nimport { Søknadsinfo } from 'uttaksplan/validering/utils/types/Søknadsinfo';\n\nexport const harUttaksperiodeStønadskonto: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const uttaksperioderUtenStønadskonto = grunnlag.perioder.filter(\n        (periode) => isUttaksperiode(periode) && periode.konto === undefined\n    );\n    return {\n        passerer: uttaksperioderUtenStønadskonto.length === 0,\n        info: uttaksperioderUtenStønadskonto.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { samtidigUttaksperiodeErUgyldig } from '../../utils/periodeValideringUtils';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\n\nexport const erSamtidigUttakGyldig: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const perioderMedUgyldigTidsperiode = grunnlag.perioder.filter((periode) =>\n        samtidigUttaksperiodeErUgyldig(periode, grunnlag.søkerErFarEllerMedmor)\n    );\n    return {\n        passerer: perioderMedUgyldigTidsperiode.length === 0,\n        info: perioderMedUgyldigTidsperiode.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import dayjs from 'dayjs';\nimport { isUtsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport { Søknadsinfo } from '../../utils/types/Søknadsinfo';\n\nexport const erUtsettelseEtterFamiliehendelsesdato: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const ugyldigeUtsettelser = grunnlag.perioder\n        .filter(isUtsettelsesperiode)\n        .filter((utsettelse) => dayjs(utsettelse.tidsperiode.fom).isBefore(grunnlag.familiehendelsesdato, 'day'));\n    return {\n        passerer: ugyldigeUtsettelser.length === 0,\n        info: ugyldigeUtsettelser.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport {\n    getFørsteUttaksdag2UkerFørFødsel,\n    gjelderWLBReglerFarMedmorRundtFødsel,\n    isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel,\n    starterTidsperiodeEtter2UkerFørFødsel,\n} from 'app/utils/wlbUtils';\nimport { formaterDatoKompakt } from 'app/utils/dateUtils';\n\nexport const starterUttaksperiodeRundtFødselEtter2UkerFørFødsel: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    if (\n        !gjelderWLBReglerFarMedmorRundtFødsel(\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.morHarRett,\n            grunnlag.søkersituasjon.situasjon\n        )\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n\n    const perioderFarMedmorSomStarterFør2UkerFørFødsel = grunnlag.perioder\n        .filter((p) => isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel(p))\n        .filter(\n            (p) =>\n                !starterTidsperiodeEtter2UkerFørFødsel(\n                    p.tidsperiode,\n                    grunnlag.familiehendelsesdato,\n                    grunnlag.termindato\n                )\n        );\n\n    const førsteUttaksdagToUkerFørFødsel = formaterDatoKompakt(\n        getFørsteUttaksdag2UkerFørFødsel(grunnlag.familiehendelsesdato, grunnlag.termindato)\n    );\n    return {\n        passerer: perioderFarMedmorSomStarterFør2UkerFørFødsel.length === 0,\n        info: perioderFarMedmorSomStarterFør2UkerFørFødsel.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.starterUttaksperiodeRundtFødselEtter2UkerFørFødsel',\n            values: { dato: førsteUttaksdagToUkerFørFødsel },\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport {\n    getSisteUttaksdag6UkerEtterFødsel,\n    gjelderWLBReglerFarMedmorRundtFødsel,\n    isUttaksperiodeFarMedmorPgaFødsel,\n    slutterTidsperiodeInnen6UkerEtterFødsel,\n} from 'app/utils/wlbUtils';\nimport { formaterDatoKompakt } from 'app/utils/dateUtils';\n\nexport const slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    if (\n        !gjelderWLBReglerFarMedmorRundtFødsel(\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.morHarRett,\n            grunnlag.søkersituasjon.situasjon\n        )\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n\n    const perioderFarMedmorSomIkkeSlutterFør6UkerEtterFødsel = grunnlag.perioder\n        .filter((p) => isUttaksperiodeFarMedmorPgaFødsel(p, grunnlag.familiehendelsesdato, grunnlag.termindato))\n        .filter((p) => !slutterTidsperiodeInnen6UkerEtterFødsel(p.tidsperiode, grunnlag.familiehendelsesdato));\n\n    const sisteUttaksdagSeksUkerEtterFødsel = formaterDatoKompakt(\n        getSisteUttaksdag6UkerEtterFødsel(grunnlag.familiehendelsesdato)\n    );\n    return {\n        passerer: perioderFarMedmorSomIkkeSlutterFør6UkerEtterFødsel.length === 0,\n        info: perioderFarMedmorSomIkkeSlutterFør6UkerEtterFødsel.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.slutterUttaksperiodeRundtFødselEtter6UkerEtterFødsel',\n            values: { dato: sisteUttaksdagSeksUkerEtterFødsel },\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport { starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel } from 'app/utils/wlbUtils';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport { isUttaksperiode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\n\nexport const periodeDeFørsteSeksUkeneHarUlovligUttakBFHR: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    if (\n        !andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato) ||\n        !grunnlag.søkerErFarEllerMedmor ||\n        grunnlag.morHarRett ||\n        grunnlag.søkersituasjon.situasjon !== 'fødsel'\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n\n    const perioderDeFørsteSeksUkeneMedUlovligUttakBFHR = grunnlag.perioder.filter(\n        (periode) =>\n            isUttaksperiode(periode) &&\n            starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(\n                periode.tidsperiode,\n                grunnlag.familiehendelsesdato,\n                grunnlag.termindato\n            ) &&\n            periode.konto === StønadskontoType.Foreldrepenger &&\n            periode.erMorForSyk === false\n    );\n\n    return {\n        passerer: perioderDeFørsteSeksUkeneMedUlovligUttakBFHR.length === 0,\n        info: perioderDeFørsteSeksUkeneMedUlovligUttakBFHR.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.perioderDeFørsteSeksUkeneMedUlovligUttakBFHR',\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { isUtsettelsePgaArbeid } from 'uttaksplan/types/Periode';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\n\nexport const harBekreftet100ProsentArbeidIUtsettelsePgaArbeid: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    const utsettelserPgaArbeidUtenBekreftelse = grunnlag.perioder\n        .filter(isUtsettelsePgaArbeid)\n        .filter((periode) => periode.bekrefterArbeidIPerioden === false);\n\n    return {\n        passerer: utsettelserPgaArbeidUtenBekreftelse.length === 0,\n        info: utsettelserPgaArbeidUtenBekreftelse.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport dayjs from 'dayjs';\nimport { isUttakAnnenPart, Periode, Periodetype } from 'uttaksplan/types/Periode';\nimport { formatDate } from '@navikt/fp-common';\n\nexport const laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn = (\n    periode: Periode,\n    førsteUttaksdagForPåfølgendeBarn: Date | undefined\n) => {\n    if (\n        førsteUttaksdagForPåfølgendeBarn !== undefined &&\n        (periode.type === Periodetype.Uttak ||\n            periode.type === Periodetype.Overføring ||\n            periode.type === Periodetype.Utsettelse ||\n            periode.type === Periodetype.Opphold ||\n            isUttakAnnenPart(periode))\n    ) {\n        return (\n            dayjs(periode.tidsperiode.fom).isSameOrAfter(førsteUttaksdagForPåfølgendeBarn, 'd') ||\n            dayjs(periode.tidsperiode.tom).isSameOrAfter(førsteUttaksdagForPåfølgendeBarn, 'd')\n        );\n    }\n    return false;\n};\n\nexport const forSenUttakVedPåfølgendeBarn: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    if (\n        grunnlag.familiehendelsesdatoNesteSak === undefined ||\n        grunnlag.førsteUttaksdagNesteBarnsSak === undefined ||\n        (grunnlag.minsterettUkerToTette && grunnlag.minsterettUkerToTette > 0)\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderMedUgyldigTidsperiode = grunnlag.perioder.filter((periode) =>\n        laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn(periode, grunnlag.førsteUttaksdagNesteBarnsSak)\n    );\n    const sisteMuligeUttaksdag = Uttaksdagen(grunnlag.førsteUttaksdagNesteBarnsSak).trekkFra(1);\n    return {\n        passerer: perioderMedUgyldigTidsperiode.length === 0,\n        info: perioderMedUgyldigTidsperiode.map((periode) => ({\n            intlKey: 'uttaksplan.validering.info.forSenUttakVedPåfølgendeBarn',\n            values: {\n                fom: formatDate(periode.tidsperiode.fom),\n                tom: formatDate(periode.tidsperiode.tom),\n                sisteMuligeUttaksdag: formatDate(sisteMuligeUttaksdag),\n            },\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { harUttaksperiodeGyldigGradering } from './harUttaksperiodeGyldigGradering';\nimport { harPeriodeGyldigTidsperiode } from './harPeriodeGyldigTidsperiode';\nimport { harUttaksperiodeStønadskonto } from './harUttaksperiodeStønadskonto';\nimport { erSamtidigUttakGyldig } from './erSamtidigUttakGyldig';\nimport { erUtsettelseEtterFamiliehendelsesdato } from './erUtsettelseEtterFamiliehendelsesdato';\nimport { Regel, RegelAlvorlighet } from '../../utils/types/regelTypes';\nimport { starterUttaksperiodeRundtFødselEtter2UkerFørFødsel } from './starterUttaksperiodeRundtFødselEtter2UkerFørFødsel';\nimport { slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel } from './slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel';\nimport { periodeDeFørsteSeksUkeneHarUlovligUttakBFHR } from './periodeDeFørsteSeksUkeneHarUlovligUttakBFHR';\nimport { harBekreftet100ProsentArbeidIUtsettelsePgaArbeid } from './harBekreftet100ProsentArbeidIUtsettelsePgaArbeid';\nimport { forSenUttakVedPåfølgendeBarn } from './forSenUttakVedPåfølgendeBarn';\n\nexport enum PeriodeValiderRegelKey {\n    'uttaksperiodeHarGyldigGradering' = 'uttaksperiodeHarGyldigGradering',\n    'periodeHarGyldigTidsperiode' = 'periodeHarGyldigTidsperiode',\n    'uttaksperiodeHarStønadskonto' = 'uttaksperiodeHarStønadskonto',\n    'erSamtidigUttakGyldig' = 'erSamtidigUttakGyldig',\n    'erUtsettelseEtterFamiliehendelsesdato' = 'erUtsettelseEtterFamiliehendelsesdato',\n    'starterUttaksperiodeRundtFødselEtter2UkerFørFødsel' = 'starterUttaksperiodeRundtFødselEtter2UkerFørFødsel',\n    'slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel' = 'slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel',\n    'periodeDeFørsteSeksUkeneHarUlovligUttakBFHR' = 'periodeDeFørsteSeksUkeneHarUlovligUttakBFHR',\n    'harBekreftet100ProsentArbeidIUtsettelsePgaArbeid' = 'harBekreftet100ProsentArbeidIUtsettelsePgaArbeid',\n    'forSenUttakVedPåfølgendeBarn' = 'forSenUttakVedPåfølgendeBarn',\n}\n\n/** Meldingene skal default kun vises inne i skjema */\n\nconst skjulIOppsummering = true;\n\nconst periodevalideringsregler: Regel[] = [\n    {\n        key: PeriodeValiderRegelKey.uttaksperiodeHarGyldigGradering,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harUttaksperiodeGyldigGradering,\n        skjulesIOppsummering: skjulIOppsummering,\n        avvikType: 'skjema',\n    },\n    {\n        key: PeriodeValiderRegelKey.periodeHarGyldigTidsperiode,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harPeriodeGyldigTidsperiode,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.starterUttaksperiodeRundtFødselEtter2UkerFørFødsel,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: starterUttaksperiodeRundtFødselEtter2UkerFørFødsel,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.uttaksperiodeHarStønadskonto,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harUttaksperiodeStønadskonto,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.periodeDeFørsteSeksUkeneHarUlovligUttakBFHR,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: periodeDeFørsteSeksUkeneHarUlovligUttakBFHR,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.erSamtidigUttakGyldig,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erSamtidigUttakGyldig,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.erUtsettelseEtterFamiliehendelsesdato,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erUtsettelseEtterFamiliehendelsesdato,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.harBekreftet100ProsentArbeidIUtsettelsePgaArbeid,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harBekreftet100ProsentArbeidIUtsettelsePgaArbeid,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.forSenUttakVedPåfølgendeBarn,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: forSenUttakVedPåfølgendeBarn,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n];\n\nexport default periodevalideringsregler;\n","import { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { isUtsettelsePgaFerie } from 'uttaksplan/types/Periode';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const harSøktOmFerieUtenArbeidsforhold: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const harArbeidsforhold = grunnlag.arbeidsforhold.length > 0;\n    return {\n        passerer: harArbeidsforhold ? true : grunnlag.perioder.some(isUtsettelsePgaFerie) === false,\n    };\n};\n","import uttaksConstants from 'app/constants';\nimport { IntlShape } from 'react-intl';\nimport { Perioden } from 'app/steps/uttaksplan-info/utils/Perioden';\nimport { isUtsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { getVarighetString } from 'app/utils/dateUtils';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const inneholderForMyeFerie: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const ferieUtsettelser = grunnlag.perioder.filter(\n        (p) => isUtsettelsesperiode(p) && p.årsak === UtsettelseÅrsakType.Ferie\n    );\n    const ferieDager = ferieUtsettelser.reduce(\n        (sumFerieDager, periode) => sumFerieDager + Perioden(periode).getAntallUttaksdager(),\n        0\n    );\n\n    return {\n        passerer: ferieDager <= uttaksConstants.MAKS_FERIEDAGER_MED_OVERFØRING,\n        info: ferieUtsettelser.map((periode) => ({\n            periodeId: periode.id,\n            values: {\n                ukerOgDager: (intl: IntlShape) => getVarighetString(ferieDager, intl),\n            },\n        })),\n    };\n};\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport { beregnGjenståendeUttaksdager } from 'uttaksplan/utils/uttaksPlanStatus';\nimport { isUtsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\n// Denne regelen sparker inn dersom forelders kvote + fellesperiode er tømt\n// Dersom noe er igjen av andre forelders kvote er det OK\nexport function kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme(grunnlag: Søknadsinfo): RegelTestresultat {\n    const { perioder, søkerErFarEllerMedmor, stønadskontoer } = grunnlag;\n    const gjenståendeDager = beregnGjenståendeUttaksdager(stønadskontoer, perioder, false);\n    const sistePeriodeErIkkeUtsettelse =\n        perioder.length > 0 ? !isUtsettelsesperiode(perioder[perioder.length - 1]) : false;\n\n    const resterendeFellesperiode = gjenståendeDager.find((konto) => konto.konto === StønadskontoType.Fellesperiode);\n    const resterendeMødrekvote = gjenståendeDager.find((konto) => konto.konto === StønadskontoType.Mødrekvote);\n    const resterendeFedrekvote = gjenståendeDager.find((konto) => konto.konto === StønadskontoType.Fedrekvote);\n    const resterendeForeldrepenger = gjenståendeDager.find((konto) => konto.konto === StønadskontoType.Foreldrepenger);\n\n    if (sistePeriodeErIkkeUtsettelse || perioder.length === 0) {\n        return {\n            passerer: true,\n        };\n    }\n\n    if (søkerErFarEllerMedmor) {\n        if (resterendeFedrekvote !== undefined && resterendeFellesperiode !== undefined) {\n            if (resterendeFedrekvote.dager > 0 || resterendeFellesperiode.dager > 0) {\n                return {\n                    passerer: true,\n                };\n            }\n        }\n\n        if (resterendeForeldrepenger !== undefined) {\n            if (resterendeForeldrepenger.dager > 0) {\n                return {\n                    passerer: true,\n                };\n            }\n        }\n\n        return {\n            passerer: false,\n            info: {\n                intlKey: 'uttaksplan.validering.feil.sluttMedUtsettelse',\n            },\n        };\n    } else {\n        if (resterendeMødrekvote !== undefined && resterendeFellesperiode !== undefined) {\n            if (resterendeMødrekvote.dager > 0 || resterendeFellesperiode.dager > 0) {\n                return {\n                    passerer: true,\n                };\n            }\n        }\n\n        if (resterendeForeldrepenger !== undefined) {\n            if (resterendeForeldrepenger.dager > 0) {\n                return {\n                    passerer: true,\n                };\n            }\n        }\n\n        return {\n            passerer: false,\n            info: {\n                intlKey: 'uttaksplan.validering.feil.sluttMedUtsettelse',\n            },\n        };\n    }\n}\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { beregnGjenståendeUttaksdager } from 'uttaksplan/utils/uttaksPlanStatus';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nconst erUttaksmengdeForFarMedmorForHøy = (\n    uttaksplan: Periode[],\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    farEllerMedmor: boolean\n): boolean => {\n    if (farEllerMedmor === true) {\n        const kontoUttak = beregnGjenståendeUttaksdager(tilgjengeligeStønadskontoer, uttaksplan, false);\n        return kontoUttak.some((konto: StønadskontoUttak) => konto.dager < 0);\n    } else {\n        return false;\n    }\n};\n\nexport const erUttaksmengdeForFarMedmorForHøyTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    return {\n        passerer:\n            erUttaksmengdeForFarMedmorForHøy(\n                grunnlag.perioder,\n                grunnlag.stønadskontoer,\n                grunnlag.søkerErFarEllerMedmor\n            ) === false,\n    };\n};\n","import React from 'react';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { IntlShape } from 'react-intl';\nimport {\n    isInfoPeriode,\n    isPeriodeUtenUttak,\n    isUtsettelsePgaArbeid,\n    isUttaksperiode,\n    Periode,\n} from 'uttaksplan/types/Periode';\nimport links from 'app/links/links';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nconst vekslendeArbeidOgUttakTest = (kunSøkersPerioder: Periode[]): boolean => {\n    const firstArbeidsperiodeIndex = kunSøkersPerioder.findIndex((p) => isUtsettelsePgaArbeid(p));\n\n    if (firstArbeidsperiodeIndex > -1) {\n        const antallPerioderEtterFørsteUtsettelseGrunnetArbeid =\n            kunSøkersPerioder.length - 1 - firstArbeidsperiodeIndex;\n\n        if (antallPerioderEtterFørsteUtsettelseGrunnetArbeid >= 5) {\n            // Hvis vi har en serie perioder av formatet:\n            // Arbeid -> Uttak -> Arbeid -> Uttak -> Arbeid -> Uttak => foreslå gradering\n            if (\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 1]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex + 2]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 3]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex + 4]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 5])\n            ) {\n                return false;\n            }\n        }\n        if (antallPerioderEtterFørsteUtsettelseGrunnetArbeid === 4 && firstArbeidsperiodeIndex > 0) {\n            // Hvis vi har en serie perioder av formatet:\n            // Uttak -> Arbeid -> Uttak -> Arbeid -> Uttak -> Arbeid => foreslå gradering\n            if (\n                firstArbeidsperiodeIndex > 0 &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex - 1]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 1]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex + 2]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 3]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex + 4])\n            ) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n};\n\nconst vekslendePeriodeUtenUttakOgUttakTest = (kunSøkersPerioder: Periode[]): boolean => {\n    const firstPeriodeUtenUttakIndex = kunSøkersPerioder.findIndex((p) => isPeriodeUtenUttak(p));\n\n    if (firstPeriodeUtenUttakIndex > -1) {\n        const antallPerioderEtterFørstePeriodeUtenUttak = kunSøkersPerioder.length - 1 - firstPeriodeUtenUttakIndex;\n\n        if (antallPerioderEtterFørstePeriodeUtenUttak >= 5) {\n            // Hvis vi har en serie perioder av formatet:\n            // Uten Uttak -> Uttak ->  Uten Uttak -> Uttak ->  Uten Uttak -> Uttak => foreslå gradering\n            if (\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 1]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 2]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 3]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 4]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 5])\n            ) {\n                return false;\n            }\n        }\n        if (antallPerioderEtterFørstePeriodeUtenUttak === 4 && firstPeriodeUtenUttakIndex > 0) {\n            // Hvis vi har en serie perioder av formatet:\n            // Uttak ->  Uten Uttak -> Uttak ->  Uten Uttak -> Uttak ->  Uten Uttak => foreslå gradering\n            if (\n                firstPeriodeUtenUttakIndex > 0 &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex - 1]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 1]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 2]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 3]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 4])\n            ) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n};\n\nexport const burdeKanskjeSøkeGraderingTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const { perioder } = grunnlag;\n    const kunSøkersPerioder = perioder.filter((p: Periode) => !isInfoPeriode(p));\n\n    if (kunSøkersPerioder.length >= 6) {\n        const vekslerArbeidOgUttakTest = vekslendeArbeidOgUttakTest(kunSøkersPerioder);\n        const veklserPerioderUtenUttakOgUttaktest = vekslendePeriodeUtenUttakOgUttakTest(kunSøkersPerioder);\n        const passerer = vekslerArbeidOgUttakTest && veklserPerioderUtenUttakOgUttaktest;\n        let infoTekstKey = undefined;\n        if (!vekslerArbeidOgUttakTest) {\n            infoTekstKey =\n                'uttaksplan.validering.info.burdeKanskjeSøkeGradering.PgaVekslendeUtsettelserPgaArbeidOgUttak';\n        }\n\n        if (!veklserPerioderUtenUttakOgUttaktest) {\n            infoTekstKey = 'uttaksplan.validering.info.burdeKanskjeSøkeGradering.PgaVekslendePerioderUtenUttakOgUttak';\n        }\n\n        return {\n            passerer: passerer,\n            info: {\n                intlKey: infoTekstKey,\n                renderAsHtml: true,\n                values: {\n                    a: (_intl: IntlShape) => (msg: any) =>\n                        (\n                            <a href={links.graderingInfo} className=\"lenke\" rel=\"noreferrer\" target=\"_blank\">\n                                {msg}\n                            </a>\n                        ),\n                },\n            },\n        };\n    }\n\n    return {\n        passerer: true,\n    };\n};\n","import { formatDate } from '@navikt/fp-common';\nimport { isUfødtBarn } from 'app/context/types/Barn';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { getUgyldigUttakMor } from '../utils/uttakValideringUtils';\n\nexport const ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    const søkerErMor = !grunnlag.søkerErFarEllerMedmor;\n    if (søkerErMor && isUfødtBarn(grunnlag.barn)) {\n        const ugyldigePerioder = getUgyldigUttakMor(\n            grunnlag.perioder,\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkersituasjon.situasjon,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.termindato,\n            grunnlag.erFlerbarnssøknad,\n            'mellomSyvOgÅtteUkerForMor'\n        );\n\n        const passerer = ugyldigePerioder.length === 0;\n        return {\n            passerer,\n            info: ugyldigePerioder.map((periode) => ({\n                intlKey: 'uttaksplan.validering.advarsel.ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato',\n                values: {\n                    fraDato: formatDate(periode.tidsperiode.fom),\n                    tilDato: formatDate(periode.tidsperiode.tom),\n                },\n                periodeId: periode.id,\n            })),\n        };\n    }\n\n    return { passerer: true };\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { isUttaksperiode } from 'uttaksplan/types/Periode';\nimport { hasValue } from '@navikt/fp-common';\nimport { farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk } from 'uttaksplan/utils/uttaksskjema/aktivitetskravMorSkalBesvares';\n\nexport const inneholderPerioderUtenAktivitetskrav = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const {\n        perioder,\n        søkerErFarEllerMedmor,\n        søkerErAleneOmOmsorg,\n        søkerHarMidlertidigOmsorg,\n        familiehendelsesdato,\n        søkersituasjon,\n    } = grunnlag;\n\n    if (!søkerErFarEllerMedmor || søkerErAleneOmOmsorg || søkerHarMidlertidigOmsorg) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderUtenAktivitetskrav = perioder.filter(\n        (p) =>\n            isUttaksperiode(p) &&\n            !hasValue(p.morsAktivitetIPerioden) &&\n            !p.erMorForSyk &&\n            !p.ønskerSamtidigUttak &&\n            !p.ønskerFlerbarnsdager &&\n            !farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk(\n                familiehendelsesdato,\n                søkerErFarEllerMedmor,\n                p.konto,\n                p.erMorForSyk,\n                p.tidsperiode,\n                søkersituasjon.situasjon\n            ) &&\n            (p.konto === StønadskontoType.Fellesperiode || p.konto === StønadskontoType.Foreldrepenger)\n    );\n\n    return {\n        passerer: perioderUtenAktivitetskrav.length === 0,\n        info: perioderUtenAktivitetskrav.map((p) => ({\n            intlKey: 'uttaksplan.validering.feil.inneholderPerioderUtenAktivitetskrav',\n            periodeId: p.id,\n        })),\n    };\n};\n","import { hasValue } from '@navikt/fp-common';\nimport { isUtsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const inneholderUtsettelserUtenÅrsak = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const utsettelserUtenÅrsak = grunnlag.perioder.filter((p) => isUtsettelsesperiode(p) && !hasValue(p.årsak));\n\n    const passerer = utsettelserUtenÅrsak.length === 0;\n\n    return {\n        passerer,\n        info: utsettelserUtenÅrsak.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.inneholderUtsettelserUtenÅrsak',\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { formaterDatoKompakt } from 'app/utils/dateUtils';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport {\n    getFarMedmorUttakRundtFødsel,\n    getFørsteUttaksdag2UkerFørFødsel,\n    getSisteUttaksdag6UkerEtterFødsel,\n    gjelderWLBReglerFarMedmorRundtFødsel,\n    slutterTidsperiodeInnen6UkerEtterFødsel,\n    ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL,\n} from 'app/utils/wlbUtils';\nimport { getSumUttaksdagerÅTrekkeIPeriodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport dayjs from 'dayjs';\n\nconst overskridelseUttakRundtFødselAntallDager = (\n    perioderRundtFødsel: Periode[],\n    familiehendelsesdato: Date\n): number => {\n    const sisteUttak6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n    const perioderAvkortetTilÅSlutte6UkerEtterFødsel = perioderRundtFødsel.map((p) =>\n        dayjs(p.tidsperiode.tom).isAfter(dayjs(sisteUttak6UkerEtterFødsel), 'day')\n            ? { ...p, tidsperiode: { fom: p.tidsperiode.fom, tom: sisteUttak6UkerEtterFødsel } }\n            : p\n    );\n    const antallDager = getSumUttaksdagerÅTrekkeIPeriodene(perioderAvkortetTilÅSlutte6UkerEtterFødsel);\n    return ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL - antallDager;\n};\n\nexport const farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    if (\n        gjelderWLBReglerFarMedmorRundtFødsel(\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.morHarRett,\n            grunnlag.søkersituasjon.situasjon\n        )\n    ) {\n        const perioderUttakRundtFødsel = getFarMedmorUttakRundtFødsel(\n            grunnlag.perioder,\n            grunnlag.familiehendelsesdato,\n            grunnlag.termindato\n        );\n        const antallDagerForMye = overskridelseUttakRundtFødselAntallDager(\n            perioderUttakRundtFødsel,\n            grunnlag.familiehendelsesdato\n        );\n\n        const slutterEnAvPeriodeneForSent = perioderUttakRundtFødsel.some(\n            (p) => !slutterTidsperiodeInnen6UkerEtterFødsel(p.tidsperiode, grunnlag.familiehendelsesdato)\n        );\n        let info;\n        const fraDato = formaterDatoKompakt(\n            getFørsteUttaksdag2UkerFørFødsel(grunnlag.familiehendelsesdato, grunnlag.termindato)\n        );\n        const tilDato = formaterDatoKompakt(getSisteUttaksdag6UkerEtterFødsel(grunnlag.familiehendelsesdato));\n        if (slutterEnAvPeriodeneForSent) {\n            info = {\n                intlKey:\n                    'uttaksplan.validering.feil.farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel.periodeSlutterForSent',\n                values: {\n                    fraDato: fraDato,\n                    tilDato: tilDato,\n                },\n            };\n        } else {\n            info = {\n                intlKey: 'uttaksplan.validering.feil.farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel',\n                values: {\n                    fraDato: fraDato,\n                    tilDato: tilDato,\n                    dagerForMye: Math.abs(antallDagerForMye),\n                },\n            };\n        }\n        return {\n            passerer: antallDagerForMye >= 0,\n            info: info,\n        };\n    }\n\n    return {\n        passerer: true,\n    };\n};\n","import { getSisteUttaksdag6UkerEtterFødsel } from 'app/utils/wlbUtils';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport dayjs from 'dayjs';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { isUttaksperiode } from 'uttaksplan/types/Periode';\n\nexport const harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    const søkerErMor = !grunnlag.søkerErFarEllerMedmor;\n    if (søkerErMor && grunnlag.søkersituasjon.situasjon === 'fødsel') {\n        const sisteUttaksdagEtterSeksUker = getSisteUttaksdag6UkerEtterFødsel(grunnlag.familiehendelsesdato);\n        const perioderMedSamtidigUttakUnder100ProsentInnenFørsteSeksUker = grunnlag.perioder.filter(\n            (p) =>\n                isUttaksperiode(p) &&\n                dayjs(p.tidsperiode.fom).isSameOrBefore(sisteUttaksdagEtterSeksUker, 'day') &&\n                p.ønskerSamtidigUttak === true &&\n                p.samtidigUttakProsent !== undefined &&\n                parseInt(p.samtidigUttakProsent, 10) < 100\n        );\n\n        return {\n            passerer: perioderMedSamtidigUttakUnder100ProsentInnenFørsteSeksUker.length <= 0,\n            info: {\n                intlKey: 'uttaksplan.validering.feil.morHarSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker',\n            },\n        };\n    }\n    return { passerer: true };\n};\n","import {\n    ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL,\n    getFarMedmorUttakRundtFødsel,\n    getFørsteUttaksdag2UkerFørFødsel,\n    getSisteUttaksdag6UkerEtterFødsel,\n    gjelderWLBReglerFarMedmorRundtFødsel,\n} from 'app/utils/wlbUtils';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { formaterDatoKompakt } from 'app/utils/dateUtils';\nimport { getSumUttaksdagerÅTrekkeIPeriodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { erUttaksmengdeForFarMedmorForHøyTest } from './erUttaksmengdeForFarMedmorForHøyTest';\nimport dayjs from 'dayjs';\n\nexport const farMedMorHarRettPåUttakRundtFødselTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const tattUtForMangeDagerIPlanen = erUttaksmengdeForFarMedmorForHøyTest(grunnlag).passerer === false;\n    if (\n        !gjelderWLBReglerFarMedmorRundtFødsel(\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.morHarRett,\n            grunnlag.søkersituasjon.situasjon\n        ) ||\n        tattUtForMangeDagerIPlanen\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderRundtFødsel = getFarMedmorUttakRundtFødsel(\n        grunnlag.perioder,\n        grunnlag.familiehendelsesdato,\n        grunnlag.termindato\n    );\n\n    let dagerIgjenRundtFødsel;\n    const førsteUttaksdag2UkerFørFødsel = getFørsteUttaksdag2UkerFørFødsel(\n        grunnlag.familiehendelsesdato,\n        grunnlag.termindato\n    );\n    const sisteUttak6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(grunnlag.familiehendelsesdato);\n\n    if (perioderRundtFødsel.length > 0) {\n        const antallUttaksdagerRundtFødsel = getSumUttaksdagerÅTrekkeIPeriodene(perioderRundtFødsel);\n        dagerIgjenRundtFødsel = ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL - antallUttaksdagerRundtFødsel;\n    } else {\n        dagerIgjenRundtFødsel = ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL;\n    }\n    const erMerEnn3månederSidenFamiliehendelse = dayjs(new Date())\n        .subtract(3, 'month')\n        .isSameOrAfter(grunnlag.familiehendelsesdato, 'day');\n\n    return {\n        passerer: dagerIgjenRundtFødsel <= 0 || erMerEnn3månederSidenFamiliehendelse,\n        info: {\n            intlKey: 'uttaksplan.validering.info.rettTilUttakRundtFødsel',\n            values: {\n                fraDato: formaterDatoKompakt(førsteUttaksdag2UkerFørFødsel),\n                tilDato: formaterDatoKompakt(sisteUttak6UkerEtterFødsel),\n                antallDager: Math.round(dagerIgjenRundtFødsel * 10) / 10,\n            },\n        },\n    };\n};\n","import uttaksConstants from 'app/constants';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport { andreAugust2022ReglerGjelder } from './dateUtils';\n\nexport const getBareFarHarRettKontoUtenAktivitetskravUker = (\n    antallBarn: number,\n    morErUfør: boolean,\n    familiehendelsesdato: Date,\n    dekningsgrad: Dekningsgrad,\n    bareFarHarRett: boolean\n): number => {\n    if (!bareFarHarRett) {\n        return 0;\n    }\n\n    if (andreAugust2022ReglerGjelder(familiehendelsesdato) && antallBarn === 1 && !morErUfør) {\n        return 8;\n    }\n    let morUførUker = 0;\n    let flerbarnsukerSomDelAvMinsterett = 0;\n\n    if (morErUfør) {\n        morUførUker = dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? 15 : 19;\n    }\n\n    if (andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n        if (antallBarn === 2) {\n            flerbarnsukerSomDelAvMinsterett = dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? 17 : 21;\n        } else if (antallBarn > 2) {\n            flerbarnsukerSomDelAvMinsterett = dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? 46 : 56;\n        }\n    }\n\n    return flerbarnsukerSomDelAvMinsterett + morUførUker;\n};\n\nexport const getBareFarHarRettFlerbarnsdagerUker = (\n    antallBarn: number,\n    familiehendelsesdato: Date,\n    dekningsgrad: Dekningsgrad,\n    bareFarHarRett: boolean\n): number => {\n    if (!bareFarHarRett || antallBarn === 1) {\n        return 0;\n    }\n\n    //Flerbarnsdager regnes som en del av minsteretten når WLB Regler gjelder, og blir med i kontoen uten aktivitetskrav\n    if (andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n        return 0;\n    }\n\n    let flerbarnsUker = 0;\n\n    if (antallBarn === 2) {\n        flerbarnsUker =\n            dekningsgrad === Dekningsgrad.HUNDRE_PROSENT\n                ? uttaksConstants.ANTALL_UKER_2_BARN_100_PROSENT_UTTAK\n                : uttaksConstants.ANTALL_UKER_2_BARN_80_PROSENT_UTTAK;\n    } else if (antallBarn > 2) {\n        flerbarnsUker =\n            dekningsgrad === Dekningsgrad.HUNDRE_PROSENT\n                ? uttaksConstants.ANTALL_UKER_3_ELLER_FLERE_BARN_100_PROSENT_UTTAK\n                : uttaksConstants.ANTALL_UKER_3_ELLER_FLERE_BARN_80_PROSENT_UTTAK;\n    }\n\n    return flerbarnsUker;\n};\n\nexport const getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB = (\n    antallBarn: number,\n    familiehendelsesdato: Date,\n    dekningsgrad: Dekningsgrad,\n    bareFarHarRett: boolean\n) => {\n    if (!bareFarHarRett) {\n        return 0;\n    }\n    const antallUkerEtterFødselMor = uttaksConstants.ANTALL_UKER_MØDREKVOTE_ETTER_FØDSEL;\n    const antallUkerForeldrepengerFar =\n        dekningsgrad === Dekningsgrad.HUNDRE_PROSENT\n            ? uttaksConstants.ANTALL_UKER_FORELDREPENGER_BARE_FAR_HAR_RETT_100_PROSENT\n            : uttaksConstants.ANTALL_UKER_FORELDREPENGER_BARE_FAR_HAR_RETT_80_PROSENT;\n    const flerbarnsUker = getBareFarHarRettFlerbarnsdagerUker(\n        antallBarn,\n        familiehendelsesdato,\n        dekningsgrad,\n        bareFarHarRett\n    );\n\n    return antallUkerEtterFødselMor + antallUkerForeldrepengerFar + flerbarnsUker;\n};\n","import React from 'react';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { erUttaksmengdeForFarMedmorForHøyTest } from './erUttaksmengdeForFarMedmorForHøyTest';\nimport links from 'app/links/links';\nimport { IntlShape } from 'react-intl';\nimport {\n    getBareFarHarRettKontoUtenAktivitetskravUker,\n    getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB,\n} from 'app/utils/minsterettUtils';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\n\nexport const farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    const tattUtForMangeDagerIPlanen = erUttaksmengdeForFarMedmorForHøyTest(grunnlag).passerer === false;\n    if (\n        !grunnlag.søkerErFarEllerMedmor ||\n        grunnlag.morHarRett ||\n        tattUtForMangeDagerIPlanen ||\n        (grunnlag.søkerErFarEllerMedmor && grunnlag.søkerErAleneOmOmsorg)\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const kontoUtenAktivitetskravUker = getBareFarHarRettKontoUtenAktivitetskravUker(\n        grunnlag.antallBarn,\n        grunnlag.morErUfør,\n        grunnlag.familiehendelsesdato,\n        grunnlag.dekningsgrad,\n        !grunnlag.morHarRett\n    );\n\n    const testPasserer = kontoUtenAktivitetskravUker === 0;\n    const renderAsHtml = true;\n    const link = (_intl: IntlShape) => (msg: any) =>\n        (\n            <a href={links.aktivitetsfriUttakInfo} className=\"lenke\" rel=\"noreferrer\" target=\"_blank\">\n                {msg}\n            </a>\n        );\n\n    if (andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato)) {\n        return {\n            passerer: testPasserer,\n            info: {\n                intlKey: 'uttaksplan.validering.info.rettTilAktivitetsfriUttak.etterWLB',\n                renderAsHtml: renderAsHtml,\n                values: {\n                    antallUker: kontoUtenAktivitetskravUker,\n                    a: link,\n                },\n            },\n        };\n    } else {\n        const bareFarHarRett = grunnlag.søkerErFarEllerMedmor && !grunnlag.morHarRett;\n        const antallUkerPåÅTaUtDager = getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB(\n            grunnlag.antallBarn,\n            grunnlag.familiehendelsesdato,\n            grunnlag.dekningsgrad,\n            bareFarHarRett\n        );\n        return {\n            passerer: testPasserer,\n            info: {\n                intlKey: 'uttaksplan.validering.info.rettTilAktivitetsfriUttak.førWLB',\n                renderAsHtml: renderAsHtml,\n                values: {\n                    antallUker: kontoUtenAktivitetskravUker,\n                    antallUkerÅTaUtDagerUtenAktivitet: antallUkerPåÅTaUtDager,\n                    a: link,\n                },\n            },\n        };\n    }\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { isUttaksperiode, Periode, Uttaksperiode } from 'uttaksplan/types/Periode';\nimport { graderingSkalBesvares } from 'uttaksplan/utils/uttaksskjema/graderingSkalBesvares';\nimport dayjs from 'dayjs';\n\nexport const inneholderUttaksperioderMedUbesvartGradering = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const uttaksperioder = grunnlag.perioder.filter((p: Periode) => isUttaksperiode(p)) as Uttaksperiode[];\n    const perioderMedUbesvartGradering = uttaksperioder\n        .filter((p) =>\n            graderingSkalBesvares(\n                p.type,\n                p.konto,\n                grunnlag.familiehendelsesdato,\n                grunnlag.søkerErFarEllerMedmor,\n                p.erMorForSyk,\n                p.tidsperiode\n            )\n        )\n        //Feilmeldingen skal ikke komme hvis spm om flerbarnsdager skal besvares først (kun for perioder etter fødsel).\n        .filter((p) =>\n            grunnlag.erFlerbarnssøknad\n                ? (dayjs(p.tidsperiode.fom).isSameOrAfter(grunnlag.familiehendelsesdato, 'd') &&\n                      p.ønskerFlerbarnsdager !== undefined) ||\n                  dayjs(p.tidsperiode.fom).isBefore(grunnlag.familiehendelsesdato, 'd')\n                : p\n        )\n        .filter((p) => p.gradert === undefined);\n\n    return {\n        passerer: perioderMedUbesvartGradering.length === 0,\n        info: perioderMedUbesvartGradering.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.inneholderUttaksperioderMedUbesvartGradering',\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { isUttaksperiode, Periode, Uttaksperiode } from 'uttaksplan/types/Periode';\nimport { ønskerFlerbarnsdagerSkalBesvares } from 'uttaksplan/utils/uttaksskjema/ønskerFlerbarnsdagerSkalBesvares';\nimport { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport { UttakRundtFødselÅrsak } from 'app/types/UttakRundtFødselÅrsak';\n\nexport const inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    const uttaksperioder = grunnlag.perioder.filter((p: Periode) => isUttaksperiode(p)) as Uttaksperiode[];\n    const erFlerbarnssøknad = grunnlag.antallBarn > 1;\n    const bareFarMedmorHarRett = grunnlag.søkerErFarEllerMedmor && !grunnlag.erDeltUttak;\n    const erDeltUttakINorge =\n        grunnlag.erDeltUttak &&\n        isAnnenForelderOppgitt(grunnlag.annenForelder) &&\n        grunnlag.annenForelder.harRettPåForeldrepengerINorge;\n    const perioderMedUbesvartSpmOmFlerbarnsdager = uttaksperioder\n        .filter((p) =>\n            ønskerFlerbarnsdagerSkalBesvares(\n                p.type,\n                erFlerbarnssøknad,\n                grunnlag.søkerErFarEllerMedmor,\n                grunnlag.familiehendelsesdato,\n                p.tidsperiode,\n                p.konto,\n                bareFarMedmorHarRett,\n                grunnlag.antallBarn,\n                grunnlag.søkerErAleneOmOmsorg,\n                !!erDeltUttakINorge,\n                p.erMorForSyk ? UttakRundtFødselÅrsak.morErForSyk : undefined\n            )\n        )\n        .filter((p) => p.gradert === undefined);\n\n    return {\n        passerer: perioderMedUbesvartSpmOmFlerbarnsdager.length === 0,\n        info: perioderMedUbesvartSpmOmFlerbarnsdager.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdager',\n            periodeId: periode.id,\n        })),\n    };\n};\n","import React from 'react';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { erUttaksmengdeForFarMedmorForHøyTest } from './erUttaksmengdeForFarMedmorForHøyTest';\nimport links from 'app/links/links';\nimport { IntlShape } from 'react-intl';\nimport {\n    getBareFarHarRettFlerbarnsdagerUker,\n    getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB,\n} from 'app/utils/minsterettUtils';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\n\nexport const farMedmorHarRettPåFlerbarnsdagerTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const tattUtForMangeDagerIPlanen = erUttaksmengdeForFarMedmorForHøyTest(grunnlag).passerer === false;\n    if (\n        !grunnlag.søkerErFarEllerMedmor ||\n        grunnlag.morHarRett ||\n        tattUtForMangeDagerIPlanen ||\n        (grunnlag.søkerErFarEllerMedmor && grunnlag.søkerErAleneOmOmsorg) ||\n        andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato)\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const flerbarnsUker = getBareFarHarRettFlerbarnsdagerUker(\n        grunnlag.antallBarn,\n        grunnlag.familiehendelsesdato,\n        grunnlag.dekningsgrad,\n        !grunnlag.morHarRett\n    );\n    const bareFarHarRett = grunnlag.søkerErFarEllerMedmor && !grunnlag.morHarRett;\n    const antallUkerPåÅTaUtDager = getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB(\n        grunnlag.antallBarn,\n        grunnlag.familiehendelsesdato,\n        grunnlag.dekningsgrad,\n        bareFarHarRett\n    );\n\n    return {\n        passerer: flerbarnsUker === 0,\n        info: {\n            intlKey: 'uttaksplan.validering.info.flerbarnsdagerKanBrukes',\n            renderAsHtml: true,\n            values: {\n                antallUker: flerbarnsUker,\n                antallUkerÅTaUtFlerbarnsdager: antallUkerPåÅTaUtDager,\n                a: (_intl: IntlShape) => (msg: any) =>\n                    (\n                        <a href={links.aktivitetsfriUttakInfo} className=\"lenke\" rel=\"noreferrer\" target=\"_blank\">\n                            {msg}\n                        </a>\n                    ),\n            },\n        },\n    };\n};\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { getBrukteDager } from 'uttaksplan/utils/brukteDagerUtils';\nimport { laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn } from './periodevalideringstester/forSenUttakVedPåfølgendeBarn';\n\nexport const overstigerMinsterettVedToTette = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const { familiehendelsesdato, perioder, stønadskontoer, søkerErFarEllerMedmor, minsterettUkerToTette } = grunnlag;\n    const perioderEtterFørsteStønadsperiodeNyttBarn = perioder.filter((periode) =>\n        laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn(periode, grunnlag.førsteUttaksdagNesteBarnsSak)\n    );\n    if (\n        minsterettUkerToTette === undefined ||\n        minsterettUkerToTette === 0 ||\n        perioderEtterFørsteStønadsperiodeNyttBarn.length === 0\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderFørFørsteStønadsperiodeNyttBarn = perioder.filter(\n        (periode) => !laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn(periode, grunnlag.førsteUttaksdagNesteBarnsSak)\n    );\n    const minsterettMaxAntallUker = minsterettUkerToTette;\n    const minsterettMaxAntallDager = minsterettMaxAntallUker * 5;\n\n    const brukteDagerPerForelderFørFørsteStønadsdagNyttBarn = getBrukteDager(\n        stønadskontoer,\n        perioderFørFørsteStønadsperiodeNyttBarn,\n        familiehendelsesdato\n    );\n    const uttaksdagerFremTilNyttBarnStønadsdag = søkerErFarEllerMedmor\n        ? brukteDagerPerForelderFørFørsteStønadsdagNyttBarn.farMedmor.dagerEgneKvoter +\n          brukteDagerPerForelderFørFørsteStønadsdagNyttBarn.farMedmor.dagerFellesperiode\n        : brukteDagerPerForelderFørFørsteStønadsdagNyttBarn.mor.dagerEgneKvoter +\n          brukteDagerPerForelderFørFørsteStønadsdagNyttBarn.mor.dagerFellesperiode;\n\n    const dagerIgjenÅBrukePåMinsteretten = minsterettMaxAntallDager - uttaksdagerFremTilNyttBarnStønadsdag;\n\n    const brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn = getBrukteDager(\n        stønadskontoer,\n        perioderEtterFørsteStønadsperiodeNyttBarn,\n        familiehendelsesdato\n    );\n    const uttaksdagerEtterNyttBarnStønadsdag = søkerErFarEllerMedmor\n        ? brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn.farMedmor.dagerEgneKvoter +\n          brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn.farMedmor.dagerFellesperiode\n        : brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn.mor.dagerEgneKvoter +\n          brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn.mor.dagerFellesperiode;\n\n    const dagerIgjenAvMinsterett = dagerIgjenÅBrukePåMinsteretten - uttaksdagerEtterNyttBarnStønadsdag;\n\n    return {\n        passerer: dagerIgjenAvMinsterett >= 0,\n        info: {\n            intlKey: 'uttaksplan.validering.info.overstigerMinsterettVedToTette',\n            values: {\n                uker: minsterettMaxAntallUker,\n                forMyeUttak: Math.abs(dagerIgjenAvMinsterett),\n            },\n        },\n    };\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport { laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn } from './periodevalideringstester/forSenUttakVedPåfølgendeBarn';\n\nexport const harPerioderEtterFørsteStønadsdagNesteBarnDerToTette: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    if (grunnlag.minsterettUkerToTette === undefined || grunnlag.minsterettUkerToTette === 0) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderEtterFørsteStønadsperiodeNyttBarn = grunnlag.perioder.filter((periode) =>\n        laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn(periode, grunnlag.førsteUttaksdagNesteBarnsSak)\n    );\n\n    const tekstKey = grunnlag.søkerErFarEllerMedmor\n        ? 'uttaksplan.validering.info.harPerioderEtterFørsteStønadsdagNesteBarnDerToTette.far'\n        : 'uttaksplan.validering.info.harPerioderEtterFørsteStønadsdagNesteBarnDerToTette.mor';\n    return {\n        passerer: perioderEtterFørsteStønadsperiodeNyttBarn.length === 0,\n        info: {\n            intlKey: tekstKey,\n        },\n    };\n};\n","import { inneholderUttaksplanPerioderTest } from './tester/inneholderUttaksplanPerioderTest';\nimport { harMorSøktUgyldigUttakFørsteSeksUkerTest } from './tester/harMorSøktUgyldigUttakFørsteSeksUkerTest';\nimport { stønadskontoInneholderForMyeUttakKunSøkerTest } from './tester/stønadskontoInneholderForMyeUttakKunSøkerTest';\nimport { harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest } from './tester/harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest';\nimport { erUttaksplanBareOppholdTest } from './tester/erUttaksplanBareOppholdTest';\nimport { slutterUttaksplanMedOppholdTest } from './tester/slutterUttaksplanMedOppholdTest';\nimport { starterUttaksplanMedOppholdTest } from './tester/starterUttaksplanMedOppholdTest';\nimport { erUttaksplanGraderingStørreEnnSamtidigUttakTest } from './tester/erUttaksplanGraderingStørreEnnSamtidigUttakTest';\nimport { erTilleggsopplysningerGyldigTest } from './tester/erTilleggsopplysningerGyldigTest';\nimport { harTilleggsopplysningerGyldigeCharsTest } from './tester/harTilleggsopplysningerGyldigeCharsTest';\nimport { harUttaksplanForMangeFlerbarnsdagerTest } from './tester/harUttaksplanForMangeFlerbarnsdagerTest';\nimport { inneholderUttaksplanDatoSomIkkeErUttaksdag } from './tester/inneholderUttaksplanDatoSomIkkeErUttaksdagTest';\nimport { harPerioderManglendeVedleggTest } from './tester/harPerioderManglendeVedleggTest';\nimport { inneholderSenUtsettelsePgaFerieTest } from './tester/inneholderSenUtsettelsePgaFerieTest';\nimport { inneholderTapteDagerTest } from './tester/inneholderTapteDagerTest';\nimport { inneholderBareUtsettelserTest } from './tester/inneholderBareUtsettelserTest';\nimport { inneholderSenUtsettelsePgaArbeidTest } from './tester/inneholderSenUtsettelsePgaArbeidTest';\nimport { overskriverEndringerAnnenPartsPerioder } from './tester/overskriverEndringerAnnenPartsPerioder';\nimport { overlapperPeriodeAndrePerioder } from './tester/overlapperPeriodeAndrePerioderTest';\nimport periodevalideringsregler, { PeriodeValiderRegelKey } from './tester/periodevalideringstester';\nimport { harSøktOmFerieUtenArbeidsforhold } from './tester/harSøktOmFerieUtenArbeidsforholdTest';\nimport { inneholderForMyeFerie } from './tester/inneholderForMyeFerie';\nimport { kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme } from './tester/kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme';\nimport { erUttaksmengdeForFarMedmorForHøyTest } from './tester/erUttaksmengdeForFarMedmorForHøyTest';\nimport { burdeKanskjeSøkeGraderingTest } from './tester/burdeKanskjeSøkeGraderingTest';\nimport { ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest } from './tester/ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest';\nimport { Regel, RegelAlvorlighet } from './utils/types/regelTypes';\nimport { førsteOktober2021ReglerGjelder } from 'app/utils/dateUtils';\nimport { inneholderPerioderUtenAktivitetskrav } from './tester/inneholderPerioderUtenAktivitetskrav';\nimport { inneholderUtsettelserUtenÅrsak } from './tester/inneholderUtsettelserUtenÅrsak';\nimport { farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest } from './tester/farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest';\nimport { harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest } from './tester/harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest';\nimport { farMedMorHarRettPåUttakRundtFødselTest } from './tester/farMedMorHarRettPåUttakRundtFødselTest';\nimport { farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest } from './tester/farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest';\nimport { inneholderUttaksperioderMedUbesvartGradering } from './tester/inneholderUttaksperioderMedUbesvartGradering';\nimport { inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest } from './tester/inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest';\nimport { farMedmorHarRettPåFlerbarnsdagerTest } from './tester/farMedmorHarRettPåFlerbarnsdagerTest';\nimport { overstigerMinsterettVedToTette } from './tester/overstigerMinsterettVedToTette';\nimport { harPerioderEtterFørsteStønadsdagNesteBarnDerToTette } from './tester/harPerioderEtterFørsteStønadsdagNesteBarnDerToTette';\n\nexport enum UttaksplanRegelKey {\n    'planenInneholderIngenPerioder' = 'planenInneholderIngenPerioder',\n    'morHarSøktUgyldigUttakFørsteSeksUker' = 'morHarSøktUgyldigUttakFørsteSeksUker',\n    'farMedmorHarSøktUgyldigUttakEllerUtsettelseFørsteSeksUker' = 'farMedmorHarSøktUgyldigUttakEllerUtsettelseFørsteSeksUker',\n    'farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel' = 'farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel',\n    'harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker' = 'harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker',\n    'farMedmorHarSøktUttakRundtFødselUtenforGyldigPeriode' = 'farMedmorHarSøktUttakRundtFødselUtenforGyldigPeriode',\n    'stønadskontoInneholderForMyeUttakKunSøker' = 'stønadskontoInneholderForMyeUttakKunSøker',\n    'uttaksplanErBareOpphold' = 'uttaksplanErBareOpphold',\n    'uttaksplanStarterMedOpphold' = 'uttaksplanStarterMedOpphold',\n    'uttaksplanSlutterMedOpphold' = 'uttaksplanSlutterMedOpphold',\n    'uttaksplanGraderingStørreEnnSamtidigUttak' = 'uttaksplanGraderingStørreEnnSamtidigUttak',\n    'begrunnelseVedForSenEndringErUgyldig' = 'begrunnelseVedForSenEndringErUgyldig',\n    'begrunnelseVedForSenEndringHarUgyldigeChars' = 'begrunnelseVedForSenEndringHarUgyldigeChars',\n    'uttaksplanHarForMangeFlerbarnsdager' = 'uttaksplanHarForMangeFlerbarnsdager',\n    'uttaksplanInneholderDatoSomIkkeErUttaksdag' = 'uttaksplanInneholderDatoSomIkkeErUttaksdag',\n    'perioderManglerVedlegg' = 'manglendeVedlegg',\n    'inneholderSenUtsettelsePgaFerie' = 'inneholderSenUtsettelsePgaFerieTest',\n    'inneholderSenUtsettelsePgaArbeid' = 'inneholderSenUtsettelsePgaArbeidTest',\n    'inneholderTapteDager' = 'inneholderTapteDager',\n    'inneholderBareUtsettelser' = 'inneholderBareUtsettelser',\n    'inneholderForMyeFerie' = 'inneholderForMyeFerie',\n    'endringerOverskriverAnnenPartsPerioder' = 'endringerOverskriverAnnenPartsPerioder',\n    'periodeOverlapperAndrePerioder' = 'periodeOverlapperAndrePerioder',\n    'harSøktOmFerieUtenArbeidsforhold' = 'harSøktOmFerieUtenArbeidsforhold',\n    'kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme' = 'kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme',\n    'uttaksmengdeForFarMedmorErForHøy' = 'uttaksmengdeForFarMedmorErForHøy',\n    'burdeKanskjeSøkeGradering' = 'burdeKanskjeSøkeGradering',\n    'ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato' = 'ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato',\n    'inneholderPerioderUtenAktivitetskrav' = 'inneholderPerioderUtenAktivitetskrav',\n    'inneholderUtsettelserUtenÅrsak' = 'inneholderUtsettelserUtenÅrsak',\n    'farMedMorHarRettPåUttakRundtFødsel' = 'farMedMorHarRettPåUttakRundtFødsel',\n    'farMedmorHarRettPåForeldrepengerUtenAktivitetskrav' = 'farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest',\n    'farMedmorHarRettPåFlerbarnsdager' = 'farMedmorHarRettPåFlerbarnsdagerTest',\n    'inneholderUttaksperioderMedUbesvartGradering' = 'inneholderUttaksperioderMedUbesvartGradering',\n    'inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest' = 'inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest',\n    'overstigerMinsterettVedToTette' = 'overstigerMinsterettVedToTette',\n    'harPerioderEtterFørsteStønadsdagNesteBarnDerToTette' = 'harPerioderEtterFørsteStønadsdagNesteBarnDerToTette',\n}\n\nexport type RegelKey = UttaksplanRegelKey | PeriodeValiderRegelKey;\n\nconst uttaksplanValideringRegler = (familiehendelsesdato: Date): Regel[] => [\n    {\n        key: UttaksplanRegelKey.planenInneholderIngenPerioder,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUttaksplanPerioderTest,\n    },\n    {\n        key: UttaksplanRegelKey.stønadskontoInneholderForMyeUttakKunSøker,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: stønadskontoInneholderForMyeUttakKunSøkerTest,\n    },\n    {\n        key: UttaksplanRegelKey.morHarSøktUgyldigUttakFørsteSeksUker,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harMorSøktUgyldigUttakFørsteSeksUkerTest,\n    },\n    {\n        key: UttaksplanRegelKey.farMedmorHarSøktUgyldigUttakEllerUtsettelseFørsteSeksUker,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest,\n    },\n    {\n        key: UttaksplanRegelKey.farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest,\n    },\n    {\n        key: UttaksplanRegelKey.harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksmengdeForFarMedmorErForHøy,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erUttaksmengdeForFarMedmorForHøyTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanErBareOpphold,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erUttaksplanBareOppholdTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanStarterMedOpphold,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: starterUttaksplanMedOppholdTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanSlutterMedOpphold,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: slutterUttaksplanMedOppholdTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanGraderingStørreEnnSamtidigUttak,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erUttaksplanGraderingStørreEnnSamtidigUttakTest,\n    },\n    {\n        key: UttaksplanRegelKey.begrunnelseVedForSenEndringErUgyldig,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erTilleggsopplysningerGyldigTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanHarForMangeFlerbarnsdager,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harUttaksplanForMangeFlerbarnsdagerTest,\n    },\n    {\n        key: UttaksplanRegelKey.begrunnelseVedForSenEndringHarUgyldigeChars,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harTilleggsopplysningerGyldigeCharsTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanInneholderDatoSomIkkeErUttaksdag,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUttaksplanDatoSomIkkeErUttaksdag,\n    },\n    {\n        key: UttaksplanRegelKey.perioderManglerVedlegg,\n        alvorlighet: RegelAlvorlighet.ADVARSEL,\n        test: harPerioderManglendeVedleggTest,\n        slåsSammenVedOppsummering: true,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderSenUtsettelsePgaFerie,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: inneholderSenUtsettelsePgaFerieTest,\n        slåsSammenVedOppsummering: true,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderSenUtsettelsePgaArbeid,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: inneholderSenUtsettelsePgaArbeidTest,\n        slåsSammenVedOppsummering: true,\n    },\n    {\n        key: UttaksplanRegelKey.farMedMorHarRettPåUttakRundtFødsel,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: farMedMorHarRettPåUttakRundtFødselTest,\n        skjulesIPeriode: true,\n    },\n    {\n        key: UttaksplanRegelKey.farMedmorHarRettPåForeldrepengerUtenAktivitetskrav,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest,\n        skjulesIPeriode: true,\n    },\n    {\n        key: UttaksplanRegelKey.farMedmorHarRettPåFlerbarnsdager,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: farMedmorHarRettPåFlerbarnsdagerTest,\n        skjulesIPeriode: true,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderTapteDager,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: inneholderTapteDagerTest,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderBareUtsettelser,\n        alvorlighet: førsteOktober2021ReglerGjelder(familiehendelsesdato)\n            ? RegelAlvorlighet.FEIL\n            : RegelAlvorlighet.INFO,\n        test: inneholderBareUtsettelserTest,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderForMyeFerie,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderForMyeFerie,\n    },\n    {\n        key: UttaksplanRegelKey.endringerOverskriverAnnenPartsPerioder,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: overskriverEndringerAnnenPartsPerioder,\n        slåsSammenVedOppsummering: false,\n    },\n    {\n        key: UttaksplanRegelKey.periodeOverlapperAndrePerioder,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: overlapperPeriodeAndrePerioder,\n        slåsSammenVedOppsummering: false,\n        skjulesIOppsummering: true,\n    },\n    {\n        key: UttaksplanRegelKey.harSøktOmFerieUtenArbeidsforhold,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harSøktOmFerieUtenArbeidsforhold,\n    },\n    {\n        key: UttaksplanRegelKey.kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme,\n    },\n    {\n        key: UttaksplanRegelKey.burdeKanskjeSøkeGradering,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: burdeKanskjeSøkeGraderingTest,\n    },\n    {\n        key: UttaksplanRegelKey.ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato,\n        alvorlighet: RegelAlvorlighet.ADVARSEL,\n        test: ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderPerioderUtenAktivitetskrav,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderPerioderUtenAktivitetskrav,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderUttaksperioderMedUbesvartGradering,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUttaksperioderMedUbesvartGradering,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderUtsettelserUtenÅrsak,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUtsettelserUtenÅrsak,\n    },\n    {\n        key: UttaksplanRegelKey.overstigerMinsterettVedToTette,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: overstigerMinsterettVedToTette,\n    },\n    {\n        key: UttaksplanRegelKey.harPerioderEtterFørsteStønadsdagNesteBarnDerToTette,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: harPerioderEtterFørsteStønadsdagNesteBarnDerToTette,\n    },\n];\n\nconst uttaksplanRegler = (familiehendelsesDato: Date) => [\n    ...uttaksplanValideringRegler(familiehendelsesDato),\n    ...periodevalideringsregler,\n];\n\nexport default uttaksplanRegler;\n","import { groupBy } from 'lodash';\nimport uttaksplanRegler from '.';\nimport { getRegelAvvik, hasRegelFeil, regelHarAvvik, regelPasserer } from './utils/regelUtils';\nimport { Søknadsinfo } from './utils/types/Søknadsinfo';\nimport { RegelStatus, UttaksplanRegelTestresultat } from './utils/types/regelTypes';\n\nconst REGEL_INTL_PREFIX = 'uttaksplan.validering';\n\nexport const sjekkUttaksplanOppMotRegler = (valideringsgrunnlag: Søknadsinfo): RegelStatus[] => {\n    return uttaksplanRegler(valideringsgrunnlag.familiehendelsesdato).map((regel) => {\n        const resultat = regel.test(valideringsgrunnlag);\n        return resultat.passerer\n            ? regelPasserer(regel)\n            : regelHarAvvik(regel, REGEL_INTL_PREFIX, resultat.info, resultat.periodeId);\n    });\n};\n\nexport const validerUttaksplan = (søknadsinfo: Søknadsinfo): UttaksplanRegelTestresultat => {\n    const resultat = sjekkUttaksplanOppMotRegler(søknadsinfo);\n\n    const avvik = getRegelAvvik(resultat);\n    const avvikPerPeriode = groupBy(\n        avvik.filter((a) => a.periodeId !== undefined),\n        (r) => r.periodeId\n    );\n\n    const harFeil = hasRegelFeil(avvik);\n    return {\n        resultat,\n        avvik,\n        avvikPerPeriode,\n        harFeil,\n    };\n};\n","import * as React from 'react';\nimport Veileder, { VeilederAnsiktstype, VeilederStil } from '../../../app/components/veileder/Veileder';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport { FormattedMessage } from 'react-intl';\nimport { VeilederMessage } from './types';\nimport VeilederMeldinger from './VeilederMeldinger';\nimport AriaText from 'uttaksplan/components/aria-text/AriaText';\n\ninterface Props {\n    messages: VeilederMessage[];\n    paneltype?: 'normal' | 'plakat';\n    kompakt?: boolean;\n    veilederStil?: VeilederStil;\n    ariaTittel?: string;\n    skjulMeldingIkon?: boolean;\n}\n\nconst VeilederInfo: React.FunctionComponent<Props> = ({\n    messages,\n    kompakt = true,\n    paneltype = 'normal',\n    veilederStil = 'kompakt',\n    skjulMeldingIkon = false,\n    ariaTittel,\n}) => {\n    const harFeil = messages.some((m) => m.type === 'feil');\n    const harAdvarsler = messages.some((m) => m.type === 'advarsel');\n\n    let ansikt: VeilederAnsiktstype;\n    if (harFeil) {\n        ansikt = 'skeptisk';\n    } else if (harAdvarsler) {\n        ansikt = 'undrende';\n    } else {\n        ansikt = 'glad';\n    }\n\n    return (\n        <Veilederpanel\n            type={paneltype}\n            kompakt={kompakt}\n            svg={<Veileder stil={veilederStil} ansikt={ansikt} farge=\"transparent\" />}\n            fargetema={harFeil ? 'feilmelding' : 'normal'}\n        >\n            {ariaTittel && (\n                <AriaText tag=\"h2\">\n                    <FormattedMessage id=\"uttaksplan.regelAvvik.ariaTittel\" />\n                </AriaText>\n            )}\n            <VeilederMeldinger meldinger={messages} stil=\"transparent\" skjulMeldingIkon={skjulMeldingIkon} />\n        </Veilederpanel>\n    );\n};\n\nexport default VeilederInfo;\n","import { IntlShape } from 'react-intl';\n\nexport const intlHasKey = (intl: IntlShape, key: string) => {\n    return intl.messages[key] !== undefined;\n};\n","import { VeiledermeldingerPerPeriode, VeilederMessage } from './types';\nimport { IntlShape } from 'react-intl';\nimport { RegelAvvik } from '../utils/types/regelTypes';\nimport { intlHasKey } from 'app/intl/utils';\nimport { getRegelIntlValues, trimRelaterteRegelAvvik } from '../utils/regelUtils';\nimport { UttaksplanAvvikType } from '../utils/types/UttaksplanAvvikType';\nimport { groupBy } from 'lodash';\n\nexport const veilederMessageAvsnitt = (\n    førsteTekst: VeilederMessage[],\n    andreTekst: VeilederMessage[],\n    visInfoOmPrematuruker: boolean\n): VeilederMessage[] => {\n    return visInfoOmPrematuruker === false ? førsteTekst : førsteTekst.concat(andreTekst);\n};\n\nconst mapAvvikTilMessage = (avvik: RegelAvvik, intl: IntlShape): VeilederMessage => {\n    const { info } = avvik;\n    const tittelIntlKey = `${info.intlKey}.tittel`;\n    const harTittel = intlHasKey(intl, tittelIntlKey);\n    return {\n        type: avvik.regel.alvorlighet,\n        contentIntlKey: info.intlKey,\n        titleIntlKey: harTittel ? tittelIntlKey : undefined,\n        formatContentAsHTML: info.renderAsHtml,\n        values: getRegelIntlValues(intl, info),\n        periodeId: avvik.regel.skjulesIPeriode !== true ? avvik.periodeId : undefined,\n        skjulesIOppsummering: avvik.regel.skjulesIOppsummering,\n        avvikType: avvik.regel.avvikType as UttaksplanAvvikType,\n    };\n};\n\nexport const getUttaksplanVeilederinfo = (\n    avvik: RegelAvvik[],\n    intl: IntlShape,\n    grupperAvvik: boolean\n): VeilederMessage[] => {\n    return trimRelaterteRegelAvvik(avvik, grupperAvvik).map((a) => mapAvvikTilMessage(a, intl));\n};\n\nexport const getPeriodelisteMeldinger = (veilederinfo: VeilederMessage[]): VeiledermeldingerPerPeriode => {\n    const meldinger = veilederinfo.filter((info) => info.periodeId !== undefined);\n    return groupBy(meldinger, (info) => info.periodeId);\n};\n","import React from 'react';\n\nimport throttle from 'lodash.throttle';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\nimport { injectIntl, IntlShape } from 'react-intl';\nimport { Block, intlUtils, UtvidetInformasjon } from '@navikt/fp-common';\nimport { tilleggsopplysningerMaxLength } from 'uttaksplan/validering/tester/erTilleggsopplysningerGyldigTest';\nimport { Textarea } from 'nav-frontend-skjema';\nimport { Attachment } from 'app/types/Attachment';\n\ninterface OwnProps {\n    begrunnelse?: string;\n    vedlegg?: Attachment[];\n    onBegrunnelseTekstChange: (begrunnelse: string) => void;\n    //onVedleggChange: (vedlegg: AttachmentType[]) => void;\n    intl: IntlShape;\n}\n\ntype Props = OwnProps;\n\ninterface State {\n    begrunnelse: string;\n}\n\nconst getLabel = (intl: IntlShape) => {\n    return (\n        <>\n            <Element>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.label')}</Element>\n            <UtvidetInformasjon apneLabel={intlUtils(intl, 'uttaksplan.tilleggsopplysninger.apneLabel')}>\n                <div style={{ backgroundColor: '#f1f1f1', padding: '1.5rem' }}>\n                    <Block margin=\"s\">\n                        <Element>\n                            {intlUtils(intl, 'uttaksplan.tilleggsopplysninger.sykdomTilbakeITid.overskrift')}\n                        </Element>\n                        <Normaltekst>\n                            {intlUtils(intl, 'uttaksplan.tilleggsopplysninger.sykdomTilbakeITid')}\n                        </Normaltekst>\n                    </Block>\n                    <Block margin=\"s\">\n                        <Element>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.uttak.overskrift')}</Element>\n                        <Normaltekst>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.uttak')}</Normaltekst>\n                    </Block>\n                    <Block margin=\"s\">\n                        <Element>\n                            {intlUtils(\n                                intl,\n                                'uttaksplan.tilleggsopplysninger.utsettelsearbeidellergradering.overskrift'\n                            )}\n                        </Element>\n                        <Normaltekst>\n                            {intlUtils(intl, 'uttaksplan.tilleggsopplysninger.utsettelsearbeidellergradering')}\n                        </Normaltekst>\n                    </Block>\n                    <Element>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.sykdom.overskrift')}</Element>\n                    <Normaltekst>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.sykdom')}</Normaltekst>\n                </div>\n            </UtvidetInformasjon>\n        </>\n    );\n};\n\nexport type TextareaChangeEvent = React.ChangeEvent<HTMLTextAreaElement>;\n\nclass OppgiTilleggsopplysninger extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            begrunnelse: this.props.begrunnelse || '',\n        };\n\n        this.throttledOnChange = throttle(this.throttledOnChange, 2000);\n    }\n\n    throttledOnChange = () => {\n        this.props.onBegrunnelseTekstChange(this.state.begrunnelse);\n    };\n\n    handleBegrunnelseChange = (e: TextareaChangeEvent) => {\n        this.setState(\n            {\n                begrunnelse: e.target.value,\n            },\n            this.throttledOnChange\n        );\n    };\n\n    render() {\n        const { intl } = this.props;\n\n        return (\n            <div className=\"blokk-m\">\n                <Block margin=\"l\">\n                    <Textarea\n                        value={this.state.begrunnelse}\n                        maxLength={tilleggsopplysningerMaxLength}\n                        name=\"begrunnelseForSenEndring\"\n                        label={getLabel(intl)}\n                        onChange={this.handleBegrunnelseChange}\n                    />\n                </Block>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(OppgiTilleggsopplysninger);\n","import React, { FunctionComponent } from 'react';\nimport Modal from 'nav-frontend-modal';\nimport { Normaltekst, Undertittel } from 'nav-frontend-typografi';\nimport { Hovedknapp, Knapp } from 'nav-frontend-knapper';\nimport { bemUtils, Block } from '@navikt/fp-common';\n\nimport './slettUttaksplanModal.less';\nimport { FormattedMessage } from 'react-intl';\n\ninterface Props {\n    isOpen: boolean;\n    erEndringssøknad: boolean;\n    onClose: () => void;\n    handleSlettUttaksplanModalBekreft: () => void;\n}\n\nconst SlettUttaksplanModal: FunctionComponent<Props> = ({\n    isOpen,\n    erEndringssøknad,\n    onClose,\n    handleSlettUttaksplanModalBekreft,\n}) => {\n    const bem = bemUtils('slettUttaksplanModal');\n\n    let innhold1Id = 'uttaksplan.slettPlan.innhold1.førstegangssøknad';\n    let innhold2Id = 'uttaksplan.slettPlan.innhold2.førstegangssøknad';\n    if (erEndringssøknad) {\n        innhold1Id = 'uttaksplan.slettPlan.innhold1.endringssøknad';\n        innhold2Id = 'uttaksplan.slettPlan.innhold2.endringssøknad';\n    }\n\n    return (\n        <Modal\n            className={bem.block}\n            isOpen={isOpen}\n            closeButton={true}\n            onRequestClose={onClose}\n            contentLabel=\"Slett uttaksplanen din\"\n        >\n            <div className={bem.element('content')}>\n                <Block padBottom=\"l\">\n                    <Undertittel>\n                        <FormattedMessage id=\"uttaksplan.slettPlan.modal.tittel\" />\n                    </Undertittel>\n                    <Normaltekst>\n                        <FormattedMessage id={innhold1Id} />\n                    </Normaltekst>\n                    <br />\n                    <Normaltekst>\n                        <FormattedMessage id={innhold2Id} />\n                    </Normaltekst>\n                </Block>\n                <div className={bem.element('knappWrapper')}>\n                    <Hovedknapp htmlType=\"button\" onClick={handleSlettUttaksplanModalBekreft}>\n                        <FormattedMessage id=\"uttaksplan.slettPlan.slett\" />\n                    </Hovedknapp>\n                    <Knapp onClick={onClose}>\n                        <FormattedMessage id=\"uttaksplan.slettPlan.avbryt\" />\n                    </Knapp>\n                </div>\n            </div>\n        </Modal>\n    );\n};\n\nexport default SlettUttaksplanModal;\n","import { Periode } from 'uttaksplan/types/Periode';\nimport { getPeriodeHullEllerPeriodeUtenUttak } from './uttaksplanbuilderUtils';\n\ninterface SlettPeriodeParams {\n    perioder: Periode[];\n    slettetPeriode: Periode;\n    familiehendelsesdato: Date;\n    harAktivitetskravIPeriodeUtenUttak: boolean;\n    erAdopsjon: boolean;\n    bareFarHarRett: boolean;\n    erFarEllerMedmor: boolean;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n}\n\nexport const slettPeriode = ({\n    perioder,\n    slettetPeriode,\n    familiehendelsesdato,\n    harAktivitetskravIPeriodeUtenUttak,\n    erAdopsjon,\n    bareFarHarRett,\n    erFarEllerMedmor,\n    førsteUttaksdagNesteBarnsSak,\n}: SlettPeriodeParams): Periode[] => {\n    const result: Periode[] = perioder.reduce((res, periode, index) => {\n        if (index === 0 && periode.id === slettetPeriode.id) {\n            return res;\n        }\n\n        if (periode.id === slettetPeriode.id) {\n            res.push(\n                ...getPeriodeHullEllerPeriodeUtenUttak(\n                    slettetPeriode.tidsperiode,\n                    harAktivitetskravIPeriodeUtenUttak,\n                    familiehendelsesdato,\n                    erAdopsjon,\n                    bareFarHarRett,\n                    erFarEllerMedmor,\n                    førsteUttaksdagNesteBarnsSak\n                )\n            );\n            return res;\n        }\n\n        res.push(periode);\n        return res;\n    }, [] as Periode[]);\n\n    return result;\n};\n","import { Periode } from 'uttaksplan/types/Periode';\nimport { leggTilPeriode } from './leggTilPeriode';\nimport { slettPeriode } from './slettPeriode';\nimport { slåSammenLikePerioder } from './uttaksplanbuilderUtils';\n\ninterface OppdaterPeriodeParams {\n    perioder: Periode[];\n    endretPeriode: Periode;\n    originalPeriode: Periode;\n    familiehendelsesdato: Date;\n    harAktivitetskravIPeriodeUtenUttak: boolean;\n    erAdopsjon: boolean;\n    bareFarHarRett: boolean;\n    erFarEllerMedmor: boolean;\n    annenPartsUttak: Periode[] | undefined;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n}\n\nexport const oppdaterPeriode = ({\n    perioder,\n    endretPeriode,\n    originalPeriode,\n    familiehendelsesdato,\n    harAktivitetskravIPeriodeUtenUttak,\n    erAdopsjon,\n    bareFarHarRett,\n    erFarEllerMedmor,\n    annenPartsUttak,\n    førsteUttaksdagNesteBarnsSak,\n}: OppdaterPeriodeParams): Periode[] => {\n    const perioderSlettetEndretPeriode = slåSammenLikePerioder(\n        slettPeriode({\n            perioder,\n            slettetPeriode: originalPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        }),\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak,\n        annenPartsUttak\n    );\n\n    return slåSammenLikePerioder(\n        leggTilPeriode({\n            perioder: perioderSlettetEndretPeriode,\n            nyPeriode: endretPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        }),\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak,\n        annenPartsUttak\n    );\n};\n","import { starterUttaksperiodeFørFødsel } from 'app/utils/wlbUtils';\nimport {\n    isForeldrepengerFørFødselUttaksperiode,\n    isInfoPeriode,\n    isUtsettelsesperiode,\n    Periode,\n} from 'uttaksplan/types/Periode';\nimport { leggTilPeriode } from './leggTilPeriode';\nimport { oppdaterPeriode } from './oppdaterPeriode';\nimport { slettPeriode } from './slettPeriode';\nimport {\n    finnOgSettInnHull,\n    fjernUnødvendigeHull,\n    settInnAnnenPartsUttak,\n    slåSammenLikePerioder,\n} from './uttaksplanbuilderUtils';\n\nconst leggTilPeriodeOgBuild = (\n    bevegeligePerioder: Periode[],\n    fastePerioder: Periode[],\n    nyPeriode: Periode,\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    annenPartsUttak: Periode[] | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n) => {\n    let nyePerioder = slåSammenLikePerioder(\n        leggTilPeriode({\n            perioder: bevegeligePerioder,\n            nyPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        }),\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak\n    );\n\n    fastePerioder.forEach((fastPeriode) => {\n        nyePerioder = leggTilPeriode({\n            perioder: nyePerioder,\n            nyPeriode: fastPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        });\n    });\n\n    if (annenPartsUttak) {\n        nyePerioder = finnOgSettInnHull(\n            settInnAnnenPartsUttak(nyePerioder, annenPartsUttak, familiehendelsesdato, førsteUttaksdagNesteBarnsSak),\n            harAktivitetskravIPeriodeUtenUttak,\n            familiehendelsesdato,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak\n        );\n    }\n\n    return nyePerioder;\n};\n\nconst oppdaterPeriodeOgBuild = (\n    endretPeriode: Periode,\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    annenPartsUttak: Periode[] | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n) => {\n    const originalPeriode = perioder.find((p) => p.id === endretPeriode.id)!;\n\n    let oppdatertePerioder = fjernUnødvendigeHull(\n        oppdaterPeriode({\n            perioder,\n            endretPeriode,\n            originalPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            annenPartsUttak,\n            førsteUttaksdagNesteBarnsSak,\n        })\n    );\n\n    if (annenPartsUttak) {\n        oppdatertePerioder = finnOgSettInnHull(\n            oppdatertePerioder,\n            harAktivitetskravIPeriodeUtenUttak,\n            familiehendelsesdato,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak\n        );\n        oppdatertePerioder = settInnAnnenPartsUttak(\n            oppdatertePerioder,\n            annenPartsUttak,\n            familiehendelsesdato,\n            førsteUttaksdagNesteBarnsSak\n        );\n    }\n\n    return finnOgSettInnHull(\n        oppdatertePerioder,\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak\n    );\n};\n\nconst slettPeriodeOgBuild = (\n    perioder: Periode[],\n    slettetPeriode: Periode,\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    annenPartsUttak: Periode[] | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n) => {\n    let nyePerioder = fjernUnødvendigeHull(\n        slåSammenLikePerioder(\n            slettPeriode({\n                perioder,\n                slettetPeriode,\n                familiehendelsesdato,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                førsteUttaksdagNesteBarnsSak,\n            }),\n            familiehendelsesdato,\n            førsteUttaksdagNesteBarnsSak\n        )\n    );\n\n    if (annenPartsUttak) {\n        nyePerioder = finnOgSettInnHull(\n            nyePerioder,\n            harAktivitetskravIPeriodeUtenUttak,\n            familiehendelsesdato,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak\n        );\n        nyePerioder = settInnAnnenPartsUttak(\n            nyePerioder,\n            annenPartsUttak,\n            familiehendelsesdato,\n            førsteUttaksdagNesteBarnsSak\n        );\n    }\n\n    return finnOgSettInnHull(\n        nyePerioder,\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak\n    );\n};\n\nconst getFastePerioder = (perioder: Periode[], familiehendelsesdato: Date): Periode[] => {\n    return perioder.filter(\n        (p) =>\n            isUtsettelsesperiode(p) ||\n            isForeldrepengerFørFødselUttaksperiode(p) ||\n            starterUttaksperiodeFørFødsel(p, familiehendelsesdato)\n    );\n};\n\nconst getBevegeligePerioder = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n): Periode[] => {\n    return finnOgSettInnHull(\n        perioder.filter(\n            (p) =>\n                !isUtsettelsesperiode(p) &&\n                !isForeldrepengerFørFødselUttaksperiode(p) &&\n                !starterUttaksperiodeFørFødsel(p, familiehendelsesdato) &&\n                !isInfoPeriode(p)\n        ),\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak\n    );\n};\n\nconst getAnnenPartsUttak = (perioder: Periode[]): Periode[] => {\n    return perioder.filter((p) => isInfoPeriode(p));\n};\n\nconst Uttaksplanbuilder = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n    opprinneligPlan?: Periode[]\n) => {\n    const perioderUtenAnnenPart = finnOgSettInnHull(\n        perioder.filter((p) => !isInfoPeriode(p)),\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak\n    );\n    const fastePerioder = getFastePerioder(perioderUtenAnnenPart, familiehendelsesdato);\n    const bevegeligePerioder = getBevegeligePerioder(\n        perioderUtenAnnenPart,\n        familiehendelsesdato,\n        harAktivitetskravIPeriodeUtenUttak,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak\n    );\n    let annenPartsUttak: Periode[] | undefined = undefined;\n\n    if (opprinneligPlan) {\n        annenPartsUttak = getAnnenPartsUttak(opprinneligPlan);\n    }\n\n    return {\n        leggTilPeriode: (nyPeriode: Periode) =>\n            leggTilPeriodeOgBuild(\n                bevegeligePerioder,\n                fastePerioder,\n                nyPeriode,\n                familiehendelsesdato,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                annenPartsUttak,\n                førsteUttaksdagNesteBarnsSak\n            ),\n        leggTilPerioder: (nyePerioder: Periode[]) => {\n            let resultat: Periode[] = [];\n            nyePerioder.forEach((periode, index) => {\n                if (index === 0) {\n                    resultat = leggTilPeriodeOgBuild(\n                        bevegeligePerioder,\n                        fastePerioder,\n                        periode,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        annenPartsUttak,\n                        førsteUttaksdagNesteBarnsSak\n                    );\n                } else {\n                    const nyAnnenPartsUttak = getAnnenPartsUttak(resultat);\n                    const nyFastePerioder = getFastePerioder(resultat, familiehendelsesdato);\n                    const nyBevegeligePerioder = getBevegeligePerioder(\n                        resultat,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        førsteUttaksdagNesteBarnsSak\n                    );\n                    resultat = leggTilPeriodeOgBuild(\n                        nyBevegeligePerioder,\n                        nyFastePerioder,\n                        periode,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        nyAnnenPartsUttak,\n                        førsteUttaksdagNesteBarnsSak\n                    );\n                }\n            });\n            return resultat;\n        },\n        oppdaterPeriode: (endretPeriode: Periode) =>\n            oppdaterPeriodeOgBuild(\n                endretPeriode,\n                perioderUtenAnnenPart,\n                familiehendelsesdato,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                annenPartsUttak,\n                førsteUttaksdagNesteBarnsSak\n            ),\n        oppdaterPerioder: (oppdatertePerioder: Periode[]) => {\n            let resultat: Periode[] = [];\n            oppdatertePerioder.forEach((endretPeriode, index) => {\n                if (index === 0) {\n                    resultat = oppdaterPeriodeOgBuild(\n                        endretPeriode,\n                        perioderUtenAnnenPart,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        annenPartsUttak,\n                        førsteUttaksdagNesteBarnsSak\n                    );\n                } else {\n                    const nyAnnenPartsUttak = getAnnenPartsUttak(resultat);\n                    const nyFastePerioder = getFastePerioder(resultat, familiehendelsesdato);\n                    const nyBevegeligePerioder = getBevegeligePerioder(\n                        resultat,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        førsteUttaksdagNesteBarnsSak\n                    );\n                    resultat = leggTilPeriodeOgBuild(\n                        nyBevegeligePerioder,\n                        nyFastePerioder,\n                        endretPeriode,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        nyAnnenPartsUttak,\n                        førsteUttaksdagNesteBarnsSak\n                    );\n                }\n            });\n            return resultat;\n        },\n        slettPeriode: (slettetPeriode: Periode) =>\n            slettPeriodeOgBuild(\n                perioderUtenAnnenPart,\n                slettetPeriode,\n                familiehendelsesdato,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                annenPartsUttak,\n                førsteUttaksdagNesteBarnsSak\n            ),\n    };\n};\n\nexport default Uttaksplanbuilder;\n","import { getTypedFormComponents, YesOrNo } from '@navikt/sif-common-formik/lib';\n\nexport enum UttaksplanFormField {\n    ønskerAutomatiskJustering = 'ønskerAutomatiskJustering',\n}\n\nexport interface UttaksplanFormData {\n    [UttaksplanFormField.ønskerAutomatiskJustering]: YesOrNo;\n}\n\nexport const UttaksplanFormComponents = getTypedFormComponents<UttaksplanFormField, UttaksplanFormData, string>();\n","import { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { convertBooleanOrUndefinedToYesOrNo, convertYesOrNoOrUndefinedToBoolean } from 'app/utils/formUtils';\nimport { UttaksplanFormData, UttaksplanFormField } from './UttaksplanFormConfig';\n\nexport const cleanUttaksplanFormData = (\n    values: UttaksplanFormData,\n    visibility: QuestionVisibility<UttaksplanFormField, undefined>\n): UttaksplanFormData => {\n    const cleanedData: UttaksplanFormData = {\n        ønskerAutomatiskJustering: visibility.isVisible(UttaksplanFormField.ønskerAutomatiskJustering)\n            ? values.ønskerAutomatiskJustering\n            : YesOrNo.UNANSWERED,\n    };\n\n    return cleanedData;\n};\n\nexport const mapUttaksplanFormToState = (values: Partial<UttaksplanFormData>): boolean | undefined => {\n    return convertYesOrNoOrUndefinedToBoolean(values.ønskerAutomatiskJustering);\n};\n\nexport const mapUttaksplanFormValueToState = (value: YesOrNo): boolean | undefined => {\n    return convertYesOrNoOrUndefinedToBoolean(value);\n};\n\nexport const getUttaksplanFormInitialValues = (ønskerAutomatiskJustering: boolean | undefined): UttaksplanFormData => {\n    return {\n        ønskerAutomatiskJustering:\n            ønskerAutomatiskJustering !== undefined\n                ? convertBooleanOrUndefinedToYesOrNo(ønskerAutomatiskJustering)\n                : YesOrNo.UNANSWERED,\n    };\n};\n","import { Block, intlUtils } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport actionCreator from 'app/context/action/actionCreator';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { UttaksplanFormComponents, UttaksplanFormField } from 'app/steps/uttaksplan/UttaksplanFormConfig';\nimport { mapUttaksplanFormValueToState } from 'app/steps/uttaksplan/UttaksplanFormUtils';\nimport dayjs from 'dayjs';\nimport AlertStripe from 'nav-frontend-alertstriper';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { isOverføringsperiode, isUttaksperiode, Periode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\n\ninterface Props {\n    termindato: Date;\n    perioderMedUttakRundtFødsel: Periode[];\n    antallBarn: number;\n    visibility: QuestionVisibility<UttaksplanFormField, undefined>;\n}\nconst AutomatiskJusteringForm: FunctionComponent<Props> = ({\n    termindato,\n    perioderMedUttakRundtFødsel,\n    antallBarn,\n    visibility,\n}) => {\n    const intl = useIntl();\n    const uttaksdagPåEllerEtterTermin = Uttaksdagen(termindato).denneEllerNeste();\n    const { dispatch, state } = useForeldrepengesøknadContext();\n    const svarteJaMenFlerePerioderInnen6Uker =\n        state.brukerSvarteJaPåAutoJustering && perioderMedUttakRundtFødsel.length > 1;\n    const svarteJaMenStarterIkkeLengerPåTermin =\n        state.brukerSvarteJaPåAutoJustering &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        !dayjs(perioderMedUttakRundtFødsel[0].tidsperiode.fom).isSame(uttaksdagPåEllerEtterTermin, 'day');\n    const svarteJaMenEndretPeriodenPåTermin =\n        state.brukerSvarteJaPåAutoJustering &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        dayjs(perioderMedUttakRundtFødsel[0].tidsperiode.fom).isSame(uttaksdagPåEllerEtterTermin, 'day') &&\n        ((isUttaksperiode(perioderMedUttakRundtFødsel[0]) &&\n            (perioderMedUttakRundtFødsel[0].konto !== StønadskontoType.Fedrekvote ||\n                !perioderMedUttakRundtFødsel[0].ønskerSamtidigUttak)) ||\n            isOverføringsperiode(perioderMedUttakRundtFødsel[0]));\n    const svarteJaMenEndretPeriodenTilØnskerFlerbarnsdager =\n        state.brukerSvarteJaPåAutoJustering &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        dayjs(perioderMedUttakRundtFødsel[0].tidsperiode.fom).isSame(uttaksdagPåEllerEtterTermin, 'day') &&\n        isUttaksperiode(perioderMedUttakRundtFødsel[0]) &&\n        perioderMedUttakRundtFødsel[0].konto === StønadskontoType.Fedrekvote &&\n        perioderMedUttakRundtFødsel[0].ønskerFlerbarnsdager === true;\n    let infoTekstId = '';\n    if (svarteJaMenFlerePerioderInnen6Uker) {\n        infoTekstId = 'uttaksplan.automatiskJustering.info.hvisFlerePerioder';\n    }\n    if (svarteJaMenStarterIkkeLengerPåTermin) {\n        infoTekstId = 'uttaksplan.automatiskJustering.info.hvisIkkeLengerStarterPåTermin';\n    }\n\n    if (svarteJaMenEndretPeriodenPåTermin) {\n        infoTekstId = 'uttaksplan.automatiskJustering.info.hvisEndretPeriodePåTermin';\n    }\n    if (svarteJaMenEndretPeriodenTilØnskerFlerbarnsdager) {\n        infoTekstId = 'uttaksplan.automatiskJustering.info.hvisEndretPeriodeTilØnskerFlerbarnsdager';\n    }\n\n    const handleOnChange = (value: string) => {\n        const ønskerJustertUttakVedFødsel = mapUttaksplanFormValueToState(value as YesOrNo);\n        dispatch(actionCreator.setØnskerJustertUttakVedFødsel(ønskerJustertUttakVedFødsel));\n        dispatch(actionCreator.setBrukerSvarteJaPåAutoJustering(ønskerJustertUttakVedFødsel));\n    };\n\n    return (\n        <UttaksplanFormComponents.Form includeButtons={false}>\n            <div style={{ paddingTop: '1rem', paddingBottom: '1rem' }}>\n                {infoTekstId !== '' && (\n                    <Block padBottom=\"l\">\n                        <AlertStripe type=\"info\">\n                            <FormattedMessage id={infoTekstId} />\n                        </AlertStripe>\n                    </Block>\n                )}\n                <Block visible={visibility.isVisible(UttaksplanFormField.ønskerAutomatiskJustering)} padBottom=\"l\">\n                    <UttaksplanFormComponents.YesOrNoQuestion\n                        name={UttaksplanFormField.ønskerAutomatiskJustering}\n                        legend={intlUtils(intl, 'uttaksplan.automatiskJustering.spørsmål', {\n                            antallBarn,\n                        })}\n                        validate={(value: YesOrNo) => {\n                            if (value === YesOrNo.UNANSWERED) {\n                                return intlUtils(intl, 'uttaksplan.automatiskJustering.svar.påkrevd');\n                            }\n\n                            return undefined;\n                        }}\n                        afterOnChange={(value) => handleOnChange(value)}\n                    />\n                </Block>\n            </div>\n        </UttaksplanFormComponents.Form>\n    );\n};\n\nexport default AutomatiskJusteringForm;\n","import React, { FunctionComponent } from 'react';\nimport Modal from 'nav-frontend-modal';\nimport { Normaltekst, Undertittel } from 'nav-frontend-typografi';\nimport { Hovedknapp, Knapp } from 'nav-frontend-knapper';\nimport { bemUtils, Block } from '@navikt/fp-common';\nimport { FormattedMessage } from 'react-intl';\n\nimport './resetUttaksplanModal.less';\n\ninterface Props {\n    isOpen: boolean;\n    onClose: () => void;\n    handleResetUttaksplanModalBekreft: () => void;\n}\n\nconst ResetUttaksplanModal: FunctionComponent<Props> = ({ isOpen, onClose, handleResetUttaksplanModalBekreft }) => {\n    const bem = bemUtils('resetUttaksplanModal');\n\n    return (\n        <Modal\n            className={bem.block}\n            isOpen={isOpen}\n            closeButton={true}\n            onRequestClose={onClose}\n            contentLabel=\"Tilbakestill uttaksplanen din\"\n        >\n            <div className={bem.element('content')}>\n                <Block padBottom=\"l\">\n                    <Undertittel>\n                        <FormattedMessage id=\"uttaksplan.resetPlan.innhold1\" />\n                    </Undertittel>\n                    <Normaltekst>\n                        <FormattedMessage id=\"uttaksplan.resetPlan.innhold2\" />\n                    </Normaltekst>\n                </Block>\n                <div className={bem.element('knappWrapper')}>\n                    <Hovedknapp htmlType=\"button\" onClick={handleResetUttaksplanModalBekreft}>\n                        <FormattedMessage id=\"uttaksplan.resetPlan.slett\" />\n                    </Hovedknapp>\n                    <Knapp onClick={onClose}>\n                        <FormattedMessage id=\"uttaksplan.resetPlan.avbryt\" />\n                    </Knapp>\n                </div>\n            </div>\n        </Modal>\n    );\n};\n\nexport default ResetUttaksplanModal;\n","import React, { FunctionComponent, useEffect, useState } from 'react';\nimport { Block, intlUtils } from '@navikt/fp-common';\nimport Planlegger from './components/planlegger/Planlegger';\nimport { ForeldreparSituasjon } from 'app/types/ForeldreparSituasjonTypes';\nimport { Forelder } from 'app/types/Forelder';\nimport { isInfoPeriode, isUtsettelsesperiode, Periode, Utsettelsesperiode, Uttaksperiode } from './types/Periode';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport AnnenForelder, { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { Situasjon } from 'app/types/Situasjon';\nimport OversiktKvoter from './components/oversikt-kvoter/OversiktKvoter';\nimport { getToTetteReglerGjelder, ISOStringToDate, tidperiodeOverlapperDato } from 'app/utils/dateUtils';\nimport { validerUttaksplan } from './validering/validerUttaksplan';\nimport Søkersituasjon from 'app/context/types/Søkersituasjon';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport VeilederInfo from './validering/veilederInfo/VeilederInfo';\nimport { useIntl } from 'react-intl';\nimport { getPeriodelisteMeldinger, getUttaksplanVeilederinfo } from './validering/veilederInfo/utils';\nimport OppgiTilleggsopplysninger from './components/oppgi-tilleggsopplysninger/OppgiTilleggsopplysninger';\nimport { Tilleggsopplysninger } from 'app/context/types/Tilleggsopplysninger';\nimport { SenEndringÅrsak } from './types/SenEndringÅrsak';\nimport { getSeneEndringerSomKreverBegrunnelse } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { EksisterendeSak } from 'app/types/EksisterendeSak';\nimport InfoOmSøknaden from 'app/components/info-eksisterende-sak/InfoOmSøknaden';\nimport SlettUttaksplanModal from './components/slett-uttaksplan-modal/SlettUttaksplanModal';\nimport Uttaksplanbuilder from './builder/Uttaksplanbuilder';\nimport Barn, { BarnFraNesteSak } from 'app/context/types/Barn';\nimport { farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato } from 'app/utils/wlbUtils';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from 'app/utils/uttaksplan/uttaksplanUtils';\nimport AutomatiskJusteringForm from './components/automatisk-justering-form/AutomatiskJusteringForm';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { UttaksplanFormField } from 'app/steps/uttaksplan/UttaksplanFormConfig';\nimport ResetUttaksplanModal from './components/reset-uttaksplan-modal/ResetUttaksplanModal';\nimport { splittPeriodePåDato, splittUttaksperiodePåFamiliehendelsesdato } from './builder/leggTilPeriode';\n\ninterface Props {\n    foreldreSituasjon: ForeldreparSituasjon;\n    forelderVedAleneomsorg: Forelder | undefined;\n    erDeltUttak: boolean;\n    uttaksplan: Periode[];\n    familiehendelsesdato: string;\n    handleOnPlanChange: (nyPlan: Periode[]) => void;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    erEndringssøknad: boolean;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    harMidlertidigOmsorg: boolean;\n    situasjon: Situasjon;\n    erMorUfør: boolean;\n    morHarRett: boolean;\n    søkersituasjon: Søkersituasjon;\n    dekningsgrad: Dekningsgrad;\n    antallBarn: number;\n    tilleggsopplysninger: Tilleggsopplysninger;\n    eksisterendeSak: EksisterendeSak | undefined;\n    perioderSomSkalSendesInn: Periode[];\n    morsSisteDag: Date | undefined;\n    harKomplettUttaksplan: boolean;\n    opprinneligPlan: Periode[] | undefined;\n    termindato: Date | undefined;\n    barn: Barn;\n    setUttaksplanErGyldig: (planErGyldig: boolean) => void;\n    handleBegrunnelseChange: (årsak: SenEndringÅrsak, begrunnelse: string) => void;\n    handleSlettUttaksplan: () => void;\n    handleResetUttaksplan: () => void;\n    visibility: QuestionVisibility<UttaksplanFormField, undefined>;\n    visAutomatiskJusteringForm: boolean;\n    perioderMedUttakRundtFødsel: Uttaksperiode[];\n    barnFraNesteSak: BarnFraNesteSak | undefined;\n    familiehendelsesdatoNesteSak: Date | undefined;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n    minsterettUkerToTette: number | undefined;\n}\n\nconst Uttaksplan: FunctionComponent<Props> = ({\n    foreldreSituasjon,\n    erDeltUttak,\n    uttaksplan,\n    familiehendelsesdato,\n    stønadskontoer,\n    handleOnPlanChange,\n    navnPåForeldre,\n    annenForelder,\n    arbeidsforhold,\n    erEndringssøknad,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    harMidlertidigOmsorg,\n    situasjon,\n    erMorUfør,\n    morHarRett,\n    søkersituasjon,\n    dekningsgrad,\n    antallBarn,\n    tilleggsopplysninger,\n    eksisterendeSak,\n    perioderSomSkalSendesInn,\n    harKomplettUttaksplan,\n    termindato,\n    opprinneligPlan,\n    setUttaksplanErGyldig,\n    handleBegrunnelseChange,\n    handleSlettUttaksplan,\n    handleResetUttaksplan,\n    barn,\n    visibility,\n    visAutomatiskJusteringForm,\n    perioderMedUttakRundtFødsel,\n    barnFraNesteSak,\n    familiehendelsesdatoNesteSak,\n    førsteUttaksdagNesteBarnsSak,\n    minsterettUkerToTette,\n}) => {\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato)!;\n    const intl = useIntl();\n    const [periodeErGyldig, setPeriodeErGyldig] = useState(true);\n    const [slettUttaksplanModalOpen, setSlettUttaksplanModalOpen] = useState(false);\n    const [resetUttaksplanModalOpen, setResetUttaksplanModalOpen] = useState(false);\n    const harAktivitetskravIPeriodeUtenUttak = getHarAktivitetskravIPeriodeUtenUttak({\n        erDeltUttak,\n        morHarRett,\n        søkerErAleneOmOmsorg: erAleneOmOmsorg,\n    });\n    const uttaksplanUtenAnnenPartsSamtidigUttak = uttaksplan.filter((p) => !(isInfoPeriode(p) && !p.visPeriodeIPlan));\n    const bareFarHarRett = !morHarRett;\n    const annenForelderHarRettINorge =\n        isAnnenForelderOppgitt(annenForelder) && annenForelder.harRettPåForeldrepengerINorge!;\n    const toTetteReglerGjelder = getToTetteReglerGjelder(familiehendelsesdatoDate, familiehendelsesdatoNesteSak);\n\n    const builder = Uttaksplanbuilder(\n        uttaksplanUtenAnnenPartsSamtidigUttak,\n        familiehendelsesdatoDate,\n        harAktivitetskravIPeriodeUtenUttak,\n        situasjon === 'adopsjon',\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak,\n        opprinneligPlan\n    );\n\n    const handleDeletePeriode = (periodeId: string) => {\n        const slettetPeriode = uttaksplan.find((p) => p.id === periodeId)!;\n        const result = builder.slettPeriode(slettetPeriode);\n\n        handleOnPlanChange(result);\n    };\n\n    const handleUpdatePeriode = (oppdatertPeriode: Periode, familiehendelsesdato: Date) => {\n        let resultat: Periode[] = [];\n        if (\n            farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato(\n                oppdatertPeriode,\n                familiehendelsesdato,\n                morHarRett,\n                termindato\n            )\n        ) {\n            const perioder = splittUttaksperiodePåFamiliehendelsesdato(\n                oppdatertPeriode as Uttaksperiode,\n                familiehendelsesdato\n            );\n\n            resultat = builder.oppdaterPerioder(perioder);\n\n            handleOnPlanChange(resultat);\n        } else if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(oppdatertPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const perioder = splittPeriodePåDato(oppdatertPeriode, førsteUttaksdagNesteBarnsSak);\n            resultat = builder.oppdaterPerioder(perioder);\n            handleOnPlanChange(resultat);\n        } else {\n            const result = builder.oppdaterPeriode(oppdatertPeriode);\n\n            handleOnPlanChange(result);\n        }\n    };\n\n    const handleAddPeriode = (nyPeriode: Periode, familiehendelsesdato: Date) => {\n        let resultat: Periode[] = [];\n        if (\n            farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato(\n                nyPeriode,\n                familiehendelsesdato,\n                morHarRett,\n                termindato\n            )\n        ) {\n            const perioder = splittUttaksperiodePåFamiliehendelsesdato(\n                nyPeriode as Uttaksperiode,\n                familiehendelsesdato\n            );\n\n            resultat = builder.leggTilPerioder(perioder);\n\n            handleOnPlanChange(resultat);\n        } else if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(nyPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const perioder = splittPeriodePåDato(nyPeriode, førsteUttaksdagNesteBarnsSak);\n            resultat = builder.leggTilPerioder(perioder);\n            handleOnPlanChange(resultat);\n        } else {\n            resultat = builder.leggTilPeriode(nyPeriode);\n            handleOnPlanChange(resultat);\n        }\n    };\n\n    const vedleggForSenEndring = []!; //TODO: handleBegrunnelseVedleggChange\n\n    const årsakTilSenEndring = getSeneEndringerSomKreverBegrunnelse(perioderSomSkalSendesInn);\n\n    const handleBegrunnelseTekstChange = (begrunnelse: string) => {\n        handleBegrunnelseChange(årsakTilSenEndring, begrunnelse);\n    };\n\n    const uttaksplanValidering = validerUttaksplan({\n        søkersituasjon: søkersituasjon,\n        arbeidsforhold: arbeidsforhold,\n        dekningsgrad: dekningsgrad,\n        erEndringssøknad: erEndringssøknad,\n        antallBarn: antallBarn,\n        annenForelder: annenForelder,\n        navnPåForeldre: navnPåForeldre,\n        søkerErFarEllerMedmor: erFarEllerMedmor,\n        søkerErAleneOmOmsorg: erAleneOmOmsorg,\n        søkerHarMidlertidigOmsorg: harMidlertidigOmsorg,\n        erDeltUttak: erDeltUttak,\n        morErUfør: erMorUfør,\n        morHarRett: morHarRett,\n        erFlerbarnssøknad: erFlerbarnssøknad,\n        familiehendelsesdato: familiehendelsesdatoDate,\n        termindato: termindato,\n        stønadskontoer: stønadskontoer,\n        perioder: uttaksplan,\n        harKomplettUttaksplan,\n        tilleggsopplysninger: tilleggsopplysninger,\n        eksisterendeSak: eksisterendeSak,\n        perioderSomSkalSendesInn: perioderSomSkalSendesInn,\n        barn: barn,\n        familiehendelsesdatoNesteSak,\n        førsteUttaksdagNesteBarnsSak,\n        minsterettUkerToTette,\n    });\n\n    useEffect(() => {\n        if (!periodeErGyldig || uttaksplanValidering.harFeil) {\n            setUttaksplanErGyldig(false);\n        } else {\n            setUttaksplanErGyldig(true);\n        }\n    });\n\n    const handleSlettUttaksplanModalClose = () => {\n        setSlettUttaksplanModalOpen(false);\n    };\n\n    const handleSlettUttaksplanModalBekreft = () => {\n        setSlettUttaksplanModalOpen(false);\n        handleSlettUttaksplan();\n    };\n\n    const handleResetUttaksplanModalClose = () => {\n        setResetUttaksplanModalOpen(false);\n    };\n\n    const handleResetUttaksplanModalBekreft = () => {\n        setResetUttaksplanModalOpen(false);\n        handleResetUttaksplan();\n    };\n\n    const uttaksplanVeilederInfo = getUttaksplanVeilederinfo(uttaksplanValidering.avvik, intl, false);\n    const meldingerPerPeriode = getPeriodelisteMeldinger(uttaksplanVeilederInfo);\n\n    const utsettelserIPlan = uttaksplan.filter((p) => isUtsettelsesperiode(p)) as Utsettelsesperiode[];\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <InfoOmSøknaden\n                    eksisterendeSak={eksisterendeSak}\n                    erIUttaksplanenSteg={true}\n                    tilgjengeligeStønadskontoer={stønadskontoer}\n                    minsterettUkerToTette={minsterettUkerToTette}\n                />\n            </Block>\n            <Block padBottom=\"l\">\n                <Planlegger\n                    uttaksplan={uttaksplan}\n                    familiehendelsesdato={familiehendelsesdatoDate}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                    stønadskontoer={stønadskontoer}\n                    navnPåForeldre={navnPåForeldre}\n                    annenForelder={annenForelder}\n                    arbeidsforhold={arbeidsforhold}\n                    handleDeletePeriode={handleDeletePeriode}\n                    handleAddPeriode={handleAddPeriode}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    erFlerbarnssøknad={erFlerbarnssøknad}\n                    erDeltUttak={erDeltUttak}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    situasjon={situasjon}\n                    meldingerPerPeriode={meldingerPerPeriode}\n                    erMorUfør={erMorUfør}\n                    setPeriodeErGyldig={setPeriodeErGyldig}\n                    erEndringssøknad={erEndringssøknad}\n                    setSlettUttaksplanModalOpen={setSlettUttaksplanModalOpen}\n                    setResetUttaksplanModalOpen={setResetUttaksplanModalOpen}\n                    termindato={termindato}\n                    barn={barn}\n                    utsettelserIPlan={utsettelserIPlan}\n                    barnFraNesteSak={barnFraNesteSak}\n                />\n            </Block>\n            {visAutomatiskJusteringForm && (\n                <Block padBottom=\"l\">\n                    <AutomatiskJusteringForm\n                        termindato={termindato!}\n                        perioderMedUttakRundtFødsel={perioderMedUttakRundtFødsel}\n                        antallBarn={barn.antallBarn}\n                        visibility={visibility}\n                    />\n                </Block>\n            )}\n            <Block padBottom=\"l\">\n                <OversiktKvoter\n                    tilgjengeligeStønadskontoer={stønadskontoer}\n                    uttaksplan={uttaksplan}\n                    erDeltUttak={erDeltUttak}\n                    foreldreparSituasjon={foreldreSituasjon}\n                    familiehendelsesdato={familiehendelsesdatoDate}\n                    annenForelderHarRettINorge={annenForelderHarRettINorge}\n                    toTetteReglerGjelder={toTetteReglerGjelder}\n                    intl={intl}\n                />\n            </Block>\n            <Block visible={uttaksplanVeilederInfo.length > 0} padBottom=\"l\">\n                <VeilederInfo\n                    messages={uttaksplanVeilederInfo}\n                    paneltype=\"plakat\"\n                    kompakt={true}\n                    veilederStil={'normal'}\n                    ariaTittel={intlUtils(intl, 'uttaksplan.regelAvvik.ariaTittel')}\n                />\n            </Block>\n            {årsakTilSenEndring && årsakTilSenEndring !== SenEndringÅrsak.Ingen && (\n                <OppgiTilleggsopplysninger\n                    begrunnelse={\n                        tilleggsopplysninger.begrunnelseForSenEndring\n                            ? tilleggsopplysninger.begrunnelseForSenEndring.tekst\n                            : ''\n                    }\n                    vedlegg={vedleggForSenEndring}\n                    onBegrunnelseTekstChange={handleBegrunnelseTekstChange}\n                    //onVedleggChange={handleBegrunnelseVedleggChange}\n                />\n            )}\n            <SlettUttaksplanModal\n                isOpen={slettUttaksplanModalOpen}\n                erEndringssøknad={erEndringssøknad}\n                onClose={handleSlettUttaksplanModalClose}\n                handleSlettUttaksplanModalBekreft={handleSlettUttaksplanModalBekreft}\n            />\n            <ResetUttaksplanModal\n                isOpen={resetUttaksplanModalOpen}\n                onClose={handleResetUttaksplanModalClose}\n                handleResetUttaksplanModalBekreft={handleResetUttaksplanModalBekreft}\n            />\n        </>\n    );\n};\n\nexport default Uttaksplan;\n","import { useState, useEffect } from 'react';\n\nconst useDebounce = (value: any, delay: number) => {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setDebouncedValue(value);\n        }, delay);\n\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [value, delay]);\n\n    return debouncedValue;\n};\n\nexport default useDebounce;\n","import { bemUtils, Block, intlUtils } from '@navikt/fp-common';\nimport SøknadRoutes from 'app/routes/routes';\nimport { Hovedknapp, Knapp } from 'nav-frontend-knapper';\nimport ModalWrapper from 'nav-frontend-modal';\nimport { Normaltekst, Undertittel } from 'nav-frontend-typografi';\nimport React, { Dispatch, FunctionComponent, SetStateAction } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useNavigate } from 'react-router-dom';\n\nimport './vilDuGåTilbakeModal.less';\n\ninterface Props {\n    isOpen: boolean;\n    setIsOpen: Dispatch<SetStateAction<boolean>>;\n}\n\nconst VilDuGåTilbakeModal: FunctionComponent<Props> = ({ isOpen, setIsOpen }) => {\n    const intl = useIntl();\n    const bem = bemUtils('vilDuGåTilbakeModal');\n    const navigate = useNavigate();\n\n    return (\n        <ModalWrapper\n            className={bem.block}\n            contentLabel={'Tittel'}\n            closeButton={false}\n            isOpen={isOpen}\n            onRequestClose={() => setIsOpen(false)}\n        >\n            <Block padBottom=\"l\">\n                <Undertittel tag=\"h1\">{intlUtils(intl, 'uttaksplan.vilDuGåTilbakeModal.tittel')}</Undertittel>\n            </Block>\n            <Block padBottom=\"l\">\n                <Normaltekst>{intlUtils(intl, 'uttaksplan.vilDuGåTilbakeModal.intro')}</Normaltekst>\n            </Block>\n            <Block padBottom=\"l\">\n                <Normaltekst>{intlUtils(intl, 'uttaksplan.vilDuGåTilbakeModal.spørsmål')}</Normaltekst>\n            </Block>\n            <div className={bem.element('knapperad')}>\n                <Hovedknapp\n                    onClick={() => {\n                        setIsOpen(false);\n                        navigate(SøknadRoutes.UTTAKSPLAN_INFO);\n                    }}\n                >\n                    <FormattedMessage id=\"uttaksplan.vilDuGåTilbakeModal.okLabel\" />\n                </Hovedknapp>\n                <Knapp onClick={() => setIsOpen(false)}>\n                    <FormattedMessage id=\"uttaksplan.vilDuGåTilbakeModal.avbrytLabel\" />\n                </Knapp>\n            </div>\n        </ModalWrapper>\n    );\n};\n\nexport default VilDuGåTilbakeModal;\n","import Barn, { BarnType, isUfødtBarn } from 'app/context/types/Barn';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { Forelder } from 'app/types/Forelder';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport dayjs from 'dayjs';\nimport { isUttaksperiode, Periode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\n\nexport const getKanPeriodenRundtFødselJusteres = (\n    periodeRundtFødsel: Periode,\n    termindato: Date | undefined\n): boolean => {\n    return (\n        termindato !== undefined &&\n        isUttaksperiode(periodeRundtFødsel) &&\n        dayjs(periodeRundtFødsel.tidsperiode.fom).isSame(Uttaksdagen(termindato).denneEllerNeste(), 'day') &&\n        periodeRundtFødsel.forelder === Forelder.farMedmor &&\n        periodeRundtFødsel.konto === StønadskontoType.Fedrekvote &&\n        periodeRundtFødsel.ønskerSamtidigUttak === true &&\n        periodeRundtFødsel.ønskerFlerbarnsdager !== true\n    );\n};\n\nexport const getKanJustereAutomatiskVedFødsel = (\n    perioderMedUttakRundtFødsel: Periode[],\n    termindato: Date | undefined,\n    erFarEllerMedmor: boolean,\n    barn: Barn\n): boolean => {\n    return (\n        barn.type === BarnType.UFØDT &&\n        erFarEllerMedmor &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        getKanPeriodenRundtFødselJusteres(perioderMedUttakRundtFødsel[0], termindato)\n    );\n};\n\nexport const getVisAutomatiskJusteringForm = (\n    erFarEllerMedmor: boolean,\n    familiehendelsesdato: Date,\n    situasjon: Situasjon,\n    perioderMedUttakRundtFødsel: Periode[],\n    barn: Barn,\n    termindato: Date | undefined,\n    bareFarHarRett: boolean\n): boolean => {\n    return (\n        erFarEllerMedmor &&\n        andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n        situasjon === 'fødsel' &&\n        perioderMedUttakRundtFødsel.length !== 0 &&\n        isUfødtBarn(barn) &&\n        termindato !== undefined &&\n        !bareFarHarRett\n    );\n};\n","import { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { getKanPeriodenRundtFødselJusteres } from 'uttaksplan/components/automatisk-justering-form/automatiskJusteringUtils';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport { UttaksplanFormData, UttaksplanFormField } from './UttaksplanFormConfig';\n\nexport interface UttaksplanQuestionPayload extends UttaksplanFormData {\n    termindato: Date | undefined;\n    perioderMedUttakRundtFødsel: Periode[];\n}\nconst includeAutomatiskJusteringSpørsmål = (\n    perioderMedUttakRundtFødsel: Periode[],\n    termindato: Date | undefined\n): boolean => {\n    if (perioderMedUttakRundtFødsel.length !== 1 || termindato === undefined) {\n        return false;\n    }\n\n    return getKanPeriodenRundtFødselJusteres(perioderMedUttakRundtFødsel[0], termindato);\n};\n\nconst UttaksplanFormConfig: QuestionConfig<UttaksplanQuestionPayload, UttaksplanFormField> = {\n    [UttaksplanFormField.ønskerAutomatiskJustering]: {\n        isIncluded: ({ perioderMedUttakRundtFødsel, termindato }) =>\n            includeAutomatiskJusteringSpørsmål(perioderMedUttakRundtFødsel, termindato),\n        isAnswered: ({ ønskerAutomatiskJustering }) => ønskerAutomatiskJustering !== YesOrNo.UNANSWERED,\n    },\n};\n\nconst uttaksplanQuestionsConfig = Questions<UttaksplanQuestionPayload, UttaksplanFormField>(UttaksplanFormConfig);\n\nexport default uttaksplanQuestionsConfig;\n","import { Block, intlUtils, Step } from '@navikt/fp-common';\nimport SøknadRoutes from 'app/routes/routes';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport useAvbrytSøknad from 'app/utils/hooks/useAvbrytSøknad';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport AlertStripe from 'nav-frontend-alertstriper';\nimport stepConfig, { getPreviousStepHref } from '../stepsConfig';\nimport Uttaksplan from 'uttaksplan/Uttaksplan';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport {\n    getFarMedmorErAleneOmOmsorg,\n    getKjønnFromFnr,\n    getMorErAleneOmOmsorg,\n    getMorHarRettPåForeldrepengerINorgeEllerEØS,\n    getNavnPåForeldre,\n} from 'app/utils/personUtils';\nimport { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { getForeldreparSituasjon } from 'app/utils/foreldreparSituasjonUtils';\nimport { Forelder } from 'app/types/Forelder';\nimport { isUttakAnnenPart, isUttakAvForeldrepengerFørFødsel, isUttaksperiode, Periode } from 'uttaksplan/types/Periode';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport actionCreator from 'app/context/action/actionCreator';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport Api from 'app/api/api';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport getStønadskontoParams, {\n    getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter,\n    getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter,\n} from 'app/api/getStønadskontoParams';\nimport NavFrontendSpinner from 'nav-frontend-spinner';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { getErMorUfør } from 'app/utils/annenForelderUtils';\nimport useDebounce from 'app/utils/hooks/useDebounce';\nimport { getPerioderSomSkalSendesInn, storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { SenEndringÅrsak } from 'uttaksplan/types/SenEndringÅrsak';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport { getEndringstidspunkt, getMorsSisteDag, ISOStringToDate } from 'app/utils/dateUtils';\nimport { cleanupInvisibleCharsFromTilleggsopplysninger } from 'app/utils/tilleggsopplysningerUtils';\nimport VilDuGåTilbakeModal from './components/vil-du-gå-tilbake-modal/VilDuGåTilbakeModal';\nimport { getAktiveArbeidsforhold } from 'app/utils/arbeidsforholdUtils';\nimport { UttaksplanFormComponents } from 'app/steps/uttaksplan/UttaksplanFormConfig';\n\nimport { getPerioderMedUttakRundtFødsel } from 'app/utils/wlbUtils';\nimport uttaksplanQuestionsConfig from './uttaksplanQuestionConfig';\nimport { getUttaksplanFormInitialValues } from './UttaksplanFormUtils';\n\nimport {\n    getVisAutomatiskJusteringForm,\n    getKanJustereAutomatiskVedFødsel,\n} from 'uttaksplan/components/automatisk-justering-form/automatiskJusteringUtils';\nimport { FormikValues } from 'formik';\nimport {\n    getStartdatoFørstePeriodeAnnenPart,\n    mapAnnenPartsEksisterendeSakFromDTO,\n} from 'app/utils/eksisterendeSakUtils';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from 'app/utils/uttaksplan/uttaksplanUtils';\nimport { RequestStatus } from 'app/types/RequestState';\nimport { Periodene } from '../uttaksplan-info/utils/Periodene';\nimport { finnOgSettInnHull, settInnAnnenPartsUttak } from 'uttaksplan/builder/uttaksplanbuilderUtils';\nimport { isUfødtBarn } from 'app/context/types/Barn';\nimport { dateToISOString } from '@navikt/sif-common-formik/lib';\nimport dayjs from 'dayjs';\nimport { getAntallUkerMinsterett } from '../uttaksplan-info/utils/stønadskontoer';\nimport { sendErrorMessageToSentry } from 'app/api/apiUtils';\nimport useSaveLoadedRoute from 'app/utils/hooks/useSaveLoadedRoute';\n\nconst UttaksplanStep = () => {\n    const intl = useIntl();\n    const søkerinfo = useSøkerinfo();\n    const søknad = useSøknad();\n    const [gåTilbakeIsOpen, setGåTilbakeIsOpen] = useState(false);\n    const [uttaksplanErGyldig, setUttaksplanErGyldig] = useState(true);\n    const [submitIsClicked, setSubmitIsClicked] = useState(false);\n    const { dispatch, state } = useForeldrepengesøknadContext();\n    const [endringstidspunkt, setEndringstidspunkt] = useState(state.endringstidspunkt);\n    const [perioderSomSkalSendesInn, setPerioderSomSkalSendesInn] = useState(state.perioderSomSkalSendesInn);\n    const nextRoute = søknad.erEndringssøknad ? SøknadRoutes.OPPSUMMERING : SøknadRoutes.UTENLANDSOPPHOLD;\n    const { uttaksplanInfo, eksisterendeSak, harUttaksplanBlittSlettet, annenPartsUttakErLagtTilIPlan } = state;\n    const { person, arbeidsforhold } = søkerinfo;\n    const { annenForelder, søker, barn, søkersituasjon, dekningsgrad, erEndringssøknad, tilleggsopplysninger } = søknad;\n    const { erAleneOmOmsorg } = søker;\n    const { situasjon } = søkersituasjon;\n    const { rolle } = søkersituasjon;\n    const { barnFraNesteSak } = state;\n    const debouncedState = useDebounce(state, 3000);\n    const annenForelderKjønn = getKjønnFromFnr(annenForelder);\n    const erDeltUttak = isAnnenForelderOppgitt(annenForelder)\n        ? !!annenForelder.harRettPåForeldrepengerINorge || !!annenForelder.harRettPåForeldrepengerIEØS\n        : false;\n    const erFarEllerMedmor = isFarEllerMedmor(søknad.søkersituasjon.rolle);\n    const morErAleneOmOmsorg = getMorErAleneOmOmsorg(!erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const farMedmorErAleneOmOmsorg = getFarMedmorErAleneOmOmsorg(erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const søkerErAleneOmOmsorg = morErAleneOmOmsorg || farMedmorErAleneOmOmsorg;\n    const forelderVedAleneomsorg = erDeltUttak ? undefined : erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const erMorUfør = getErMorUfør(annenForelder, erFarEllerMedmor);\n    const navnPåForeldre = getNavnPåForeldre(person, annenForelder, erFarEllerMedmor, intl);\n    const antallBarn = barn.antallBarn;\n    const erFlerbarnssøknad = antallBarn > 1;\n    const morHarRett = getMorHarRettPåForeldrepengerINorgeEllerEØS(rolle, erFarEllerMedmor, annenForelder);\n    const opprinneligPlan = eksisterendeSak?.uttaksplan;\n    const harKomplettUttaksplan = eksisterendeSak ? eksisterendeSak.uttaksplan !== undefined : false;\n    const harMidlertidigOmsorg = false; //TODO søkerHarMidlertidigOmsorg\n    const morsSisteDag = getMorsSisteDag(uttaksplanInfo);\n    const termindato = getTermindato(barn);\n    const annenForelderFnr =\n        isAnnenForelderOppgitt(annenForelder) && !!annenForelder.utenlandskFnr === false\n            ? annenForelder.fnr\n            : undefined;\n    const erAdopsjon = situasjon === 'adopsjon';\n    const annenForelderFnrNesteSak = barnFraNesteSak !== undefined ? barnFraNesteSak.annenForelderFnr : undefined;\n    const førsteBarnFraNesteSakFnr =\n        barnFraNesteSak !== undefined && barnFraNesteSak.fnr !== undefined && barnFraNesteSak.fnr.length > 0\n            ? barnFraNesteSak.fnr[0]\n            : undefined;\n    const familieHendelseDatoNesteSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.familiehendelsesdato : undefined;\n    const førsteUttaksdagNesteBarnsSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n    const bareFarMedmorHarRett = !getMorHarRettPåForeldrepengerINorgeEllerEØS(\n        søkersituasjon.rolle,\n        erFarEllerMedmor,\n        annenForelder\n    );\n\n    const barnFnr = !isUfødtBarn(barn) && barn.fnr !== undefined && barn.fnr.length > 0 ? barn.fnr[0] : undefined;\n    const eksisterendeSakAnnenPartRequestIsSuspended =\n        !søkerErAleneOmOmsorg &&\n        annenForelderFnr !== undefined &&\n        annenForelderFnr !== '' &&\n        (barnFnr !== undefined || familiehendelsesdato !== undefined)\n            ? false\n            : true;\n\n    useSaveLoadedRoute(SøknadRoutes.UTTAKSPLAN);\n\n    const { eksisterendeSakAnnenPartData, eksisterendeSakAnnenPartError, eksisterendeSakAnnenPartRequestStatus } =\n        Api.useGetAnnenPartsVedtak(\n            annenForelderFnr,\n            barnFnr,\n            familiehendelsesdato,\n            eksisterendeSakAnnenPartRequestIsSuspended\n        );\n\n    const eksisterendeVedtakAnnenPart = useMemo(\n        () =>\n            mapAnnenPartsEksisterendeSakFromDTO(\n                eksisterendeSakAnnenPartData,\n                barn,\n                erFarEllerMedmor,\n                familiehendelsesdato,\n                førsteUttaksdagNesteBarnsSak\n            ),\n        [eksisterendeSakAnnenPartData, barn, erFarEllerMedmor, familiehendelsesdato, førsteUttaksdagNesteBarnsSak]\n    );\n\n    const saksgrunnlagsTermindato = getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter(\n        eksisterendeSak?.grunnlag.termindato,\n        eksisterendeVedtakAnnenPart?.grunnlag.termindato\n    );\n    const saksgrunnlagsAntallBarn = getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter(\n        erFarEllerMedmor,\n        barn.antallBarn,\n        eksisterendeVedtakAnnenPart?.grunnlag.antallBarn\n    );\n    useEffect(() => {\n        if (erFarEllerMedmor && søknad.barn.antallBarn !== saksgrunnlagsAntallBarn) {\n            const søknadMedOppdatertAntallBarn = {\n                ...søknad,\n                barn: { ...søknad.barn, antallBarn: saksgrunnlagsAntallBarn },\n            };\n            dispatch(actionCreator.setSøknad(søknadMedOppdatertAntallBarn));\n        }\n    }, [erFarEllerMedmor, saksgrunnlagsAntallBarn, dispatch, søknad]);\n\n    const nesteBarnsSakAnnenPartRequestIsSuspended =\n        annenForelderFnrNesteSak !== undefined &&\n        annenForelderFnrNesteSak !== '' &&\n        (førsteBarnFraNesteSakFnr !== undefined || familieHendelseDatoNesteSak !== undefined) &&\n        (eksisterendeSakAnnenPartRequestIsSuspended || eksisterendeSakAnnenPartRequestStatus === RequestStatus.FINISHED)\n            ? false\n            : true;\n\n    const {\n        eksisterendeSakAnnenPartData: nesteSakAnnenPartData,\n        eksisterendeSakAnnenPartError: nesteSakAnnenPartError,\n        eksisterendeSakAnnenPartRequestStatus: nesteSakAnnenPartRequestStatus,\n    } = Api.useGetAnnenPartsVedtak(\n        annenForelderFnrNesteSak,\n        førsteBarnFraNesteSakFnr,\n        dateToISOString(familieHendelseDatoNesteSak),\n        nesteBarnsSakAnnenPartRequestIsSuspended\n    );\n\n    const førsteUttaksdagAnnenPart = getStartdatoFørstePeriodeAnnenPart(nesteSakAnnenPartData);\n\n    useEffect(() => {\n        if (\n            førsteUttaksdagAnnenPart !== undefined &&\n            state.barnFraNesteSak !== undefined &&\n            (dayjs(førsteUttaksdagAnnenPart).isBefore(state.barnFraNesteSak.startdatoFørsteStønadsperiode, 'd') ||\n                state.barnFraNesteSak.startdatoFørsteStønadsperiode === undefined)\n        ) {\n            const oppdatertBarnNesteSak = {\n                ...state.barnFraNesteSak,\n                startdatoFørsteStønadsperiode: førsteUttaksdagAnnenPart,\n            };\n            dispatch(actionCreator.setBarnFraNesteSak(oppdatertBarnNesteSak));\n        }\n    }, [førsteUttaksdagNesteBarnsSak, førsteUttaksdagAnnenPart, barnFraNesteSak, dispatch, state.barnFraNesteSak]);\n\n    const harAktivitetskravIPeriodeUtenUttak = getHarAktivitetskravIPeriodeUtenUttak({\n        erDeltUttak,\n        morHarRett,\n        søkerErAleneOmOmsorg,\n    });\n\n    //Legg til annen parts perioder i planen til bruker\n    useEffect(() => {\n        if (\n            eksisterendeSak !== undefined &&\n            opprinneligPlan !== undefined &&\n            eksisterendeVedtakAnnenPart !== undefined &&\n            !annenPartsUttakErLagtTilIPlan\n        ) {\n            //Sett samtidigUttak på søkerens perioder hvis de overlapper med annen parts samtidig uttak:\n            opprinneligPlan.forEach((p) => {\n                if (isUttaksperiode(p)) {\n                    const overlappendePerioderAnnenPart = Periodene(\n                        eksisterendeVedtakAnnenPart.uttaksplan\n                    ).finnOverlappendePerioder(p);\n\n                    if (\n                        overlappendePerioderAnnenPart.length !== 0 &&\n                        overlappendePerioderAnnenPart.find(\n                            (periode) => isUttakAnnenPart(periode) && periode.ønskerSamtidigUttak === true\n                        )\n                    ) {\n                        if (!p.ønskerSamtidigUttak) {\n                            p.ønskerSamtidigUttak = true;\n                            p.samtidigUttakProsent = '100';\n                        }\n                    }\n                }\n            });\n\n            const uttaksplanMedAnnenPart = finnOgSettInnHull(\n                settInnAnnenPartsUttak(\n                    opprinneligPlan,\n                    eksisterendeVedtakAnnenPart.uttaksplan,\n                    familiehendelsesdatoDate!,\n                    førsteUttaksdagNesteBarnsSak,\n                    true\n                ),\n                harAktivitetskravIPeriodeUtenUttak,\n                familiehendelsesdatoDate!,\n                erAdopsjon,\n                bareFarMedmorHarRett,\n                erFarEllerMedmor,\n                førsteUttaksdagNesteBarnsSak\n            );\n            const eksisterendeSakMedAnnenPartsPlan = {\n                ...eksisterendeSak,\n                uttaksplan: uttaksplanMedAnnenPart,\n            };\n            dispatch(actionCreator.setUttaksplan(uttaksplanMedAnnenPart));\n            dispatch(actionCreator.setEksisterendeSak(eksisterendeSakMedAnnenPartsPlan));\n            dispatch(actionCreator.setAnnenPartsUttakErLagtTilIPlan(true));\n        }\n    }, [\n        eksisterendeVedtakAnnenPart,\n        opprinneligPlan,\n        familiehendelsesdatoDate,\n        harAktivitetskravIPeriodeUtenUttak,\n        erAdopsjon,\n        bareFarMedmorHarRett,\n        erFarEllerMedmor,\n        dispatch,\n        førsteUttaksdagNesteBarnsSak,\n        eksisterendeSak,\n        annenPartsUttakErLagtTilIPlan,\n    ]);\n\n    const onValidSubmitHandler = () => {\n        setSubmitIsClicked(true);\n        const cleanedTilleggsopplysninger = cleanupInvisibleCharsFromTilleggsopplysninger(tilleggsopplysninger);\n        return [\n            actionCreator.setTilleggsopplysninger(cleanedTilleggsopplysninger),\n            actionCreator.setEndringstidspunkt(endringstidspunkt),\n            actionCreator.setPerioderSomSkalSendesInn(perioderSomSkalSendesInn),\n        ];\n    };\n\n    const handleBegrunnelseChange = (årsak: SenEndringÅrsak, begrunnelse: string) => {\n        const ekstraInformasjon = årsak !== SenEndringÅrsak.Ingen ? årsak : undefined;\n        const opplysninger = {\n            ...tilleggsopplysninger,\n            begrunnelseForSenEndring: {\n                ...tilleggsopplysninger.begrunnelseForSenEndring,\n                tekst: begrunnelse,\n                ekstraInformasjon: ekstraInformasjon,\n            },\n        };\n        dispatch(actionCreator.setTilleggsopplysninger(opplysninger));\n    };\n    useEffect(() => {\n        const periodeAngittAvAnnenPart = opprinneligPlan?.find((p) => isUttaksperiode(p) && p.angittAvAnnenPart);\n\n        if (periodeAngittAvAnnenPart && endringstidspunkt === undefined) {\n            const tidspunktForEndring = periodeAngittAvAnnenPart.tidsperiode.fom;\n            dispatch(actionCreator.setEndringstidspunkt(tidspunktForEndring));\n\n            const perioderForÅSendeInn = getPerioderSomSkalSendesInn(\n                søknad.uttaksplan,\n                erEndringssøknad,\n                erFarEllerMedmor,\n                opprinneligPlan,\n                tidspunktForEndring\n            );\n            setPerioderSomSkalSendesInn(perioderForÅSendeInn);\n            dispatch(actionCreator.setPerioderSomSkalSendesInn(perioderForÅSendeInn));\n        }\n    }, [opprinneligPlan, dispatch, endringstidspunkt, erFarEllerMedmor, søknad.uttaksplan, erEndringssøknad]);\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        nextRoute,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state)\n    );\n\n    const perioderMedUttakRundtFødsel = getPerioderMedUttakRundtFødsel(\n        søknad.uttaksplan,\n        familiehendelsesdatoDate!,\n        termindato\n    );\n\n    const visAutomatiskJusteringForm = getVisAutomatiskJusteringForm(\n        erFarEllerMedmor,\n        familiehendelsesdatoDate!,\n        situasjon,\n        perioderMedUttakRundtFødsel,\n        barn,\n        termindato,\n        bareFarMedmorHarRett\n    );\n\n    const kanJustereAutomatiskVedFødsel = getKanJustereAutomatiskVedFødsel(\n        perioderMedUttakRundtFødsel,\n        termindato,\n        erFarEllerMedmor,\n        barn\n    );\n\n    const setØnskerJustertUttakVedFødselTilUndefinedHvisUgyldig = () => {\n        if ((visAutomatiskJusteringForm || erEndringssøknad) && !kanJustereAutomatiskVedFødsel) {\n            dispatch(actionCreator.setØnskerJustertUttakVedFødsel(undefined));\n        }\n    };\n\n    const ønskerJustertUttakVedFødselErBesvart = (ønskerAutomatiskJusteringSvar: boolean | undefined) => {\n        return (\n            visAutomatiskJusteringForm && kanJustereAutomatiskVedFødsel && ønskerAutomatiskJusteringSvar !== undefined\n        );\n    };\n\n    const ref = useRef<FormikValues>(null);\n    const clickHandler = (values: any) => {\n        setSubmitIsClicked(true);\n        if (uttaksplanErGyldig && !erTomEndringssøknad) {\n            if (ref.current) {\n                ref.current.handleSubmit();\n            }\n\n            setØnskerJustertUttakVedFødselTilUndefinedHvisUgyldig();\n\n            if (ønskerJustertUttakVedFødselErBesvart(values.ønskerAutomatiskJustering)) {\n                handleSubmit(values);\n            }\n        }\n    };\n\n    const onAvbrytSøknad = useAvbrytSøknad();\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n\n    useEffect(() => {\n        Api.storeAppState(debouncedState, person.fnr);\n    }, [person.fnr, debouncedState]);\n\n    const foreldreSituasjon = getForeldreparSituasjon(\n        person.kjønn,\n        annenForelderKjønn,\n        erDeltUttak,\n        morErAleneOmOmsorg,\n        farMedmorErAleneOmOmsorg,\n        rolle\n    );\n    const kontoRequestIsSuspended =\n        (eksisterendeSakAnnenPartRequestIsSuspended\n            ? false\n            : eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED) ||\n        (nesteBarnsSakAnnenPartRequestIsSuspended ? false : nesteSakAnnenPartRequestStatus !== RequestStatus.FINISHED);\n\n    const { tilgjengeligeStønadskontoerData: stønadskontoer100, tilgjengeligeStønadskontoerError } =\n        Api.useGetUttakskontoer(\n            getStønadskontoParams(\n                Dekningsgrad.HUNDRE_PROSENT,\n                barn,\n                annenForelder,\n                søkersituasjon,\n                farMedmorErAleneOmOmsorg,\n                morErAleneOmOmsorg,\n                dateToISOString(familieHendelseDatoNesteSak),\n                saksgrunnlagsAntallBarn,\n                saksgrunnlagsTermindato\n            ),\n            kontoRequestIsSuspended\n        );\n    const { tilgjengeligeStønadskontoerData: stønadskontoer80 } = Api.useGetUttakskontoer(\n        getStønadskontoParams(\n            Dekningsgrad.ÅTTI_PROSENT,\n            barn,\n            annenForelder,\n            søkersituasjon,\n            farMedmorErAleneOmOmsorg,\n            morErAleneOmOmsorg,\n            dateToISOString(familieHendelseDatoNesteSak),\n            saksgrunnlagsAntallBarn,\n            saksgrunnlagsTermindato\n        ),\n        kontoRequestIsSuspended\n    );\n\n    const handleOnPlanChange = (nyPlan: Periode[]) => {\n        setSubmitIsClicked(false);\n        dispatch(actionCreator.setUttaksplan(nyPlan));\n        const tidspunktForEndring = getEndringstidspunkt(opprinneligPlan, nyPlan, erEndringssøknad);\n        setEndringstidspunkt(tidspunktForEndring);\n\n        const perioderForÅSendeInn = getPerioderSomSkalSendesInn(\n            nyPlan,\n            erEndringssøknad,\n            erFarEllerMedmor,\n            opprinneligPlan,\n            tidspunktForEndring\n        );\n        setPerioderSomSkalSendesInn(perioderForÅSendeInn);\n        dispatch(actionCreator.setPerioderSomSkalSendesInn(perioderForÅSendeInn));\n    };\n\n    useEffect(() => {\n        if (tilgjengeligeStønadskontoerError) {\n            sendErrorMessageToSentry(tilgjengeligeStønadskontoerError);\n            throw new Error(\n                `Vi klarte ikke å hente opp stønadskontoer. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`\n            );\n        }\n        if (eksisterendeSakAnnenPartError) {\n            sendErrorMessageToSentry(eksisterendeSakAnnenPartError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om saken til annen forelder. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`\n            );\n        }\n\n        if (nesteSakAnnenPartError) {\n            sendErrorMessageToSentry(nesteSakAnnenPartError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om saken til annen forelder for neste barn. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`\n            );\n        }\n    }, [tilgjengeligeStønadskontoerError, eksisterendeSakAnnenPartError, nesteSakAnnenPartError]);\n\n    if (\n        !stønadskontoer100 ||\n        !stønadskontoer80 ||\n        (eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED &&\n            !eksisterendeSakAnnenPartRequestIsSuspended) ||\n        (nesteSakAnnenPartRequestStatus !== RequestStatus.FINISHED && !nesteBarnsSakAnnenPartRequestIsSuspended)\n    ) {\n        return (\n            <div style={{ textAlign: 'center', padding: '12rem 0' }}>\n                <NavFrontendSpinner type=\"XXL\" />\n            </div>\n        );\n    }\n\n    const stønadskontoer = getValgtStønadskontoFor80Og100Prosent(stønadskontoer80, stønadskontoer100);\n    const minsterettUkerToTette = getAntallUkerMinsterett(stønadskontoer100.minsteretter.toTette);\n\n    const valgteStønadskontoer =\n        dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? stønadskontoer[100] : stønadskontoer[80];\n\n    const erTomEndringssøknad =\n        erEndringssøknad && (perioderSomSkalSendesInn === undefined || perioderSomSkalSendesInn.length === 0);\n\n    const handleSlettUttaksplan = () => {\n        const slettetPlanUtenomFpFørFødsel = søknad.uttaksplan.filter((periode) =>\n            isUttakAvForeldrepengerFørFødsel(periode)\n        );\n        dispatch(actionCreator.slettUttaksplan(slettetPlanUtenomFpFørFødsel));\n        dispatch(actionCreator.setUttaksplanSlettet(true));\n    };\n\n    const handleResetUttaksplan = () => {\n        if (state.eksisterendeSak) {\n            dispatch(actionCreator.setUttaksplan(state.eksisterendeSak.uttaksplan));\n            dispatch(actionCreator.setPerioderSomSkalSendesInn([]));\n            setPerioderSomSkalSendesInn([]);\n        }\n    };\n\n    return (\n        <UttaksplanFormComponents.FormikWrapper\n            initialValues={getUttaksplanFormInitialValues(state.søknad.ønskerJustertUttakVedFødsel)}\n            onSubmit={handleSubmit}\n            innerRef={ref}\n            renderForm={({ values: formValues }) => {\n                const visibility = uttaksplanQuestionsConfig.getVisbility({\n                    ...formValues,\n                    termindato,\n                    perioderMedUttakRundtFødsel,\n                });\n\n                return (\n                    <Step\n                        bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n                        backLinkHref={erEndringssøknad ? undefined : getPreviousStepHref('uttaksplan')}\n                        backLinkOnClick={\n                            erEndringssøknad\n                                ? undefined\n                                : (_href, event) => {\n                                      event.preventDefault();\n                                      setGåTilbakeIsOpen(true);\n                                  }\n                        }\n                        activeStepId=\"uttaksplan\"\n                        pageTitle={intlUtils(intl, 'søknad.uttaksplan')}\n                        stepTitle={intlUtils(intl, 'søknad.uttaksplan')}\n                        onCancel={onAvbrytSøknad}\n                        onContinueLater={onFortsettSøknadSenere}\n                        steps={stepConfig(intl)}\n                        kompakt={true}\n                    >\n                        <Uttaksplan\n                            foreldreSituasjon={foreldreSituasjon}\n                            forelderVedAleneomsorg={forelderVedAleneomsorg}\n                            erDeltUttak={erDeltUttak}\n                            uttaksplan={søknad.uttaksplan}\n                            familiehendelsesdato={familiehendelsesdato}\n                            handleOnPlanChange={handleOnPlanChange}\n                            stønadskontoer={valgteStønadskontoer}\n                            navnPåForeldre={navnPåForeldre}\n                            annenForelder={annenForelder}\n                            arbeidsforhold={getAktiveArbeidsforhold(\n                                arbeidsforhold,\n                                ISOStringToDate(familiehendelsesdato)\n                            )}\n                            erEndringssøknad={erEndringssøknad}\n                            erFarEllerMedmor={erFarEllerMedmor}\n                            erFlerbarnssøknad={erFlerbarnssøknad}\n                            erAleneOmOmsorg={søkerErAleneOmOmsorg}\n                            harMidlertidigOmsorg={harMidlertidigOmsorg}\n                            situasjon={situasjon}\n                            erMorUfør={erMorUfør}\n                            morHarRett={morHarRett}\n                            søkersituasjon={søkersituasjon}\n                            dekningsgrad={dekningsgrad}\n                            antallBarn={antallBarn}\n                            tilleggsopplysninger={tilleggsopplysninger}\n                            setUttaksplanErGyldig={setUttaksplanErGyldig}\n                            handleBegrunnelseChange={handleBegrunnelseChange}\n                            eksisterendeSak={eksisterendeSak}\n                            perioderSomSkalSendesInn={perioderSomSkalSendesInn}\n                            morsSisteDag={morsSisteDag}\n                            harKomplettUttaksplan={harKomplettUttaksplan}\n                            opprinneligPlan={harUttaksplanBlittSlettet ? undefined : opprinneligPlan}\n                            handleSlettUttaksplan={handleSlettUttaksplan}\n                            handleResetUttaksplan={handleResetUttaksplan}\n                            termindato={termindato}\n                            barn={barn}\n                            visibility={visibility}\n                            visAutomatiskJusteringForm={visAutomatiskJusteringForm}\n                            perioderMedUttakRundtFødsel={perioderMedUttakRundtFødsel}\n                            barnFraNesteSak={barnFraNesteSak}\n                            familiehendelsesdatoNesteSak={familieHendelseDatoNesteSak}\n                            førsteUttaksdagNesteBarnsSak={førsteUttaksdagNesteBarnsSak}\n                            minsterettUkerToTette={minsterettUkerToTette}\n                        />\n                        <VilDuGåTilbakeModal isOpen={gåTilbakeIsOpen} setIsOpen={setGåTilbakeIsOpen} />\n                        {!uttaksplanErGyldig && submitIsClicked && (\n                            <Block textAlignCenter={true} padBottom=\"l\">\n                                <AlertStripe type=\"feil\">\n                                    <FormattedMessage id=\"uttaksplan.validering.kanIkkeGåVidere\" />\n                                </AlertStripe>\n                            </Block>\n                        )}\n                        {erTomEndringssøknad && submitIsClicked && (\n                            <Block textAlignCenter={true} padBottom=\"l\">\n                                <AlertStripe type=\"feil\">\n                                    <FormattedMessage id=\"uttaksplan.validering.kanIkkeGåVidereEndringssøknad\" />\n                                </AlertStripe>\n                            </Block>\n                        )}\n                        <Block textAlignCenter={true} padBottom=\"l\">\n                            <Hovedknapp onClick={clickHandler} disabled={isSubmitting} spinner={isSubmitting}>\n                                {intlUtils(intl, 'søknad.gåVidere')}\n                            </Hovedknapp>\n                        </Block>\n                    </Step>\n                );\n            }}\n        />\n    );\n};\nexport default UttaksplanStep;\n","import { Søknad } from 'app/context/types/Søknad';\nimport { uttaksplanInneholderPerioderUtenKonto } from 'app/utils/uttaksplan/uttaksplanUtils';\nimport SøknadRoutes from './routes';\n\nconst isAvailable = (route: SøknadRoutes, søknad: Søknad): boolean => {\n    switch (route) {\n        case SøknadRoutes.SØKERSITUASJON:\n            return søknad.harGodkjentVilkår === true;\n        case SøknadRoutes.OPPSUMMERING:\n            return uttaksplanInneholderPerioderUtenKonto(søknad.uttaksplan) === false && søknad.uttaksplan.length > 0;\n        default:\n            return true;\n    }\n};\n\nexport default isAvailable;\n","import { Locale } from '@navikt/fp-common';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport IkkeMyndig from 'app/pages/ikkeMyndig/IkkeMyndig';\nimport Velkommen from 'app/pages/velkommen/Velkommen';\nimport AnnenForelder from 'app/steps/annen-forelder/AnnenForelder';\nimport Inntektsinformasjon from 'app/steps/inntektsinformasjon/Inntektsinformasjon';\nimport OmBarnet from 'app/steps/om-barnet/OmBarnet';\nimport Oppsummering from 'app/steps/oppsummering/Oppsummering';\nimport Søkersituasjon from 'app/steps/søkersituasjon/Søkersituasjon';\nimport Utenlandsopphold from 'app/steps/utenlandsopphold/Utenlandsopphold';\nimport UttaksplanInfo from 'app/steps/uttaksplan-info/UttaksplanInfo';\nimport UttaksplanStep from 'app/steps/uttaksplan/UttaksplanStep';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\nimport { Route, useNavigate, Navigate, Routes, useLocation } from 'react-router-dom';\nimport SøknadSendt from '../pages/søknadSendt/SøknadSendt';\nimport isAvailable from './isAvailable';\nimport SøknadRoutes from './routes';\n\ninterface Props {\n    fornavn: string;\n    locale: Locale;\n    onChangeLocale: (locale: Locale) => void;\n    currentRoute: SøknadRoutes;\n}\n\nconst renderSøknadRoutes = (harGodkjentVilkår: boolean, erEndringssøknad: boolean, søkerErMyndig: boolean) => {\n    if (!harGodkjentVilkår) {\n        return <Route path=\"*\" element={<Navigate to={SøknadRoutes.VELKOMMEN} />} />;\n    }\n\n    if (!søkerErMyndig) {\n        return <Route path=\"*\" element={<Navigate to={SøknadRoutes.IKKE_MYNDIG} />} />;\n    }\n\n    if (erEndringssøknad) {\n        return (\n            <>\n                <Route path={SøknadRoutes.UTTAKSPLAN} element={<UttaksplanStep />} />\n                <Route path={SøknadRoutes.OPPSUMMERING} element={<Oppsummering />} />\n                <Route path={SøknadRoutes.SØKNAD_SENDT} element={<SøknadSendt />} />\n            </>\n        );\n    }\n\n    return (\n        <>\n            <Route path={SøknadRoutes.SØKERSITUASJON} element={<Søkersituasjon />} />\n            <Route path={SøknadRoutes.OM_BARNET} element={<OmBarnet />} />\n            <Route path={SøknadRoutes.ANNEN_FORELDER} element={<AnnenForelder />} />\n            <Route path={SøknadRoutes.UTTAKSPLAN_INFO} element={<UttaksplanInfo />} />\n            <Route path={SøknadRoutes.UTTAKSPLAN} element={<UttaksplanStep />} />\n            <Route path={SøknadRoutes.UTENLANDSOPPHOLD} element={<Utenlandsopphold />} />\n            <Route path={SøknadRoutes.INNTEKTSINFORMASJON} element={<Inntektsinformasjon />} />\n            <Route path={SøknadRoutes.OPPSUMMERING} element={<Oppsummering />} />\n            <Route path={SøknadRoutes.SØKNAD_SENDT} element={<SøknadSendt />} />\n        </>\n    );\n};\n\nconst ForeldrepengesøknadRoutes: FunctionComponent<Props> = ({ fornavn, locale, onChangeLocale, currentRoute }) => {\n    const { state } = useForeldrepengesøknadContext();\n    const navigate = useNavigate();\n    const location = useLocation();\n    const harGodkjentVilkår = state.søknad.harGodkjentVilkår;\n    const erMyndig = state.søkerinfo.person.erMyndig;\n    const [isFirstTimeLoadingApp, setIsFirstTimeLoadingApp] = useState(true);\n\n    useEffect(() => {\n        if (currentRoute && erMyndig && harGodkjentVilkår && isFirstTimeLoadingApp) {\n            setIsFirstTimeLoadingApp(false);\n            if (isAvailable(currentRoute, state.søknad)) {\n                navigate(currentRoute);\n            } else {\n                if (location.pathname === SøknadRoutes.OPPSUMMERING) {\n                    navigate(SøknadRoutes.UTTAKSPLAN);\n                }\n            }\n        }\n    }, [currentRoute, erMyndig, harGodkjentVilkår, navigate, isFirstTimeLoadingApp, state.søknad, location.pathname]);\n\n    return (\n        <Routes>\n            <Route\n                path={SøknadRoutes.VELKOMMEN}\n                element={\n                    <Velkommen\n                        fornavn={fornavn}\n                        locale={locale}\n                        saker={state.saker}\n                        onChangeLocale={onChangeLocale}\n                        fnr={state.søkerinfo.person.fnr}\n                    />\n                }\n            />\n            <Route path={SøknadRoutes.IKKE_MYNDIG} element={<IkkeMyndig fornavn={state.søkerinfo.person.fornavn} />} />\n\n            {renderSøknadRoutes(harGodkjentVilkår, state.søknad.erEndringssøknad, erMyndig)}\n        </Routes>\n    );\n};\n\nexport default ForeldrepengesøknadRoutes;\n","import { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport SøknadRoutes from 'app/routes/routes';\n\nconst isEndringssøknadRoute = (route: SøknadRoutes): boolean => {\n    switch (route) {\n        case SøknadRoutes.UTTAKSPLAN:\n        case SøknadRoutes.OPPSUMMERING:\n        case SøknadRoutes.SØKNAD_SENDT:\n            return true;\n        default:\n            return false;\n    }\n};\n\nexport const shouldApplyStorage = (storedState: ForeldrepengesøknadContextState): boolean => {\n    if (storedState.søknad && storedState.søknad.erEndringssøknad) {\n        if (!isEndringssøknadRoute(storedState.currentRoute)) {\n            return false;\n        }\n    }\n\n    return storedState.version === 5;\n};\n","import { Locale } from '@navikt/fp-common';\nimport NavFrontendSpinner from 'nav-frontend-spinner';\nimport React, { useEffect } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Api from './api/api';\nimport { sendErrorMessageToSentry } from './api/apiUtils';\nimport actionCreator from './context/action/actionCreator';\nimport { useForeldrepengesøknadContext } from './context/hooks/useForeldrepengesøknadContext';\nimport ForeldrepengesøknadRoutes from './routes/ForeldrepengesøknadRoutes';\nimport SøknadRoutes from './routes/routes';\nimport mapSøkerinfoDTOToSøkerinfo from './utils/mapSøkerinfoDTO';\nimport { shouldApplyStorage } from './utils/mellomlagringUtils';\n\ninterface Props {\n    locale: Locale;\n    onChangeLocale: any;\n}\n\nconst renderSpinner = () => (\n    <div style={{ textAlign: 'center', padding: '12rem 0' }}>\n        <NavFrontendSpinner type=\"XXL\" />\n    </div>\n);\n\nconst Foreldrepengesøknad: React.FunctionComponent<Props> = ({ locale, onChangeLocale }) => {\n    const { søkerinfoData, søkerinfoError } = Api.useSøkerinfo();\n    const { sakerData, sakerError } = Api.useGetSaker();\n    const { storageData } = Api.useStoredAppState();\n    const { dispatch, state } = useForeldrepengesøknadContext();\n\n    useEffect(() => {\n        if (storageData) {\n            if (shouldApplyStorage(storageData)) {\n                dispatch(actionCreator.applyStoredState(storageData));\n            }\n        }\n        if (søkerinfoData) {\n            dispatch(actionCreator.setSøkerinfo(mapSøkerinfoDTOToSøkerinfo(søkerinfoData)));\n        }\n\n        if (sakerData) {\n            dispatch(actionCreator.setSaker(sakerData.foreldrepenger));\n        }\n    }, [dispatch, storageData, søkerinfoData, sakerData]);\n\n    useEffect(() => {\n        if (søkerinfoError) {\n            sendErrorMessageToSentry(søkerinfoError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om deg. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`\n            );\n        }\n        if (sakerError) {\n            sendErrorMessageToSentry(sakerError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om sakene dine. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`\n            );\n        }\n    }, [søkerinfoError, sakerError]);\n\n    if (!state.søkerinfo || !sakerData) {\n        return renderSpinner();\n    }\n\n    return (\n        <BrowserRouter>\n            <ForeldrepengesøknadRoutes\n                fornavn={state.søkerinfo.person.fornavn}\n                locale={locale}\n                onChangeLocale={onChangeLocale}\n                currentRoute={storageData ? storageData.currentRoute : SøknadRoutes.VELKOMMEN}\n            />\n        </BrowserRouter>\n    );\n};\n\nexport default Foreldrepengesøknad;\n","import React from 'react';\nimport * as Sentry from '@sentry/browser';\nimport Feilside from 'app/pages/feilside/Feilside';\nimport links from 'app/links/links';\nimport { FOR_MANGE_VEDLEGG_ERROR } from 'app/api/apiUtils';\n\ninterface State {\n    hasError: boolean;\n    error: Error | null;\n}\n\nclass ErrorBoundary extends React.Component<any, State> {\n    constructor(props: unknown) {\n        super(props);\n        this.state = { hasError: false, error: null };\n    }\n\n    componentDidCatch(error: Error | null, errorInfo: any): void {\n        if (error && error.message !== 'window.hasFocus is not a function') {\n            this.setState({ ...this.state, hasError: true, error });\n\n            Sentry.withScope((scope) => {\n                scope.setExtras(errorInfo);\n                Sentry.captureException(error);\n            });\n        }\n    }\n\n    render() {\n        if (this.state.hasError) {\n            const feilPgaForMangeVedlegg =\n                !!this.state.error &&\n                !!this.state.error.message &&\n                this.state.error.message === FOR_MANGE_VEDLEGG_ERROR;\n            const feilsideTittel = feilPgaForMangeVedlegg ? 'Feil: for mange vedlegg' : 'Informasjon om feilen';\n            return (\n                <Feilside\n                    dokumenttittel=\"NAV Foreldrepengesøknad\"\n                    ingress={`${this.state.error?.message}`}\n                    tittel={feilsideTittel}\n                    illustrasjon={{\n                        tittel: 'Hei!',\n                        tekst: 'Noe har gått galt med søknaden.',\n                        veileder: {\n                            ansikt: 'skeptisk',\n                        },\n                        lenke: { tekst: 'Her finner du en lenke til brukerstøtte', url: links.brukerstøtte },\n                    }}\n                    skalKunneGåTilbakeTilSøknad={feilPgaForMangeVedlegg}\n                />\n            );\n        }\n\n        return this.props.children;\n    }\n}\nexport default ErrorBoundary;\n","import React, { useState } from 'react';\nimport dayjs from 'dayjs';\nimport { getLocaleFromSessionStorage, Locale, setLocaleInSessionStorage } from '@navikt/fp-common';\nimport IntlProvider from './intl/IntlProvider';\nimport ForeldrepengesøknadContextProvider from './context/ForeldrepengesøknadContext';\nimport Foreldrepengesøknad from './Foreldrepengesøknad';\nimport ByttBrowserModal from 'app/pages/byttBrowserModal/ByttBrowserModal';\nimport ErrorBoundary from './errorBoundary/ErrorBoundary';\n\nconst localeFromSessionStorage = getLocaleFromSessionStorage();\n\ndayjs.locale(localeFromSessionStorage);\n\nconst AppContainer = () => {\n    const [locale, setLocale] = useState<Locale>(localeFromSessionStorage);\n\n    return (\n        <ForeldrepengesøknadContextProvider>\n            <ErrorBoundary>\n                <IntlProvider locale={locale}>\n                    <ByttBrowserModal />\n                    <Foreldrepengesøknad\n                        locale={locale}\n                        onChangeLocale={(activeLocale: Locale) => {\n                            setLocaleInSessionStorage(activeLocale);\n                            setLocale(activeLocale);\n                        }}\n                    />\n                </IntlProvider>\n            </ErrorBoundary>\n        </ForeldrepengesøknadContextProvider>\n    );\n};\n\nexport default AppContainer;\n"],"names":["InfoBlock","children","bem","bemUtils","_jsx","LocaleSessionKey","getLocaleFromSessionStorage","setLocaleInSessionStorage","locale","Feilside","containerId","dokumenttittel","illustrasjon","tittel","ingress","skalKunneGåTilbakeTilSøknad","språkkode","setLanguage","dispatch","state","useForeldrepengesøknadContext","søkerinfo","avbrytSøknadHandler","useCallback","logAmplitudeEvent","actionCreator","Api","gåTilbakeTilSøknadenHandler","useDocumentTitle","jsxs","Fragment","jsx","LanguageToggle","Sidebanner","Block","Lenke","Innholdstittel","Normaltekst","Hovedknapp","IkkeMyndig","fornavn","intl","useIntl","intlUtils","links","UtsettelseEndreTidsperiodeSpørsmål","onBekreft","onAvbryt","changeTidsperiode","visible","periode","tidsperiode","familiehendelsesdato","ugyldigeTidsperioder","utsettelserIPlan","erFarEllerMedmor","morHarRett","situasjon","erFarMedmorOgHarAleneomsorg","initialMonth","isForeldrepengerFørFødselUttaksperiode","varighetIDager","dayjs","Tidsperioden","uker","dager","getUkerOgDagerFromDager","handleOnSubmit","values","getDagValue","uker2","dager2","Modal","TidsperiodeForm","UkerDagerTeller","nyUker","date","getTidsperiode","nyDager","PeriodeUtsettelseFormField","PeriodeUtsettelseFormComponents","getTypedFormComponents","initialValues","getFormStateFraVedlegg","vedlegg","gjelderMorsAktivitet","v","AttachmentType","getPeriodeUtsettelseFormInitialValues","isUtsettelsesperiode","isUtsettelsePgaArbeid","getVedleggFraFormState","morsAktivitetIPeriodenDokumentasjon","mapPeriodeUtsettelseFormToPeriode","id","Periodetype","Forelder","cleanupPeriodeUtsettelseFormData","UtsettelseÅrsakType","PeriodeUtsettelseFormConfig","hasValue","isValidTidsperiode","søkerErFarEllerMedmorOgKunDeHarRett","periodeUtsettelseFormQuestionsConfig","Questions","getUtsettelseÅrsakOptions","periodenErKunHelligdager","skalViseGamleUtsettelseÅrsaker","tidsperiodenErInnenforFørsteSeksUker","erMorUfør","option","getUtsettelseårsakSkjemanummer","årsak","Skjemanummer","showAttachmentUploader","getAttachmentUploaderLabel","getAttachmentUploaderType","getVeilederTekst","FormattedMessage","UtsettelseÅrsakSpørsmål","utsettelseårsak","årsakOptions","Veilederpanel","VeilederNormal","FormikFileUploader","PeriodeUtsettelseForm","handleUpdatePeriode","erAleneOmOmsorg","handleAddPeriode","handleDeletePeriode","toggleIsOpen","isNyPeriode","setNyPeriodeFormIsVisible","navnPåForeldre","tidsperiodeIsOpen","setTidsperiodeIsOpen","useState","antallHelligdager","antallUttaksdager","førsteOktober2021ReglerGjelder","toggleVisTidsperiode","setFieldValue","visibility","values2","ISOStringToDate","SubmitListener","TidsperiodeDisplay","value","AktivitetskravSpørsmål","Knapp","LinkButton","getSlettPeriodeTekst","guid","NyPeriode","isUtsettelse","annenForelder","arbeidsforhold","stønadskontoer","erFlerbarnssøknad","erDeltUttak","setPeriodeErGyldig","nesteLedigeUttaksdato","erEndringssøknad","termindato","antallBarn","setPeriode","Undertittel","PeriodeUttakForm","ArbeidIkon","props","title","rest","FerieIkon","SykdomIkon","TerminIkon","UttakIkon","UttaksplanIkonKeys","UttaksplanIkonKeys2","UttaksplanIkon","ikon","Ikon","getAlertStripeTypeFromMessageType","message","getIkonForVeilederMelding","melding","renderAlert","skjulMeldingIkon","content","Element","AlertStripe","VeilederMelding","stil","VeilederMeldinger","meldinger","UttaksplanColor","getForelderFarge","forelder","getStønadskontoFarge","konto","forIkon","harMidlertidigOmsorg","StønadskontoType","getUtsettelseFarge","IconBox","color","stripes","classnames","StønadskontoIkon","gradert","getStønadskontoNavn","getIkonForKonto","UtsettelseIkon","UttaksplanAdvarselIkon","farge","getPeriodeIkon","isUtsettelseAnnenPart","getVarighetString","antallDager","format","dagerStr","ukerStr","renderDagMnd","dato","visÅr","d","måned3bokstaver","måned","år","PeriodelisteItemHeader","egenPeriode","annenForelderSamtidigUttakPeriode","varighetString","erFpFørTerminUtenUttak","annenForelderIsMor","annenForelderNavn","beskrivelseSamtidigUttak","isUttakAnnenPart","getForelderNavn","getValidTidsperiode","classNames","getPeriodeTittel","PeriodeHull","navnAnnenForelder","kunHelligdager","kunUttaksdager","onLeggInnNyPeriode","leggInnNyUtsettelse","nyeRegler","ActionLink","getUtsettelseTekst","foreldernavn","erMor","PeriodeInfo","formaterDatoKompakt","getOppholdskontoNavn","PeriodeUtenUttak","onLeggTilNyPeriode","PeriodeFørFødselFormField","PeriodeFørFødselFormComponents","PeriodeFørFødselFormConfig","fom","skalIkkeHaUttakFørTermin","tom","periodeFørFødselFormQuestionsConfig","getPeriodeFørFødselFormInitialValues","sisteUttaksagFørFødsel","Uttaksdagen","førsteUttaksdag3UkerFørFødsel","uttaksConstants","mapPeriodeFørFødselFormToPeriode","PeriodeFørFødselForm","handleCleanup","_visibility","UttakEndreTidsperiodeSpørsmål","renderPeriodeListeInnhold","isAvslåttPeriode","PeriodelisteItem","isOpen","isInfoPeriode","toggleFocusAndOpen","headerButton","EkspanderbartpanelBase","m","HjerteIkon","fylt","getTekst","barn","familiehendelsedato","isAdoptertBarn","formaterDatoUtenDag","isFødtBarn","FamiliehendelsedatoDisplay","getIndexOfFørstePeriodeEtterFødsel","uttaksplan","p","getIndexOfSistePeriodeFørDato","Periodeliste","meldingerPerPeriode","barnFraNesteSak","openPeriodeId","setOpenPeriodeId","indexOfFørstePeriodeEtterFødsel","erAllePerioderIPlanenFørFødsel","indexOfSistePeriodeFørNyStøndasperiodeNyttBarn","index","formatDate","getAnnenForelderSamtidigUttakPeriode","Planlegger","setSlettUttaksplanModalOpen","setResetUttaksplanModalOpen","nyPeriodeFormIsVisible","setIsUtsettelse","Periodene","annenForelderErOppgitMenHarIkkeRett","isAnnenForelderOppgitt","Systemtittel","ForelderIkon","width","scale","scaledWidth","scaledHeight","getForeldreparIkon","finnAntallDagerÅTrekke","Perioden","isUttaksperiode","periodeErGradert","periodeErSamtidigUttak","graderingsProsent","getFloatFromString","getAllePerioderMedUttaksinfoFraUttaksplan","perioder","getUttakFraOppholdsperioder","isOppholdsperiode","getUttakFraOverføringsperioder","isOverføringsperiode","getUttakFraInfoperioder","getUttakFraAvslåttePerioder","beregnGjenståendeUttaksdager","tilgjengeligeStønadskontoer","beregnDagerBrukt","alleUttakIUttaksplan","uttaksplanPerioder","beregnBrukteUttaksdager","oppholdsperioder","opphold","getStønadskontoFromOppholdsårsak","overføringer","overføring","oppholdAnnenPart","PeriodeInfoType","type","isMorsPeriode","isFarsPeriode","isFellesperiodeKvote","uttak","isMorsKvote","isFarMedmorsKvote","summerBrukteUttaksdager","u","getBrukteDagerForForelder","perioderFørTermin","perioderEtterTermin","førTermin","etterTermin","alle","dagerTotalt","isMor","dagerEgneKvoter","dagerOverført","dagerFellesperiode","getBrukteDager","perioderMedUttak","getUttaksstatus","harKomplettUttaksplan","gjelderDagerBrukt","kontouttak","Kontostatus","kontoErOvertrukket","Kontostatus$1","injectIntl","TilesList","columns","React.Children","child","filtrerBortAnnenPartsKonto","uttakskontoer","OversiktPerForelder","brukteDagerPerForelder","erDeltUttakINorge","foreldreparSituasjon","søkerErFarEllerMedmor","søkerErMor","svgInfo","getSituasjonForelderSvg","Personkort","capitalizeFirstLetter","OversiktPerKvote","uttaksstatus","uttakÅVise","OversiktKvoter","annenForelderHarRettINorge","søker","useSøkerinfo","søknad","useSøknad","isFarEllerMedmor","getNavnPåForeldre","inneholderUttaksplanPerioderTest","grunnlag","isPeriodeUtenUttak","isHull","ANTALL_UTTAKSDAGER_SEKS_UKER","getInformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor","bareFarMedmorHarRett","morErUfør","søkerErFarEllerMedmorOgAnnenForelderKanIkkeOppgis","søkerErFarEllerMedmorOgErAleneOmOmsorgen","førstePeriode","førsteUttaksdag","førsteRegistrerteUttaksdag","sisteUttaksdagInnenforSeksUker","getUgyldigUttakMor","flerbarnsFødsel","uttaksdatoer","førsteUttaksdagEtterSeksUker","førsteUttaksdagEtterÅtteUker","ugyldigUttakRegelFørsteDato","ugyldigUttakRegelSisteDato","ugyldigPeriode","erPeriodeFørDato","ugyldigeUtsettelser","gradertePerioder","flernbarnsPerioder","fellesPerioder","samtidigUttaksperioder","andreAugust2022ReglerGjelder","unntakFarFørsteSeksUker","MorsAktivitet","erFarsUttakFørsteSeksUkerGyldig","unntak","getUgyldigUttakFørsteSeksUkerForFarMedmor","farsPerioderInnenforSeksFørsteUker","ugyldigeUttak","ugyldigeOverføringer","OverføringÅrsakType","utsettelse","harMorSøktUgyldigUttakFørsteSeksUkerTest","ugyldigePerioder","stønadskontoInneholderForMyeUttakKunSøkerTest","søkerErAleneOmOmsorg","stønadskontoerMedForMyeUttak","harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest","wlbReglerGjelder","erPeriodeInnvilget","erUttaksplanBareOppholdTest","uttaksplanErBareOpphold","slutterUttaksplanMedOppholdTest","uttaksplanSlutterMedOpphold","starterUttaksplanMedOppholdTest","uttaksplanStarterMedOpphold","uttaksplanGraderingStørreEnnSamtidigUttak","erUttaksplanGraderingStørreEnnSamtidigUttakTest","tilleggsopplysningerMaxLength","maxLengthIsGreaterThanOrEqualToStringLength","maxLength","tilleggsopplysningerErGyldig","begrunnelse","erTilleggsopplysningerGyldigTest","begrunnelseForSenEndring","begrunnelseTekst","harTilleggsopplysningerGyldigeCharsTest","tekst","validateTextHasLegalChars","getIllegalChars","harUttaksplanForMangeFlerbarnsdagerTest","dekningsgrad","uttaksplanHarForMangeFlerbarnsdager","inneholderUttaksplanDatoSomIkkeErUttaksdag","erUttaksdag","harPerioderManglendeVedleggTest","manglendeVedlegg","findMissingAttachmentsForPerioder","førsteUttaksEllerUttsettelsesPeriode","sorterPerioder","regelTekst","passerer","inneholderSenUtsettelsePgaFerieTest","seneUtsettelsePgaFerie","erSenUtsettelsePgaFerieEllerArbeid","inneholderTapteDagerTest","infoOmTaptUttakVedUttakEtterSeksUkerFarMedmor","planInneholderTapteDager","planInneholderAnnetEnnAktivitetsfriKvote","inneholderBareUtsettelserTest","isOverskrivbarPeriode","intlKey","formaterDato","inneholderSenUtsettelsePgaArbeidTest","seneUtsettelserPgaArbeid","overskriverEndringerAnnenPartsPerioder","eksisterendeUttaksplan","fornavnAnnenForelder","perioderSomOverlapper","perioderSomOverlapperUtenSamtidigUttak","getNavnGenitivEierform","_intl","msg","overlapperPeriodeAndrePerioder","perioderUtenUttakAnnenPart","perioderSomHarOverlapp","getPeriodeForelderNavn","RegelAlvorlighet","getRegelIntlKey","regel","intlRegelPrefix","alvorlighetSortOrder","sorterAvvik","a1","a2","ensureRegelAvvikIntlKey","info","overstyresAvFilter","avvik","_idx","alleAvvik","b2","overstyrerAndreFilter","rb","rbo","regelHarAvvik","periodeId","mapInfoToRegelAvvik","regelAvvik","isArray","regelPasserer","getRegelAvvik","resultat","flatten","r","isRegelFeil","hasRegelFeil","a","trimRelaterteRegelAvvik","grupperAvvik","uniqBy","getRegelIntlValues","newValues","key","valueOrFunc","hasValueRule","failText","getStillingsprosentRegler","erSamtidigUttak","stillingsprosent","stillingsprosentIsMoreThan0","samtidigUttakProsentIsMax100","stillingsprosentIsLessThan100","gradertUttaksperiodeErUgyldig","erGyldig","samtidigUttaksperiodeErUgyldig","ønskerSamtidigUttak","samtidigUttakProsent","harUttaksperiodeGyldigGradering","runValidators","validators","inputName","results","validator","valid","tests","allValidatorsPass","erUtfyltTest","erUttaksdagTest","slutterInnenforGyldigPermisjonsperiode","starterInnenforGyldigAntallUkerFørTermin","getUttakTidsperiodeValidatorer","skalIkkeHaUttak","uttakTidsperiodeErGyldig","uttaksperiode","fraDatoErGyldig","tilDatoErGyldig","getUtsettelseTidsperiodeValidatorer","utsettelseTidsperiodeErGyldig","utsettelesperiode","harPeriodeGyldigTidsperiode","perioderMedUgyldigTidsperiode","harUttaksperiodeStønadskonto","uttaksperioderUtenStønadskonto","erSamtidigUttakGyldig","erUtsettelseEtterFamiliehendelsesdato","starterUttaksperiodeRundtFødselEtter2UkerFørFødsel","gjelderWLBReglerFarMedmorRundtFødsel","perioderFarMedmorSomStarterFør2UkerFørFødsel","isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel","starterTidsperiodeEtter2UkerFørFødsel","førsteUttaksdagToUkerFørFødsel","getFørsteUttaksdag2UkerFørFødsel","slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel","perioderFarMedmorSomIkkeSlutterFør6UkerEtterFødsel","isUttaksperiodeFarMedmorPgaFødsel","slutterTidsperiodeInnen6UkerEtterFødsel","sisteUttaksdagSeksUkerEtterFødsel","getSisteUttaksdag6UkerEtterFødsel","periodeDeFørsteSeksUkeneHarUlovligUttakBFHR","perioderDeFørsteSeksUkeneMedUlovligUttakBFHR","starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel","harBekreftet100ProsentArbeidIUtsettelsePgaArbeid","utsettelserPgaArbeidUtenBekreftelse","laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn","førsteUttaksdagForPåfølgendeBarn","forSenUttakVedPåfølgendeBarn","sisteMuligeUttaksdag","skjulIOppsummering","periodevalideringsregler","harSøktOmFerieUtenArbeidsforhold","isUtsettelsePgaFerie","inneholderForMyeFerie","ferieUtsettelser","ferieDager","sumFerieDager","kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme","gjenståendeDager","sistePeriodeErIkkeUtsettelse","resterendeFellesperiode","resterendeMødrekvote","resterendeFedrekvote","resterendeForeldrepenger","erUttaksmengdeForFarMedmorForHøy","farEllerMedmor","erUttaksmengdeForFarMedmorForHøyTest","vekslendeArbeidOgUttakTest","kunSøkersPerioder","firstArbeidsperiodeIndex","antallPerioderEtterFørsteUtsettelseGrunnetArbeid","vekslendePeriodeUtenUttakOgUttakTest","firstPeriodeUtenUttakIndex","antallPerioderEtterFørstePeriodeUtenUttak","burdeKanskjeSøkeGraderingTest","vekslerArbeidOgUttakTest","veklserPerioderUtenUttakOgUttaktest","infoTekstKey","ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest","isUfødtBarn","inneholderPerioderUtenAktivitetskrav","søkerHarMidlertidigOmsorg","søkersituasjon","perioderUtenAktivitetskrav","farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk","inneholderUtsettelserUtenÅrsak","utsettelserUtenÅrsak","overskridelseUttakRundtFødselAntallDager","perioderRundtFødsel","sisteUttak6UkerEtterFødsel","perioderAvkortetTilÅSlutte6UkerEtterFødsel","getSumUttaksdagerÅTrekkeIPeriodene","ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL","farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest","perioderUttakRundtFødsel","getFarMedmorUttakRundtFødsel","antallDagerForMye","slutterEnAvPeriodeneForSent","fraDato","tilDato","harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest","sisteUttaksdagEtterSeksUker","farMedMorHarRettPåUttakRundtFødselTest","tattUtForMangeDagerIPlanen","dagerIgjenRundtFødsel","førsteUttaksdag2UkerFørFødsel","antallUttaksdagerRundtFødsel","erMerEnn3månederSidenFamiliehendelse","getBareFarHarRettKontoUtenAktivitetskravUker","bareFarHarRett","morUførUker","flerbarnsukerSomDelAvMinsterett","Dekningsgrad","getBareFarHarRettFlerbarnsdagerUker","flerbarnsUker","getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB","antallUkerEtterFødselMor","antallUkerForeldrepengerFar","farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest","kontoUtenAktivitetskravUker","testPasserer","renderAsHtml","link","antallUkerPåÅTaUtDager","inneholderUttaksperioderMedUbesvartGradering","perioderMedUbesvartGradering","graderingSkalBesvares","inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest","uttaksperioder","perioderMedUbesvartSpmOmFlerbarnsdager","ønskerFlerbarnsdagerSkalBesvares","UttakRundtFødselÅrsak","farMedmorHarRettPåFlerbarnsdagerTest","overstigerMinsterettVedToTette","minsterettUkerToTette","perioderEtterFørsteStønadsperiodeNyttBarn","perioderFørFørsteStønadsperiodeNyttBarn","minsterettMaxAntallUker","minsterettMaxAntallDager","brukteDagerPerForelderFørFørsteStønadsdagNyttBarn","uttaksdagerFremTilNyttBarnStønadsdag","dagerIgjenÅBrukePåMinsteretten","brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn","uttaksdagerEtterNyttBarnStønadsdag","dagerIgjenAvMinsterett","harPerioderEtterFørsteStønadsdagNesteBarnDerToTette","tekstKey","uttaksplanValideringRegler","uttaksplanRegler","familiehendelsesDato","REGEL_INTL_PREFIX","sjekkUttaksplanOppMotRegler","valideringsgrunnlag","validerUttaksplan","søknadsinfo","avvikPerPeriode","groupBy","harFeil","VeilederInfo","messages","kompakt","paneltype","veilederStil","ariaTittel","harAdvarsler","ansikt","Veileder","AriaText","intlHasKey","mapAvvikTilMessage","tittelIntlKey","harTittel","getUttaksplanVeilederinfo","getPeriodelisteMeldinger","veilederinfo","getLabel","UtvidetInformasjon","OppgiTilleggsopplysninger","React","__publicField","e","throttle","Textarea","OppgiTilleggsopplysninger$1","SlettUttaksplanModal","onClose","handleSlettUttaksplanModalBekreft","innhold1Id","innhold2Id","slettPeriode","slettetPeriode","harAktivitetskravIPeriodeUtenUttak","erAdopsjon","førsteUttaksdagNesteBarnsSak","res","getPeriodeHullEllerPeriodeUtenUttak","oppdaterPeriode","endretPeriode","originalPeriode","annenPartsUttak","perioderSlettetEndretPeriode","slåSammenLikePerioder","leggTilPeriode","leggTilPeriodeOgBuild","bevegeligePerioder","fastePerioder","nyPeriode","nyePerioder","fastPeriode","finnOgSettInnHull","settInnAnnenPartsUttak","oppdaterPeriodeOgBuild","oppdatertePerioder","fjernUnødvendigeHull","slettPeriodeOgBuild","getFastePerioder","starterUttaksperiodeFørFødsel","getBevegeligePerioder","getAnnenPartsUttak","Uttaksplanbuilder","opprinneligPlan","perioderUtenAnnenPart","nyAnnenPartsUttak","nyFastePerioder","nyBevegeligePerioder","UttaksplanFormField","UttaksplanFormComponents","mapUttaksplanFormValueToState","convertYesOrNoOrUndefinedToBoolean","getUttaksplanFormInitialValues","ønskerAutomatiskJustering","convertBooleanOrUndefinedToYesOrNo","YesOrNo","AutomatiskJusteringForm","perioderMedUttakRundtFødsel","uttaksdagPåEllerEtterTermin","svarteJaMenFlerePerioderInnen6Uker","svarteJaMenStarterIkkeLengerPåTermin","svarteJaMenEndretPeriodenPåTermin","svarteJaMenEndretPeriodenTilØnskerFlerbarnsdager","infoTekstId","handleOnChange","ønskerJustertUttakVedFødsel","ResetUttaksplanModal","handleResetUttaksplanModalBekreft","Uttaksplan","foreldreSituasjon","handleOnPlanChange","tilleggsopplysninger","eksisterendeSak","perioderSomSkalSendesInn","setUttaksplanErGyldig","handleBegrunnelseChange","handleSlettUttaksplan","handleResetUttaksplan","visAutomatiskJusteringForm","familiehendelsesdatoNesteSak","familiehendelsesdatoDate","periodeErGyldig","slettUttaksplanModalOpen","resetUttaksplanModalOpen","getHarAktivitetskravIPeriodeUtenUttak","uttaksplanUtenAnnenPartsSamtidigUttak","toTetteReglerGjelder","getToTetteReglerGjelder","builder","result","oppdatertPeriode","familiehendelsesdato2","farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato","splittUttaksperiodePåFamiliehendelsesdato","tidperiodeOverlapperDato","splittPeriodePåDato","vedleggForSenEndring","årsakTilSenEndring","getSeneEndringerSomKreverBegrunnelse","handleBegrunnelseTekstChange","uttaksplanValidering","useEffect","handleSlettUttaksplanModalClose","handleResetUttaksplanModalClose","uttaksplanVeilederInfo","InfoOmSøknaden","SenEndringÅrsak","useDebounce","delay","debouncedValue","setDebouncedValue","handler","VilDuGåTilbakeModal","setIsOpen","navigate","useNavigate","ModalWrapper","SøknadRoutes","getKanPeriodenRundtFødselJusteres","periodeRundtFødsel","getKanJustereAutomatiskVedFødsel","BarnType","getVisAutomatiskJusteringForm","includeAutomatiskJusteringSpørsmål","UttaksplanFormConfig","uttaksplanQuestionsConfig","UttaksplanStep","gåTilbakeIsOpen","setGåTilbakeIsOpen","uttaksplanErGyldig","submitIsClicked","setSubmitIsClicked","endringstidspunkt","setEndringstidspunkt","setPerioderSomSkalSendesInn","nextRoute","uttaksplanInfo","harUttaksplanBlittSlettet","annenPartsUttakErLagtTilIPlan","person","rolle","debouncedState","annenForelderKjønn","getKjønnFromFnr","morErAleneOmOmsorg","getMorErAleneOmOmsorg","farMedmorErAleneOmOmsorg","getFarMedmorErAleneOmOmsorg","forelderVedAleneomsorg","getFamiliehendelsedato","getErMorUfør","getMorHarRettPåForeldrepengerINorgeEllerEØS","morsSisteDag","getMorsSisteDag","getTermindato","annenForelderFnr","annenForelderFnrNesteSak","førsteBarnFraNesteSakFnr","familieHendelseDatoNesteSak","barnFnr","eksisterendeSakAnnenPartRequestIsSuspended","useSaveLoadedRoute","eksisterendeSakAnnenPartData","eksisterendeSakAnnenPartError","eksisterendeSakAnnenPartRequestStatus","eksisterendeVedtakAnnenPart","useMemo","mapAnnenPartsEksisterendeSakFromDTO","saksgrunnlagsTermindato","getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter","saksgrunnlagsAntallBarn","getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter","søknadMedOppdatertAntallBarn","nesteBarnsSakAnnenPartRequestIsSuspended","RequestStatus","nesteSakAnnenPartData","nesteSakAnnenPartError","nesteSakAnnenPartRequestStatus","dateToISOString","førsteUttaksdagAnnenPart","getStartdatoFørstePeriodeAnnenPart","oppdatertBarnNesteSak","overlappendePerioderAnnenPart","uttaksplanMedAnnenPart","eksisterendeSakMedAnnenPartsPlan","onValidSubmitHandler","cleanedTilleggsopplysninger","cleanupInvisibleCharsFromTilleggsopplysninger","ekstraInformasjon","opplysninger","periodeAngittAvAnnenPart","tidspunktForEndring","perioderForÅSendeInn","getPerioderSomSkalSendesInn","handleSubmit","isSubmitting","useOnValidSubmit","storeAppState","getPerioderMedUttakRundtFødsel","kanJustereAutomatiskVedFødsel","setØnskerJustertUttakVedFødselTilUndefinedHvisUgyldig","ønskerJustertUttakVedFødselErBesvart","ønskerAutomatiskJusteringSvar","ref","useRef","clickHandler","erTomEndringssøknad","onAvbrytSøknad","useAvbrytSøknad","onFortsettSøknadSenere","useFortsettSøknadSenere","getForeldreparSituasjon","kontoRequestIsSuspended","stønadskontoer100","tilgjengeligeStønadskontoerError","getStønadskontoParams","stønadskontoer80","nyPlan","getEndringstidspunkt","sendErrorMessageToSentry","NavFrontendSpinner","getValgtStønadskontoFor80Og100Prosent","getAntallUkerMinsterett","valgteStønadskontoer","slettetPlanUtenomFpFørFødsel","isUttakAvForeldrepengerFørFødsel","formValues","Step","getPreviousStepHref","_href","event","stepConfig","getAktiveArbeidsforhold","isAvailable","route","uttaksplanInneholderPerioderUtenKonto","renderSøknadRoutes","harGodkjentVilkår","søkerErMyndig","Route","Oppsummering","SøknadSendt","Søkersituasjon","OmBarnet","AnnenForelder","UttaksplanInfo","Utenlandsopphold","Inntektsinformasjon","Navigate","ForeldrepengesøknadRoutes","onChangeLocale","currentRoute","location","useLocation","erMyndig","isFirstTimeLoadingApp","setIsFirstTimeLoadingApp","Routes","Velkommen","isEndringssøknadRoute","shouldApplyStorage","storedState","renderSpinner","Foreldrepengesøknad","søkerinfoData","søkerinfoError","sakerData","sakerError","storageData","mapSøkerinfoDTOToSøkerinfo","BrowserRouter","ErrorBoundary","error","errorInfo","Sentry.withScope","scope","Sentry.captureException","feilPgaForMangeVedlegg","FOR_MANGE_VEDLEGG_ERROR","feilsideTittel","_a","localeFromSessionStorage","AppContainer","setLocale","ForeldrepengesøknadContextProvider","IntlProvider","ByttBrowserModal","activeLocale","AppContainer$1"],"mappings":"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"}