{"version":3,"file":"Inntektsinformasjon-c1bb15ed.js","sources":["../../src/app/steps/inntektsinformasjon/inntektsinformasjonFormConfig.ts","../../src/app/steps/inntektsinformasjon/components/andre-inntekter/AndreInntekterListe.tsx","../../src/app/steps/inntektsinformasjon/components/andre-inntekter/modal/andreInntekterModalFormConfig.ts","../../src/app/steps/inntektsinformasjon/components/andre-inntekter/modal/andreInntekterModalFormUtils.ts","../../src/app/steps/inntektsinformasjon/components/andre-inntekter/modal/andreInntekterModalQuestionsConfig.ts","../../src/app/steps/inntektsinformasjon/components/andre-inntekter/validation/andreInntekterValidation.ts","../../src/app/steps/inntektsinformasjon/components/andre-inntekter/modal/AndreInntekterModal.tsx","../../src/app/steps/inntektsinformasjon/components/andre-inntekter/AndreInntekter.tsx","../../src/app/steps/inntektsinformasjon/components/arbeidsforhold-informasjon/ArbeidsforholdInformasjon.tsx","../../src/app/steps/inntektsinformasjon/components/egen-næring/EgenNæringListe.tsx","../../src/app/steps/inntektsinformasjon/components/egen-næring/HvemKanDriveMedEgenNæring.tsx","../../src/app/steps/inntektsinformasjon/components/egen-næring/modal/egenNæringModalFormConfig.ts","../../src/app/steps/inntektsinformasjon/components/egen-næring/modal/egenNæringModalFormUtils.ts","../../src/app/steps/inntektsinformasjon/components/egen-næring/modal/egenNæringModalQuestionsConfig.ts","../../src/app/steps/inntektsinformasjon/components/egen-næring/modal/validation/egenNæringValidation.ts","../../src/app/steps/inntektsinformasjon/components/egen-næring/modal/components/OrgnummerEllerLand.tsx","../../src/app/steps/inntektsinformasjon/components/egen-næring/modal/components/Regnskapsfører.tsx","../../src/app/steps/inntektsinformasjon/components/egen-næring/modal/EgenNæringModal.tsx","../../src/app/steps/inntektsinformasjon/components/egen-næring/EgenNæring.tsx","../../src/app/steps/inntektsinformasjon/validation/inntektsinformasjonValidering.ts","../../src/app/steps/inntektsinformasjon/components/frilans/FrilansoppdragListe.tsx","../../src/app/steps/inntektsinformasjon/components/frilans/HvemKanVæreFrilanser.tsx","../../src/app/steps/inntektsinformasjon/components/frilans/modal/frilansoppdragModalFormConfig.ts","../../src/app/steps/inntektsinformasjon/components/frilans/modal/frilansoppdragModalFormUtils.ts","../../src/app/steps/inntektsinformasjon/components/frilans/modal/frilansoppdragModalQuestionsConfig.ts","../../src/app/steps/inntektsinformasjon/components/frilans/validation/frilansValidation.ts","../../src/app/steps/inntektsinformasjon/components/frilans/modal/FrilansoppdragModal.tsx","../../src/app/steps/inntektsinformasjon/components/frilans/Frilans.tsx","../../src/app/steps/inntektsinformasjon/components/info-til-fiskere/InfoTilFiskere.tsx","../../src/app/steps/inntektsinformasjon/inntektsinformasjonFormUtils.ts","../../src/app/steps/inntektsinformasjon/inntektsInformasjonQuestionsConfig.ts","../../src/app/steps/inntektsinformasjon/Inntektsinformasjon.tsx"],"sourcesContent":["import { getTypedFormComponents, YesOrNo } from '@navikt/sif-common-formik/lib';\n\nexport enum InntektsinformasjonFormField {\n    hattInntektSomFrilans = 'hattInntektSomFrilans',\n    hattInntektSomNæringsdrivende = 'hattInntektSomNæringsdrivende',\n    hattAndreInntekter = 'hattAndreInntekter',\n    frilansOppstartsDato = 'frilansOppstartsDato',\n    jobberFremdelesSomFrilanser = 'jobberFremdelesSomFrilanser',\n    oppdragForNæreVennerEllerFamilie = 'oppdragForNæreVennerEllerFamilie',\n    inntektSomFosterforelder = 'inntektSomFosterforelder',\n}\n\nexport interface InntektsinformasjonFormData {\n    [InntektsinformasjonFormField.hattInntektSomFrilans]: YesOrNo;\n    [InntektsinformasjonFormField.hattInntektSomNæringsdrivende]: YesOrNo;\n    [InntektsinformasjonFormField.hattAndreInntekter]: YesOrNo;\n    [InntektsinformasjonFormField.frilansOppstartsDato]: string;\n    [InntektsinformasjonFormField.inntektSomFosterforelder]: YesOrNo;\n    [InntektsinformasjonFormField.jobberFremdelesSomFrilanser]: YesOrNo;\n    [InntektsinformasjonFormField.oppdragForNæreVennerEllerFamilie]: YesOrNo;\n}\n\nexport const InntektsinformasjonFormComponents = getTypedFormComponents<\n    InntektsinformasjonFormField,\n    InntektsinformasjonFormData,\n    string\n>();\n","import { formatTidsperiodeMedValgfriSluttdato, intlUtils } from '@navikt/fp-common';\nimport InteractiveListElement from 'app/components/interactive-list-element/InteractiveListElement';\nimport { AnnenInntekt, AnnenInntektType } from 'app/context/types/AnnenInntekt';\nimport React, { FunctionComponent } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\n\ninterface Props {\n    andreInntekter: AnnenInntekt[];\n    deleteAnnenInntekt: (oppdrag: AnnenInntekt) => void;\n    selectAnnenInntekt: (oppdrag: AnnenInntekt) => void;\n}\n\nconst getTitle = (type: AnnenInntektType, intl: IntlShape): string => {\n    if (type === AnnenInntektType.JOBB_I_UTLANDET) {\n        return intlUtils(intl, 'inntektsinformasjon.andreInntekter.inntektsliste.jobbIUtlandet');\n    }\n\n    if (type === AnnenInntektType.MILITÆRTJENESTE) {\n        return intlUtils(intl, 'inntektsinformasjon.andreInntekter.inntektsliste.førstegangstjeneste');\n    }\n\n    if (type === AnnenInntektType.SLUTTPAKKE) {\n        return intlUtils(intl, 'inntektsinformasjon.andreInntekter.inntektsliste.sluttpakke');\n    }\n\n    return intlUtils(intl, 'inntektsinformasjon.andreInntekter.inntektsliste.ventelønn');\n};\n\nconst AndreInntekterListe: FunctionComponent<Props> = ({ andreInntekter, deleteAnnenInntekt, selectAnnenInntekt }) => {\n    const intl = useIntl();\n\n    if (andreInntekter.length === 0) {\n        return null;\n    }\n\n    return (\n        <ul style={{ margin: 0, padding: 0, listStyle: 'none' }}>\n            {andreInntekter.map((annenInntekt, index) => (\n                <InteractiveListElement\n                    deleteLinkText=\"Slett annen inntekt\"\n                    onDelete={() => deleteAnnenInntekt(annenInntekt)}\n                    onEdit={() => selectAnnenInntekt(annenInntekt)}\n                    text={formatTidsperiodeMedValgfriSluttdato(annenInntekt.tidsperiode)}\n                    title={getTitle(annenInntekt.type, intl)}\n                    deleteButtonAriaText={`Slett annen inntekt`}\n                    editButtonAriaText={`Rediger annen inntekt`}\n                    missingDocumentation={\n                        annenInntekt.vedlegg.length === 0 && annenInntekt.type !== AnnenInntektType.JOBB_I_UTLANDET\n                    }\n                    key={`${annenInntekt.type}${annenInntekt.tidsperiode.fom}${index}`}\n                />\n            ))}\n        </ul>\n    );\n};\n\nexport default AndreInntekterListe;\n","import { getTypedFormComponents, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { AnnenInntektType } from 'app/context/types/AnnenInntekt';\nimport { Attachment } from 'app/types/Attachment';\n\nexport enum AndreInntekterFormField {\n    type = 'type',\n    navnPåArbeidsgiver = 'navnPåArbeidsgiver',\n    land = 'land',\n    fom = 'fom',\n    tom = 'tom',\n    pågående = 'pågående',\n    dokumentasjon = 'dokumentasjon',\n}\n\nexport interface AndreInntekterFormData {\n    [AndreInntekterFormField.type]: AnnenInntektType | undefined;\n    [AndreInntekterFormField.navnPåArbeidsgiver]: string;\n    [AndreInntekterFormField.land]: string;\n    [AndreInntekterFormField.fom]: string;\n    [AndreInntekterFormField.tom]: string;\n    [AndreInntekterFormField.pågående]: YesOrNo;\n    [AndreInntekterFormField.dokumentasjon]: Attachment[];\n}\n\nexport const AndreInntekterModalFormComponents = getTypedFormComponents<\n    AndreInntekterFormField,\n    AndreInntekterFormData,\n    string\n>();\n","import { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { AnnenInntekt, AnnenInntektType } from 'app/context/types/AnnenInntekt';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { Skjemanummer } from 'app/types/Skjemanummer';\nimport { convertBooleanOrUndefinedToYesOrNo, convertYesOrNoOrUndefinedToBoolean } from 'app/utils/formUtils';\nimport { lagSendSenereDokumentNårIngenAndreFinnes } from 'app/utils/vedleggUtils';\nimport { AndreInntekterFormData, AndreInntekterFormField } from './andreInntekterModalFormConfig';\n\nconst initialAndreInntekterFormValues: AndreInntekterFormData = {\n    [AndreInntekterFormField.type]: undefined,\n    [AndreInntekterFormField.fom]: '',\n    [AndreInntekterFormField.tom]: '',\n    [AndreInntekterFormField.pågående]: YesOrNo.UNANSWERED,\n    [AndreInntekterFormField.navnPåArbeidsgiver]: '',\n    [AndreInntekterFormField.land]: '',\n    [AndreInntekterFormField.dokumentasjon]: [],\n};\n\nexport const getSkjemanummer = (values: AndreInntekterFormData): Skjemanummer => {\n    if (values.type === AnnenInntektType.MILITÆRTJENESTE) {\n        return Skjemanummer.DOK_MILITÆR_SILVIL_TJENESTE;\n    }\n\n    if (values.type === AnnenInntektType.SLUTTPAKKE) {\n        return Skjemanummer.ETTERLØNN_ELLER_SLUTTVEDERLAG;\n    }\n\n    return Skjemanummer.ANNET;\n};\n\nexport const cleanupAndreInntekterForm = (\n    values: AndreInntekterFormData,\n    visibility: QuestionVisibility<AndreInntekterFormField, undefined>\n): AndreInntekterFormData => {\n    return {\n        type: visibility.isVisible(AndreInntekterFormField.type) ? values.type : initialAndreInntekterFormValues.type,\n        dokumentasjon: visibility.isVisible(AndreInntekterFormField.dokumentasjon)\n            ? lagSendSenereDokumentNårIngenAndreFinnes(\n                  values.dokumentasjon,\n                  AttachmentType.ANNEN_INNTEKT,\n                  getSkjemanummer(values)\n              )\n            : initialAndreInntekterFormValues.dokumentasjon,\n        fom: visibility.isVisible(AndreInntekterFormField.fom) ? values.fom : initialAndreInntekterFormValues.fom,\n        tom: visibility.isVisible(AndreInntekterFormField.tom) ? values.tom : initialAndreInntekterFormValues.tom,\n        pågående: visibility.isVisible(AndreInntekterFormField.pågående)\n            ? values.pågående\n            : initialAndreInntekterFormValues.pågående,\n        navnPåArbeidsgiver: visibility.isVisible(AndreInntekterFormField.navnPåArbeidsgiver)\n            ? values.navnPåArbeidsgiver\n            : initialAndreInntekterFormValues.navnPåArbeidsgiver,\n        land: visibility.isVisible(AndreInntekterFormField.land) ? values.land : initialAndreInntekterFormValues.land,\n    };\n};\n\nexport const getInitialAndreInntekterFormValues = (annenInntekt: AnnenInntekt | undefined): AndreInntekterFormData => {\n    if (!annenInntekt) {\n        return {\n            ...initialAndreInntekterFormValues,\n        };\n    }\n\n    if (annenInntekt.type === AnnenInntektType.JOBB_I_UTLANDET) {\n        return {\n            ...initialAndreInntekterFormValues,\n            navnPåArbeidsgiver: annenInntekt.arbeidsgiverNavn,\n            land: annenInntekt.land,\n            fom: annenInntekt.tidsperiode.fom,\n            tom: annenInntekt.tidsperiode.tom || '',\n            dokumentasjon: annenInntekt.vedlegg,\n            pågående: convertBooleanOrUndefinedToYesOrNo(annenInntekt.pågående),\n            type: annenInntekt.type,\n        };\n    }\n\n    return {\n        ...initialAndreInntekterFormValues,\n        fom: annenInntekt.tidsperiode.fom,\n        tom: annenInntekt.tidsperiode.tom || '',\n        dokumentasjon: annenInntekt.vedlegg,\n        pågående: convertBooleanOrUndefinedToYesOrNo(annenInntekt.pågående),\n        type: annenInntekt.type,\n    };\n};\n\nexport const mapAnnenInntektModalValuesToState = (annenInntekt: Partial<AndreInntekterFormData>): AnnenInntekt => {\n    if (annenInntekt.type === AnnenInntektType.JOBB_I_UTLANDET) {\n        return {\n            arbeidsgiverNavn: annenInntekt.navnPåArbeidsgiver!,\n            land: annenInntekt.land!,\n            pågående: convertYesOrNoOrUndefinedToBoolean(annenInntekt.pågående)!,\n            tidsperiode: {\n                fom: annenInntekt.fom!,\n                tom: annenInntekt.tom,\n            },\n            type: annenInntekt.type,\n            vedlegg: [],\n        };\n    }\n\n    return {\n        pågående: convertYesOrNoOrUndefinedToBoolean(annenInntekt.pågående)!,\n        tidsperiode: {\n            fom: annenInntekt.fom!,\n            tom: annenInntekt.tom,\n        },\n        type: annenInntekt.type!,\n        vedlegg: annenInntekt.dokumentasjon || [],\n    };\n};\n","import { hasValue } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { AnnenInntektType } from 'app/context/types/AnnenInntekt';\nimport { AndreInntekterFormData, AndreInntekterFormField } from './andreInntekterModalFormConfig';\n\nconst AndreInntekterModalFormConfig: QuestionConfig<AndreInntekterFormData, AndreInntekterFormField> = {\n    [AndreInntekterFormField.type]: {\n        isIncluded: () => true,\n        isAnswered: ({ type }) => hasValue(type),\n    },\n    [AndreInntekterFormField.land]: {\n        isIncluded: ({ type }) => type === AnnenInntektType.JOBB_I_UTLANDET,\n        isAnswered: ({ land }) => hasValue(land),\n        visibilityFilter: ({ type }) => type === AnnenInntektType.JOBB_I_UTLANDET,\n    },\n    [AndreInntekterFormField.navnPåArbeidsgiver]: {\n        isIncluded: ({ type }) => type === AnnenInntektType.JOBB_I_UTLANDET,\n        isAnswered: ({ navnPåArbeidsgiver }) => hasValue(navnPåArbeidsgiver),\n        visibilityFilter: ({ land }) => hasValue(land),\n    },\n    [AndreInntekterFormField.fom]: {\n        isIncluded: () => true,\n        isAnswered: ({ fom }) => hasValue(fom),\n        visibilityFilter: ({ type, navnPåArbeidsgiver, land }) =>\n            (type === AnnenInntektType.JOBB_I_UTLANDET && hasValue(navnPåArbeidsgiver) && hasValue(land)) ||\n            (type !== AnnenInntektType.JOBB_I_UTLANDET && hasValue(type)),\n    },\n    [AndreInntekterFormField.pågående]: {\n        isIncluded: () => true,\n        isAnswered: ({ pågående }) => pågående !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ fom }) => hasValue(fom),\n    },\n    [AndreInntekterFormField.tom]: {\n        isIncluded: ({ pågående }) => pågående === YesOrNo.NO,\n        isAnswered: ({ tom }) => hasValue(tom),\n        visibilityFilter: ({ pågående }) => pågående === YesOrNo.NO,\n    },\n    [AndreInntekterFormField.dokumentasjon]: {\n        isIncluded: ({ type }) => type !== AnnenInntektType.JOBB_I_UTLANDET,\n        isAnswered: () => true,\n        visibilityFilter: ({ pågående, tom }) => pågående === YesOrNo.YES || (pågående === YesOrNo.NO && hasValue(tom)),\n    },\n};\n\nconst andreInntekterModalQuestionsConfig = Questions<AndreInntekterFormData, AndreInntekterFormField>(\n    AndreInntekterModalFormConfig\n);\n\nexport default andreInntekterModalQuestionsConfig;\n","import { hasValue, intlUtils } from '@navikt/fp-common';\nimport { isDateABeforeDateB, isDateInTheFuture } from 'app/utils/dateUtils';\nimport { isISODateString } from 'nav-datovelger';\nimport { IntlShape } from 'react-intl';\n\nexport const validateAnnenInntektFom = (intl: IntlShape, tom: string) => (fom: string) => {\n    if (!hasValue(fom)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.påkrevd');\n    }\n\n    if (!isISODateString(fom)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.gyldigDato');\n    }\n\n    if (isDateInTheFuture(fom)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.erIFremtiden');\n    }\n\n    if (isDateABeforeDateB(tom, fom)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.førTilDato');\n    }\n\n    return undefined;\n};\n\nexport const validateAnnenInntektTom = (intl: IntlShape, fom: string) => (tom: string) => {\n    if (!hasValue(tom)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.påkrevd');\n    }\n\n    if (!isISODateString(tom)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.gyldigDato');\n    }\n\n    if (isDateInTheFuture(tom)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.erIFremtiden');\n    }\n\n    if (isDateABeforeDateB(tom, fom)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.etterFraDato');\n    }\n\n    return undefined;\n};\n","import { bemUtils, Block, intlUtils } from '@navikt/fp-common';\nimport Modal from 'nav-frontend-modal';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    AndreInntekterFormData,\n    AndreInntekterFormField,\n    AndreInntekterModalFormComponents,\n} from './andreInntekterModalFormConfig';\nimport {\n    cleanupAndreInntekterForm,\n    getInitialAndreInntekterFormValues,\n    getSkjemanummer,\n    mapAnnenInntektModalValuesToState,\n} from './andreInntekterModalFormUtils';\nimport { AnnenInntekt, AnnenInntektType } from 'app/context/types/AnnenInntekt';\nimport andreInntekterModalQuestionsConfig from './andreInntekterModalQuestionsConfig';\nimport FormikFileUploader from 'app/components/formik-file-uploader/FormikFileUploader';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport VeilederNormal from 'app/assets/VeilederNormal';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport { validateAnnenInntektFom, validateAnnenInntektTom } from './../validation/andreInntekterValidation';\n\nimport './andreInntekterModal.less';\nimport dayjs from 'dayjs';\nimport { validateRequiredTextInputField } from 'app/utils/validationUtil';\n\ninterface Props {\n    isOpen: boolean;\n    contentLabel: string;\n    onRequestClose: () => void;\n    addAnnenInntekt: (annenInntekt: AnnenInntekt) => void;\n    editAnnenInntekt: (annenInntekt: AnnenInntekt) => void;\n    selectedAnnenInntekt: AnnenInntekt | undefined;\n}\n\nconst AndreInntekterModal: FunctionComponent<Props> = ({\n    isOpen,\n    contentLabel,\n    onRequestClose,\n    selectedAnnenInntekt,\n    addAnnenInntekt,\n    editAnnenInntekt,\n}) => {\n    const intl = useIntl();\n    const bem = bemUtils('andreInntekterModal');\n\n    const onValidSubmit = (values: Partial<AndreInntekterFormData>) => {\n        if (!selectedAnnenInntekt) {\n            addAnnenInntekt(mapAnnenInntektModalValuesToState(values));\n        } else {\n            editAnnenInntekt(mapAnnenInntektModalValuesToState(values));\n        }\n        onRequestClose();\n    };\n\n    const getVeilederMessageId = (values: AndreInntekterFormData): string => {\n        if (values.type === AnnenInntektType.MILITÆRTJENESTE) {\n            return 'inntektsinformasjon.andreInntekterModal.veileder.militær';\n        }\n\n        if (values.type === AnnenInntektType.SLUTTPAKKE) {\n            return 'inntektsinformasjon.andreInntekterModal.veileder.sluttpakke';\n        }\n\n        return 'inntektsinformasjon.andreInntekterModal.veileder.ventelønn';\n    };\n\n    const navnPåArbeidsgiverLabel = intlUtils(intl, 'annenInntekt.spørsmål.arbeidsgiver');\n\n    return (\n        <Modal\n            isOpen={isOpen}\n            contentLabel={contentLabel}\n            onRequestClose={onRequestClose}\n            closeButton={true}\n            shouldCloseOnOverlayClick={false}\n            className={bem.block}\n        >\n            <AndreInntekterModalFormComponents.FormikWrapper\n                initialValues={getInitialAndreInntekterFormValues(selectedAnnenInntekt)}\n                onSubmit={onValidSubmit}\n                renderForm={({ values: formValues }) => {\n                    const visibility = andreInntekterModalQuestionsConfig.getVisbility(formValues);\n\n                    return (\n                        <AndreInntekterModalFormComponents.Form\n                            includeButtons={false}\n                            cleanup={(values) => cleanupAndreInntekterForm(values, visibility)}\n                        >\n                            <Block padBottom=\"l\">\n                                <Undertittel className={bem.element('tittel')}>\n                                    <FormattedMessage id=\"inntektsinformasjon.andreInntekterModal.tittel\" />\n                                </Undertittel>\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(AndreInntekterFormField.type)}>\n                                <AndreInntekterModalFormComponents.RadioPanelGroup\n                                    name={AndreInntekterFormField.type}\n                                    radios={[\n                                        { label: 'Jobb i utlandet', value: AnnenInntektType.JOBB_I_UTLANDET },\n                                        { label: 'Vartpenger og ventelønn', value: AnnenInntektType.VENTELØNN },\n                                        { label: 'Sluttvederlag', value: AnnenInntektType.SLUTTPAKKE },\n                                        { label: 'Førstegangstjeneste', value: AnnenInntektType.MILITÆRTJENESTE },\n                                    ]}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(AndreInntekterFormField.land)}>\n                                <AndreInntekterModalFormComponents.CountrySelect\n                                    name={AndreInntekterFormField.land}\n                                    label={intlUtils(intl, 'annenInntekt.spørsmål.land')}\n                                    useAlpha3Code={false}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(AndreInntekterFormField.navnPåArbeidsgiver)}\n                            >\n                                <AndreInntekterModalFormComponents.Input\n                                    name={AndreInntekterFormField.navnPåArbeidsgiver}\n                                    label={navnPåArbeidsgiverLabel}\n                                    validate={validateRequiredTextInputField(navnPåArbeidsgiverLabel, intl)}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(AndreInntekterFormField.fom)}>\n                                <AndreInntekterModalFormComponents.DatePicker\n                                    name={AndreInntekterFormField.fom}\n                                    label={intlUtils(intl, 'fom')}\n                                    placeholder=\"dd.mm.åååå\"\n                                    fullscreenOverlay={true}\n                                    showYearSelector={true}\n                                    validate={validateAnnenInntektFom(intl, formValues.tom)}\n                                    maxDate={dayjs().toDate()}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(AndreInntekterFormField.pågående)}>\n                                <AndreInntekterModalFormComponents.YesOrNoQuestion\n                                    name={AndreInntekterFormField.pågående}\n                                    legend={intlUtils(intl, 'pågående')}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(AndreInntekterFormField.tom)}>\n                                <AndreInntekterModalFormComponents.DatePicker\n                                    name={AndreInntekterFormField.tom}\n                                    label={intlUtils(intl, 'tom')}\n                                    placeholder=\"dd.mm.åååå\"\n                                    fullscreenOverlay={true}\n                                    showYearSelector={true}\n                                    validate={validateAnnenInntektTom(intl, formValues.fom)}\n                                    maxDate={dayjs().toDate()}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(AndreInntekterFormField.dokumentasjon)}>\n                                <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                                    <FormattedMessage id={getVeilederMessageId(formValues)} />\n                                </Veilederpanel>\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(AndreInntekterFormField.dokumentasjon)}>\n                                <FormikFileUploader\n                                    name={AndreInntekterFormField.dokumentasjon}\n                                    label=\"Last opp dokumentasjon\"\n                                    attachments={formValues.dokumentasjon}\n                                    attachmentType={AttachmentType.ANNEN_INNTEKT}\n                                    skjemanummer={getSkjemanummer(formValues)}\n                                />\n                            </Block>\n                            <Block visible={visibility.areAllQuestionsAnswered()} textAlignCenter={true}>\n                                <Hovedknapp>{intlUtils(intl, 'søknad.gåVidere')}</Hovedknapp>\n                            </Block>\n                        </AndreInntekterModalFormComponents.Form>\n                    );\n                }}\n            />\n        </Modal>\n    );\n};\n\nexport default AndreInntekterModal;\n","import { Block, intlUtils } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { AnnenInntekt } from 'app/context/types/AnnenInntekt';\nimport { Knapp } from 'nav-frontend-knapper';\nimport React, { FunctionComponent, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    InntektsinformasjonFormComponents,\n    InntektsinformasjonFormData,\n    InntektsinformasjonFormField,\n} from '../../inntektsinformasjonFormConfig';\nimport AndreInntekterListe from './AndreInntekterListe';\nimport AndreInntekterModal from './modal/AndreInntekterModal';\n\ninterface Props {\n    andreInntekterInformasjon: AnnenInntekt[];\n    setAndreInntekterInformasjon: any;\n    visibility: QuestionVisibility<InntektsinformasjonFormField, undefined>;\n    formValues: InntektsinformasjonFormData;\n}\n\nconst AndreInntekter: FunctionComponent<Props> = ({\n    andreInntekterInformasjon,\n    setAndreInntekterInformasjon,\n    visibility,\n    formValues,\n}) => {\n    const intl = useIntl();\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [selectedAnnenInntekt, setSelectedAnnenInntekt] = useState<AnnenInntekt>();\n\n    const handleOnLeggTil = () => {\n        setIsModalOpen(true);\n    };\n\n    const addAnnenInntekt = (annenInntekt: AnnenInntekt) => {\n        const updatedandreInntekterInformasjon = andreInntekterInformasjon.concat(annenInntekt);\n\n        setAndreInntekterInformasjon(updatedandreInntekterInformasjon);\n    };\n\n    const deleteAnnenInntekt = (annenInntekt: AnnenInntekt) => {\n        const updatedAndreInntekterInformasjon = andreInntekterInformasjon.filter(\n            (inntekt) => inntekt !== annenInntekt\n        );\n\n        setAndreInntekterInformasjon(updatedAndreInntekterInformasjon);\n    };\n\n    const editAnnenInntekt = (annenInntekt: AnnenInntekt) => {\n        const updatedAndreInntekterInformasjon = andreInntekterInformasjon\n            .filter((inntekt) => inntekt !== selectedAnnenInntekt)\n            .concat(annenInntekt);\n\n        setAndreInntekterInformasjon(updatedAndreInntekterInformasjon);\n    };\n\n    const selectAnnenInntekt = (annenInntekt: AnnenInntekt) => {\n        setSelectedAnnenInntekt(annenInntekt);\n        setIsModalOpen(true);\n    };\n\n    return (\n        <>\n            <Block padBottom=\"l\" visible={visibility.isVisible(InntektsinformasjonFormField.hattAndreInntekter)}>\n                <InntektsinformasjonFormComponents.YesOrNoQuestion\n                    name={InntektsinformasjonFormField.hattAndreInntekter}\n                    legend={intlUtils(intl, 'inntektsinformasjon.annenInntekt')}\n                    validate={(hattAndreInntekter) => {\n                        if (hattAndreInntekter === YesOrNo.YES) {\n                            if (andreInntekterInformasjon.length === 0) {\n                                return intlUtils(\n                                    intl,\n                                    'valideringsfeil.inntektsinformasjon.andreInntekter.måHaOppdrag'\n                                );\n                            }\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n            {formValues.hattAndreInntekter === YesOrNo.YES && (\n                <div style={{ backgroundColor: '#f1f1f1', marginBottom: '1rem', padding: '1rem' }}>\n                    <AndreInntekterModal\n                        isOpen={isModalOpen}\n                        contentLabel={intlUtils(intl, 'inntektsinformasjon.andreInntekterModal.contentLabel')}\n                        onRequestClose={() => setIsModalOpen(false)}\n                        selectedAnnenInntekt={selectedAnnenInntekt}\n                        addAnnenInntekt={addAnnenInntekt}\n                        editAnnenInntekt={editAnnenInntekt}\n                    />\n                    <Block padBottom=\"l\" visible={andreInntekterInformasjon.length > 0}>\n                        <AndreInntekterListe\n                            andreInntekter={andreInntekterInformasjon}\n                            deleteAnnenInntekt={deleteAnnenInntekt}\n                            selectAnnenInntekt={selectAnnenInntekt}\n                        />\n                    </Block>\n                    <Knapp htmlType=\"button\" onClick={handleOnLeggTil}>\n                        <FormattedMessage id=\"inntektsinformasjon.leggTilOppdrag\" />\n                    </Knapp>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default AndreInntekter;\n","import React from 'react';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport HarIkkeArbeidsforhold from './HarIkkeArbeidsforhold';\nimport HarArbeidsforhold from './HarArbeidsforhold';\n\nimport './arbeidsforholdInformasjon.less';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\nimport { UtvidetInformasjon } from '@navikt/fp-common';\n\ninterface Props {\n    arbeidsforhold: Arbeidsforhold[];\n}\nconst ArbeidsforholdInformasjon: React.FunctionComponent<Props> = ({ arbeidsforhold }) => {\n    const harArbeidsforhold = arbeidsforhold !== undefined && arbeidsforhold.length > 0;\n\n    return (\n        <>\n            <Element>Dine arbeidsforhold</Element>\n            <UtvidetInformasjon apneLabel=\"Les mer om dine arbeidsforhold\">\n                <Normaltekst>\n                    Er det feil eller mangler i informasjonen om dine arbeidsforhold? Da må du be din arbeidsgiver\n                    oppdatere med riktig informasjon i Arbeidsgiver- og arbeidstakerregisteret.\n                </Normaltekst>\n            </UtvidetInformasjon>\n            <HarIkkeArbeidsforhold harArbeidsforhold={harArbeidsforhold} />\n            <HarArbeidsforhold harArbeidsforhold={harArbeidsforhold} arbeidsforhold={arbeidsforhold} />\n        </>\n    );\n};\n\nexport default ArbeidsforholdInformasjon;\n","import { formatDate } from '@navikt/fp-common';\nimport InteractiveListElement from 'app/components/interactive-list-element/InteractiveListElement';\nimport { Næring } from 'app/context/types/Næring';\nimport React, { FunctionComponent } from 'react';\n\ninterface Props {\n    næringsInformasjon: Næring[];\n    deleteNæring: (oppdrag: Næring) => void;\n    selectNæring: (oppdrag: Næring) => void;\n}\n\nconst EgenNæringListe: FunctionComponent<Props> = ({ næringsInformasjon, deleteNæring, selectNæring }) => {\n    if (næringsInformasjon.length === 0) {\n        return null;\n    }\n\n    return (\n        <ul style={{ margin: 0, padding: 0, listStyle: 'none' }}>\n            {næringsInformasjon.map((næring, index) => (\n                <InteractiveListElement\n                    deleteLinkText=\"Slett næring\"\n                    onDelete={() => deleteNæring(næring)}\n                    onEdit={() => selectNæring(næring)}\n                    text={`${formatDate(næring.tidsperiode.fom)} - ${\n                        næring.tidsperiode.tom ? formatDate(næring.tidsperiode.tom) : 'pågående'\n                    }`}\n                    title={næring.navnPåNæringen}\n                    deleteButtonAriaText={`Slett næring`}\n                    editButtonAriaText={`Rediger næring`}\n                    key={`${næring.navnPåNæringen}${index}`}\n                />\n            ))}\n        </ul>\n    );\n};\n\nexport default EgenNæringListe;\n","import { intlUtils, UtvidetInformasjon } from '@navikt/fp-common';\nimport EksternUrl from 'app/components/ekstern-url/EksternUrl';\nimport links from 'app/links/links';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\n\nconst HvemKanDriveMedEgenNæring = () => {\n    const intl = useIntl();\n\n    return (\n        <UtvidetInformasjon\n            apneLabel={intlUtils(\n                intl,\n                'inntektsinformasjon.harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd.apneLabel'\n            )}\n        >\n            <div style={{ backgroundColor: '#f1f1f1', padding: '1.5rem' }}>\n                <Normaltekst>\n                    <EksternUrl\n                        tekst=\"inntektsinformasjon.harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd.infoboks.tekst\"\n                        url={links.næringsdrivendeInfoBoks}\n                        lenkeTekst={intlUtils(intl, 'hjemmeside')}\n                    />\n                </Normaltekst>\n            </div>\n        </UtvidetInformasjon>\n    );\n};\n\nexport default HvemKanDriveMedEgenNæring;\n","import { getTypedFormComponents, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { Næringstype } from 'app/context/types/Næring';\n\nexport enum EgenNæringModalFormField {\n    type = 'type',\n    navnPåNæringen = 'navnPåNæringen',\n    registrertINorge = 'registrertINorge',\n    orgnr = 'orgnr',\n    land = 'land',\n    fom = 'fom',\n    tom = 'tom',\n    pågående = 'pågående',\n    yrkesAktivDato = 'yrkesAktivDato',\n    næringsresultat = 'næringsresultat',\n    harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene = 'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene',\n    hattVarigEndringAvNæringsinntektSiste4Kalenderår = 'hattVarigEndringAvNæringsinntektSiste4Kalenderår',\n    datoForEndring = 'datoForEndring',\n    inntektEtterEndring = 'inntektEtterEndring',\n    forklaringEndring = 'forklaringEndring',\n    harRegnskapsfører = 'harRegnskapsfører',\n    navnRegnskapsfører = 'navnRegnskapsfører',\n    telefonRegnskapsfører = 'telefonRegnskapsfører',\n    regnskapsførerNærVennEllerFamilie = 'regnskapsførerNærVennEllerFamilie',\n}\n\nexport interface EgenNæringModalFormData {\n    [EgenNæringModalFormField.type]: Næringstype | undefined;\n    [EgenNæringModalFormField.navnPåNæringen]: string;\n    [EgenNæringModalFormField.registrertINorge]: YesOrNo;\n    [EgenNæringModalFormField.orgnr]: string;\n    [EgenNæringModalFormField.land]: string;\n    [EgenNæringModalFormField.fom]: string;\n    [EgenNæringModalFormField.tom]: string;\n    [EgenNæringModalFormField.pågående]: YesOrNo;\n    [EgenNæringModalFormField.yrkesAktivDato]: string;\n    [EgenNæringModalFormField.næringsresultat]: string;\n    [EgenNæringModalFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]: YesOrNo;\n    [EgenNæringModalFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]: YesOrNo;\n    [EgenNæringModalFormField.datoForEndring]: string;\n    [EgenNæringModalFormField.inntektEtterEndring]: string;\n    [EgenNæringModalFormField.forklaringEndring]: string;\n    [EgenNæringModalFormField.harRegnskapsfører]: YesOrNo;\n    [EgenNæringModalFormField.navnRegnskapsfører]: string;\n    [EgenNæringModalFormField.telefonRegnskapsfører]: string;\n    [EgenNæringModalFormField.regnskapsførerNærVennEllerFamilie]: YesOrNo;\n}\n\nexport const EgenNæringModalFormComponents = getTypedFormComponents<\n    EgenNæringModalFormField,\n    EgenNæringModalFormData,\n    string\n>();\n","import { hasValue } from '@navikt/fp-common';\nimport { dateToISOString, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { Næring, EndringAvNæringsinntektInformasjon, Næringsrelasjon } from 'app/context/types/Næring';\nimport { date4YearsAgo, ISOStringToDate } from 'app/utils/dateUtils';\nimport { convertBooleanOrUndefinedToYesOrNo, convertYesOrNoOrUndefinedToBoolean } from 'app/utils/formUtils';\nimport dayjs from 'dayjs';\nimport { EgenNæringModalFormData, EgenNæringModalFormField } from './egenNæringModalFormConfig';\n\nexport const initialEgenNæringModalValues: EgenNæringModalFormData = {\n    [EgenNæringModalFormField.type]: undefined,\n    [EgenNæringModalFormField.navnPåNæringen]: '',\n    [EgenNæringModalFormField.registrertINorge]: YesOrNo.UNANSWERED,\n    [EgenNæringModalFormField.orgnr]: '',\n    [EgenNæringModalFormField.land]: '',\n    [EgenNæringModalFormField.tom]: '',\n    [EgenNæringModalFormField.fom]: '',\n    [EgenNæringModalFormField.pågående]: YesOrNo.UNANSWERED,\n    [EgenNæringModalFormField.næringsresultat]: '',\n    [EgenNæringModalFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]: YesOrNo.UNANSWERED,\n    [EgenNæringModalFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]: YesOrNo.UNANSWERED,\n    [EgenNæringModalFormField.yrkesAktivDato]: '',\n    [EgenNæringModalFormField.datoForEndring]: '',\n    [EgenNæringModalFormField.inntektEtterEndring]: '',\n    [EgenNæringModalFormField.forklaringEndring]: '',\n    [EgenNæringModalFormField.harRegnskapsfører]: YesOrNo.UNANSWERED,\n    [EgenNæringModalFormField.navnRegnskapsfører]: '',\n    [EgenNæringModalFormField.telefonRegnskapsfører]: '',\n    [EgenNæringModalFormField.regnskapsførerNærVennEllerFamilie]: YesOrNo.UNANSWERED,\n};\n\nexport const cleanupEgenNæringForm = (\n    values: EgenNæringModalFormData,\n    visibility: QuestionVisibility<EgenNæringModalFormField, undefined>\n): EgenNæringModalFormData => {\n    return {\n        type: visibility.isVisible(EgenNæringModalFormField.type) ? values.type : undefined,\n        navnPåNæringen: visibility.isVisible(EgenNæringModalFormField.navnPåNæringen)\n            ? values.navnPåNæringen\n            : initialEgenNæringModalValues.navnPåNæringen,\n        registrertINorge: visibility.isVisible(EgenNæringModalFormField.registrertINorge)\n            ? values.registrertINorge\n            : initialEgenNæringModalValues.registrertINorge,\n        orgnr: visibility.isVisible(EgenNæringModalFormField.orgnr) ? values.orgnr : initialEgenNæringModalValues.orgnr,\n        land: visibility.isVisible(EgenNæringModalFormField.land) ? values.land : initialEgenNæringModalValues.land,\n        tom: visibility.isVisible(EgenNæringModalFormField.tom) ? values.tom : initialEgenNæringModalValues.tom,\n        fom: visibility.isVisible(EgenNæringModalFormField.fom) ? values.fom : initialEgenNæringModalValues.fom,\n        pågående: visibility.isVisible(EgenNæringModalFormField.pågående)\n            ? values.pågående\n            : initialEgenNæringModalValues.pågående,\n        næringsresultat: visibility.isVisible(EgenNæringModalFormField.næringsresultat)\n            ? values.næringsresultat\n            : initialEgenNæringModalValues.næringsresultat,\n        hattVarigEndringAvNæringsinntektSiste4Kalenderår: visibility.isVisible(\n            EgenNæringModalFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår\n        )\n            ? values.hattVarigEndringAvNæringsinntektSiste4Kalenderår\n            : initialEgenNæringModalValues.hattVarigEndringAvNæringsinntektSiste4Kalenderår,\n        harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene: visibility.isVisible(\n            EgenNæringModalFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n        )\n            ? values.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n            : initialEgenNæringModalValues.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene,\n        yrkesAktivDato: visibility.isVisible(EgenNæringModalFormField.yrkesAktivDato)\n            ? values.yrkesAktivDato\n            : initialEgenNæringModalValues.yrkesAktivDato,\n        datoForEndring: visibility.isVisible(EgenNæringModalFormField.datoForEndring)\n            ? values.datoForEndring\n            : initialEgenNæringModalValues.datoForEndring,\n        inntektEtterEndring: visibility.isVisible(EgenNæringModalFormField.inntektEtterEndring)\n            ? values.inntektEtterEndring\n            : initialEgenNæringModalValues.inntektEtterEndring,\n        forklaringEndring: visibility.isVisible(EgenNæringModalFormField.forklaringEndring)\n            ? values.forklaringEndring\n            : initialEgenNæringModalValues.forklaringEndring,\n        harRegnskapsfører: visibility.isVisible(EgenNæringModalFormField.harRegnskapsfører)\n            ? values.harRegnskapsfører\n            : initialEgenNæringModalValues.harRegnskapsfører,\n        navnRegnskapsfører: visibility.isVisible(EgenNæringModalFormField.navnRegnskapsfører)\n            ? values.navnRegnskapsfører\n            : initialEgenNæringModalValues.navnRegnskapsfører,\n        telefonRegnskapsfører: visibility.isVisible(EgenNæringModalFormField.telefonRegnskapsfører)\n            ? values.telefonRegnskapsfører\n            : initialEgenNæringModalValues.telefonRegnskapsfører,\n        regnskapsførerNærVennEllerFamilie: visibility.isVisible(\n            EgenNæringModalFormField.regnskapsførerNærVennEllerFamilie\n        )\n            ? values.regnskapsførerNærVennEllerFamilie\n            : initialEgenNæringModalValues.regnskapsførerNærVennEllerFamilie,\n    };\n};\n\nexport const getInitialEgenNæringModalValues = (næring: Næring | undefined): EgenNæringModalFormData => {\n    if (!næring) {\n        return {\n            ...initialEgenNæringModalValues,\n        };\n    }\n\n    return {\n        ...initialEgenNæringModalValues,\n        type: næring.næringstyper.length > 0 ? næring.næringstyper[0] : undefined,\n        navnPåNæringen: næring.navnPåNæringen,\n        registrertINorge: convertBooleanOrUndefinedToYesOrNo(næring.registrertINorge),\n        land: næring.registrertILand || '',\n        fom: dateToISOString(næring.tidsperiode.fom),\n        tom: dateToISOString(næring.tidsperiode.tom) || '',\n        orgnr: næring.organisasjonsnummer || '',\n        pågående: convertBooleanOrUndefinedToYesOrNo(næring.pågående),\n        næringsresultat: næring.næringsinntekt?.toString() || '',\n        hattVarigEndringAvNæringsinntektSiste4Kalenderår: convertBooleanOrUndefinedToYesOrNo(\n            næring.hattVarigEndringAvNæringsinntektSiste4Kalenderår\n        ),\n        harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene: convertBooleanOrUndefinedToYesOrNo(\n            næring.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n        ),\n        yrkesAktivDato: dateToISOString(næring.oppstartsdato) || '',\n        datoForEndring: næring.endringAvNæringsinntektInformasjon\n            ? dateToISOString(næring.endringAvNæringsinntektInformasjon.dato)\n            : '',\n        inntektEtterEndring: næring.endringAvNæringsinntektInformasjon\n            ? næring.endringAvNæringsinntektInformasjon.næringsinntektEtterEndring.toString()\n            : '',\n        forklaringEndring: næring.endringAvNæringsinntektInformasjon\n            ? næring.endringAvNæringsinntektInformasjon.forklaring\n            : '',\n        harRegnskapsfører: convertBooleanOrUndefinedToYesOrNo(næring.harRegnskapsfører),\n        navnRegnskapsfører: næring.regnskapsfører ? næring.regnskapsfører.navn : '',\n        telefonRegnskapsfører: næring.regnskapsfører ? næring.regnskapsfører.telefonnummer : '',\n        regnskapsførerNærVennEllerFamilie: convertBooleanOrUndefinedToYesOrNo(\n            næring.regnskapsfører ? næring.regnskapsfører.erNærVennEllerFamilie : undefined\n        ),\n    };\n};\n\nexport const mapEgenNæringModalFormValuesToState = (values: Partial<EgenNæringModalFormData>): Næring => {\n    let endringAvNæringsinntektInformasjon: EndringAvNæringsinntektInformasjon | undefined = undefined;\n    let regnskapsfører: Næringsrelasjon | undefined = undefined;\n\n    if (values.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES) {\n        endringAvNæringsinntektInformasjon = {\n            dato: ISOStringToDate(values.datoForEndring)!,\n            forklaring: values.forklaringEndring!,\n            næringsinntektEtterEndring: parseInt(values.inntektEtterEndring!),\n        };\n    }\n\n    if (values.harRegnskapsfører === YesOrNo.YES) {\n        regnskapsfører = {\n            navn: values.navnRegnskapsfører!,\n            telefonnummer: values.telefonRegnskapsfører!,\n            erNærVennEllerFamilie: convertYesOrNoOrUndefinedToBoolean(values.regnskapsførerNærVennEllerFamilie)!,\n        };\n    }\n\n    return {\n        næringstyper: [values.type!],\n        navnPåNæringen: values.navnPåNæringen!,\n        registrertINorge: convertYesOrNoOrUndefinedToBoolean(values.registrertINorge)!,\n        organisasjonsnummer: hasValue(values.orgnr) ? values.orgnr : undefined,\n        registrertILand: hasValue(values.land) ? values.land : undefined,\n        tidsperiode: {\n            fom: ISOStringToDate(values.fom)!,\n            tom: ISOStringToDate(values.tom),\n        },\n        pågående: convertYesOrNoOrUndefinedToBoolean(values.pågående)!,\n        næringsinntekt: hasValue(values.næringsresultat) ? parseInt(values.næringsresultat!, 10) : undefined,\n        hattVarigEndringAvNæringsinntektSiste4Kalenderår: convertYesOrNoOrUndefinedToBoolean(\n            values.hattVarigEndringAvNæringsinntektSiste4Kalenderår\n        ),\n        harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene: convertYesOrNoOrUndefinedToBoolean(\n            values.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n        ),\n        oppstartsdato: hasValue(values.yrkesAktivDato) ? ISOStringToDate(values.yrkesAktivDato) : undefined,\n        endringAvNæringsinntektInformasjon: endringAvNæringsinntektInformasjon,\n        harRegnskapsfører: convertYesOrNoOrUndefinedToBoolean(values.harRegnskapsfører)!,\n        regnskapsfører: regnskapsfører,\n    };\n};\n\nexport const erVirksomhetRegnetSomNyoppstartet = (oppstartsdato: Date | undefined): boolean => {\n    if (!oppstartsdato) {\n        return true;\n    }\n\n    return dayjs(oppstartsdato).startOf('day').isAfter(date4YearsAgo, 'day');\n};\n","import { hasValue } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport { EgenNæringModalFormData, EgenNæringModalFormField } from './egenNæringModalFormConfig';\nimport { erVirksomhetRegnetSomNyoppstartet } from './egenNæringModalFormUtils';\n\nconst EgenNæringModalFormConfig: QuestionConfig<EgenNæringModalFormData, EgenNæringModalFormField> = {\n    [EgenNæringModalFormField.type]: {\n        isIncluded: () => true,\n        isAnswered: ({ type }) => type !== undefined,\n    },\n    [EgenNæringModalFormField.navnPåNæringen]: {\n        isIncluded: () => true,\n        isAnswered: ({ navnPåNæringen }) => hasValue(navnPåNæringen),\n        visibilityFilter: ({ type }) => type !== undefined,\n    },\n    [EgenNæringModalFormField.registrertINorge]: {\n        isIncluded: () => true,\n        isAnswered: ({ registrertINorge }) => registrertINorge !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ navnPåNæringen }) => hasValue(navnPåNæringen),\n    },\n    [EgenNæringModalFormField.orgnr]: {\n        isIncluded: ({ registrertINorge }) => registrertINorge === YesOrNo.YES,\n        isAnswered: ({ orgnr }) => hasValue(orgnr),\n        visibilityFilter: ({ registrertINorge }) => registrertINorge === YesOrNo.YES,\n    },\n    [EgenNæringModalFormField.land]: {\n        isIncluded: ({ registrertINorge }) => registrertINorge === YesOrNo.NO,\n        isAnswered: ({ land }) => hasValue(land),\n        visibilityFilter: ({ registrertINorge }) => registrertINorge === YesOrNo.NO,\n    },\n    [EgenNæringModalFormField.fom]: {\n        isIncluded: () => true,\n        isAnswered: ({ fom }) => hasValue(fom),\n        visibilityFilter: ({ orgnr, land }) => hasValue(orgnr) || hasValue(land),\n    },\n    [EgenNæringModalFormField.pågående]: {\n        isIncluded: () => true,\n        isAnswered: ({ pågående }) => pågående !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ fom }) => hasValue(fom),\n    },\n    [EgenNæringModalFormField.tom]: {\n        isIncluded: ({ pågående }) => pågående === YesOrNo.NO,\n        isAnswered: ({ tom }) => hasValue(tom),\n        visibilityFilter: ({ pågående }) => pågående === YesOrNo.NO,\n    },\n    [EgenNæringModalFormField.næringsresultat]: {\n        isIncluded: ({ fom }) => erVirksomhetRegnetSomNyoppstartet(ISOStringToDate(fom)),\n        isAnswered: ({ næringsresultat }) => hasValue(næringsresultat),\n        visibilityFilter: ({ pågående, tom }) => pågående === YesOrNo.YES || hasValue(tom),\n    },\n    [EgenNæringModalFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]: {\n        isIncluded: ({ fom }) => erVirksomhetRegnetSomNyoppstartet(ISOStringToDate(fom)),\n        isAnswered: ({ harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene }) =>\n            harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ næringsresultat }) => hasValue(næringsresultat),\n    },\n    [EgenNæringModalFormField.yrkesAktivDato]: {\n        isIncluded: ({ fom }) => erVirksomhetRegnetSomNyoppstartet(ISOStringToDate(fom)),\n        isAnswered: ({ yrkesAktivDato }) => hasValue(yrkesAktivDato),\n        visibilityFilter: ({ harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene }) =>\n            harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene === YesOrNo.YES,\n    },\n    [EgenNæringModalFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]: {\n        isIncluded: ({ fom }) => !erVirksomhetRegnetSomNyoppstartet(ISOStringToDate(fom)),\n        isAnswered: ({ hattVarigEndringAvNæringsinntektSiste4Kalenderår }) =>\n            hattVarigEndringAvNæringsinntektSiste4Kalenderår !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ pågående, tom }) => pågående === YesOrNo.YES || hasValue(tom),\n    },\n    [EgenNæringModalFormField.datoForEndring]: {\n        isIncluded: ({ hattVarigEndringAvNæringsinntektSiste4Kalenderår }) =>\n            hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES,\n        isAnswered: ({ datoForEndring }) => hasValue(datoForEndring),\n        visibilityFilter: ({ hattVarigEndringAvNæringsinntektSiste4Kalenderår }) =>\n            hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES,\n    },\n    [EgenNæringModalFormField.inntektEtterEndring]: {\n        isIncluded: ({ hattVarigEndringAvNæringsinntektSiste4Kalenderår }) =>\n            hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES,\n        isAnswered: ({ inntektEtterEndring }) => hasValue(inntektEtterEndring),\n        visibilityFilter: ({ datoForEndring }) => hasValue(datoForEndring),\n    },\n    [EgenNæringModalFormField.forklaringEndring]: {\n        isIncluded: ({ hattVarigEndringAvNæringsinntektSiste4Kalenderår }) =>\n            hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES,\n        isAnswered: ({ forklaringEndring }) => hasValue(forklaringEndring),\n        visibilityFilter: ({ inntektEtterEndring }) => hasValue(inntektEtterEndring),\n    },\n    [EgenNæringModalFormField.harRegnskapsfører]: {\n        isIncluded: () => true,\n        isAnswered: ({ harRegnskapsfører }) => harRegnskapsfører !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({\n            yrkesAktivDato,\n            forklaringEndring,\n            harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene,\n            hattVarigEndringAvNæringsinntektSiste4Kalenderår,\n        }) =>\n            hasValue(yrkesAktivDato) ||\n            hasValue(forklaringEndring) ||\n            harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene === YesOrNo.NO ||\n            hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.NO,\n    },\n    [EgenNæringModalFormField.navnRegnskapsfører]: {\n        isIncluded: ({ harRegnskapsfører }) => harRegnskapsfører === YesOrNo.YES,\n        isAnswered: ({ navnRegnskapsfører }) => hasValue(navnRegnskapsfører),\n        visibilityFilter: ({ harRegnskapsfører }) => harRegnskapsfører === YesOrNo.YES,\n    },\n    [EgenNæringModalFormField.telefonRegnskapsfører]: {\n        isIncluded: ({ harRegnskapsfører }) => harRegnskapsfører === YesOrNo.YES,\n        isAnswered: ({ telefonRegnskapsfører }) => hasValue(telefonRegnskapsfører),\n        visibilityFilter: ({ navnRegnskapsfører }) => hasValue(navnRegnskapsfører),\n    },\n    [EgenNæringModalFormField.regnskapsførerNærVennEllerFamilie]: {\n        isIncluded: ({ harRegnskapsfører }) => harRegnskapsfører === YesOrNo.YES,\n        isAnswered: ({ regnskapsførerNærVennEllerFamilie }) => regnskapsførerNærVennEllerFamilie !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ telefonRegnskapsfører }) => hasValue(telefonRegnskapsfører),\n    },\n};\n\nconst egenNæringModalQuestionsConfig = Questions<EgenNæringModalFormData, EgenNæringModalFormField>(\n    EgenNæringModalFormConfig\n);\n\nexport default egenNæringModalQuestionsConfig;\n","import { hasValue, intlUtils } from '@navikt/fp-common';\nimport { getNumberFromNumberInputValue } from '@navikt/sif-common-formik/lib';\nimport { SkjemaelementFeil } from 'app/types/SkjemaelementFeil';\nimport { isDateABeforeDateB, isDateInTheFuture } from 'app/utils/dateUtils';\nimport { erGyldigNorskOrgnummer } from 'app/utils/numberUtils';\nimport { validateTextInputField } from 'app/utils/validationUtil';\nimport { isISODateString } from 'nav-datovelger';\nimport { IntlShape } from 'react-intl';\n\nexport const validateEgenNæringFom =\n    (intl: IntlShape, tom: string) =>\n    (fom: string): SkjemaelementFeil => {\n        if (!hasValue(fom)) {\n            return intlUtils(intl, 'valideringsfeil.fraOgMedDato.påkrevd');\n        }\n\n        if (!isISODateString(fom)) {\n            return intlUtils(intl, 'valideringsfeil.fraOgMedDato.gyldigDato');\n        }\n\n        if (isDateInTheFuture(fom)) {\n            return intlUtils(intl, 'valideringsfeil.fraOgMedDato.erIFremtiden');\n        }\n\n        if (isDateABeforeDateB(tom, fom)) {\n            return intlUtils(intl, 'valideringsfeil.fraOgMedDato.førTilDato');\n        }\n\n        return undefined;\n    };\n\nexport const validateEgenNæringTom =\n    (intl: IntlShape, fom: string) =>\n    (tom: string): SkjemaelementFeil => {\n        if (!hasValue(tom)) {\n            return intlUtils(intl, 'valideringsfeil.tilOgMedDato.påkrevd');\n        }\n\n        if (!isISODateString(tom)) {\n            return intlUtils(intl, 'valideringsfeil.tilOgMedDato.gyldigDato');\n        }\n\n        if (isDateInTheFuture(tom)) {\n            return intlUtils(intl, 'valideringsfeil.fraOgMedDato.erIFremtiden');\n        }\n\n        if (isDateABeforeDateB(tom, fom)) {\n            return intlUtils(intl, 'valideringsfeil.fraOgMedDato.førTilDato');\n        }\n\n        return undefined;\n    };\n\nexport const validateEgenNæringOrgnr =\n    (intl: IntlShape) =>\n    (orgnr: string): SkjemaelementFeil => {\n        if (!erGyldigNorskOrgnummer(orgnr)) {\n            return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.orgnr.ugyldigFormat');\n        }\n\n        return undefined;\n    };\n\nexport const validateEgenNæringForklaringTilEndring = (intl: IntlShape, label: string) => (forklaring: string) => {\n    if (forklaring.length < 25) {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.forklaringTilEndring.forKort');\n    }\n\n    if (forklaring.length > 1000) {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.forklaringTilEndring.forLang');\n    }\n\n    return validateTextInputField(forklaring, label, intl);\n};\n\nexport const validateEgenNæringEndringAvInntektsDato = (intl: IntlShape) => (dato: string) => {\n    if (!hasValue(dato)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.påkrevd');\n    }\n\n    if (!isISODateString(dato)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.gyldigDato');\n    }\n\n    if (isDateInTheFuture(dato)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.erIFremtiden');\n    }\n\n    return undefined;\n};\n\nexport const validateEgenNæringYrkesAktivDatoDato = (intl: IntlShape) => (dato: string) => {\n    if (!hasValue(dato)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.påkrevd');\n    }\n\n    if (!isISODateString(dato)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.gyldigDato');\n    }\n\n    if (isDateInTheFuture(dato)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.erIFremtiden');\n    }\n\n    return undefined;\n};\n\nexport const validateNumber = (intl: IntlShape, errorKey: string) => (value: string) => {\n    const valueNumber = getNumberFromNumberInputValue(value);\n\n    if (!valueNumber || Math.round(valueNumber) !== valueNumber) {\n        return intlUtils(intl, errorKey);\n    }\n\n    return undefined;\n};\n","import { Block, hasValue, intlUtils } from '@navikt/fp-common';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { EgenNæringModalFormComponents, EgenNæringModalFormField } from '../egenNæringModalFormConfig';\nimport { validateEgenNæringOrgnr } from '../validation/egenNæringValidation';\n\ninterface Props {\n    visibility: QuestionVisibility<EgenNæringModalFormField, undefined>;\n}\n\nconst OrgnummerEllerLand: FunctionComponent<Props> = ({ visibility }) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.orgnr)}>\n                <EgenNæringModalFormComponents.NumberInput\n                    name={EgenNæringModalFormField.orgnr}\n                    label={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.orgnr')}\n                    validate={validateEgenNæringOrgnr(intl)}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.land)}>\n                <EgenNæringModalFormComponents.CountrySelect\n                    name={EgenNæringModalFormField.land}\n                    label={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.registrertILand')}\n                    useAlpha3Code={false}\n                    validate={(value) => {\n                        if (!hasValue(value)) {\n                            return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.egenNæring.land');\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default OrgnummerEllerLand;\n","import React, { FunctionComponent } from 'react';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { EgenNæringModalFormComponents, EgenNæringModalFormField } from '../egenNæringModalFormConfig';\nimport { Block, intlUtils } from '@navikt/fp-common';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport VeilederNormal from 'app/assets/VeilederNormal';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport { validateNumber } from '../validation/egenNæringValidation';\nimport { validateRequiredTextInputField } from 'app/utils/validationUtil';\n\ninterface Props {\n    visibility: QuestionVisibility<EgenNæringModalFormField, undefined>;\n}\n\nconst Regnskapsfører: FunctionComponent<Props> = ({ visibility }) => {\n    const intl = useIntl();\n    const regnskapsførerNavnLabel = intlUtils(intl, 'inntektsinformasjon.egenNæringModal.regnskapsførerNavn');\n\n    return (\n        <>\n            <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.harRegnskapsfører)}>\n                <EgenNæringModalFormComponents.YesOrNoQuestion\n                    name={EgenNæringModalFormField.harRegnskapsfører}\n                    legend={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.harRegnskapsfører')}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.navnRegnskapsfører)}>\n                <EgenNæringModalFormComponents.Input\n                    name={EgenNæringModalFormField.navnRegnskapsfører}\n                    label={regnskapsførerNavnLabel}\n                    validate={validateRequiredTextInputField(regnskapsførerNavnLabel, intl)}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.telefonRegnskapsfører)}>\n                <EgenNæringModalFormComponents.NumberInput\n                    name={EgenNæringModalFormField.telefonRegnskapsfører}\n                    label={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.regnskapsførerTlf')}\n                    validate={validateNumber(\n                        intl,\n                        'valideringsfeil.inntektsinformasjon.regnskapsførerTelefonnummer.ugyldigFormat'\n                    )}\n                />\n            </Block>\n            <Block\n                padBottom=\"l\"\n                visible={visibility.isVisible(EgenNæringModalFormField.regnskapsførerNærVennEllerFamilie)}\n            >\n                <EgenNæringModalFormComponents.YesOrNoQuestion\n                    name={EgenNæringModalFormField.regnskapsførerNærVennEllerFamilie}\n                    legend={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.regnskapsførerNærVennEllerFamilie')}\n                />\n            </Block>\n            <Block\n                padBottom=\"l\"\n                visible={visibility.isVisible(EgenNæringModalFormField.regnskapsførerNærVennEllerFamilie)}\n            >\n                <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                    <Normaltekst>\n                        <FormattedMessage id=\"inntektsinformasjon.egenNæringModal.regnskapsførerVeileder\" />\n                    </Normaltekst>\n                </Veilederpanel>\n            </Block>\n        </>\n    );\n};\n\nexport default Regnskapsfører;\n","import React, { FunctionComponent } from 'react';\nimport Modal from 'nav-frontend-modal';\nimport { bemUtils, Block, intlUtils, UtvidetInformasjon } from '@navikt/fp-common';\nimport { Normaltekst, Undertittel } from 'nav-frontend-typografi';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    EgenNæringModalFormComponents,\n    EgenNæringModalFormData,\n    EgenNæringModalFormField,\n} from './egenNæringModalFormConfig';\nimport {\n    cleanupEgenNæringForm,\n    getInitialEgenNæringModalValues,\n    mapEgenNæringModalFormValuesToState,\n} from './egenNæringModalFormUtils';\nimport { Næring, Næringstype } from 'app/context/types/Næring';\nimport egenNæringModalQuestionsConfig from './egenNæringModalQuestionsConfig';\nimport OrgnummerEllerLand from './components/OrgnummerEllerLand';\nimport Regnskapsfører from './components/Regnskapsfører';\nimport { Hovedknapp } from 'nav-frontend-knapper';\n\nimport './egenNæringModal.less';\nimport {\n    validateEgenNæringFom,\n    validateEgenNæringTom,\n    validateEgenNæringForklaringTilEndring,\n    validateEgenNæringEndringAvInntektsDato,\n    validateEgenNæringYrkesAktivDatoDato,\n    validateNumber,\n} from './validation/egenNæringValidation';\nimport dayjs from 'dayjs';\nimport { validateRequiredTextInputField } from 'app/utils/validationUtil';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\n\ninterface Props {\n    isOpen: boolean;\n    title: string;\n    onRequestClose: () => void;\n    selectedNæring?: Næring;\n    addNæring: (næring: Næring) => void;\n    editNæring: (næring: Næring) => void;\n}\n\nconst EgenNæringModal: FunctionComponent<Props> = ({\n    isOpen,\n    title,\n    onRequestClose,\n    selectedNæring,\n    addNæring,\n    editNæring,\n}) => {\n    const intl = useIntl();\n    const bem = bemUtils('egenNæringModal');\n\n    const onValidSubmit = (values: Partial<EgenNæringModalFormData>) => {\n        if (!selectedNæring) {\n            addNæring(mapEgenNæringModalFormValuesToState(values));\n        } else {\n            editNæring(mapEgenNæringModalFormValuesToState(values));\n        }\n        onRequestClose();\n    };\n\n    const navnPåNæringLabel = intlUtils(intl, 'inntektsinformasjon.egenNæringModal.navnPåNæring');\n    const varigEndringForklaringLabel = intlUtils(\n        intl,\n        'inntektsinformasjon.egenNæringModal.varigEndringAvNæringsinntektForklaring'\n    );\n\n    return (\n        <Modal\n            isOpen={isOpen}\n            contentLabel={title}\n            onRequestClose={onRequestClose}\n            closeButton={true}\n            shouldCloseOnOverlayClick={false}\n            className={bem.block}\n        >\n            <EgenNæringModalFormComponents.FormikWrapper\n                initialValues={getInitialEgenNæringModalValues(selectedNæring)}\n                onSubmit={(values: Partial<EgenNæringModalFormData>) => onValidSubmit(values)}\n                renderForm={({ values: formValues }) => {\n                    const visibility = egenNæringModalQuestionsConfig.getVisbility(formValues);\n\n                    return (\n                        <EgenNæringModalFormComponents.Form\n                            includeButtons={false}\n                            cleanup={(values) => cleanupEgenNæringForm(values, visibility)}\n                            includeValidationSummary={true}\n                        >\n                            <Block padBottom=\"l\">\n                                <Undertittel className={bem.element('tittel')}>\n                                    <FormattedMessage id=\"inntektsinformasjon.egenNæringModal.tittel\" />\n                                </Undertittel>\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.type)}>\n                                <EgenNæringModalFormComponents.RadioPanelGroup\n                                    name={EgenNæringModalFormField.type}\n                                    legend={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.næringstype')}\n                                    radios={[\n                                        {\n                                            label: intlUtils(\n                                                intl,\n                                                'inntektsinformasjon.egenNæringModal.næringstype.dagmamma'\n                                            ),\n                                            value: Næringstype.DAGMAMMA,\n                                        },\n                                        {\n                                            label: intlUtils(\n                                                intl,\n                                                'inntektsinformasjon.egenNæringModal.næringstype.fiske'\n                                            ),\n                                            value: Næringstype.FISKER,\n                                        },\n                                        {\n                                            label: intlUtils(\n                                                intl,\n                                                'inntektsinformasjon.egenNæringModal.næringstype.jordbrukSkogbruk'\n                                            ),\n                                            value: Næringstype.JORDBRUK,\n                                        },\n                                        {\n                                            label: intlUtils(\n                                                intl,\n                                                'inntektsinformasjon.egenNæringModal.næringstype.annen'\n                                            ),\n                                            value: Næringstype.ANNET,\n                                        },\n                                    ]}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(EgenNæringModalFormField.navnPåNæringen)}\n                            >\n                                <EgenNæringModalFormComponents.Input\n                                    name={EgenNæringModalFormField.navnPåNæringen}\n                                    label={navnPåNæringLabel}\n                                    maxLength={100}\n                                    validate={validateRequiredTextInputField(navnPåNæringLabel, intl)}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(EgenNæringModalFormField.registrertINorge)}\n                            >\n                                <EgenNæringModalFormComponents.YesOrNoQuestion\n                                    name={EgenNæringModalFormField.registrertINorge}\n                                    legend={intlUtils(\n                                        intl,\n                                        'inntektsinformasjon.egenNæringModal.erNæringenRegistrertINorge',\n                                        {\n                                            navnPåNæringen: formValues.navnPåNæringen,\n                                        }\n                                    )}\n                                    validate={(value: YesOrNo) => {\n                                        if (value === YesOrNo.UNANSWERED) {\n                                            return intlUtils(\n                                                intl,\n                                                'valideringsfeil.inntektsinformasjon.egenNæring.registrertINorge'\n                                            );\n                                        }\n\n                                        return undefined;\n                                    }}\n                                />\n                            </Block>\n                            <OrgnummerEllerLand visibility={visibility} />\n                            <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.fom)}>\n                                <EgenNæringModalFormComponents.DatePicker\n                                    name={EgenNæringModalFormField.fom}\n                                    label={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.startetNæring.fom', {\n                                        navnPåNæringen: formValues.navnPåNæringen,\n                                    })}\n                                    placeholder=\"dd.mm.åååå\"\n                                    fullscreenOverlay={true}\n                                    showYearSelector={true}\n                                    validate={validateEgenNæringFom(intl, formValues.tom)}\n                                    maxDate={dayjs().toDate()}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.pågående)}>\n                                <EgenNæringModalFormComponents.YesOrNoQuestion\n                                    name={EgenNæringModalFormField.pågående}\n                                    legend={intlUtils(\n                                        intl,\n                                        'inntektsinformasjon.egenNæringModal.startetNæring.pågående',\n                                        {\n                                            navnPåNæringen: formValues.navnPåNæringen,\n                                        }\n                                    )}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.tom)}>\n                                <EgenNæringModalFormComponents.DatePicker\n                                    name={EgenNæringModalFormField.tom}\n                                    label={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.startetNæring.tom', {\n                                        navnPåNæringen: formValues.navnPåNæringen,\n                                    })}\n                                    placeholder=\"dd.mm.åååå\"\n                                    fullscreenOverlay={true}\n                                    showYearSelector={true}\n                                    validate={validateEgenNæringTom(intl, formValues.fom)}\n                                    maxDate={dayjs().toDate()}\n                                    minDate={dayjs(formValues.fom).toDate()}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(EgenNæringModalFormField.næringsresultat)}\n                            >\n                                <EgenNæringModalFormComponents.NumberInput\n                                    name={EgenNæringModalFormField.næringsresultat}\n                                    label={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.næringsinntekt')}\n                                    description={\n                                        <UtvidetInformasjon\n                                            apneLabel={intlUtils(\n                                                intl,\n                                                'inntektsinformasjon.egenNæringModal.næringsinntekt.info.apneLabel'\n                                            )}\n                                        >\n                                            <Normaltekst>\n                                                <FormattedMessage id=\"inntektsinformasjon.egenNæringModal.næringsinntekt.info\" />\n                                            </Normaltekst>\n                                        </UtvidetInformasjon>\n                                    }\n                                    validate={validateNumber(\n                                        intl,\n                                        'valideringsfeil.inntektsinformasjon.næringsinntekt.ugyldigFormat'\n                                    )}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(\n                                    EgenNæringModalFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n                                )}\n                            >\n                                <EgenNæringModalFormComponents.YesOrNoQuestion\n                                    name={\n                                        EgenNæringModalFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n                                    }\n                                    legend={intlUtils(\n                                        intl,\n                                        'inntektsinformasjon.egenNæringModal.blittYrkesaktivSiste3År'\n                                    )}\n                                    description={\n                                        <UtvidetInformasjon\n                                            apneLabel={intlUtils(\n                                                intl,\n                                                'inntektsinformasjon.egenNæringModal.blittYrkesaktivSiste3År.info.apneLabel'\n                                            )}\n                                        >\n                                            <Normaltekst>\n                                                <FormattedMessage id=\"inntektsinformasjon.egenNæringModal.blittYrkesaktivSiste3År.info\" />\n                                            </Normaltekst>\n                                        </UtvidetInformasjon>\n                                    }\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(EgenNæringModalFormField.yrkesAktivDato)}\n                            >\n                                <EgenNæringModalFormComponents.DatePicker\n                                    name={EgenNæringModalFormField.yrkesAktivDato}\n                                    label={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.yrkesaktivDato')}\n                                    placeholder=\"dd.mm.åååå\"\n                                    fullscreenOverlay={true}\n                                    showYearSelector={true}\n                                    validate={validateEgenNæringYrkesAktivDatoDato(intl)}\n                                    maxDate={dayjs().toDate()}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(\n                                    EgenNæringModalFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår\n                                )}\n                            >\n                                <EgenNæringModalFormComponents.YesOrNoQuestion\n                                    name={EgenNæringModalFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår}\n                                    legend={intlUtils(\n                                        intl,\n                                        'inntektsinformasjon.egenNæringModal.varigEndringAvNæringsinntekt'\n                                    )}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(EgenNæringModalFormField.datoForEndring)}\n                            >\n                                <EgenNæringModalFormComponents.DatePicker\n                                    name={EgenNæringModalFormField.datoForEndring}\n                                    label={intlUtils(\n                                        intl,\n                                        'inntektsinformasjon.egenNæringModal.varigEndringAvNæringsinntektDato'\n                                    )}\n                                    placeholder=\"dd.mm.åååå\"\n                                    fullscreenOverlay={true}\n                                    showYearSelector={true}\n                                    validate={validateEgenNæringEndringAvInntektsDato(intl)}\n                                    maxDate={dayjs().toDate()}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(EgenNæringModalFormField.inntektEtterEndring)}\n                            >\n                                <EgenNæringModalFormComponents.NumberInput\n                                    name={EgenNæringModalFormField.inntektEtterEndring}\n                                    label={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.inntektEtterEndring')}\n                                    validate={validateNumber(\n                                        intl,\n                                        'valideringsfeil.inntektsinformasjon.varigEndringAvInntekt.ugyldigFormat'\n                                    )}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(EgenNæringModalFormField.forklaringEndring)}\n                            >\n                                <EgenNæringModalFormComponents.Textarea\n                                    name={EgenNæringModalFormField.forklaringEndring}\n                                    label={varigEndringForklaringLabel}\n                                    maxLength={1000}\n                                    validate={validateEgenNæringForklaringTilEndring(intl, varigEndringForklaringLabel)}\n                                />\n                            </Block>\n                            <Regnskapsfører visibility={visibility} />\n                            <Block visible={visibility.areAllQuestionsAnswered()} textAlignCenter={true}>\n                                <Hovedknapp>{intlUtils(intl, 'søknad.gåVidere')}</Hovedknapp>\n                            </Block>\n                        </EgenNæringModalFormComponents.Form>\n                    );\n                }}\n            />\n        </Modal>\n    );\n};\n\nexport default EgenNæringModal;\n","import { Block, intlUtils } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { Næring } from 'app/context/types/Næring';\nimport { Knapp } from 'nav-frontend-knapper';\nimport React, { FunctionComponent, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    InntektsinformasjonFormComponents,\n    InntektsinformasjonFormData,\n    InntektsinformasjonFormField,\n} from '../../inntektsinformasjonFormConfig';\nimport EgenNæringListe from './EgenNæringListe';\nimport HvemKanDriveMedEgenNæring from './HvemKanDriveMedEgenNæring';\nimport EgenNæringModal from './modal/EgenNæringModal';\n\ninterface Props {\n    egenNæringInformasjon: Næring[];\n    setEgenNæringsInformasjon: (oppdrag: Næring[]) => void;\n    visibility: QuestionVisibility<InntektsinformasjonFormField, undefined>;\n    formValues: InntektsinformasjonFormData;\n}\n\nconst EgenNæring: FunctionComponent<Props> = ({\n    egenNæringInformasjon,\n    setEgenNæringsInformasjon,\n    visibility,\n    formValues,\n}) => {\n    const intl = useIntl();\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [selectedNæring, setSelectedNæring] = useState<Næring>();\n\n    const handleOnLeggTil = () => {\n        setIsModalOpen(true);\n        setSelectedNæring(undefined);\n    };\n\n    const addNæring = (næring: Næring) => {\n        const updatedEgenNæringInformasjon = egenNæringInformasjon.concat(næring);\n\n        setEgenNæringsInformasjon(updatedEgenNæringInformasjon);\n    };\n\n    const deleteNæring = (næring: Næring) => {\n        const updatedEgenNæringInformasjon = egenNæringInformasjon.filter((nær) => nær !== næring);\n\n        setEgenNæringsInformasjon(updatedEgenNæringInformasjon);\n    };\n\n    const editNæring = (næring: Næring) => {\n        const updatedEgenNæringInformasjon = egenNæringInformasjon\n            .filter((nær) => nær !== selectedNæring)\n            .concat(næring);\n\n        setEgenNæringsInformasjon(updatedEgenNæringInformasjon);\n    };\n\n    const selectNæring = (næring: Næring) => {\n        setSelectedNæring(næring);\n        setIsModalOpen(true);\n    };\n\n    return (\n        <>\n            <Block\n                padBottom=\"l\"\n                visible={visibility.isVisible(InntektsinformasjonFormField.hattInntektSomNæringsdrivende)}\n            >\n                <InntektsinformasjonFormComponents.YesOrNoQuestion\n                    name={InntektsinformasjonFormField.hattInntektSomNæringsdrivende}\n                    legend={intlUtils(intl, 'inntektsinformasjon.harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd')}\n                    description={<HvemKanDriveMedEgenNæring />}\n                    validate={(hattInntektSomNæringsdrivende) => {\n                        if (hattInntektSomNæringsdrivende === YesOrNo.YES) {\n                            if (egenNæringInformasjon.length === 0) {\n                                return intlUtils(\n                                    intl,\n                                    'valideringsfeil.inntektsinformasjon.andreInntekter.måHaVirksomhet'\n                                );\n                            }\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n            {formValues.hattInntektSomNæringsdrivende === YesOrNo.YES && (\n                <div style={{ backgroundColor: '#f1f1f1', marginBottom: '1rem', padding: '1rem' }}>\n                    <EgenNæringModal\n                        isOpen={isModalOpen}\n                        title=\"Næringsinformasjon\"\n                        onRequestClose={() => setIsModalOpen(false)}\n                        selectedNæring={selectedNæring}\n                        addNæring={addNæring}\n                        editNæring={editNæring}\n                    />\n                    <Block padBottom=\"l\" visible={egenNæringInformasjon.length > 0}>\n                        <EgenNæringListe\n                            næringsInformasjon={egenNæringInformasjon}\n                            deleteNæring={deleteNæring}\n                            selectNæring={selectNæring}\n                        />\n                    </Block>\n                    <Knapp htmlType=\"button\" onClick={handleOnLeggTil}>\n                        <FormattedMessage id=\"inntektsinformasjon.leggTilVirksomhet\" />\n                    </Knapp>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default EgenNæring;\n","import { hasValue, intlUtils } from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { isISODateString } from 'nav-datovelger';\nimport { IntlShape } from 'react-intl';\n\nexport const validateFrilansoppstartsDato = (intl: IntlShape) => (oppstartsdato: string) => {\n    if (!hasValue(oppstartsdato)) {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.frilansoppstartsDato.påkrevd');\n    }\n\n    if (!isISODateString(oppstartsdato)) {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.frilansoppstartsDato.ugyldigDatoFormat');\n    }\n\n    if (dayjs().isBefore(dayjs(oppstartsdato), 'day')) {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.frilansoppstartsDato.kanIkkeVæreFremITid');\n    }\n\n    return undefined;\n};\n","import { formatDate } from '@navikt/fp-common';\nimport InteractiveListElement from 'app/components/interactive-list-element/InteractiveListElement';\nimport { FrilansOppdrag } from 'app/context/types/Frilans';\nimport React, { FunctionComponent } from 'react';\n\ninterface Props {\n    frilansoppdrag: FrilansOppdrag[];\n    deleteFrilansoppdrag: (oppdrag: FrilansOppdrag) => void;\n    selectOppdrag: (oppdrag: FrilansOppdrag) => void;\n}\n\nconst FrilansoppdragListe: FunctionComponent<Props> = ({ frilansoppdrag, deleteFrilansoppdrag, selectOppdrag }) => {\n    if (frilansoppdrag.length === 0) {\n        return null;\n    }\n\n    return (\n        <ul style={{ margin: 0, padding: 0, listStyle: 'none' }}>\n            {frilansoppdrag.map((oppdrag, index) => (\n                <InteractiveListElement\n                    deleteLinkText=\"Slett oppdrag\"\n                    onDelete={() => deleteFrilansoppdrag(oppdrag)}\n                    onEdit={() => selectOppdrag(oppdrag)}\n                    text={`${formatDate(oppdrag.tidsperiode.fom)} - ${\n                        oppdrag.tidsperiode.tom ? formatDate(oppdrag.tidsperiode.tom) : 'pågående'\n                    }`}\n                    title={oppdrag.navnPåArbeidsgiver}\n                    deleteButtonAriaText={`Slett oppdrag for ${oppdrag.navnPåArbeidsgiver}`}\n                    editButtonAriaText={`Rediger oppdrag for ${oppdrag.navnPåArbeidsgiver}`}\n                    key={`${oppdrag.navnPåArbeidsgiver}+${index}`}\n                />\n            ))}\n        </ul>\n    );\n};\n\nexport default FrilansoppdragListe;\n","import { intlUtils, UtvidetInformasjon } from '@navikt/fp-common';\nimport EksternUrl from 'app/components/ekstern-url/EksternUrl';\nimport links from 'app/links/links';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nconst HvemKanVæreFrilanser = () => {\n    const intl = useIntl();\n\n    return (\n        <UtvidetInformasjon\n            apneLabel={intlUtils(intl, 'inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.apneLabel')}\n        >\n            <div style={{ backgroundColor: '#f1f1f1', padding: '1.5rem' }}>\n                <Normaltekst>\n                    <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.del1\" />\n                </Normaltekst>\n                <ul>\n                    <li>\n                        <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.punkt1\" />\n                    </li>\n                    <li>\n                        <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.punkt2\" />\n                    </li>\n                    <li>\n                        <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.punkt3\" />\n                    </li>\n                    <li>\n                        <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.punkt4\" />\n                    </li>\n                    <li>\n                        <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.punkt5\" />\n                    </li>\n                    <li>\n                        <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.punkt6\" />\n                    </li>\n                    <li>\n                        <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.punkt7\" />\n                    </li>\n                    <li>\n                        <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.punkt8\" />\n                    </li>\n                </ul>\n                <Normaltekst>\n                    <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.del2\" />\n                    <EksternUrl url={links.frilanserInfoBoks} lenkeTekst={intlUtils(intl, 'hjemmeside')} />\n                </Normaltekst>\n            </div>\n        </UtvidetInformasjon>\n    );\n};\n\nexport default HvemKanVæreFrilanser;\n","import { getTypedFormComponents, YesOrNo } from '@navikt/sif-common-formik/lib';\n\nexport enum FrilansoppdragModalFormField {\n    navnOppdragsgiver = 'navnOppdragsgiver',\n    fom = 'fom',\n    tom = 'tom',\n    pågående = 'pågående',\n}\n\nexport interface FrilansoppdragModalFormData {\n    [FrilansoppdragModalFormField.navnOppdragsgiver]: string;\n    [FrilansoppdragModalFormField.fom]: string;\n    [FrilansoppdragModalFormField.tom]: string;\n    [FrilansoppdragModalFormField.pågående]: YesOrNo;\n}\n\nexport const FrilansoppdragModalFormComponents = getTypedFormComponents<\n    FrilansoppdragModalFormField,\n    FrilansoppdragModalFormData,\n    string\n>();\n","import { hasValue } from '@navikt/fp-common';\nimport { dateToISOString, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { FrilansOppdrag } from 'app/context/types/Frilans';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport { convertBooleanOrUndefinedToYesOrNo, convertYesOrNoOrUndefinedToBoolean } from 'app/utils/formUtils';\nimport { FrilansoppdragModalFormData, FrilansoppdragModalFormField } from './frilansoppdragModalFormConfig';\n\nexport const initialFrilansoppdragModalValues: FrilansoppdragModalFormData = {\n    [FrilansoppdragModalFormField.navnOppdragsgiver]: '',\n    [FrilansoppdragModalFormField.fom]: '',\n    [FrilansoppdragModalFormField.tom]: '',\n    [FrilansoppdragModalFormField.pågående]: YesOrNo.UNANSWERED,\n};\n\nexport const cleanupFrilansoppdragForm = (\n    values: FrilansoppdragModalFormData,\n    visibility: QuestionVisibility<FrilansoppdragModalFormField, undefined>\n): FrilansoppdragModalFormData => {\n    return {\n        navnOppdragsgiver: visibility.isVisible(FrilansoppdragModalFormField.navnOppdragsgiver)\n            ? values.navnOppdragsgiver\n            : initialFrilansoppdragModalValues.navnOppdragsgiver,\n        fom: visibility.isVisible(FrilansoppdragModalFormField.fom) ? values.fom : initialFrilansoppdragModalValues.fom,\n        tom: visibility.isVisible(FrilansoppdragModalFormField.tom) ? values.tom : initialFrilansoppdragModalValues.tom,\n        pågående: visibility.isVisible(FrilansoppdragModalFormField.pågående)\n            ? values.pågående\n            : initialFrilansoppdragModalValues.pågående,\n    };\n};\n\nexport const mapFrilansoppdragModalValuesToState = (values: Partial<FrilansoppdragModalFormData>): FrilansOppdrag => {\n    return {\n        navnPåArbeidsgiver: values.navnOppdragsgiver!,\n        pågående: convertYesOrNoOrUndefinedToBoolean(values.pågående)!,\n        tidsperiode: {\n            fom: ISOStringToDate(values.fom)!,\n            tom: hasValue(values.tom) ? ISOStringToDate(values.tom) : undefined,\n        },\n    };\n};\n\nexport const getInitialFrilansoppdragModalValues = (\n    oppdrag: FrilansOppdrag | undefined\n): FrilansoppdragModalFormData => {\n    if (!oppdrag) {\n        return {\n            ...initialFrilansoppdragModalValues,\n        };\n    }\n\n    return {\n        ...initialFrilansoppdragModalValues,\n        fom: dateToISOString(oppdrag.tidsperiode.fom),\n        tom: dateToISOString(oppdrag.tidsperiode.tom) || '',\n        navnOppdragsgiver: oppdrag.navnPåArbeidsgiver,\n        pågående: convertBooleanOrUndefinedToYesOrNo(oppdrag.pågående),\n    };\n};\n","import { hasValue } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { FrilansoppdragModalFormData, FrilansoppdragModalFormField } from './frilansoppdragModalFormConfig';\n\nconst FrilansoppdragModalFormConfig: QuestionConfig<FrilansoppdragModalFormData, FrilansoppdragModalFormField> = {\n    [FrilansoppdragModalFormField.navnOppdragsgiver]: {\n        isIncluded: () => true,\n        isAnswered: ({ navnOppdragsgiver }) => hasValue(navnOppdragsgiver),\n    },\n    [FrilansoppdragModalFormField.fom]: {\n        isIncluded: () => true,\n        isAnswered: ({ fom }) => hasValue(fom),\n        visibilityFilter: ({ navnOppdragsgiver }) => hasValue(navnOppdragsgiver),\n    },\n    [FrilansoppdragModalFormField.pågående]: {\n        isIncluded: () => true,\n        isAnswered: ({ pågående }) => pågående !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ fom }) => hasValue(fom),\n    },\n    [FrilansoppdragModalFormField.tom]: {\n        isIncluded: ({ pågående }) => pågående === YesOrNo.NO,\n        isAnswered: ({ tom }) => hasValue(tom),\n        visibilityFilter: ({ pågående }) => pågående === YesOrNo.NO,\n    },\n};\n\nconst frilansoppdragModalQuestionsConfig = Questions<FrilansoppdragModalFormData, FrilansoppdragModalFormField>(\n    FrilansoppdragModalFormConfig\n);\n\nexport default frilansoppdragModalQuestionsConfig;\n","import { hasValue, intlUtils } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { isDateInTheFuture, isDateABeforeDateB } from 'app/utils/dateUtils';\nimport { validateTextInputField } from 'app/utils/validationUtil';\nimport { isISODateString } from 'nav-datovelger';\nimport { IntlShape } from 'react-intl';\n\nexport const validateNavnPåOppdragsgiver = (intl: IntlShape, label: string) => (navn: string) => {\n    if (!hasValue(navn) || navn.trim() === '') {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.frilansoppdrag.navnPåOppdragsgiver.påkrevd');\n    }\n\n    return validateTextInputField(navn, label, intl);\n};\n\nexport const validateOppdragFom = (intl: IntlShape, tom: string, oppstartsdato: string) => (fom: string) => {\n    if (!hasValue(fom)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.påkrevd');\n    }\n\n    if (!isISODateString(fom)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.gyldigDato');\n    }\n\n    if (isDateInTheFuture(fom)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.erIFremtiden');\n    }\n\n    if (isDateABeforeDateB(fom, oppstartsdato)) {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.frilansoppdrag.fom.førOppstartsdato');\n    }\n\n    if (isDateABeforeDateB(tom, fom)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.førTilDato');\n    }\n\n    return undefined;\n};\n\nexport const validatePågåendeOppdrag = (intl: IntlShape) => (pågående: YesOrNo) => {\n    if (pågående === YesOrNo.UNANSWERED) {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.frilansoppdrag.pågående.påkrevd');\n    }\n\n    return undefined;\n};\n\nexport const validateOppdragTom =\n    (intl: IntlShape, pågående: YesOrNo, fom: string, oppstartsdato: string) => (tom: string) => {\n        if (pågående === YesOrNo.YES) {\n            return undefined;\n        }\n\n        if (!hasValue(tom)) {\n            return intlUtils(intl, 'valideringsfeil.tilOgMedDato.påkrevd');\n        }\n\n        if (!isISODateString(tom)) {\n            return intlUtils(intl, 'valideringsfeil.tilOgMedDato.gyldigDato');\n        }\n\n        if (isDateInTheFuture(tom)) {\n            return intlUtils(intl, 'valideringsfeil.tilOgMedDato.erIFremtiden');\n        }\n\n        if (isDateABeforeDateB(tom, oppstartsdato)) {\n            return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.frilansoppdrag.tom.førOppstartsdato');\n        }\n\n        if (isDateABeforeDateB(tom, fom)) {\n            return intlUtils(intl, 'valideringsfeil.tilOgMedDato.etterFraDato');\n        }\n\n        return undefined;\n    };\n","import React, { FunctionComponent } from 'react';\nimport Modal from 'nav-frontend-modal';\nimport {\n    FrilansoppdragModalFormComponents,\n    FrilansoppdragModalFormData,\n    FrilansoppdragModalFormField,\n} from './frilansoppdragModalFormConfig';\nimport {\n    cleanupFrilansoppdragForm,\n    getInitialFrilansoppdragModalValues,\n    mapFrilansoppdragModalValuesToState,\n} from './frilansoppdragModalFormUtils';\nimport { bemUtils, Block, intlUtils } from '@navikt/fp-common';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport frilansoppdragModalQuestionsConfig from './frilansoppdragModalQuestionsConfig';\nimport { FrilansOppdrag } from 'app/context/types/Frilans';\nimport {\n    validateNavnPåOppdragsgiver,\n    validateOppdragFom,\n    validateOppdragTom,\n    validatePågåendeOppdrag,\n} from '../validation/frilansValidation';\nimport dayjs from 'dayjs';\n\nimport './frilansoppdragModal.less';\n\ninterface Props {\n    isOpen: boolean;\n    title: string;\n    onRequestClose: () => void;\n    selectedFrilansoppdrag?: FrilansOppdrag;\n    addFrilansoppdrag: (oppdrag: FrilansOppdrag) => void;\n    editFrilansoppdrag: (oppdrag: FrilansOppdrag) => void;\n    oppstartsdato: string;\n}\n\nconst startetSomFrilansIForrigeKalenderårEllerTidligere = (oppstartsdato: string) => {\n    return dayjs(oppstartsdato).year() < dayjs().year();\n};\n\nconst FrilansoppdragModal: FunctionComponent<Props> = ({\n    isOpen,\n    title,\n    onRequestClose,\n    selectedFrilansoppdrag,\n    addFrilansoppdrag,\n    editFrilansoppdrag,\n    oppstartsdato,\n}) => {\n    const bem = bemUtils('frilansoppdragModal');\n    const intl = useIntl();\n\n    const onValidSubmit = (values: Partial<FrilansoppdragModalFormData>) => {\n        if (!selectedFrilansoppdrag) {\n            addFrilansoppdrag(mapFrilansoppdragModalValuesToState(values));\n        } else {\n            editFrilansoppdrag(mapFrilansoppdragModalValuesToState(values));\n        }\n        onRequestClose();\n    };\n\n    const oppdragsgiverNavnLabel = intlUtils(intl, 'inntektsinformasjon.frilansOppdrag.oppdragsgiver');\n\n    return (\n        <Modal\n            isOpen={isOpen}\n            contentLabel={title}\n            onRequestClose={onRequestClose}\n            closeButton={true}\n            shouldCloseOnOverlayClick={false}\n            className={bem.block}\n        >\n            <FrilansoppdragModalFormComponents.FormikWrapper\n                initialValues={getInitialFrilansoppdragModalValues(selectedFrilansoppdrag)}\n                onSubmit={(values: Partial<FrilansoppdragModalFormData>) => onValidSubmit(values)}\n                renderForm={({ values: formValues }) => {\n                    const visibility = frilansoppdragModalQuestionsConfig.getVisbility(formValues);\n\n                    return (\n                        <FrilansoppdragModalFormComponents.Form\n                            cleanup={(values) => cleanupFrilansoppdragForm(values, visibility)}\n                        >\n                            <Undertittel className={bem.element('tittel')}>\n                                <FormattedMessage id=\"inntektsinformasjon.frilansOppdrag.tittel\" />\n                            </Undertittel>\n                            <Block padBottom=\"l\">\n                                <FrilansoppdragModalFormComponents.Input\n                                    name={FrilansoppdragModalFormField.navnOppdragsgiver}\n                                    label={oppdragsgiverNavnLabel}\n                                    validate={validateNavnPåOppdragsgiver(intl, oppdragsgiverNavnLabel)}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(FrilansoppdragModalFormField.fom)}>\n                                <FrilansoppdragModalFormComponents.DatePicker\n                                    name={FrilansoppdragModalFormField.fom}\n                                    label={intlUtils(intl, 'fom')}\n                                    placeholder={'dd.mm.åååå'}\n                                    fullscreenOverlay={true}\n                                    validate={validateOppdragFom(intl, formValues.tom, oppstartsdato)}\n                                    minDate={dayjs(oppstartsdato).toDate()}\n                                    maxDate={dayjs().toDate()}\n                                    showYearSelector={startetSomFrilansIForrigeKalenderårEllerTidligere(oppstartsdato)}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(FrilansoppdragModalFormField.pågående)}>\n                                <FrilansoppdragModalFormComponents.YesOrNoQuestion\n                                    name={FrilansoppdragModalFormField.pågående}\n                                    legend={intlUtils(intl, 'inntektsinformasjon.frilansOppdrag.pågående')}\n                                    validate={validatePågåendeOppdrag(intl)}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(FrilansoppdragModalFormField.tom)}>\n                                <FrilansoppdragModalFormComponents.DatePicker\n                                    name={FrilansoppdragModalFormField.tom}\n                                    label={intlUtils(intl, 'tom')}\n                                    placeholder={'dd.mm.åååå'}\n                                    fullscreenOverlay={true}\n                                    validate={validateOppdragTom(\n                                        intl,\n                                        formValues.pågående,\n                                        formValues.fom,\n                                        oppstartsdato\n                                    )}\n                                    minDate={dayjs(formValues.fom).toDate()}\n                                    maxDate={dayjs().toDate()}\n                                    showYearSelector={true}\n                                />\n                            </Block>\n                        </FrilansoppdragModalFormComponents.Form>\n                    );\n                }}\n            />\n        </Modal>\n    );\n};\n\nexport default FrilansoppdragModal;\n","import { Block, dateToday, intlUtils } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { FrilansOppdrag } from 'app/context/types/Frilans';\nimport { Knapp } from 'nav-frontend-knapper';\nimport React, { FunctionComponent, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    InntektsinformasjonFormComponents,\n    InntektsinformasjonFormData,\n    InntektsinformasjonFormField,\n} from '../../inntektsinformasjonFormConfig';\nimport { validateFrilansoppstartsDato } from '../../validation/inntektsinformasjonValidering';\nimport FrilansoppdragListe from './FrilansoppdragListe';\nimport HvemKanVæreFrilanser from './HvemKanVæreFrilanser';\nimport FrilansoppdragModal from './modal/FrilansoppdragModal';\n\ninterface Props {\n    frilansoppdrag: FrilansOppdrag[];\n    setFrilansoppdrag: (oppdrag: FrilansOppdrag[]) => void;\n    visibility: QuestionVisibility<InntektsinformasjonFormField, undefined>;\n    formValues: InntektsinformasjonFormData;\n}\n\nconst Frilans: FunctionComponent<Props> = ({ frilansoppdrag, setFrilansoppdrag, visibility, formValues }) => {\n    const intl = useIntl();\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [selectedOppdrag, setSelectedOppdrag] = useState<FrilansOppdrag>();\n\n    const addFrilansoppdrag = (oppdrag: FrilansOppdrag) => {\n        const updatedFrilansoppdrag = frilansoppdrag.concat(oppdrag);\n\n        setFrilansoppdrag(updatedFrilansoppdrag);\n    };\n\n    const deleteFrilansoppdrag = (oppdrag: FrilansOppdrag) => {\n        const updatedFrilansoppdrag = frilansoppdrag.filter((opp) => opp !== oppdrag);\n\n        setFrilansoppdrag(updatedFrilansoppdrag);\n    };\n\n    const editFrilansoppdrag = (oppdrag: FrilansOppdrag) => {\n        const updatedFrilansoppdrag = frilansoppdrag.filter((opp) => opp !== selectedOppdrag).concat(oppdrag);\n\n        setFrilansoppdrag(updatedFrilansoppdrag);\n    };\n\n    const selectOppdrag = (frilansoppdrag: FrilansOppdrag) => {\n        setSelectedOppdrag(frilansoppdrag);\n        setIsModalOpen(true);\n    };\n\n    const handleOnLeggTil = () => {\n        setIsModalOpen(true);\n        setSelectedOppdrag(undefined);\n    };\n\n    return (\n        <>\n            <Block padBottom=\"l\" visible={visibility.isVisible(InntektsinformasjonFormField.hattInntektSomFrilans)}>\n                <InntektsinformasjonFormComponents.YesOrNoQuestion\n                    name={InntektsinformasjonFormField.hattInntektSomFrilans}\n                    legend={intlUtils(intl, 'inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd')}\n                    description={<HvemKanVæreFrilanser />}\n                />\n            </Block>\n            {formValues.hattInntektSomFrilans === YesOrNo.YES && (\n                <div style={{ backgroundColor: '#f1f1f1', marginBottom: '1rem', padding: '1rem' }}>\n                    <Block\n                        padBottom=\"l\"\n                        visible={visibility.isVisible(InntektsinformasjonFormField.frilansOppstartsDato)}\n                    >\n                        <InntektsinformasjonFormComponents.DatePicker\n                            name={InntektsinformasjonFormField.frilansOppstartsDato}\n                            label={intlUtils(intl, 'inntektsinformasjon.frilans.oppstart')}\n                            validate={validateFrilansoppstartsDato(intl)}\n                            maxDate={dateToday}\n                            showYearSelector={true}\n                            placeholder={'dd.mm.åååå'}\n                        />\n                    </Block>\n                    <Block\n                        padBottom=\"l\"\n                        visible={visibility.isVisible(InntektsinformasjonFormField.jobberFremdelesSomFrilanser)}\n                    >\n                        <InntektsinformasjonFormComponents.YesOrNoQuestion\n                            name={InntektsinformasjonFormField.jobberFremdelesSomFrilanser}\n                            legend={intlUtils(intl, 'inntektsinformasjon.frilans.jobberFremdelesSomFrilans')}\n                        />\n                    </Block>\n                    <Block\n                        padBottom=\"l\"\n                        visible={visibility.isVisible(InntektsinformasjonFormField.oppdragForNæreVennerEllerFamilie)}\n                    >\n                        <InntektsinformasjonFormComponents.YesOrNoQuestion\n                            name={InntektsinformasjonFormField.oppdragForNæreVennerEllerFamilie}\n                            legend={intlUtils(intl, 'inntektsinformasjon.harJobbetForNærVennEllerFamilieSiste10Mnd')}\n                            validate={(oppdragForNæreVennerEllerFamilie) => {\n                                if (oppdragForNæreVennerEllerFamilie === YesOrNo.YES) {\n                                    if (frilansoppdrag.length === 0) {\n                                        return intlUtils(\n                                            intl,\n                                            'valideringsfeil.inntektsinformasjon.andreInntekter.måHaFrilansOppdrag'\n                                        );\n                                    }\n                                }\n\n                                return undefined;\n                            }}\n                        />\n                    </Block>\n                    <Block padBottom=\"l\" visible={formValues.oppdragForNæreVennerEllerFamilie === YesOrNo.YES}>\n                        <FrilansoppdragModal\n                            isOpen={isModalOpen}\n                            title={intlUtils(intl, 'inntektsinformasjon.frilansOppdrag.tittel')}\n                            onRequestClose={() => setIsModalOpen(false)}\n                            selectedFrilansoppdrag={selectedOppdrag}\n                            addFrilansoppdrag={addFrilansoppdrag}\n                            editFrilansoppdrag={editFrilansoppdrag}\n                            oppstartsdato={formValues.frilansOppstartsDato}\n                        />\n                        <Block padBottom=\"l\" visible={frilansoppdrag.length > 0}>\n                            <FrilansoppdragListe\n                                frilansoppdrag={frilansoppdrag}\n                                deleteFrilansoppdrag={deleteFrilansoppdrag}\n                                selectOppdrag={selectOppdrag}\n                            />\n                        </Block>\n                        <Knapp htmlType=\"button\" onClick={handleOnLeggTil}>\n                            <FormattedMessage id=\"inntektsinformasjon.leggTilOppdrag\" />\n                        </Knapp>\n                    </Block>\n                    <Block\n                        padBottom=\"l\"\n                        visible={visibility.isVisible(InntektsinformasjonFormField.inntektSomFosterforelder)}\n                    >\n                        <InntektsinformasjonFormComponents.YesOrNoQuestion\n                            name={InntektsinformasjonFormField.inntektSomFosterforelder}\n                            legend={intlUtils(intl, 'inntektsinformasjon.driverFosterhjem')}\n                        />\n                    </Block>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default Frilans;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\nimport { Block, intlUtils, UtvidetInformasjon } from '@navikt/fp-common';\nimport links from 'app/links/links';\n\nconst InfoTilFiskere = () => {\n    const intl = useIntl();\n\n    return (\n        <UtvidetInformasjon apneLabel={intlUtils(intl, 'inntektsinformasjon.infoTilFiskere.apneLabel')}>\n            <div style={{ backgroundColor: '#f1f1f1', padding: '1.5rem' }}>\n                <Block padBottom=\"m\">\n                    <Normaltekst>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del1\" />\n                    </Normaltekst>\n                </Block>\n                <Element tag=\"h3\" style={{ marginBottom: '.5rem' }}>\n                    <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.hyre\" />\n                </Element>\n                <Block padBottom=\"m\">\n                    <Normaltekst>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del2\" />\n                    </Normaltekst>\n                </Block>\n                <Block padBottom=\"m\">\n                    <Normaltekst>\n                        <FormattedMessage\n                            id=\"inntektsinformasjon.infoTilFiskere.del3\"\n                            values={{\n                                a: (msg: any) => (\n                                    <a\n                                        href={links.hvordanSendeInntektsmelding}\n                                        target=\"_blank\"\n                                        rel=\"noreferrer\"\n                                        className=\"lenke\"\n                                    >\n                                        {msg}\n                                    </a>\n                                ),\n                            }}\n                        />\n                    </Normaltekst>\n                </Block>\n                <Element tag=\"h3\" style={{ marginBottom: '.5rem' }}>\n                    <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.lott\" />\n                </Element>\n                <Block padBottom=\"m\">\n                    <Normaltekst>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del4\" />\n                    </Normaltekst>\n                </Block>\n                <Block padBottom=\"m\">\n                    <Normaltekst>\n                        <FormattedMessage\n                            id=\"inntektsinformasjon.infoTilFiskere.del5\"\n                            values={{\n                                a: (msg: any) => (\n                                    <a href={links.omLottOgHyre} target=\"_blank\" rel=\"noreferrer\" className=\"lenke\">\n                                        {msg}\n                                    </a>\n                                ),\n                            }}\n                        />\n                    </Normaltekst>\n                </Block>\n                <Element tag=\"h3\" style={{ marginBottom: '.5rem' }}>\n                    <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.egenBåt\" />\n                </Element>\n                <Block padBottom=\"m\">\n                    <Normaltekst>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del6\" />\n                    </Normaltekst>\n                </Block>\n                <Element tag=\"h3\" style={{ marginBottom: '.5rem' }}>\n                    <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.lottOgHyre\" />\n                </Element>\n                <Block padBottom=\"m\">\n                    <Normaltekst>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del7\" />\n                    </Normaltekst>\n                </Block>\n                <Block padBottom=\"m\">\n                    <Normaltekst>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del8\" />\n                    </Normaltekst>\n                </Block>\n                <Block padBottom=\"m\">\n                    <Normaltekst>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del9\" />\n                    </Normaltekst>\n                </Block>\n                <Block margin=\"none\">\n                    <Normaltekst>\n                        <FormattedMessage\n                            id=\"inntektsinformasjon.infoTilFiskere.del5\"\n                            values={{\n                                a: (msg: any) => (\n                                    <a href={links.omLottOgHyre} target=\"_blank\" rel=\"noreferrer\" className=\"lenke\">\n                                        {msg}\n                                    </a>\n                                ),\n                            }}\n                        />\n                    </Normaltekst>\n                </Block>\n            </div>\n        </UtvidetInformasjon>\n    );\n};\n\nexport default InfoTilFiskere;\n","import { dateToISOString, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { AnnenInntekt, AnnenInntektType } from 'app/context/types/AnnenInntekt';\nimport { Frilans, FrilansOppdrag } from 'app/context/types/Frilans';\nimport { Næring } from 'app/context/types/Næring';\nimport Søker from 'app/context/types/Søker';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport { convertBooleanOrUndefinedToYesOrNo, convertYesOrNoOrUndefinedToBoolean } from 'app/utils/formUtils';\nimport { replaceInvisibleCharsWithSpace } from 'app/utils/stringUtils';\nimport { InntektsinformasjonFormData, InntektsinformasjonFormField } from './inntektsinformasjonFormConfig';\n\nexport const initialInntektsinformasjonFormValues: InntektsinformasjonFormData = {\n    [InntektsinformasjonFormField.hattInntektSomFrilans]: YesOrNo.UNANSWERED,\n    [InntektsinformasjonFormField.hattInntektSomNæringsdrivende]: YesOrNo.UNANSWERED,\n    [InntektsinformasjonFormField.hattAndreInntekter]: YesOrNo.UNANSWERED,\n    [InntektsinformasjonFormField.frilansOppstartsDato]: '',\n    [InntektsinformasjonFormField.oppdragForNæreVennerEllerFamilie]: YesOrNo.UNANSWERED,\n    [InntektsinformasjonFormField.inntektSomFosterforelder]: YesOrNo.UNANSWERED,\n    [InntektsinformasjonFormField.jobberFremdelesSomFrilanser]: YesOrNo.UNANSWERED,\n    [InntektsinformasjonFormField.hattAndreInntekter]: YesOrNo.UNANSWERED,\n};\n\nconst cleanUpRegnskapsførerNæring = (næring: Næring): Næring => {\n    if (næring.harRegnskapsfører) {\n        return {\n            ...næring,\n            regnskapsfører: {\n                ...næring.regnskapsfører!,\n                navn: replaceInvisibleCharsWithSpace(næring.regnskapsfører!.navn),\n            },\n        };\n    }\n    return næring;\n};\n\nexport const cleanupInvisibleCharsFromNæring = (næring: Næring): Næring => {\n    const cleanedNavn = replaceInvisibleCharsWithSpace(næring.navnPåNæringen);\n    if (næring.hattVarigEndringAvNæringsinntektSiste4Kalenderår) {\n        const cleanedEndringInformasjon = {\n            ...næring.endringAvNæringsinntektInformasjon!,\n            forklaring: replaceInvisibleCharsWithSpace(næring.endringAvNæringsinntektInformasjon!.forklaring),\n        };\n\n        return {\n            ...cleanUpRegnskapsførerNæring(næring),\n            navnPåNæringen: cleanedNavn,\n            endringAvNæringsinntektInformasjon: cleanedEndringInformasjon,\n        };\n    }\n    return {\n        ...cleanUpRegnskapsførerNæring(næring),\n        navnPåNæringen: cleanedNavn,\n    };\n};\n\nexport const cleanupInvisibleCharsFromFrilansinformasjon = (frilansoppdrag: FrilansOppdrag[]): FrilansOppdrag[] => {\n    return frilansoppdrag.map((oppdrag: FrilansOppdrag) => ({\n        ...oppdrag,\n        navnPåArbeidsgiver: replaceInvisibleCharsWithSpace(oppdrag.navnPåArbeidsgiver),\n    }));\n};\n\nexport const cleanupInvisibleCharsFromAndreInntekter = (andreInntekter: AnnenInntekt[]): AnnenInntekt[] => {\n    return andreInntekter.map((inntekt) =>\n        inntekt.type === AnnenInntektType.JOBB_I_UTLANDET\n            ? {\n                  ...inntekt,\n                  arbeidsgiverNavn: replaceInvisibleCharsWithSpace(inntekt.arbeidsgiverNavn),\n              }\n            : inntekt\n    );\n};\n\nexport const mapInntektsinformasjonFormDataToState = (\n    values: Partial<InntektsinformasjonFormData>,\n    søker: Søker,\n    andreInntekter?: AnnenInntekt[],\n    frilansoppdrag?: FrilansOppdrag[],\n    næringer?: Næring[]\n): Søker => {\n    let frilansInformasjon: Frilans | undefined = undefined;\n\n    if (values.hattInntektSomFrilans === YesOrNo.YES) {\n        frilansInformasjon = {\n            oppstart: ISOStringToDate(values.frilansOppstartsDato)!,\n            jobberFremdelesSomFrilans: convertYesOrNoOrUndefinedToBoolean(values.jobberFremdelesSomFrilanser)!,\n            harJobbetForNærVennEllerFamilieSiste10Mnd: convertYesOrNoOrUndefinedToBoolean(\n                values.oppdragForNæreVennerEllerFamilie\n            )!,\n            driverFosterhjem: convertYesOrNoOrUndefinedToBoolean(values.inntektSomFosterforelder),\n            oppdragForNæreVennerEllerFamilieSiste10Mnd: cleanupInvisibleCharsFromFrilansinformasjon(frilansoppdrag!),\n        };\n    }\n\n    return {\n        erAleneOmOmsorg: søker.erAleneOmOmsorg,\n        språkkode: søker.språkkode,\n        harHattAnnenInntektSiste10Mnd: convertYesOrNoOrUndefinedToBoolean(values.hattAndreInntekter)!,\n        harJobbetSomFrilansSiste10Mnd: convertYesOrNoOrUndefinedToBoolean(values.hattInntektSomFrilans)!,\n        harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd: convertYesOrNoOrUndefinedToBoolean(\n            values.hattInntektSomNæringsdrivende\n        )!,\n        andreInntekterSiste10Mnd:\n            values.hattAndreInntekter === YesOrNo.YES ? cleanupInvisibleCharsFromAndreInntekter(andreInntekter!) : [],\n        selvstendigNæringsdrivendeInformasjon:\n            values.hattInntektSomNæringsdrivende === YesOrNo.YES\n                ? næringer!.map((næring) => cleanupInvisibleCharsFromNæring(næring))\n                : [],\n        frilansInformasjon: values.hattInntektSomFrilans === YesOrNo.YES ? frilansInformasjon : undefined,\n    };\n};\n\nexport const getInitialInntektsinformasjonFormValues = (søker: Søker): InntektsinformasjonFormData => {\n    return {\n        ...initialInntektsinformasjonFormValues,\n        hattAndreInntekter: convertBooleanOrUndefinedToYesOrNo(søker.harHattAnnenInntektSiste10Mnd),\n        hattInntektSomNæringsdrivende: convertBooleanOrUndefinedToYesOrNo(\n            søker.harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd\n        ),\n        hattInntektSomFrilans: convertBooleanOrUndefinedToYesOrNo(søker.harJobbetSomFrilansSiste10Mnd),\n        frilansOppstartsDato: søker.frilansInformasjon ? dateToISOString(søker.frilansInformasjon.oppstart) : '',\n        inntektSomFosterforelder: søker.frilansInformasjon\n            ? convertBooleanOrUndefinedToYesOrNo(søker.frilansInformasjon.driverFosterhjem)\n            : YesOrNo.UNANSWERED,\n        jobberFremdelesSomFrilanser: søker.frilansInformasjon\n            ? convertBooleanOrUndefinedToYesOrNo(søker.frilansInformasjon.jobberFremdelesSomFrilans)\n            : YesOrNo.UNANSWERED,\n        oppdragForNæreVennerEllerFamilie: søker.frilansInformasjon\n            ? convertBooleanOrUndefinedToYesOrNo(søker.frilansInformasjon.harJobbetForNærVennEllerFamilieSiste10Mnd)\n            : YesOrNo.UNANSWERED,\n    };\n};\n","import { hasValue } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { InntektsinformasjonFormData, InntektsinformasjonFormField } from './inntektsinformasjonFormConfig';\n\nconst InntektsinformasjonFormConfig: QuestionConfig<InntektsinformasjonFormData, InntektsinformasjonFormField> = {\n    [InntektsinformasjonFormField.hattInntektSomFrilans]: {\n        isIncluded: () => true,\n        isAnswered: ({ hattInntektSomFrilans }) => hattInntektSomFrilans !== YesOrNo.UNANSWERED,\n    },\n    [InntektsinformasjonFormField.frilansOppstartsDato]: {\n        isIncluded: ({ hattInntektSomFrilans }) => hattInntektSomFrilans === YesOrNo.YES,\n        isAnswered: ({ frilansOppstartsDato }) => hasValue(frilansOppstartsDato),\n        visibilityFilter: ({ hattInntektSomFrilans }) => hattInntektSomFrilans === YesOrNo.YES,\n    },\n    [InntektsinformasjonFormField.jobberFremdelesSomFrilanser]: {\n        isIncluded: ({ hattInntektSomFrilans }) => hattInntektSomFrilans === YesOrNo.YES,\n        isAnswered: ({ jobberFremdelesSomFrilanser }) => jobberFremdelesSomFrilanser !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ frilansOppstartsDato }) => hasValue(frilansOppstartsDato),\n    },\n    [InntektsinformasjonFormField.oppdragForNæreVennerEllerFamilie]: {\n        isIncluded: ({ hattInntektSomFrilans }) => hattInntektSomFrilans === YesOrNo.YES,\n        isAnswered: ({ oppdragForNæreVennerEllerFamilie }) => oppdragForNæreVennerEllerFamilie !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ jobberFremdelesSomFrilanser }) => jobberFremdelesSomFrilanser !== YesOrNo.UNANSWERED,\n    },\n    [InntektsinformasjonFormField.inntektSomFosterforelder]: {\n        isIncluded: ({ hattInntektSomFrilans }) => hattInntektSomFrilans === YesOrNo.YES,\n        isAnswered: ({ inntektSomFosterforelder }) => inntektSomFosterforelder !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ oppdragForNæreVennerEllerFamilie }) =>\n            oppdragForNæreVennerEllerFamilie !== YesOrNo.UNANSWERED,\n    },\n    [InntektsinformasjonFormField.hattInntektSomNæringsdrivende]: {\n        isIncluded: () => true,\n        isAnswered: ({ hattInntektSomNæringsdrivende }) => hattInntektSomNæringsdrivende !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ hattInntektSomFrilans }) => hattInntektSomFrilans !== YesOrNo.UNANSWERED,\n    },\n    [InntektsinformasjonFormField.hattAndreInntekter]: {\n        isIncluded: () => true,\n        isAnswered: ({ hattAndreInntekter }) => hattAndreInntekter !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ hattInntektSomNæringsdrivende }) => hattInntektSomNæringsdrivende !== YesOrNo.UNANSWERED,\n    },\n};\n\nconst inntektsinforMasjonQuestionsConfig = Questions<InntektsinformasjonFormData, InntektsinformasjonFormField>(\n    InntektsinformasjonFormConfig\n);\n\nexport default inntektsinforMasjonQuestionsConfig;\n","import { Block, intlUtils, Step } from '@navikt/fp-common';\nimport actionCreator from 'app/context/action/actionCreator';\nimport SøknadRoutes from 'app/routes/routes';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport useAvbrytSøknad from 'app/utils/hooks/useAvbrytSøknad';\nimport stepConfig, { getPreviousStepHref } from '../stepsConfig';\nimport AndreInntekter from './components/andre-inntekter/AndreInntekter';\nimport ArbeidsforholdInformasjon from './components/arbeidsforhold-informasjon/ArbeidsforholdInformasjon';\nimport EgenNæring from './components/egen-næring/EgenNæring';\nimport Frilans from './components/frilans/Frilans';\nimport InfoTilFiskere from './components/info-til-fiskere/InfoTilFiskere';\nimport { InntektsinformasjonFormComponents, InntektsinformasjonFormData } from './inntektsinformasjonFormConfig';\nimport {\n    getInitialInntektsinformasjonFormValues,\n    mapInntektsinformasjonFormDataToState,\n} from './inntektsinformasjonFormUtils';\nimport inntektsinforMasjonQuestionsConfig from './inntektsInformasjonQuestionsConfig';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport { getAktiveArbeidsforhold } from 'app/utils/arbeidsforholdUtils';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport useSaveLoadedRoute from 'app/utils/hooks/useSaveLoadedRoute';\n\nconst Inntektsinformasjon = () => {\n    const intl = useIntl();\n    const { arbeidsforhold } = useSøkerinfo();\n    const { søker, barn } = useSøknad();\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n\n    const [frilansoppdrag, setFrilansoppdrag] = useState(\n        søker.frilansInformasjon ? søker.frilansInformasjon.oppdragForNæreVennerEllerFamilieSiste10Mnd : []\n    );\n    const [egenNæringInformasjon, setEgenNæringsInformasjon] = useState(\n        søker.selvstendigNæringsdrivendeInformasjon ? søker.selvstendigNæringsdrivendeInformasjon : []\n    );\n    const [andreInntekterInformasjon, setAndreInntekterInformasjon] = useState(\n        søker.andreInntekterSiste10Mnd ? søker.andreInntekterSiste10Mnd : []\n    );\n\n    const onValidSubmitHandler = (values: Partial<InntektsinformasjonFormData>) => {\n        const updatedSøker = mapInntektsinformasjonFormDataToState(\n            values,\n            søker,\n            andreInntekterInformasjon,\n            frilansoppdrag,\n            egenNæringInformasjon\n        );\n\n        return [actionCreator.setSøker(updatedSøker)];\n    };\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.OPPSUMMERING,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state)\n    );\n    const onAvbrytSøknad = useAvbrytSøknad();\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n    useSaveLoadedRoute(SøknadRoutes.INNTEKTSINFORMASJON);\n\n    return (\n        <InntektsinformasjonFormComponents.FormikWrapper\n            initialValues={getInitialInntektsinformasjonFormValues(søker)}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues }) => {\n                const visibility = inntektsinforMasjonQuestionsConfig.getVisbility(formValues);\n\n                return (\n                    <Step\n                        bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n                        backLinkHref={getPreviousStepHref('inntektsinformasjon')}\n                        activeStepId=\"inntektsinformasjon\"\n                        pageTitle={intlUtils(intl, 'søknad.inntektsinformasjon')}\n                        stepTitle={intlUtils(intl, 'søknad.inntektsinformasjon')}\n                        onCancel={onAvbrytSøknad}\n                        onContinueLater={onFortsettSøknadSenere}\n                        steps={stepConfig(intl)}\n                        kompakt={true}\n                    >\n                        <InntektsinformasjonFormComponents.Form includeButtons={false} includeValidationSummary={true}>\n                            <Block padBottom=\"l\">\n                                <Element>Utbetalinger fra NAV</Element>\n                                <Normaltekst>\n                                    Hvis du får utbetalinger fra NAV, trenger du ikke å opplyse om det i søknaden\n                                </Normaltekst>\n                            </Block>\n\n                            <ArbeidsforholdInformasjon\n                                arbeidsforhold={getAktiveArbeidsforhold(\n                                    arbeidsforhold,\n                                    ISOStringToDate(familiehendelsesdato)\n                                )}\n                            />\n\n                            <InfoTilFiskere />\n\n                            <Block padBottom=\"l\">\n                                <Frilans\n                                    frilansoppdrag={frilansoppdrag}\n                                    setFrilansoppdrag={setFrilansoppdrag}\n                                    visibility={visibility}\n                                    formValues={formValues}\n                                />\n                            </Block>\n\n                            <Block padBottom=\"l\">\n                                <EgenNæring\n                                    egenNæringInformasjon={egenNæringInformasjon}\n                                    setEgenNæringsInformasjon={setEgenNæringsInformasjon}\n                                    visibility={visibility}\n                                    formValues={formValues}\n                                />\n                            </Block>\n\n                            <Block padBottom=\"l\">\n                                <AndreInntekter\n                                    andreInntekterInformasjon={andreInntekterInformasjon}\n                                    setAndreInntekterInformasjon={setAndreInntekterInformasjon}\n                                    visibility={visibility}\n                                    formValues={formValues}\n                                />\n                            </Block>\n\n                            <Block textAlignCenter={true} visible={visibility.areAllQuestionsAnswered()}>\n                                <Hovedknapp disabled={isSubmitting} spinner={isSubmitting}>\n                                    {intlUtils(intl, 'søknad.gåVidere')}\n                                </Hovedknapp>\n                            </Block>\n                        </InntektsinformasjonFormComponents.Form>\n                    </Step>\n                );\n            }}\n        />\n    );\n};\n\nexport default Inntektsinformasjon;\n"],"names":["InntektsinformasjonFormField","InntektsinformasjonFormComponents","getTypedFormComponents","getTitle","type","intl","AnnenInntektType","intlUtils","AndreInntekterListe","andreInntekter","deleteAnnenInntekt","selectAnnenInntekt","useIntl","jsx","annenInntekt","index","InteractiveListElement","formatTidsperiodeMedValgfriSluttdato","AndreInntekterFormField","AndreInntekterModalFormComponents","initialAndreInntekterFormValues","YesOrNo","getSkjemanummer","values","Skjemanummer","cleanupAndreInntekterForm","visibility","lagSendSenereDokumentNårIngenAndreFinnes","AttachmentType","getInitialAndreInntekterFormValues","convertBooleanOrUndefinedToYesOrNo","mapAnnenInntektModalValuesToState","convertYesOrNoOrUndefinedToBoolean","AndreInntekterModalFormConfig","hasValue","land","navnPåArbeidsgiver","fom","pågående","tom","andreInntekterModalQuestionsConfig","Questions","validateAnnenInntektFom","isISODateString","isDateInTheFuture","isDateABeforeDateB","validateAnnenInntektTom","AndreInntekterModal","isOpen","contentLabel","onRequestClose","selectedAnnenInntekt","addAnnenInntekt","editAnnenInntekt","bem","bemUtils","onValidSubmit","getVeilederMessageId","navnPåArbeidsgiverLabel","Modal","formValues","jsxs","Block","Undertittel","FormattedMessage","validateRequiredTextInputField","dayjs","Veilederpanel","VeilederNormal","FormikFileUploader","Hovedknapp","AndreInntekter","andreInntekterInformasjon","setAndreInntekterInformasjon","isModalOpen","setIsModalOpen","useState","setSelectedAnnenInntekt","handleOnLeggTil","updatedandreInntekterInformasjon","updatedAndreInntekterInformasjon","inntekt","Fragment","hattAndreInntekter","Knapp","ArbeidsforholdInformasjon","arbeidsforhold","harArbeidsforhold","Element","UtvidetInformasjon","Normaltekst","HarIkkeArbeidsforhold","HarArbeidsforhold","EgenNæringListe","næringsInformasjon","deleteNæring","selectNæring","næring","formatDate","HvemKanDriveMedEgenNæring","EksternUrl","links","EgenNæringModalFormField","EgenNæringModalFormComponents","initialEgenNæringModalValues","cleanupEgenNæringForm","getInitialEgenNæringModalValues","dateToISOString","_a","mapEgenNæringModalFormValuesToState","endringAvNæringsinntektInformasjon","regnskapsfører","ISOStringToDate","erVirksomhetRegnetSomNyoppstartet","oppstartsdato","date4YearsAgo","EgenNæringModalFormConfig","navnPåNæringen","registrertINorge","orgnr","næringsresultat","harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene","yrkesAktivDato","hattVarigEndringAvNæringsinntektSiste4Kalenderår","datoForEndring","inntektEtterEndring","forklaringEndring","harRegnskapsfører","navnRegnskapsfører","telefonRegnskapsfører","regnskapsførerNærVennEllerFamilie","egenNæringModalQuestionsConfig","validateEgenNæringFom","validateEgenNæringTom","validateEgenNæringOrgnr","erGyldigNorskOrgnummer","validateEgenNæringForklaringTilEndring","label","forklaring","validateTextInputField","validateEgenNæringEndringAvInntektsDato","dato","validateEgenNæringYrkesAktivDatoDato","validateNumber","errorKey","value","valueNumber","getNumberFromNumberInputValue","OrgnummerEllerLand","Regnskapsfører","regnskapsførerNavnLabel","EgenNæringModal","title","selectedNæring","addNæring","editNæring","navnPåNæringLabel","varigEndringForklaringLabel","Næringstype","EgenNæring","egenNæringInformasjon","setEgenNæringsInformasjon","setSelectedNæring","updatedEgenNæringInformasjon","nær","hattInntektSomNæringsdrivende","validateFrilansoppstartsDato","FrilansoppdragListe","frilansoppdrag","deleteFrilansoppdrag","selectOppdrag","oppdrag","HvemKanVæreFrilanser","FrilansoppdragModalFormField","FrilansoppdragModalFormComponents","initialFrilansoppdragModalValues","cleanupFrilansoppdragForm","mapFrilansoppdragModalValuesToState","getInitialFrilansoppdragModalValues","FrilansoppdragModalFormConfig","navnOppdragsgiver","frilansoppdragModalQuestionsConfig","validateNavnPåOppdragsgiver","navn","validateOppdragFom","validatePågåendeOppdrag","validateOppdragTom","startetSomFrilansIForrigeKalenderårEllerTidligere","FrilansoppdragModal","selectedFrilansoppdrag","addFrilansoppdrag","editFrilansoppdrag","oppdragsgiverNavnLabel","Frilans","setFrilansoppdrag","selectedOppdrag","setSelectedOppdrag","updatedFrilansoppdrag","opp","frilansoppdrag2","dateToday","oppdragForNæreVennerEllerFamilie","InfoTilFiskere","msg","initialInntektsinformasjonFormValues","cleanUpRegnskapsførerNæring","replaceInvisibleCharsWithSpace","cleanupInvisibleCharsFromNæring","cleanedNavn","cleanedEndringInformasjon","cleanupInvisibleCharsFromFrilansinformasjon","cleanupInvisibleCharsFromAndreInntekter","mapInntektsinformasjonFormDataToState","søker","næringer","frilansInformasjon","getInitialInntektsinformasjonFormValues","InntektsinformasjonFormConfig","hattInntektSomFrilans","frilansOppstartsDato","jobberFremdelesSomFrilanser","inntektSomFosterforelder","inntektsinforMasjonQuestionsConfig","Inntektsinformasjon","useSøkerinfo","barn","useSøknad","familiehendelsesdato","getFamiliehendelsedato","onValidSubmitHandler","updatedSøker","actionCreator","handleSubmit","isSubmitting","useOnValidSubmit","SøknadRoutes","state","storeAppState","onAvbrytSøknad","useAvbrytSøknad","onFortsettSøknadSenere","useFortsettSøknadSenere","useSaveLoadedRoute","Step","getPreviousStepHref","stepConfig","getAktiveArbeidsforhold","Inntektsinformasjon$1"],"mappings":"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"}