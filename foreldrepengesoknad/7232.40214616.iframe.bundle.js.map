{"version":3,"file":"7232.40214616.iframe.bundle.js","mappings":"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","sources":["webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/OppsummeringsPunkt.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/uttaksplan-oppsummering/InnholdMedLedetekst.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/uttaksplan-oppsummering/kompleks-feltoppsummering/KompleksFeltoppsummering.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/uttaksplan-oppsummering/oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/annen-forelder-oppsummering/AnnenForelderOppsummering.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/barn-oppsummering/BarnAdoptertIUtlandetDetaljer.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/barn-oppsummering/BarnOppsummering.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/OppsummeringsPanel.tsx","webpack://foreldrepengesoknad/./src/app/assets/KvinneIkon.tsx","webpack://foreldrepengesoknad/./src/app/assets/MannIkon.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/Personalia.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/utenlandsopphold-oppsummering/UtenlandsoppholdOppsummeringListe.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/utenlandsopphold-oppsummering/UtenlandsoppholdOppsummering.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/oppsummeringFormConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/validation/oppsummeringValidation.ts","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/andre-inntekter-oppsummering/AnnenInntektDetaljer.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/andre-inntekter-oppsummering/InntekterTabell.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/andre-inntekter-oppsummering/AndreInntekterOppsummering.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/andre-inntekter-oppsummering/FrilansOppsummering.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/andre-inntekter-oppsummering/Næringsdetaljer.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/andre-inntekter-oppsummering/SelvstendigNæringsdrivendeOppsummering.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/andre-inntekter-oppsummering/ArbeidsforholdOgAndreInntekterOppsummering.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/uttaksplan-oppsummering/feltoppsummering/Feltoppsummering.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/uttaksplan-oppsummering/oppsummeringsliste/list/List.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/uttaksplan-oppsummering/oppsummeringsliste/Oppsummeringsliste.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/uttaksplan-oppsummering/OppsummeringUtils.ts","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/uttaksplan-oppsummering/detaljer/Overføringsperiodedetaljer.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/uttaksplan-oppsummering/detaljer/MorsaktiviteterDetaljer.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/uttaksplan-oppsummering/detaljer/Uttaksperiodedetaljer.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/uttaksplan-oppsummering/detaljer/Uttsettelsesperiodedetaljer.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/uttaksplan-oppsummering/UttaksplanOppsummeringsliste.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/components/uttaksplan-oppsummering/UttaksplanOppsummering.tsx","webpack://foreldrepengesoknad/./src/app/steps/oppsummering/Oppsummering.tsx","webpack://foreldrepengesoknad/./src/app/utils/manglendeVedleggUtils.ts","webpack://foreldrepengesoknad/./src/app/utils/morsAktivitetUtils.ts","webpack://foreldrepengesoknad/./src/app/utils/tilleggsopplysningerUtils.ts","webpack://foreldrepengesoknad/./src/uttaksplan/utils/uttaksskjema/aktivitetskravMorSkalBesvares.ts","webpack://foreldrepengesoknad/./src/uttaksplan/utils/uttaksskjema/kontoSkalBesvarer.ts","webpack://foreldrepengesoknad/./src/uttaksplan/utils/uttaksskjema/uttakRundtFødselÅrsakSpørsmålSkalBesvares.ts"],"sourcesContent":["import { Block } from '@navikt/fp-common';\nimport { Element } from 'nav-frontend-typografi';\nimport React, { FunctionComponent, ReactNode } from 'react';\n\ninterface Props {\n    title: string;\n    visible?: boolean;\n    children?: ReactNode;\n}\n\nconst OppsummeringsPunkt: FunctionComponent<Props> = ({ title, visible, children }) => {\n    return (\n        <Block padBottom=\"l\" visible={visible}>\n            <Element>{title}</Element>\n            {children}\n        </Block>\n    );\n};\n\nexport default OppsummeringsPunkt;\n","import * as React from 'react';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\nimport { guid } from 'nav-frontend-js-utils';\n\ninterface InnholdMedLedetekstProps {\n    ledetekst: string;\n    children: JSX.Element | JSX.Element[];\n    className?: string;\n}\n\nconst hasListOfChildren = (children: string | string[]): boolean => Array.isArray(children);\n\nconst InnholdMedLedetekst: React.FunctionComponent<InnholdMedLedetekstProps> = ({ ledetekst, children, className }) => {\n    return (\n        <div className={className}>\n            <Element>{ledetekst}</Element>\n            {!Array.isArray(children) && hasListOfChildren((children as JSX.Element).props.children)\n                ? (children as JSX.Element).props.children.map((child: string) => (\n                      <Normaltekst className=\"feltoppsummering__verdi\" key={guid()}>\n                          {child}\n                      </Normaltekst>\n                  ))\n                : children}\n        </div>\n    );\n};\n\nexport default InnholdMedLedetekst;\n","import * as React from 'react';\nimport InnholdMedLedetekst from '../InnholdMedLedetekst';\n\ninterface Props {\n    className?: string;\n    ledetekst: string;\n    children: JSX.Element | JSX.Element[];\n}\n\nconst KompleksFeltoppsummering: React.FunctionComponent<Props> = ({ ledetekst, children, className }) => (\n    <InnholdMedLedetekst className={`feltoppsummering ${className}`} ledetekst={ledetekst}>\n        {children}\n    </InnholdMedLedetekst>\n);\n\nexport default KompleksFeltoppsummering;\n","import { intlUtils } from '@navikt/fp-common';\nimport { Attachment } from 'app/types/Attachment';\nimport { isAttachmentWithError } from 'app/utils/vedleggUtils';\nimport EtikettBase from 'nav-frontend-etiketter';\nimport Lenke from 'nav-frontend-lenker';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport KompleksFeltoppsummering from '../kompleks-feltoppsummering/KompleksFeltoppsummering';\n\nimport './oppsummeringAvDokumentasjon.less';\n\ninterface OppsummeringAvDokumentasjonProps {\n    ledetekst?: string;\n    vedlegg: Attachment[];\n}\n\ntype Props = OppsummeringAvDokumentasjonProps;\n\nconst OppsummeringAvDokumentasjon: React.FunctionComponent<Props> = (props) => {\n    const { ledetekst, vedlegg } = props;\n    const intl = useIntl();\n\n    const renderListOfAttachmentPreviewLinks = () => {\n        return vedlegg\n            .filter((a: Attachment) => !isAttachmentWithError(a))\n            .map(({ url, id, filename }) => (\n                <Lenke href={url!} key={id} target=\"_blank\">\n                    {filename}\n                </Lenke>\n            ));\n    };\n\n    return (\n        <KompleksFeltoppsummering\n            className=\"oppsummeringAvDokumentasjon\"\n            ledetekst={ledetekst || intlUtils(intl, 'vedlagtdokumentasjon')}\n        >\n            {vedlegg && vedlegg.filter((a: Attachment) => !isAttachmentWithError(a)).length > 0 ? (\n                renderListOfAttachmentPreviewLinks()\n            ) : (\n                <EtikettBase type=\"fokus\">\n                    {intlUtils(intl, 'oppsummering.andreInntekter.dokumentasjon.mangler')}\n                </EtikettBase>\n            )}\n        </KompleksFeltoppsummering>\n    );\n};\n\nexport default OppsummeringAvDokumentasjon;\n","import { intlUtils } from '@navikt/fp-common';\nimport AnnenForelder, { isAnnenForelderIkkeOppgitt, isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport Barn from 'app/context/types/Barn';\nimport Søker from 'app/context/types/Søker';\nimport { Søkerrolle } from 'app/types/Søkerrolle';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport OppsummeringAvDokumentasjon from '../uttaksplan-oppsummering/oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon';\n\ninterface Props {\n    annenForelder: AnnenForelder;\n    søker: Søker;\n    søkerrolle: Søkerrolle;\n    barn: Barn;\n    farMedmorErAleneOmOmsorg: boolean;\n}\n\nconst AnnenForelderOppsummering: FunctionComponent<Props> = ({\n    annenForelder,\n    søker,\n    søkerrolle,\n    barn,\n    farMedmorErAleneOmOmsorg,\n}) => {\n    const intl = useIntl();\n    const erFarEllerMedmor = isFarEllerMedmor(søkerrolle);\n    const { dokumentasjonAvAleneomsorg } = barn;\n\n    return (\n        <>\n            {isAnnenForelderIkkeOppgitt(annenForelder) && (\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.annenForelder.ikkeOppgitt')} />\n            )}\n            {isAnnenForelderOppgitt(annenForelder) && (\n                <>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.annenForelder.navn')}>\n                        <Normaltekst>{`${annenForelder.fornavn} ${annenForelder.etternavn}`}</Normaltekst>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.annenForelder.fnr')}>\n                        <Normaltekst>{annenForelder.fnr}</Normaltekst>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt\n                        title={\n                            !søker.erAleneOmOmsorg\n                                ? intlUtils(intl, 'oppsummering.annenForelder.fellesOmsorg.tittel')\n                                : intlUtils(intl, 'oppsummering.annenForelder.aleneOmOmsorg.tittel')\n                        }\n                    >\n                        <Normaltekst>\n                            <FormattedMessage\n                                id={\n                                    !søker.erAleneOmOmsorg\n                                        ? 'oppsummering.annenForelder.fellesOmsorg.tekst'\n                                        : 'oppsummering.annenForelder.aleneOmOmsorg.tekst'\n                                }\n                            />\n                        </Normaltekst>\n                    </OppsummeringsPunkt>\n                    {!søker.erAleneOmOmsorg && (\n                        <OppsummeringsPunkt\n                            title={intlUtils(intl, 'oppsummering.annenForelder.rettPåForeldrepengerINorge', {\n                                navn: annenForelder.fornavn,\n                            })}\n                        >\n                            <Normaltekst>\n                                <FormattedMessage id={annenForelder.harRettPåForeldrepengerINorge ? 'ja' : 'nei'} />\n                            </Normaltekst>\n                        </OppsummeringsPunkt>\n                    )}\n                    {!søker.erAleneOmOmsorg && !annenForelder.harRettPåForeldrepengerINorge && (\n                        <OppsummeringsPunkt\n                            title={intlUtils(intl, 'oppsummering.annenForelder.harOppholdtSegIEØS', {\n                                navn: annenForelder.fornavn,\n                            })}\n                        >\n                            <Normaltekst>\n                                <FormattedMessage id={annenForelder.harOppholdtSegIEØS ? 'ja' : 'nei'} />\n                            </Normaltekst>\n                        </OppsummeringsPunkt>\n                    )}\n                    {!søker.erAleneOmOmsorg && annenForelder.harOppholdtSegIEØS === true && (\n                        <OppsummeringsPunkt\n                            title={intlUtils(intl, 'oppsummering.annenForelder.rettPåForeldrepengerIEØS', {\n                                navn: annenForelder.fornavn,\n                            })}\n                        >\n                            <Normaltekst>\n                                <FormattedMessage id={annenForelder.harRettPåForeldrepengerIEØS ? 'ja' : 'nei'} />\n                            </Normaltekst>\n                        </OppsummeringsPunkt>\n                    )}\n                    {erFarEllerMedmor &&\n                        !søker.erAleneOmOmsorg &&\n                        !annenForelder.harRettPåForeldrepengerINorge &&\n                        !annenForelder.harRettPåForeldrepengerIEØS && (\n                            <OppsummeringsPunkt\n                                title={intlUtils(intl, 'annenForelder.erMorUfør', {\n                                    navn: annenForelder.fornavn,\n                                })}\n                            >\n                                <Normaltekst>\n                                    <FormattedMessage id={annenForelder.erUfør ? 'ja' : 'nei'} />\n                                </Normaltekst>\n                            </OppsummeringsPunkt>\n                        )}\n                </>\n            )}\n            {farMedmorErAleneOmOmsorg && erFarEllerMedmor && (\n                <OppsummeringAvDokumentasjon\n                    vedlegg={dokumentasjonAvAleneomsorg || []}\n                    ledetekst={intlUtils(intl, 'oppsummering.annenForelder.dokumentasjonAvAleneomsorg')}\n                />\n            )}\n        </>\n    );\n};\n\nexport default AnnenForelderOppsummering;\n","import { formatDate, hasValue, intlUtils } from '@navikt/fp-common';\nimport { AdoptertAnnetBarn, AdoptertStebarn, isAdoptertStebarn } from 'app/context/types/Barn';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\n\ninterface Props {\n    barn: AdoptertAnnetBarn | AdoptertStebarn;\n}\n\nconst BarnAdoptertIUtlandetDetaljer: FunctionComponent<Props> = ({ barn }) => {\n    const intl = useIntl();\n\n    if (isAdoptertStebarn(barn)) {\n        return null;\n    }\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.barn.adoptertIUtlandet')}>\n                <Normaltekst>\n                    <FormattedMessage id={barn.adoptertIUtlandet ? 'ja' : 'nei'} />\n                </Normaltekst>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt\n                title={intlUtils(intl, 'oppsummering.barn.ankomstdato')}\n                visible={hasValue(barn.ankomstdato)}\n            >\n                <Normaltekst>{formatDate(barn.ankomstdato!)}</Normaltekst>\n            </OppsummeringsPunkt>\n        </>\n    );\n};\n\nexport default BarnAdoptertIUtlandetDetaljer;\n","import { formatDate, intlUtils } from '@navikt/fp-common';\nimport Barn, { BarnType, isAdoptertAnnetBarn, isAdoptertStebarn, isUfødtBarn } from 'app/context/types/Barn';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport BarnAdoptertIUtlandetDetaljer from './BarnAdoptertIUtlandetDetaljer';\n\ninterface Props {\n    barn: Barn;\n}\n\nconst getAntallBarnTekst = (antallBarn: number, intl: IntlShape): string => {\n    if (antallBarn === 1) {\n        return intlUtils(intl, 'oppsummering.barn.antallBarn.ettBarn');\n    }\n\n    if (antallBarn === 2) {\n        return intlUtils(intl, 'oppsummering.barn.antallBarn.toBarn');\n    }\n\n    return intlUtils(intl, 'oppsummering.barn.antallBarn.flere', { antallBarn });\n};\n\nconst getTerminEllerFødselTittel = (type: BarnType) => {\n    if (type === BarnType.UFØDT) {\n        return 'Termin';\n    }\n\n    return 'Fødselsdato';\n};\n\nconst getTerminEllerFødselsdato = (barn: Barn) => {\n    if (isUfødtBarn(barn)) {\n        return formatDate(barn.termindato);\n    }\n\n    return formatDate(barn.fødselsdatoer[0]);\n};\n\nconst BarnOppsummering: FunctionComponent<Props> = ({ barn }) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.barn.søknadenGjelder')}>\n                <Normaltekst>{getAntallBarnTekst(barn.antallBarn, intl)}</Normaltekst>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt title={getTerminEllerFødselTittel(barn.type)}>\n                <Normaltekst>{getTerminEllerFødselsdato(barn)}</Normaltekst>\n            </OppsummeringsPunkt>\n            {(isAdoptertAnnetBarn(barn) || isAdoptertStebarn(barn)) && (\n                <>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.barn.gjelderSøknadenStebarnsadopsjon')}>\n                        <Normaltekst>\n                            <FormattedMessage id={barn.type === BarnType.ADOPTERT_STEBARN ? 'ja' : 'nei'} />\n                        </Normaltekst>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.barn.adopsjonsdato')}>\n                        <Normaltekst>{formatDate(barn.adopsjonsdato)}</Normaltekst>\n                    </OppsummeringsPunkt>\n                    <BarnAdoptertIUtlandetDetaljer barn={barn} />\n                </>\n            )}\n        </>\n    );\n};\n\nexport default BarnOppsummering;\n","import React, { FunctionComponent, ReactNode } from 'react';\nimport EkspanderbartPanel from 'nav-frontend-ekspanderbartpanel';\n\nimport './oppsummeringsPanel.less';\nimport { bemUtils } from '@navikt/fp-common';\n\ninterface Props {\n    title: string;\n    children: ReactNode;\n}\n\nconst OppsummeringsPanel: FunctionComponent<Props> = ({ title, children }) => {\n    const bem = bemUtils('oppsummeringsPanel');\n\n    return (\n        <EkspanderbartPanel className={bem.block} tittel={title}>\n            <div className={bem.element('content')}>{children}</div>\n        </EkspanderbartPanel>\n    );\n};\n\nexport default OppsummeringsPanel;\n","import * as React from 'react';\n\nconst KvinneIkon = () => (\n    <svg\n        width={40}\n        height={40}\n        role=\"img\"\n        aria-hidden=\"true\"\n        viewBox=\"0 0 32 32\"\n        display=\"block\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n    >\n        <defs />\n        <g\n            id=\"Component/static/person-header\"\n            stroke=\"none\"\n            strokeWidth=\"1\"\n            fill=\"none\"\n            fillRule=\"evenodd\"\n            transform=\"translate(0.000000, -11.000000)\"\n        >\n            <g id=\"⚙️/-ikon/-id-markering-/-kvinne\" transform=\"translate(0.000000, 11.000000)\">\n                <circle id=\"Oval\" fill=\"#FFFFFF\" cx=\"16\" cy=\"16\" r=\"16\" />\n                <g id=\"kvinne\" strokeWidth=\"1\" fill=\"#C86151\">\n                    <g id=\"Layer_1\">\n                        <g id=\"Layer_1_1_\">\n                            <path\n                                d=\"M16,0 C7.164,0 0,7.1635 0,16 C0,24.836 7.1635,32 16,32 C24.8365,32 32,24.8365 32,16 C32,7.164 24.836,0 16,0 L16,0 Z M15.999,3.9745 C17.0685,3.9745 17.937,4.8415 17.937,5.9115 C17.937,6.9815 17.0685,7.849 15.999,7.849 C14.9295,7.849 14.0625,6.981 14.0625,5.9115 C14.0625,4.8415 14.929,3.9745 15.999,3.9745 L15.999,3.9745 Z M21.9015,17.855 C21.462,17.988 20.9965,17.767 20.7995,17.354 L19.3165,12.537 C19.2445,12.3005 18.9945,12.167 18.7575,12.239 C18.544,12.304 18.4235,12.514 18.4525,12.728 C18.446,12.7365 20.6445,19.9185 20.981,21.0175 L18.5695,21.0175 L18.5695,26.921 C18.5695,27.5305 18.0765,28.024 17.4675,28.024 C16.8585,28.024 16.364,27.53 16.364,26.921 L16.364,26.906 L16.364,21.193 L16.364,21.0175 L16,21.0175 L15.6355,21.0175 L15.6355,21.193 L15.6355,26.9065 L15.6355,26.9215 C15.6355,27.531 15.1415,28.0245 14.532,28.0245 C13.923,28.0245 13.43,27.5305 13.43,26.9215 L13.43,21.018 L11.0185,21.018 C11.3545,19.9185 13.5535,12.737 13.547,12.7285 C13.5765,12.5145 13.4555,12.304 13.242,12.2395 C13.0055,12.1675 12.755,12.3005 12.683,12.5375 L11.2,17.3545 C11.0035,17.7675 10.538,17.988 10.098,17.8555 C9.6115,17.7085 9.34,17.183 9.492,16.684 C9.492,16.684 11.5495,10.1765 11.5725,10.13 C12.1325,8.3815 13.5445,8.387 14.8435,8.384 L17.155,8.384 C18.4545,8.387 19.8665,8.3815 20.426,10.13 C20.4495,10.177 22.5065,16.684 22.5065,16.684 C22.6595,17.1825 22.3875,17.7075 21.9015,17.855 L21.9015,17.855 Z\"\n                                id=\"Shape\"\n                            />\n                        </g>\n                    </g>\n                </g>\n            </g>\n        </g>\n    </svg>\n);\nexport default KvinneIkon;\n","import * as React from 'react';\n\nconst MannIkon = () => (\n    <svg\n        width={40}\n        height={40}\n        role=\"img\"\n        aria-hidden=\"true\"\n        viewBox=\"0 0 32 32\"\n        display=\"block\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n    >\n        <defs>\n            <path\n                d=\"M16,0 C7.164,0 0,7.164 0,16 C0,24.836 7.1635,32 16,32 C24.8365,32 32,24.8365 32,16 C32,7.164 24.836,0 16,0 L16,0 Z M15.9995,3.9745 C17.069,3.9745 17.9375,4.8415 17.9375,5.9115 C17.9375,6.9815 17.0685,7.849 15.9995,7.849 C14.93,7.849 14.063,6.981 14.063,5.9115 C14.063,4.842 14.93,3.9745 15.9995,3.9745 L15.9995,3.9745 Z M21.0465,11.765 L21.0465,17.1645 C21.0465,17.6 20.6585,17.9515 20.1795,17.9515 C19.7,17.9515 19.3115,17.6 19.3115,17.1645 L19.3115,14.2465 L19.3115,13.287 L19.3115,12.6895 L19.3115,12.689 C19.3115,12.486 19.147,12.321 18.9435,12.321 C18.749,12.321 18.594,12.473 18.5805,12.664 C18.578,12.6735 18.57,12.6795 18.57,12.6895 L18.57,14.3645 L18.57,26.923 C18.57,27.5325 18.077,28.026 17.468,28.026 C16.859,28.026 16.3645,27.532 16.3645,26.923 L16.3645,26.908 L16.3645,21.194 L16.3645,18.43 L16.3645,17.8995 C16.3645,17.6995 16.2015,17.536 16,17.5355 C15.798,17.5355 15.6355,17.6995 15.6355,17.8995 L15.6355,18.43 L15.6355,21.194 L15.6355,26.9075 L15.6355,26.9225 C15.6355,27.532 15.1415,28.0255 14.532,28.0255 C13.923,28.0255 13.43,27.5315 13.43,26.9225 L13.43,14.364 L13.43,12.689 C13.43,12.679 13.4215,12.6725 13.4195,12.6635 C13.406,12.4725 13.251,12.3205 13.0565,12.3205 C12.8535,12.3205 12.6885,12.485 12.6885,12.6885 L12.6885,12.689 L12.6885,13.2865 L12.6885,14.246 L12.6885,17.164 C12.6885,17.5995 12.3,17.951 11.8205,17.951 C11.341,17.951 10.9535,17.5995 10.9535,17.164 L10.9535,11.7645 L10.9535,11.4155 C10.9535,9.7225 12.758,8.4885 14.4285,8.395 L15.6325,8.387 L15.6325,8.3825 L16.0005,8.385 L16.3685,8.3825 L16.3685,8.387 L17.5725,8.395 C19.2425,8.488 21.0475,9.7225 21.0475,11.4155 C21.0465,11.4915 21.0465,11.729 21.0465,11.765 L21.0465,11.765 Z\"\n                id=\"path-1\"\n            />\n        </defs>\n        <g\n            id=\"Component/static/person-header\"\n            stroke=\"none\"\n            strokeWidth=\"1\"\n            fill=\"none\"\n            fillRule=\"evenodd\"\n            transform=\"translate(0.000000, -11.000000)\"\n        >\n            <g id=\"⚙️/-ikon/-id-markering-/-mann\" transform=\"translate(0.000000, 11.000000)\">\n                <circle id=\"Oval\" fill=\"#FFFFFF\" cx=\"16\" cy=\"16\" r=\"16\" />\n                <g id=\"mann\" strokeWidth=\"1\">\n                    <g id=\"Layer_1\">\n                        <g id=\"Layer_1_1_\">\n                            <g id=\"Shape\">\n                                <use fill=\"#FFFFFF\" xlinkHref=\"#path-1\" />\n                                <use fill=\"#3385D1\" xlinkHref=\"#path-1\" />\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </g>\n        </g>\n    </svg>\n);\n\nexport default MannIkon;\n","import { bemUtils } from '@navikt/fp-common';\nimport KvinneIkon from 'app/assets/KvinneIkon';\nimport MannIkon from 'app/assets/MannIkon';\nimport { Søkerinfo } from 'app/types/Søkerinfo';\nimport { getKjønnFromFnrString } from 'app/utils/personUtils';\nimport { Normaltekst, Undertittel } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\n\nimport './personalia.less';\n\ninterface Props {\n    søkerinfo: Søkerinfo;\n}\n\nconst Personalia: FunctionComponent<Props> = ({ søkerinfo }) => {\n    const bem = bemUtils('personalia');\n    const { person } = søkerinfo;\n\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('icon')}>\n                {getKjønnFromFnrString(person.fnr) === 'K' ? <KvinneIkon /> : <MannIkon />}\n            </div>\n            <div>\n                <Undertittel>{`${søkerinfo.person.fornavn} ${søkerinfo.person.etternavn}`}</Undertittel>\n                <Normaltekst>{søkerinfo.person.fnr}</Normaltekst>\n            </div>\n        </div>\n    );\n};\n\nexport default Personalia;\n","import { bemUtils, formatDate, intlUtils } from '@navikt/fp-common';\nimport { Utenlandsopphold } from 'app/context/types/InformasjonOmUtenlandsopphold';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport countries from 'i18n-iso-countries';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport './utenlandsoppholdOppsummeringListe.less';\n\ninterface Props {\n    utenlandsopphold: Utenlandsopphold[];\n    tidligereOpphold: boolean;\n}\n\nconst UtenlandsoppholdOppsummeringListe: FunctionComponent<Props> = ({ utenlandsopphold, tidligereOpphold }) => {\n    const intl = useIntl();\n    const bem = bemUtils('utenlandsoppholdOppsummeringListe');\n\n    return (\n        <ul className={bem.block}>\n            {utenlandsopphold.map((opphold) => {\n                return (\n                    <li\n                        className={bem.element('listElement')}\n                        key={`${opphold.land}${opphold.tidsperiode.fom}${opphold.tidsperiode.tom}`}\n                    >\n                        <Normaltekst>\n                            {tidligereOpphold\n                                ? intlUtils(intl, 'oppsummering.utenlandsopphold.harBoddINorge.utenlands', {\n                                      land: countries.getName(opphold.land, 'nb'),\n                                  })\n                                : intlUtils(intl, 'oppsummering.utenlandsopphold.skalBoINorge.utenlands', {\n                                      land: countries.getName(opphold.land, 'nb'),\n                                  })}\n                        </Normaltekst>\n                        <Normaltekst>\n                            {formatDate(opphold.tidsperiode.fom)} - {formatDate(opphold.tidsperiode.tom)}\n                        </Normaltekst>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};\n\nexport default UtenlandsoppholdOppsummeringListe;\n","import { doesTidsperiodeContainDate, intlUtils } from '@navikt/fp-common';\nimport Barn, { isAdoptertAnnetBarn, isAdoptertStebarn } from 'app/context/types/Barn';\nimport InformasjonOmUtenlandsopphold, { Utenlandsopphold } from 'app/context/types/InformasjonOmUtenlandsopphold';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport UtenlandsoppholdListe from './UtenlandsoppholdOppsummeringListe';\n\ninterface Props {\n    informasjonOmUtenlandsopphold: InformasjonOmUtenlandsopphold;\n    barn: Barn;\n}\n\nconst getErINorgePåFamiliehendelsedato = (\n    familiehendelsedato: string,\n    tidligereOpphold: Utenlandsopphold[],\n    senereOpphold: Utenlandsopphold[]\n): boolean => {\n    let erINorge = true;\n\n    tidligereOpphold.forEach((tidOpphold) => {\n        if (doesTidsperiodeContainDate(tidOpphold.tidsperiode, familiehendelsedato)) {\n            erINorge = false;\n        }\n    });\n\n    senereOpphold.forEach((senOpphold) => {\n        if (doesTidsperiodeContainDate(senOpphold.tidsperiode, familiehendelsedato)) {\n            erINorge = false;\n        }\n    });\n\n    return erINorge;\n};\n\nconst erAdoptertBarn = (barn: Barn): boolean => {\n    return isAdoptertAnnetBarn(barn) || isAdoptertStebarn(barn);\n};\n\nconst UtenlandsoppholdOppsummering: FunctionComponent<Props> = ({ informasjonOmUtenlandsopphold, barn }) => {\n    const intl = useIntl();\n    const { senereOpphold, tidligereOpphold } = informasjonOmUtenlandsopphold;\n    const familiehendelsedato = getFamiliehendelsedato(barn);\n    const erINorgePåFamiliehendelsedato = getErINorgePåFamiliehendelsedato(\n        familiehendelsedato,\n        tidligereOpphold,\n        senereOpphold\n    );\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.utenlandsopphold.harBoddINorge')}>\n                {informasjonOmUtenlandsopphold.iNorgeSiste12Mnd ? (\n                    <Normaltekst>{intlUtils(intl, 'oppsummering.utenlandsopphold.harBoddINorge.norge')}</Normaltekst>\n                ) : null}\n\n                <UtenlandsoppholdListe\n                    utenlandsopphold={informasjonOmUtenlandsopphold.tidligereOpphold}\n                    tidligereOpphold={true}\n                />\n            </OppsummeringsPunkt>\n\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.utenlandsopphold.skalBoINorge')}>\n                {informasjonOmUtenlandsopphold.iNorgeNeste12Mnd ? (\n                    <Normaltekst>{intlUtils(intl, 'oppsummering.utenlandsopphold.skalBoINorge.norge')}</Normaltekst>\n                ) : null}\n\n                <UtenlandsoppholdListe\n                    utenlandsopphold={informasjonOmUtenlandsopphold.senereOpphold}\n                    tidligereOpphold={false}\n                />\n            </OppsummeringsPunkt>\n\n            <OppsummeringsPunkt\n                title={\n                    erAdoptertBarn(barn)\n                        ? intlUtils(intl, 'oppsummering.utenlandsopphold.erINorgeOmsorgsovertakelsesdato')\n                        : intlUtils(intl, 'oppsummering.utenlandsopphold.erINorgePåFødselstidspunkt')\n                }\n            >\n                <Normaltekst>\n                    <FormattedMessage id={erINorgePåFamiliehendelsedato ? 'ja' : 'nei'} />\n                </Normaltekst>\n            </OppsummeringsPunkt>\n        </>\n    );\n};\n\nexport default UtenlandsoppholdOppsummering;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\n\nexport enum OppsummeringFormField {\n    harGodkjentOppsummering = 'harGodkjentOppsummering',\n}\n\nexport interface OppsummeringFormData {\n    [OppsummeringFormField.harGodkjentOppsummering]: boolean;\n}\n\nconst initialOppsummeringValues: OppsummeringFormData = {\n    [OppsummeringFormField.harGodkjentOppsummering]: false,\n};\n\nexport const getInitialOppsummeringValues = (): OppsummeringFormData => {\n    return initialOppsummeringValues;\n};\n\nexport const OppsummeringFormComponents = getTypedFormComponents<OppsummeringFormField, OppsummeringFormData, string>();\n","import { intlUtils } from '@navikt/fp-common';\nimport { IntlShape } from 'react-intl';\n\nexport const validateHarGodkjentOppsummering = (intl: IntlShape) => (value: boolean) => {\n    if (value !== true) {\n        return intlUtils(intl, 'valideringsfeil.oppsummering.harGodkjentOppsummering.påkrevd');\n    }\n\n    return undefined;\n};\n","import React, { FunctionComponent } from 'react';\nimport * as countries from 'i18n-iso-countries';\nimport { AnnenInntekt, AnnenInntektType, JobbIUtlandetInntekt } from 'app/context/types/AnnenInntekt';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport { useIntl } from 'react-intl';\nimport { intlUtils } from '@navikt/fp-common';\nimport { Attachment } from 'app/types/Attachment';\nimport EtikettBase from 'nav-frontend-etiketter';\nimport Lenke from 'nav-frontend-lenker';\nimport { isAttachmentWithError } from 'app/utils/vedleggUtils';\n\ninterface Props {\n    annenInntekt: AnnenInntekt;\n}\n\nconst AnnenInntektDetaljer: FunctionComponent<Props> = ({ annenInntekt }) => {\n    const intl = useIntl();\n    const { type, vedlegg } = annenInntekt;\n    if (type === AnnenInntektType.JOBB_I_UTLANDET) {\n        const jobbIUtlandetInntekt = annenInntekt as JobbIUtlandetInntekt;\n        return (\n            <>\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.arbeidsgiverNavn')}>\n                    <Normaltekst>{jobbIUtlandetInntekt.arbeidsgiverNavn}</Normaltekst>\n                </OppsummeringsPunkt>\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.arbeidsgiverLand')}>\n                    <Normaltekst>{countries.getName(jobbIUtlandetInntekt.land, 'nb')}</Normaltekst>\n                </OppsummeringsPunkt>\n            </>\n        );\n    }\n    if (\n        type === AnnenInntektType.VENTELØNN ||\n        type === AnnenInntektType.SLUTTPAKKE ||\n        type === AnnenInntektType.MILITÆRTJENESTE\n    ) {\n        const renderListOfAttachmentPreviewLinks = () => {\n            return vedlegg\n                .filter((a: Attachment) => !isAttachmentWithError(a))\n                .map(({ url, id, filename }) => (\n                    <Lenke href={url!} key={id} target=\"_blank\">\n                        {filename}\n                    </Lenke>\n                ));\n        };\n        return (\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.vedlagtdokumentasjon')}>\n                {(vedlegg || []).filter((a: Attachment) => !isAttachmentWithError(a)).length > 0 ? (\n                    renderListOfAttachmentPreviewLinks()\n                ) : (\n                    <EtikettBase type=\"fokus\">\n                        {intlUtils(intl, 'oppsummering.andreInntekter.dokumentasjon.mangler')}\n                    </EtikettBase>\n                )}\n            </OppsummeringsPunkt>\n        );\n    }\n    return null;\n};\n\nexport default AnnenInntektDetaljer;\n","import { Element, Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent, ReactElement } from 'react';\n\nimport './inntekterTabell.less';\n\ninterface Props {\n    list: Array<{\n        key: string;\n        headerVenstre: string;\n        headerHøyre: string;\n        content?: ReactElement;\n    }>;\n}\n\nconst InntekterTabell: FunctionComponent<Props> = ({ list }) => {\n    return (\n        <ul className=\"oppsummeringsliste\">\n            {list.map((l) => (\n                <li key={l.key} className=\"oppsummeringsliste__element\">\n                    <div className=\"oppsummeringsliste__element__heading\">\n                        <Element>{l.headerVenstre}</Element>\n                        <div className=\"høyrestiltTekst\">\n                            <Normaltekst>{l.headerHøyre}</Normaltekst>\n                        </div>\n                    </div>\n                    {l.content && <div className=\"oppsummeringsliste__element__content\">{l.content}</div>}\n                </li>\n            ))}\n        </ul>\n    );\n};\n\nexport default InntekterTabell;\n","import { formatDate, intlUtils } from '@navikt/fp-common';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\n\nimport AnnenInntektDetaljer from './AnnenInntektDetaljer';\nimport InntekterTabell from './InntekterTabell';\n\nconst AndreInntekterOppsummering: FunctionComponent = () => {\n    const intl = useIntl();\n    const {\n        søker: { harHattAnnenInntektSiste10Mnd, andreInntekterSiste10Mnd },\n    } = useSøknad();\n\n    if (!harHattAnnenInntektSiste10Mnd || !andreInntekterSiste10Mnd) {\n        return (\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.tittel')}>\n                <Normaltekst>{intlUtils(intl, 'oppsummering.andreInntekter.ikkeHattAndreInntekter')}</Normaltekst>\n            </OppsummeringsPunkt>\n        );\n    }\n\n    return (\n        <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.andreInntekter.tittel')}>\n            <InntekterTabell\n                list={andreInntekterSiste10Mnd.map((annenInntekt) => ({\n                    key: annenInntekt.type + annenInntekt.tidsperiode,\n                    headerVenstre: intlUtils(intl, `inntektstype.${annenInntekt.type.toLowerCase()}`),\n                    headerHøyre: intlUtils(intl, 'tidsintervall', {\n                        fom: formatDate(ISOStringToDate(annenInntekt.tidsperiode.fom)!),\n                        tom: annenInntekt.pågående\n                            ? 'pågående'\n                            : formatDate(ISOStringToDate(annenInntekt.tidsperiode.tom)!),\n                    }),\n                    content: <AnnenInntektDetaljer annenInntekt={annenInntekt} />,\n                }))}\n            />\n        </OppsummeringsPunkt>\n    );\n};\n\nexport default AndreInntekterOppsummering;\n","import { Block, formatDate, intlUtils } from '@navikt/fp-common';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport InntekterTabell from './InntekterTabell';\n\nconst FrilansOppsummering: FunctionComponent = () => {\n    const intl = useIntl();\n    const {\n        søker: { frilansInformasjon, harJobbetSomFrilansSiste10Mnd },\n    } = useSøknad();\n\n    if (!frilansInformasjon || !harJobbetSomFrilansSiste10Mnd) {\n        return (\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.tittel')}>\n                <Normaltekst>{intlUtils(intl, 'oppsummering.frilans.ikkeFrilans')}</Normaltekst>\n            </OppsummeringsPunkt>\n        );\n    }\n    const {\n        oppstart,\n        jobberFremdelesSomFrilans,\n        driverFosterhjem,\n        harJobbetForNærVennEllerFamilieSiste10Mnd,\n        oppdragForNæreVennerEllerFamilieSiste10Mnd,\n    } = frilansInformasjon;\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.tittel')} />\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.oppstartsdato')}>\n                <Normaltekst>{formatDate(oppstart)}</Normaltekst>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.fremdelesFrilans')}>\n                <Normaltekst>{jobberFremdelesSomFrilans ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}</Normaltekst>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.frilans.driverFosterhjem')}>\n                <Normaltekst>{driverFosterhjem ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}</Normaltekst>\n            </OppsummeringsPunkt>\n            <OppsummeringsPunkt\n                title={intlUtils(intl, 'oppsummering.frilans.frilansArbeidForNæreVennerEllerFamilieSiste10Mnd')}\n            >\n                <Block visible={!harJobbetForNærVennEllerFamilieSiste10Mnd} margin=\"none\">\n                    <Normaltekst>\n                        {intlUtils(\n                            intl,\n                            'oppsummering.frilans.harIkkeUtførtFrilansArbeidForNæreVennerEllerFamilieSiste10Mnd'\n                        )}\n                    </Normaltekst>\n                </Block>\n                <Block visible={harJobbetForNærVennEllerFamilieSiste10Mnd} margin=\"none\">\n                    <InntekterTabell\n                        list={oppdragForNæreVennerEllerFamilieSiste10Mnd.map(\n                            ({ navnPåArbeidsgiver, tidsperiode, pågående }) => ({\n                                key: navnPåArbeidsgiver + tidsperiode,\n                                headerVenstre: navnPåArbeidsgiver,\n                                headerHøyre: intlUtils(intl, 'tidsintervall', {\n                                    fom: formatDate(tidsperiode.fom!),\n                                    tom: pågående ? 'pågående' : formatDate(tidsperiode.tom!),\n                                }),\n                            })\n                        )}\n                    />\n                </Block>\n            </OppsummeringsPunkt>\n        </>\n    );\n};\n\nexport default FrilansOppsummering;\n","import { formatDate, intlUtils } from '@navikt/fp-common';\nimport { Næring } from 'app/context/types/Næring';\nimport * as countries from 'i18n-iso-countries';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\n\ninterface Props {\n    næring: Næring;\n}\n\nconst Næringsdetaljer: FunctionComponent<Props> = ({ næring }) => {\n    const intl = useIntl();\n    const {\n        næringstyper,\n        organisasjonsnummer,\n        næringsinntekt,\n        registrertINorge,\n        registrertILand,\n        harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene,\n        hattVarigEndringAvNæringsinntektSiste4Kalenderår,\n        endringAvNæringsinntektInformasjon,\n        harRegnskapsfører,\n        regnskapsfører,\n    } = næring;\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.næringstype')}>\n                <Normaltekst>\n                    {næringstyper\n                        .map((næringstype) => intlUtils(intl, `næringstype.${næringstype.toLowerCase()}`))\n                        .join(', ')}\n                </Normaltekst>\n            </OppsummeringsPunkt>\n            {organisasjonsnummer && (\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.orgnr')}>\n                    <Normaltekst>{organisasjonsnummer}</Normaltekst>\n                </OppsummeringsPunkt>\n            )}\n            {næringsinntekt && (\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.næringsinntekt')}>\n                    <Normaltekst>{næringsinntekt}</Normaltekst>\n                </OppsummeringsPunkt>\n            )}\n            {registrertINorge ||\n                (registrertILand && (\n                    <OppsummeringsPunkt\n                        title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.registrertLand')}\n                    >\n                        <Normaltekst>\n                            {registrertINorge ? 'Norge' : countries.getName(registrertILand, 'nb')}\n                        </Normaltekst>\n                    </OppsummeringsPunkt>\n                ))}\n            {harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene && (\n                <OppsummeringsPunkt\n                    title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.blittYrkesaktivSiste3År')}\n                >\n                    <Normaltekst>\n                        {harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n                            ? intlUtils(intl, 'ja')\n                            : intlUtils(intl, 'nei')}\n                    </Normaltekst>\n                </OppsummeringsPunkt>\n            )}\n            {hattVarigEndringAvNæringsinntektSiste4Kalenderår === true && (\n                <>\n                    <OppsummeringsPunkt\n                        title={intlUtils(\n                            intl,\n                            'oppsummering.selvstendigNæringsdrivende.datoForEndringAvNæringsinntekt'\n                        )}\n                    >\n                        <Normaltekst>{formatDate(endringAvNæringsinntektInformasjon!.dato)}</Normaltekst>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt\n                        title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.næringsinntektEtterEndring')}\n                    >\n                        <Normaltekst>{endringAvNæringsinntektInformasjon!.næringsinntektEtterEndring}</Normaltekst>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.forklaring')}>\n                        <Normaltekst>{endringAvNæringsinntektInformasjon!.forklaring}</Normaltekst>\n                    </OppsummeringsPunkt>\n                </>\n            )}\n            {harRegnskapsfører === true && regnskapsfører && (\n                <>\n                    <OppsummeringsPunkt\n                        title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.regnskapsførerNavn')}\n                    >\n                        <Normaltekst>{regnskapsfører.navn}</Normaltekst>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt\n                        title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.regnskapsførerTlf')}\n                    >\n                        <Normaltekst>{regnskapsfører.telefonnummer}</Normaltekst>\n                    </OppsummeringsPunkt>\n                    <OppsummeringsPunkt\n                        title={intlUtils(\n                            intl,\n                            'oppsummering.selvstendigNæringsdrivende.regnskapsførerNærVennEllerFamilie'\n                        )}\n                    >\n                        <Normaltekst>\n                            {regnskapsfører.erNærVennEllerFamilie ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}\n                        </Normaltekst>\n                    </OppsummeringsPunkt>\n                </>\n            )}\n            {harRegnskapsfører === false && (\n                <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.regnskapsfører')}>\n                    <Normaltekst>\n                        {intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.harIkkeRegnskapsfører')}\n                    </Normaltekst>\n                </OppsummeringsPunkt>\n            )}\n        </>\n    );\n};\n\nexport default Næringsdetaljer;\n","import { formatDate, intlUtils } from '@navikt/fp-common';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport InntekterTabell from './InntekterTabell';\nimport Næringsdetaljer from './Næringsdetaljer';\n\nconst SelvstendigNæringsdrivendeOppsummering: FunctionComponent = () => {\n    const intl = useIntl();\n    const {\n        søker: { selvstendigNæringsdrivendeInformasjon, harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd },\n    } = useSøknad();\n\n    if (!selvstendigNæringsdrivendeInformasjon || !harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd) {\n        return (\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.tittel')}>\n                <Normaltekst>\n                    {intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.ikkeSelvstendigNæringsdrivende')}\n                </Normaltekst>\n            </OppsummeringsPunkt>\n        );\n    }\n\n    return (\n        <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.selvstendigNæringsdrivende.tittel')}>\n            <InntekterTabell\n                list={selvstendigNæringsdrivendeInformasjon.map((næring) => ({\n                    key: næring.navnPåNæringen + næring.tidsperiode,\n                    headerVenstre: næring.navnPåNæringen,\n                    headerHøyre: intlUtils(intl, 'tidsintervall', {\n                        fom: formatDate(næring.tidsperiode.fom)!,\n                        tom: næring.pågående ? 'pågående' : formatDate(næring.tidsperiode.tom!),\n                    }),\n                    content: <Næringsdetaljer næring={næring} />,\n                }))}\n            />\n        </OppsummeringsPunkt>\n    );\n};\n\nexport default SelvstendigNæringsdrivendeOppsummering;\n","import { intlUtils } from '@navikt/fp-common';\nimport HarArbeidsforhold from 'app/steps/inntektsinformasjon/components/arbeidsforhold-informasjon/HarArbeidsforhold';\nimport HarIkkeArbeidsforhold from 'app/steps/inntektsinformasjon/components/arbeidsforhold-informasjon/HarIkkeArbeidsforhold';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport AndreInntekterOppsummering from './AndreInntekterOppsummering';\nimport FrilansOppsummering from './FrilansOppsummering';\nimport SelvstendigNæringsdrivendeOppsummering from './SelvstendigNæringsdrivendeOppsummering';\n\nconst ArbeidsforholdOgAndreInntekterOppsummering: FunctionComponent = () => {\n    const intl = useIntl();\n    const { arbeidsforhold } = useSøkerinfo();\n    const harArbeidsforhold = arbeidsforhold !== undefined && arbeidsforhold.length > 0;\n\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.inntekt.registrerteArbeidsforhold')}>\n                <HarIkkeArbeidsforhold harArbeidsforhold={harArbeidsforhold} />\n                <HarArbeidsforhold harArbeidsforhold={harArbeidsforhold} arbeidsforhold={arbeidsforhold} />\n            </OppsummeringsPunkt>\n            <FrilansOppsummering />\n            <SelvstendigNæringsdrivendeOppsummering />\n            <AndreInntekterOppsummering />\n        </>\n    );\n};\n\nexport default ArbeidsforholdOgAndreInntekterOppsummering;\n","import * as React from 'react';\nimport './feltoppsummering.less';\nimport InnholdMedLedetekst from '../InnholdMedLedetekst';\n\ninterface Props {\n    feltnavn: string;\n    verdi: string | string[];\n}\n\nconst Feltoppsummering: React.FunctionComponent<Props> = ({ feltnavn, verdi }) => (\n    <InnholdMedLedetekst className=\"feltoppsummering\" ledetekst={feltnavn}>\n        <div className=\"feltoppsummering__verdi\">{verdi}</div>\n    </InnholdMedLedetekst>\n);\n\nexport default Feltoppsummering;\n","import * as React from 'react';\nimport './list.less';\nimport { bemUtils } from '@navikt/fp-common';\n\ninterface ListProps {\n    data: any[];\n    renderElement: (data: any, index: number) => JSX.Element;\n    className?: string;\n}\n\nconst bem = bemUtils('list');\nconst List: React.FunctionComponent<ListProps> = (props: ListProps) => {\n    const { data, renderElement, className } = props;\n    return (\n        <ul className={`${bem.block} ${className}`}>\n            {data.map((dataObject: any, i: number) => renderElement(dataObject, i))}\n        </ul>\n    );\n};\n\nexport default List;\n","import classNames from 'classnames';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\nimport * as React from 'react';\nimport List from './list/List';\n\nexport interface OppsummeringslisteelementProps {\n    venstrestiltTekst: string;\n    høyrestiltTekst: string;\n    venstrestiltTag?: string;\n    content?: React.ReactNode;\n    kompakt?: boolean;\n}\n\ninterface OppsummeringslisteProps {\n    data: OppsummeringslisteelementProps[];\n    kompakt?: boolean;\n}\n\nconst Oppsummeringsliste: React.FunctionComponent<OppsummeringslisteProps> = (props: OppsummeringslisteProps) => {\n    const { data, kompakt } = props;\n    return (\n        <List\n            className=\"oppsummeringsliste\"\n            data={data}\n            renderElement={(elementProps: OppsummeringslisteelementProps) => (\n                <Oppsummeringslisteelement {...elementProps} kompakt={kompakt} key={guid()} />\n            )}\n        />\n    );\n};\n\nconst Oppsummeringslisteelement: React.FunctionComponent<OppsummeringslisteelementProps> = ({\n    venstrestiltTekst,\n    venstrestiltTag = 'h4',\n    høyrestiltTekst,\n    content,\n    kompakt,\n}: OppsummeringslisteelementProps) => (\n    <li\n        className={classNames('oppsummeringsliste__element', {\n            'oppsummeringsliste__element--kompakt': kompakt === true,\n        })}\n    >\n        <div className=\"oppsummeringsliste__element__heading\">\n            <Element tag={venstrestiltTag}>{venstrestiltTekst}</Element>\n            <div className=\"høyrestiltTekst\">\n                <Normaltekst>{høyrestiltTekst}</Normaltekst>\n            </div>\n        </div>\n        {content && <div className=\"oppsummeringsliste__element__content\">{content}</div>}\n    </li>\n);\n\nexport default Oppsummeringsliste;\n","import { intlUtils } from '@navikt/fp-common';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { IntlShape } from 'react-intl';\nimport {\n    Arbeidsform,\n    Overføringsperiode,\n    Periodetype,\n    PeriodeUtenUttakUtsettelse,\n    Utsettelsesperiode,\n} from 'uttaksplan/types/Periode';\n\ntype MessageValue = string | number | boolean | Date | null | undefined;\n\nconst getValgtArbeidsgiverNavn = (arbeidsforhold: Arbeidsforhold[], orgnr?: string) => {\n    if (orgnr) {\n        const valgtArbeidsgiver = arbeidsforhold.find(\n            ({ arbeidsgiverId, arbeidsgiverIdType }) => arbeidsgiverIdType === 'orgnr' && arbeidsgiverId === orgnr\n        );\n        if (valgtArbeidsgiver) {\n            return valgtArbeidsgiver.arbeidsgiverNavn;\n        }\n    }\n    return '';\n};\n\nexport const getArbeidsformTekst = (\n    intl: IntlShape,\n    arbeidsformer: Arbeidsform[],\n    orgnumre?: string[],\n    arbeidsforhold?: Arbeidsforhold[]\n) => {\n    let arbeidstakerTekster: string[] = [];\n    let arbeidsformerTekster: string[] = [];\n\n    if (orgnumre !== undefined && orgnumre.length > 0 && arbeidsforhold && arbeidsforhold.length > 0) {\n        arbeidstakerTekster = orgnumre.map((orgnr) => {\n            const arbeidsgiverNavn = getValgtArbeidsgiverNavn(arbeidsforhold, orgnr);\n            return intlUtils(intl, `oppsummering.uttak.arbeidstaker`, { orgnr, arbeidsgiverNavn });\n        });\n    }\n\n    if (arbeidsformer !== undefined && arbeidsformer.length > 0) {\n        arbeidsformerTekster = arbeidsformer\n            .filter((arbeidsform) => arbeidsform !== Arbeidsform.arbeidstaker)\n            .map((arbeidsform) => {\n                return intlUtils(intl, `oppsummering.uttak.${arbeidsform.toLowerCase()}`);\n            });\n    }\n\n    return arbeidstakerTekster.concat(arbeidsformerTekster);\n};\n\nexport const getÅrsakTekst = (\n    intl: IntlShape,\n    { type, årsak }: Utsettelsesperiode | Overføringsperiode | PeriodeUtenUttakUtsettelse,\n    messageValues?: { [key: string]: MessageValue }\n) => {\n    const intlKeyPrefix = type === Periodetype.Utsettelse ? 'utsettelsesårsak.' : 'overføringsårsaktype.';\n    return intlUtils(intl, `uttaksplan.${intlKeyPrefix + årsak}`, messageValues);\n};\n","import * as React from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { Overføringsperiode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport Feltoppsummering from '../feltoppsummering/Feltoppsummering';\nimport { intlUtils } from '@navikt/fp-common';\nimport OppsummeringAvDokumentasjon from '../oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon';\nimport { dokumentasjonBehøvesForOverføringsperiode } from 'app/utils/manglendeVedleggUtils';\nimport { getÅrsakTekst } from '../OppsummeringUtils';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\n\ninterface OverføringsperiodedetaljerProps {\n    periode: Overføringsperiode;\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor: boolean;\n    periodeErNyEllerEndret: boolean;\n}\n\ntype Props = OverføringsperiodedetaljerProps;\n\nconst getNavnPåAnnenForelder = (navnPåForeldre: NavnPåForeldre, konto: StønadskontoType, intl: IntlShape) => {\n    if (konto === StønadskontoType.Fedrekvote) {\n        return navnPåForeldre.farMedmor;\n    } else if (konto === StønadskontoType.Mødrekvote) {\n        return navnPåForeldre.mor;\n    }\n    return intlUtils(intl, 'annen.forelder');\n};\n\nconst Overføringsperiodedetaljer: React.FunctionComponent<Props> = ({\n    periode,\n    navnPåForeldre,\n    erFarEllerMedmor,\n    periodeErNyEllerEndret,\n}) => {\n    const { vedlegg } = periode;\n    const intl = useIntl();\n    const navnAnnenForelder = getNavnPåAnnenForelder(navnPåForeldre, periode.konto, intl);\n    return (\n        <>\n            <Feltoppsummering\n                feltnavn={intlUtils(intl, 'oppsummering.uttak.årsak')}\n                verdi={getÅrsakTekst(intl, periode, { navnAnnenForelder })}\n            />\n\n            {dokumentasjonBehøvesForOverføringsperiode(erFarEllerMedmor, periode) && periodeErNyEllerEndret && (\n                <OppsummeringAvDokumentasjon vedlegg={vedlegg || []} />\n            )}\n        </>\n    );\n};\n\nexport default Overføringsperiodedetaljer;\n","import * as React from 'react';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { Attachment } from 'app/types/Attachment';\nimport { IntlShape, useIntl } from 'react-intl';\nimport OppsummeringAvDokumentasjon from '../oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon';\nimport Feltoppsummering from '../feltoppsummering/Feltoppsummering';\nimport { intlUtils } from '@navikt/fp-common';\nimport { assertUnreachable } from 'app/utils/globalUtil';\n\ninterface MorsAktivitetDetaljerProps {\n    morsAktivitet: MorsAktivitet;\n    dokumentasjonAvMorsAktivitet: Attachment[];\n    visOppsummeringAvDokumentasjon: boolean;\n}\n\ntype Props = MorsAktivitetDetaljerProps;\n\nconst getMorsAktivitetTekst = (intl: IntlShape, aktivitet: MorsAktivitet): string => {\n    switch (aktivitet) {\n        case MorsAktivitet.Arbeid:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Arbeid');\n        case MorsAktivitet.ArbeidOgUtdanning:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.ArbeidOgUtdanning');\n        case MorsAktivitet.Innlagt:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Innlagt');\n        case MorsAktivitet.Introduksjonsprogrammet:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Introduksjonsprogrammet');\n        case MorsAktivitet.Kvalifiseringsprogrammet:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Kvalifiseringsprogrammet');\n        case MorsAktivitet.TrengerHjelp:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.TrengerHjelp');\n        case MorsAktivitet.Uføre:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Uføre');\n        case MorsAktivitet.Utdanning:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.Utdanning');\n        case MorsAktivitet.IkkeOppgitt:\n            return intlUtils(intl, 'oppsummering.morsAktivitet.UtenAktivitetsKrav');\n        default:\n            return assertUnreachable(aktivitet, 'Mor har ingen aktivitet');\n    }\n};\n\nconst MorsAktivitetDetaljer: React.FunctionComponent<Props> = ({\n    morsAktivitet,\n    dokumentasjonAvMorsAktivitet,\n    visOppsummeringAvDokumentasjon,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Feltoppsummering\n                feltnavn={intlUtils(intl, 'oppsummering.morsAktivitet')}\n                verdi={getMorsAktivitetTekst(intl, morsAktivitet)}\n            />\n            {visOppsummeringAvDokumentasjon && (\n                <OppsummeringAvDokumentasjon\n                    ledetekst={intlUtils(intl, 'oppsummering.morsAktivitet.dokumentasjon')}\n                    vedlegg={dokumentasjonAvMorsAktivitet}\n                />\n            )}\n        </>\n    );\n};\n\nexport default MorsAktivitetDetaljer;\n","import { intlUtils } from '@navikt/fp-common';\nimport AnnenForelder, { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { shouldPeriodeHaveAttachment } from 'app/utils/manglendeVedleggUtils';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { UttaksperiodeBase } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport Feltoppsummering from '../feltoppsummering/Feltoppsummering';\nimport MorsAktivitetDetaljer from './MorsaktiviteterDetaljer';\nimport { getArbeidsformTekst } from '../OppsummeringUtils';\n\ninterface UttaksperiodedetaljerProps {\n    periode: UttaksperiodeBase;\n    registrerteArbeidsforhold: Arbeidsforhold[] | undefined;\n    periodeErNyEllerEndret: boolean;\n    søkerErFarEllerMedmor: boolean;\n    annenForelder: AnnenForelder;\n}\n\ntype Props = UttaksperiodedetaljerProps;\n\nconst Uttaksperiodedetaljer: React.FunctionComponent<Props> = ({\n    periode,\n    registrerteArbeidsforhold,\n    periodeErNyEllerEndret,\n    søkerErFarEllerMedmor,\n    annenForelder,\n}) => {\n    const {\n        konto,\n        morsAktivitetIPerioden,\n        ønskerSamtidigUttak,\n        gradert,\n        stillingsprosent,\n        orgnumre,\n        arbeidsformer,\n        vedlegg,\n        ønskerFlerbarnsdager,\n    } = periode;\n    const intl = useIntl();\n\n    let arbeidsformTekst = '';\n    if (arbeidsformer) {\n        arbeidsformTekst = getArbeidsformTekst(intl, arbeidsformer, orgnumre, registrerteArbeidsforhold).join('\\r\\n');\n    }\n\n    const erDeltUttakINorge = isAnnenForelderOppgitt(annenForelder) && annenForelder.harRettPåForeldrepengerINorge;\n\n    return (\n        <>\n            {ønskerFlerbarnsdager !== undefined && erDeltUttakINorge && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.ønskerFlerbarnsdager')}\n                    verdi={ønskerFlerbarnsdager ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}\n                />\n            )}\n            {ønskerSamtidigUttak !== undefined && erDeltUttakINorge && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.samtidigUttak')}\n                    verdi={ønskerSamtidigUttak ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}\n                />\n            )}\n            {konto !== StønadskontoType.ForeldrepengerFørFødsel && ønskerSamtidigUttak !== true && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.kombineresMedarbeid')}\n                    verdi={gradert ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei')}\n                />\n            )}\n\n            {gradert === true && stillingsprosent && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.stillingsprosent')}\n                    verdi={stillingsprosent}\n                />\n            )}\n\n            {arbeidsformer && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.arbeidstaker.label')}\n                    verdi={arbeidsformTekst}\n                />\n            )}\n            {shouldPeriodeHaveAttachment(periode, søkerErFarEllerMedmor, annenForelder) && morsAktivitetIPerioden && (\n                <MorsAktivitetDetaljer\n                    morsAktivitet={morsAktivitetIPerioden}\n                    dokumentasjonAvMorsAktivitet={vedlegg || []}\n                    visOppsummeringAvDokumentasjon={periodeErNyEllerEndret}\n                />\n            )}\n        </>\n    );\n};\n\nexport default Uttaksperiodedetaljer;\n","import { intlUtils } from '@navikt/fp-common';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { shouldPeriodeHaveAttachment } from 'app/utils/manglendeVedleggUtils';\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { PeriodeUtenUttakUtsettelse, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport Feltoppsummering from '../feltoppsummering/Feltoppsummering';\nimport OppsummeringAvDokumentasjon from '../oppsummering-av-dokumentasjon/OppsummeringAvDokumentasjon';\nimport { getÅrsakTekst } from '../OppsummeringUtils';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport MorsAktivitetDetaljer from './MorsaktiviteterDetaljer';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\n\ninterface UtsettelsesperiodedetaljerProps {\n    periode: Utsettelsesperiode | PeriodeUtenUttakUtsettelse;\n    registrerteArbeidsforhold: Arbeidsforhold[];\n    søkerErFarEllerMedmor: boolean;\n    annenForelder: AnnenForelder;\n    periodeErNyEllerEndret: boolean;\n}\n\nconst Utsettelsesperiodedetaljer: React.FunctionComponent<UtsettelsesperiodedetaljerProps> = ({\n    periode,\n    søkerErFarEllerMedmor,\n    annenForelder,\n    periodeErNyEllerEndret,\n}) => {\n    const { årsak, morsAktivitetIPerioden, vedlegg, bekrefterArbeidIPerioden } = periode;\n    const intl = useIntl();\n    const bekreftErIArbeidSvar = bekrefterArbeidIPerioden === true ? intlUtils(intl, 'ja') : intlUtils(intl, 'nei');\n\n    return (\n        <>\n            <Feltoppsummering\n                feltnavn={intlUtils(intl, 'oppsummering.uttak.årsak')}\n                verdi={getÅrsakTekst(intl, periode)}\n            />\n            {shouldPeriodeHaveAttachment(periode, søkerErFarEllerMedmor, annenForelder) &&\n                periodeErNyEllerEndret &&\n                periode.årsak !== UtsettelseÅrsakType.Fri && (\n                    <OppsummeringAvDokumentasjon\n                        vedlegg={(vedlegg || []).filter(\n                            (currentVedlegg) => currentVedlegg.type !== AttachmentType.MORS_AKTIVITET_DOKUMENTASJON\n                        )}\n                    />\n                )}\n            {årsak === UtsettelseÅrsakType.Arbeid && (\n                <Feltoppsummering\n                    feltnavn={intlUtils(intl, 'oppsummering.uttak.bekreft100ProsentIArbeid.label')}\n                    verdi={bekreftErIArbeidSvar}\n                />\n            )}\n            {shouldPeriodeHaveAttachment(periode, søkerErFarEllerMedmor, annenForelder) && morsAktivitetIPerioden && (\n                <MorsAktivitetDetaljer\n                    morsAktivitet={morsAktivitetIPerioden}\n                    dokumentasjonAvMorsAktivitet={(vedlegg || []).filter(\n                        (currentVedlegg) => currentVedlegg.type === AttachmentType.MORS_AKTIVITET_DOKUMENTASJON\n                    )}\n                    visOppsummeringAvDokumentasjon={periodeErNyEllerEndret}\n                />\n            )}\n        </>\n    );\n};\n\nexport default Utsettelsesperiodedetaljer;\n","import React, { FunctionComponent } from 'react';\nimport { formatDate, intlUtils, TidsperiodeDate } from '@navikt/fp-common';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport { Tilleggsopplysning } from 'app/context/types/Tilleggsopplysninger';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { beskrivTilleggsopplysning, TilleggsopplysningMedBeskrivelse } from 'app/utils/tilleggsopplysningerUtils';\nimport { useIntl } from 'react-intl';\nimport {\n    Oppholdsperiode,\n    Overføringsperiode,\n    Periode,\n    Periodetype,\n    PeriodeUtenUttakUtsettelse,\n    Utsettelsesperiode,\n    Uttaksperiode,\n} from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { finnesPeriodeIOpprinneligPlan, getPeriodeTittel } from 'uttaksplan/utils/periodeUtils';\nimport { getStønadskontoNavn } from 'uttaksplan/utils/stønadskontoerUtils';\nimport Feltoppsummering from './feltoppsummering/Feltoppsummering';\nimport Oppsummeringsliste, { OppsummeringslisteelementProps } from './oppsummeringsliste/Oppsummeringsliste';\nimport Overføringsperiodedetaljer from './detaljer/Overføringsperiodedetaljer';\nimport Uttaksperiodedetaljer from './detaljer/Uttaksperiodedetaljer';\nimport Utsettelsesperiodedetaljer from './detaljer/Uttsettelsesperiodedetaljer';\nimport { appendPeriodeNavnHvisUttakRundtFødselFarMedmor, uttaksperiodeKanJusteresVedFødsel } from 'app/utils/wlbUtils';\nimport { Situasjon } from 'app/types/Situasjon';\n\ninterface UttaksplanOppsummeringslisteProps {\n    perioder: Periode[];\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor: boolean;\n    registrerteArbeidsforhold: Arbeidsforhold[];\n    annenForelder: AnnenForelder;\n    begrunnelseForSenEndring?: Tilleggsopplysning;\n    eksisterendeUttaksplan?: Periode[];\n    familiehendelsesdato: Date;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n    ønskerJustertUttakVedFødsel: boolean | undefined;\n}\n\nconst UttaksplanOppsummeringsliste: FunctionComponent<UttaksplanOppsummeringslisteProps> = ({\n    perioder,\n    navnPåForeldre,\n    erFarEllerMedmor,\n    registrerteArbeidsforhold,\n    annenForelder,\n    begrunnelseForSenEndring,\n    eksisterendeUttaksplan,\n    familiehendelsesdato,\n    termindato,\n    situasjon,\n    erAleneOmOmsorg,\n    ønskerJustertUttakVedFødsel,\n}) => {\n    const intl = useIntl();\n\n    const getStønadskontoNavnFromKonto = (konto: StønadskontoType) => {\n        return getStønadskontoNavn(intl, konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg);\n    };\n\n    const getUttaksperiodeNavn = (periode: Uttaksperiode) => {\n        const tittel = getStønadskontoNavnFromKonto(periode.konto);\n        return appendPeriodeNavnHvisUttakRundtFødselFarMedmor(\n            intl,\n            tittel,\n            periode,\n            situasjon,\n            familiehendelsesdato,\n            termindato\n        );\n    };\n\n    const formatTidsperiode = (tidsperiode: TidsperiodeDate): string => {\n        const formatertTidsperiode = intlUtils(intl, 'tidsintervall', {\n            fom: formatDate(tidsperiode.fom),\n            tom: formatDate(tidsperiode.tom),\n        });\n        if (uttaksperiodeKanJusteresVedFødsel(ønskerJustertUttakVedFødsel, termindato, tidsperiode.fom)) {\n            const justeringTekst = intlUtils(intl, 'oppsummering.uttak.periodenBlirAutomatiskJustert');\n            return justeringTekst.concat(formatertTidsperiode);\n        }\n        return formatertTidsperiode;\n    };\n    const createOppsummeringslisteelementPropsForUttaksperiode = (\n        periode: Uttaksperiode,\n        periodeErNyEllerEndret = true\n    ): OppsummeringslisteelementProps => {\n        return {\n            venstrestiltTekst: getUttaksperiodeNavn(periode),\n            venstrestiltTag: 'h3',\n            høyrestiltTekst: formatTidsperiode(periode.tidsperiode),\n            content: (\n                <Uttaksperiodedetaljer\n                    periode={periode}\n                    registrerteArbeidsforhold={registrerteArbeidsforhold}\n                    periodeErNyEllerEndret={periodeErNyEllerEndret}\n                    søkerErFarEllerMedmor={erFarEllerMedmor}\n                    annenForelder={annenForelder}\n                />\n            ),\n        };\n    };\n\n    const createOppsummeringslisteelementPropsForOppholdsperiode = (\n        periode: Oppholdsperiode\n    ): OppsummeringslisteelementProps => {\n        return {\n            venstrestiltTekst: getPeriodeTittel(\n                intl,\n                periode,\n                navnPåForeldre,\n                familiehendelsesdato,\n                termindato,\n                situasjon\n            ),\n            venstrestiltTag: 'h3',\n            høyrestiltTekst: formatTidsperiode(periode.tidsperiode),\n        };\n    };\n\n    const createOppsummeringslisteelementPropsForUtsettelsesperiode = (\n        periode: Utsettelsesperiode | PeriodeUtenUttakUtsettelse,\n        periodeErNyEllerEndret: boolean\n    ): OppsummeringslisteelementProps => {\n        return {\n            venstrestiltTekst: intlUtils(intl, 'oppsummering.utsettelse.pga'),\n            venstrestiltTag: 'h3',\n            høyrestiltTekst: formatTidsperiode(periode.tidsperiode),\n            content: (\n                <Utsettelsesperiodedetaljer\n                    periode={periode}\n                    registrerteArbeidsforhold={registrerteArbeidsforhold}\n                    søkerErFarEllerMedmor={erFarEllerMedmor}\n                    annenForelder={annenForelder}\n                    periodeErNyEllerEndret={periodeErNyEllerEndret}\n                />\n            ),\n        };\n    };\n\n    const createOppsummeringslisteelementPropsForOverføringsperiode = (\n        periode: Overføringsperiode,\n        periodeErNyEllerEndret: boolean\n    ): OppsummeringslisteelementProps => {\n        const kontonavn = getStønadskontoNavnFromKonto(periode.konto);\n        return {\n            venstrestiltTekst: intlUtils(intl, 'oppsummering.overtakelse.pga', {\n                konto: kontonavn,\n            }),\n            venstrestiltTag: 'h3',\n            høyrestiltTekst: formatTidsperiode(periode.tidsperiode),\n            content: (\n                <Overføringsperiodedetaljer\n                    periode={periode}\n                    navnPåForeldre={navnPåForeldre}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    periodeErNyEllerEndret={periodeErNyEllerEndret}\n                />\n            ),\n        };\n    };\n\n    const createOppsummeringslisteelementPropsForBegrunnelseForSenEndring = (\n        begrunnelse: TilleggsopplysningMedBeskrivelse\n    ): OppsummeringslisteelementProps => {\n        return {\n            venstrestiltTekst: begrunnelse.beskrivelse,\n            venstrestiltTag: 'h3',\n            høyrestiltTekst: '',\n            content: (\n                <>\n                    <Feltoppsummering feltnavn={begrunnelse.ekstraInformasjon || ''} verdi={begrunnelse.tekst} />\n                </>\n            ),\n        };\n    };\n\n    const createOppsummeringslisteelementProps = (periode: Periode) => {\n        const periodeErNyEllerEndret = eksisterendeUttaksplan\n            ? finnesPeriodeIOpprinneligPlan(periode, eksisterendeUttaksplan) === false\n            : true;\n        switch (periode.type) {\n            case Periodetype.Uttak:\n                return createOppsummeringslisteelementPropsForUttaksperiode(periode, periodeErNyEllerEndret);\n            case Periodetype.Utsettelse:\n                return createOppsummeringslisteelementPropsForUtsettelsesperiode(periode, periodeErNyEllerEndret);\n            case Periodetype.Overføring:\n                return createOppsummeringslisteelementPropsForOverføringsperiode(periode, periodeErNyEllerEndret);\n            case Periodetype.Opphold:\n                return createOppsummeringslisteelementPropsForOppholdsperiode(periode);\n            default:\n                return null;\n        }\n    };\n\n    const oppsummeringslisteData = (): OppsummeringslisteelementProps[] => {\n        const periodeliste = perioder\n            .map((periode) => createOppsummeringslisteelementProps(periode))\n            .filter((v) => v !== null) as OppsummeringslisteelementProps[];\n        if (begrunnelseForSenEndring) {\n            const begrunnelse = beskrivTilleggsopplysning(begrunnelseForSenEndring);\n            const begrunnelseForSenEndringList =\n                createOppsummeringslisteelementPropsForBegrunnelseForSenEndring(begrunnelse);\n            return periodeliste.concat(begrunnelseForSenEndringList);\n        }\n\n        return periodeliste;\n    };\n\n    return <Oppsummeringsliste data={oppsummeringslisteData()} />;\n};\n\nexport default UttaksplanOppsummeringsliste;\n","import { intlUtils } from '@navikt/fp-common';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\n\nimport React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport OppsummeringsPunkt from '../OppsummeringsPunkt';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport UttaksplanOppsummeringsliste from './UttaksplanOppsummeringsliste';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport { Tilleggsopplysning } from 'app/context/types/Tilleggsopplysninger';\nimport { Situasjon } from 'app/types/Situasjon';\n\ninterface Props {\n    perioder: Periode[];\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor: boolean;\n    registrerteArbeidsforhold: Arbeidsforhold[];\n    dekningsgrad: Dekningsgrad;\n    antallUkerUttaksplan: number;\n    annenForelder: AnnenForelder;\n    familiehendelsesdato: Date;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n    antallBarn: number;\n    ønskerJustertUttakVedFødsel: boolean | undefined;\n    begrunnelseForSenEndring?: Tilleggsopplysning;\n    eksisterendeUttaksplan?: Periode[];\n}\n\nconst UttaksplanOppsummering: React.FunctionComponent<Props> = ({\n    dekningsgrad,\n    antallUkerUttaksplan,\n    ønskerJustertUttakVedFødsel,\n    antallBarn,\n    ...rest\n}) => {\n    const intl = useIntl();\n\n    const dekningsgradTekst =\n        dekningsgrad === Dekningsgrad.HUNDRE_PROSENT\n            ? intlUtils(intl, 'oppsummering.uttak.dekningsgrad.verdi100', { antallUker: antallUkerUttaksplan })\n            : intlUtils(intl, 'oppsummering.uttak.dekningsgrad.verdi80', { antallUker: antallUkerUttaksplan });\n    return (\n        <>\n            <OppsummeringsPunkt title={intlUtils(intl, 'oppsummering.uttak.dekningsgrad.label')}>\n                <Normaltekst>{dekningsgradTekst}</Normaltekst>\n            </OppsummeringsPunkt>\n            <UttaksplanOppsummeringsliste\n                ønskerJustertUttakVedFødsel={ønskerJustertUttakVedFødsel}\n                {...rest}\n            ></UttaksplanOppsummeringsliste>\n            {ønskerJustertUttakVedFødsel !== undefined && (\n                <OppsummeringsPunkt\n                    title={intlUtils(intl, 'oppsummering.uttak.ønskerAutomatiskJustering.label', {\n                        antallBarn,\n                    })}\n                >\n                    <Normaltekst>\n                        <FormattedMessage id={ønskerJustertUttakVedFødsel ? 'ja' : 'nei'} />\n                    </Normaltekst>\n                </OppsummeringsPunkt>\n            )}\n        </>\n    );\n};\n\nexport default UttaksplanOppsummering;\n","import { bemUtils, Block, intlUtils, Step } from '@navikt/fp-common';\nimport VeilederNormal from 'app/assets/VeilederNormal';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport useAvbrytSøknad from 'app/utils/hooks/useAvbrytSøknad';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport stepConfig, { getPreviousStepHref, getPreviousStepHrefEndringssøknad } from '../stepsConfig';\nimport AnnenForelderOppsummering from './components/annen-forelder-oppsummering/AnnenForelderOppsummering';\nimport BarnOppsummering from './components/barn-oppsummering/BarnOppsummering';\nimport OppsummeringsPanel from './components/OppsummeringsPanel';\nimport Personalia from './components/Personalia';\nimport UtenlandsoppholdOppsummering from './components/utenlandsopphold-oppsummering/UtenlandsoppholdOppsummering';\nimport {\n    getInitialOppsummeringValues,\n    OppsummeringFormComponents,\n    OppsummeringFormData,\n    OppsummeringFormField,\n} from './oppsummeringFormConfig';\nimport { validateHarGodkjentOppsummering } from './validation/oppsummeringValidation';\nimport ArbeidsforholdOgAndreInntekterOppsummering from './components/andre-inntekter-oppsummering/ArbeidsforholdOgAndreInntekterOppsummering';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport Api from 'app/api/api';\nimport actionCreator from 'app/context/action/actionCreator';\nimport {\n    FEIL_VED_INNSENDING,\n    FOR_MANGE_VEDLEGG_ERROR,\n    getErrorCallId,\n    getSøknadsdataForInnsending,\n    UKJENT_UUID,\n} from 'app/api/apiUtils';\nimport { useNavigate } from 'react-router-dom';\n\nimport './oppsummering.less';\nimport SøknadRoutes from 'app/routes/routes';\nimport UttaksplanOppsummering from './components/uttaksplan-oppsummering/UttaksplanOppsummering';\nimport { getErSøkerFarEllerMedmor, getFarMedmorErAleneOmOmsorg, getNavnPåForeldre } from 'app/utils/personUtils';\nimport { beskrivTilleggsopplysning } from 'app/utils/tilleggsopplysningerUtils';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport { redirectToLogin } from 'app/utils/redirectToLogin';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport { sendErrorMessageToSentry } from '../../api/apiUtils';\nimport useSaveLoadedRoute from 'app/utils/hooks/useSaveLoadedRoute';\n\nconst Oppsummering = () => {\n    const intl = useIntl();\n    const { dispatch, state } = useForeldrepengesøknadContext();\n    const navigate = useNavigate();\n    const { kvittering, eksisterendeSak } = state;\n    const bem = bemUtils('oppsummering');\n\n    const [submitError, setSubmitError] = useState<any>(undefined);\n    const [formSubmitted, setFormSubmitted] = useState(false);\n    const [isSendingSøknad, setIsSendingSøknad] = useState(false);\n    const {\n        barn,\n        annenForelder,\n        søker,\n        informasjonOmUtenlandsopphold,\n        søkersituasjon,\n        dekningsgrad,\n        uttaksplan,\n        tilleggsopplysninger,\n        erEndringssøknad,\n    } = useSøknad();\n\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n    const søkerinfo = useSøkerinfo();\n    const { person, arbeidsforhold } = søkerinfo;\n    const { erAleneOmOmsorg } = søker;\n    const søknad = useSøknad();\n    const onAvbrytSøknad = useAvbrytSøknad();\n    const søkerErFarEllerMedmor = getErSøkerFarEllerMedmor(søkersituasjon.rolle);\n    const navnPåForeldre = getNavnPåForeldre(person, annenForelder, søkerErFarEllerMedmor, intl);\n    const antallUkerUttaksplan = state.antallUkerIUttaksplan;\n    const begrunnelseForSenEndring = tilleggsopplysninger.begrunnelseForSenEndring\n        ? beskrivTilleggsopplysning(tilleggsopplysninger.begrunnelseForSenEndring)\n        : undefined;\n    const farMedmorErAleneOmOmsorg = getFarMedmorErAleneOmOmsorg(søkerErFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const familiehendelsesdato = ISOStringToDate(getFamiliehendelsedato(søknad.barn));\n    const termindato = getTermindato(søknad.barn);\n    const erEndringssøknadOgAnnenForelderHarRett =\n        erEndringssøknad && isAnnenForelderOppgitt(annenForelder) && annenForelder.harRettPåForeldrepengerINorge;\n    const erklæringOmAnnenForelderInformert = erEndringssøknadOgAnnenForelderHarRett\n        ? intlUtils(intl, 'oppsummering.harGodkjentOppsummering.endringssøknadMedAnnenForelder', {\n              navnAnnenForelder: annenForelder.fornavn,\n          })\n        : '';\n    const egenerklæringTekst = intlUtils(intl, 'oppsummering.harGodkjentOppsummering').concat(\n        erklæringOmAnnenForelderInformert\n    );\n    const cleanedSøknad = useMemo(\n        () =>\n            getSøknadsdataForInnsending(\n                søknad,\n                state.perioderSomSkalSendesInn,\n                familiehendelsesdato!,\n                state.endringstidspunkt\n            ),\n        [søknad, state.perioderSomSkalSendesInn, familiehendelsesdato, state.endringstidspunkt]\n    );\n    useSaveLoadedRoute(SøknadRoutes.OPPSUMMERING);\n\n    useEffect(() => {\n        if (formSubmitted && !isSendingSøknad) {\n            setIsSendingSøknad(true);\n            if (cleanedSøknad.uttaksplan.length === 0 && cleanedSøknad.erEndringssøknad) {\n                throw new Error('Søknaden din inneholder ingen nye perioder.');\n            }\n            Api.sendSøknad(cleanedSøknad, søkerinfo.person.fnr)\n                .then((response) => {\n                    dispatch(actionCreator.setKvittering(response.data));\n                })\n                .catch((error) => {\n                    if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n                        redirectToLogin();\n                    } else {\n                        setSubmitError(error);\n                    }\n                });\n        }\n    }, [dispatch, søkerinfo.person.fnr, formSubmitted, cleanedSøknad, isSendingSøknad]);\n\n    useEffect(() => {\n        if (kvittering !== undefined) {\n            setFormSubmitted(false);\n            navigate(SøknadRoutes.SØKNAD_SENDT);\n        }\n    }, [kvittering, navigate]);\n\n    useEffect(() => {\n        if (submitError !== undefined) {\n            sendErrorMessageToSentry(submitError);\n            if (\n                submitError.response &&\n                submitError.response.status === 400 &&\n                submitError.response.data &&\n                submitError.response.data.messages &&\n                submitError.response.data.messages.includes(\n                    'Vedleggslisten kan ikke inneholde flere enn 40 opplastede vedlegg'\n                )\n            ) {\n                throw new Error(FOR_MANGE_VEDLEGG_ERROR);\n            }\n            sendErrorMessageToSentry(submitError);\n            const submitErrorCallId = getErrorCallId(submitError);\n            const callIdForBruker =\n                submitErrorCallId !== UKJENT_UUID ? submitErrorCallId.slice(0, 8) : submitErrorCallId;\n            throw new Error(FEIL_VED_INNSENDING + callIdForBruker);\n        }\n    }, [submitError]);\n\n    const handleSubmit = (values: Partial<OppsummeringFormData>) => {\n        dispatch(actionCreator.setGodkjentOppsummering(values.harGodkjentOppsummering!));\n        setFormSubmitted(true);\n    };\n\n    const submitKnappTekst = formSubmitted\n        ? intlUtils(intl, 'oppsummering.senderInnSøknad')\n        : intlUtils(intl, 'oppsummering.sendInnSøknad');\n\n    return (\n        <OppsummeringFormComponents.FormikWrapper\n            initialValues={getInitialOppsummeringValues()}\n            onSubmit={handleSubmit}\n            renderForm={() => {\n                return (\n                    <OppsummeringFormComponents.Form includeButtons={false}>\n                        <Step\n                            bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n                            backLinkHref={\n                                søknad.erEndringssøknad\n                                    ? getPreviousStepHrefEndringssøknad('oppsummering')\n                                    : getPreviousStepHref('oppsummering')\n                            }\n                            activeStepId=\"oppsummering\"\n                            pageTitle={intlUtils(intl, 'søknad.oppsummering')}\n                            stepTitle={intlUtils(intl, 'søknad.oppsummering')}\n                            onCancel={onAvbrytSøknad}\n                            onContinueLater={onFortsettSøknadSenere}\n                            steps={stepConfig(intl)}\n                            kompakt={true}\n                        >\n                            <Block padBottom=\"l\">\n                                <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                                    <FormattedMessage id=\"oppsummering.veileder\" />\n                                </Veilederpanel>\n                            </Block>\n                            <Block padBottom=\"l\">\n                                <div className={bem.block}>\n                                    <Block padBottom=\"l\">\n                                        <Personalia søkerinfo={søkerinfo} />\n                                    </Block>\n                                    {!erEndringssøknad && (\n                                        <OppsummeringsPanel title=\"Om barnet\">\n                                            <BarnOppsummering barn={barn} />\n                                        </OppsummeringsPanel>\n                                    )}\n                                    {!erEndringssøknad && (\n                                        <OppsummeringsPanel title=\"Den andre forelderen\">\n                                            <AnnenForelderOppsummering\n                                                annenForelder={annenForelder}\n                                                søker={søker}\n                                                søkerrolle={søkersituasjon.rolle}\n                                                barn={barn}\n                                                farMedmorErAleneOmOmsorg={farMedmorErAleneOmOmsorg}\n                                            />\n                                        </OppsummeringsPanel>\n                                    )}\n                                    {!erEndringssøknad && (\n                                        <OppsummeringsPanel title=\"Utenlandsopphold\">\n                                            <UtenlandsoppholdOppsummering\n                                                informasjonOmUtenlandsopphold={informasjonOmUtenlandsopphold}\n                                                barn={barn}\n                                            />\n                                        </OppsummeringsPanel>\n                                    )}\n                                    {!erEndringssøknad && (\n                                        <OppsummeringsPanel title=\"Arbeidsforhold og andre inntektskilder\">\n                                            <ArbeidsforholdOgAndreInntekterOppsummering />\n                                        </OppsummeringsPanel>\n                                    )}\n                                    <OppsummeringsPanel title={intlUtils(intl, 'oppsummering.uttak')}>\n                                        <UttaksplanOppsummering\n                                            perioder={uttaksplan}\n                                            navnPåForeldre={navnPåForeldre}\n                                            annenForelder={annenForelder}\n                                            erFarEllerMedmor={søkerErFarEllerMedmor}\n                                            registrerteArbeidsforhold={arbeidsforhold}\n                                            dekningsgrad={dekningsgrad}\n                                            antallUkerUttaksplan={antallUkerUttaksplan}\n                                            begrunnelseForSenEndring={begrunnelseForSenEndring}\n                                            //begrunnelseForSenEndringVedlegg={søknad.vedleggForSenEndring}\n                                            eksisterendeUttaksplan={\n                                                eksisterendeSak ? eksisterendeSak.uttaksplan : undefined\n                                            }\n                                            familiehendelsesdato={familiehendelsesdato!}\n                                            termindato={termindato}\n                                            situasjon={søkersituasjon.situasjon}\n                                            erAleneOmOmsorg={erAleneOmOmsorg}\n                                            antallBarn={søknad.barn.antallBarn}\n                                            ønskerJustertUttakVedFødsel={søknad.ønskerJustertUttakVedFødsel}\n                                        />\n                                    </OppsummeringsPanel>\n                                </div>\n                            </Block>\n                            <Block padBottom=\"l\">\n                                <OppsummeringFormComponents.ConfirmationCheckbox\n                                    name={OppsummeringFormField.harGodkjentOppsummering}\n                                    label={egenerklæringTekst}\n                                    validate={validateHarGodkjentOppsummering(intl)}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\">\n                                <div style={{ textAlign: 'center' }}>\n                                    <Hovedknapp disabled={formSubmitted} spinner={formSubmitted}>\n                                        {submitKnappTekst}\n                                    </Hovedknapp>\n                                </div>\n                            </Block>\n                        </Step>\n                    </OppsummeringFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default Oppsummering;\n","import AnnenForelder from 'app/context/types/AnnenForelder';\nimport { Attachment, InnsendingsType } from 'app/types/Attachment';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { MissingAttachment } from 'app/types/MissingAttachment';\nimport { Skjemanummer } from 'app/types/Skjemanummer';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { OverføringÅrsakType } from 'uttaksplan/types/OverføringÅrsakType';\nimport {\n    isOverføringsperiode,\n    isUtsettelsesperiode,\n    isUttaksperiode,\n    Overføringsperiode,\n    Periode,\n    Periodetype,\n    PeriodeUtenUttakUtsettelse,\n    Utsettelsesperiode,\n    Uttaksperiode,\n} from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport { erÅrsakSykdomEllerInstitusjonsopphold } from 'uttaksplan/utils/periodeUtils';\nimport { aktivitetskravMorSkalBesvares } from 'uttaksplan/utils/uttaksskjema/aktivitetskravMorSkalBesvares';\nimport { Søknadsinfo } from 'uttaksplan/validering/utils/types/Søknadsinfo';\nimport { aktivitetskravMorUtil, getMorsAktivitetSkjemanummer } from './morsAktivitetUtils';\n\nconst createMissingAttachment = (\n    index: number,\n    skjemanummer: Skjemanummer,\n    type: AttachmentType,\n    periodeId?: string\n): MissingAttachment => {\n    return {\n        index,\n        skjemanummer,\n        type,\n        periodeId,\n    };\n};\n\nconst isAttachmentMissing = (attachments?: Attachment[], type?: AttachmentType): boolean =>\n    attachments === undefined ||\n    attachments.length === 0 ||\n    (type !== undefined && attachments.find((a) => a.type === type) === undefined);\n\nexport const shouldPeriodeHaveAttachment = (\n    periode: Periode,\n    søkerErFarEllerMedmor: boolean,\n    annenForelder: AnnenForelder\n): boolean => {\n    switch (periode.type) {\n        case Periodetype.Overføring:\n            return dokumentasjonBehøvesForOverføringsperiode(søkerErFarEllerMedmor, periode);\n        case Periodetype.Utsettelse:\n            return dokumentasjonBehøvesForUtsettelsesperiode(\n                periode,\n                aktivitetskravMorUtil.skalBesvaresVedUtsettelse(søkerErFarEllerMedmor, annenForelder)\n            );\n        case Periodetype.Uttak:\n            return dokumentasjonBehøvesForUttaksperiode(periode);\n        default:\n            return false;\n    }\n};\n\nexport const hasPeriodeMissingAttachment = (periode: Periode, søknadsinfo: Søknadsinfo): boolean => {\n    const shouldHave = shouldPeriodeHaveAttachment(\n        periode,\n        søknadsinfo.søkerErFarEllerMedmor,\n        søknadsinfo.annenForelder\n    );\n\n    return (\n        shouldHave &&\n        isAttachmentMissing(periode.vedlegg?.filter((p) => p.innsendingsType !== InnsendingsType.SEND_SENERE))\n    );\n};\n\nexport const findMissingAttachmentsForPerioder = (søknadsinfo: Søknadsinfo): MissingAttachment[] => {\n    const perioder = søknadsinfo.perioderSomSkalSendesInn;\n    if (!perioder) {\n        return [];\n    }\n    const missingAttachments: MissingAttachment[] = [];\n    for (const periode of perioder) {\n        if (hasPeriodeMissingAttachment(periode, søknadsinfo)) {\n            const index = perioder.indexOf(periode);\n            if (\n                (isUtsettelsesperiode(periode) || isUttaksperiode(periode)) &&\n                missingAttachmentForAktivitetskrav(periode, søknadsinfo)\n            ) {\n                missingAttachments.push(\n                    createMissingAttachment(\n                        index,\n                        getMorsAktivitetSkjemanummer(periode.morsAktivitetIPerioden),\n                        AttachmentType.MORS_AKTIVITET_DOKUMENTASJON,\n                        periode.id\n                    )\n                );\n            } else {\n                if (isUtsettelsesperiode(periode)) {\n                    if (periode.årsak === UtsettelseÅrsakType.HvØvelse) {\n                        missingAttachments.push(\n                            createMissingAttachment(index, Skjemanummer.HV_ØVELSE, AttachmentType.HV_ØVELSE, periode.id)\n                        );\n                    }\n\n                    if (\n                        periode.årsak === UtsettelseÅrsakType.Fri &&\n                        søknadsinfo.søkerErFarEllerMedmor &&\n                        !søknadsinfo.morErUfør &&\n                        !søknadsinfo.morHarRett\n                    ) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM,\n                                AttachmentType.MORS_AKTIVITET_DOKUMENTASJON,\n                                periode.id\n                            )\n                        );\n                    }\n\n                    if (periode.årsak === UtsettelseÅrsakType.NavTiltak) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.NAV_TILTAK,\n                                AttachmentType.NAV_TILTAK,\n                                periode.id\n                            )\n                        );\n                    }\n\n                    if (\n                        periode.årsak === UtsettelseÅrsakType.InstitusjonSøker ||\n                        periode.årsak === UtsettelseÅrsakType.InstitusjonBarnet\n                    ) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_INNLEGGELSE,\n                                AttachmentType.UTSETTELSE_SYKDOM,\n                                periode.id\n                            )\n                        );\n                    }\n\n                    if (periode.årsak === UtsettelseÅrsakType.Sykdom) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_OVERFØRING_FOR_SYK,\n                                AttachmentType.UTSETTELSE_SYKDOM,\n                                periode.id\n                            )\n                        );\n                    }\n                }\n\n                if (isOverføringsperiode(periode)) {\n                    if (\n                        periode.årsak === OverføringÅrsakType.institusjonsoppholdAnnenForelder ||\n                        periode.årsak === OverføringÅrsakType.sykdomAnnenForelder\n                    ) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_OVERFØRING_FOR_SYK,\n                                AttachmentType.OVERFØRING_KVOTE,\n                                periode.id\n                            )\n                        );\n                    }\n                }\n\n                if (isUttaksperiode(periode)) {\n                    if (periode.konto === StønadskontoType.Fedrekvote && periode.erMorForSyk === true) {\n                        missingAttachments.push(\n                            createMissingAttachment(\n                                index,\n                                Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM,\n                                AttachmentType.UTSETTELSE_SYKDOM,\n                                periode.id\n                            )\n                        );\n                    }\n                }\n            }\n        }\n    }\n    return missingAttachments;\n};\n\nconst dokumentasjonBehøvesForUttaksperiode = (periode: Uttaksperiode): boolean => {\n    if (periode.harIkkeAktivitetskrav) {\n        return false;\n    }\n\n    return (\n        (periode.morsAktivitetIPerioden !== undefined && periode.morsAktivitetIPerioden !== MorsAktivitet.Uføre) ||\n        (periode.konto === StønadskontoType.Fedrekvote && periode.erMorForSyk === true)\n    );\n};\n\nconst dokumentasjonBehøvesForUtsettelsesperiode = (\n    { årsak }: Utsettelsesperiode | PeriodeUtenUttakUtsettelse,\n    harMorAktivitetskrav: boolean\n): boolean => {\n    return (\n        harMorAktivitetskrav ||\n        erÅrsakSykdomEllerInstitusjonsopphold(årsak) ||\n        årsak === UtsettelseÅrsakType.HvØvelse ||\n        årsak === UtsettelseÅrsakType.NavTiltak\n    );\n};\n\nexport const dokumentasjonBehøvesForOverføringsperiode = (\n    erFarEllerMedmor: boolean,\n    periode: Overføringsperiode\n): boolean =>\n    (erFarEllerMedmor || periode.årsak !== OverføringÅrsakType.aleneomsorg) &&\n    periode.årsak !== OverføringÅrsakType.ikkeRettAnnenForelder;\n\nconst missingAttachmentForAktivitetskrav = (\n    periode: Utsettelsesperiode | Uttaksperiode,\n    søknadsinfo: Søknadsinfo\n): boolean => {\n    const søkerErMor = !søknadsinfo.søkerErFarEllerMedmor;\n    const ønskerFlerBarnsdager = isUttaksperiode(periode) ? periode.ønskerFlerbarnsdager : undefined;\n    const erSamtidigUttak = isUttaksperiode(periode) ? periode.ønskerSamtidigUttak : undefined;\n    const morErForSyk = isUttaksperiode(periode) ? periode.erMorForSyk : undefined;\n    const konto = isUttaksperiode(periode) ? periode.konto : undefined;\n    return (\n        aktivitetskravMorSkalBesvares(\n            ønskerFlerBarnsdager,\n            erSamtidigUttak,\n            morErForSyk,\n            periode.type,\n            konto,\n            søkerErMor,\n            søknadsinfo.søkerErAleneOmOmsorg,\n            søknadsinfo.annenForelder.kanIkkeOppgis,\n            søknadsinfo.søkerHarMidlertidigOmsorg,\n            periode.tidsperiode,\n            søknadsinfo.familiehendelsesdato,\n            søknadsinfo.termindato,\n            søknadsinfo.søkersituasjon.situasjon,\n            søknadsinfo.stønadskontoer,\n            !søknadsinfo.morHarRett\n        ) &&\n        isAttachmentMissing(\n            periode.vedlegg?.filter((p) => p.innsendingsType !== InnsendingsType.SEND_SENERE),\n            AttachmentType.MORS_AKTIVITET_DOKUMENTASJON\n        )\n    );\n};\n","import AnnenForelder, { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport { Skjemanummer } from 'app/types/Skjemanummer';\nimport dayjs from 'dayjs';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { hasValue } from '@navikt/fp-common';\n\nexport const aktivitetskravMorUtil = {\n    skalBesvaresVedUtsettelse(søkerErFarEllerMedmor: boolean, annenForelder: AnnenForelder): boolean {\n        const reglerFørFørsteOkt2021 = dayjs(new Date()).isBefore(new Date('2021-10-01'), 'day');\n        const annenForelderErUfør = isAnnenForelderOppgitt(annenForelder) ? annenForelder.erUfør : undefined;\n        const annenForelderHarRett = isAnnenForelderOppgitt(annenForelder)\n            ? annenForelder.harRettPåForeldrepengerINorge || annenForelder.harRettPåForeldrepengerIEØS\n            : undefined;\n\n        return !søkerErFarEllerMedmor ||\n            (annenForelderHarRett === false && annenForelderErUfør === true && !reglerFørFørsteOkt2021)\n            ? false\n            : annenForelderHarRett === false;\n    },\n};\n\nexport const getMorsAktivitetSkjemanummer = (morsAktivitet?: MorsAktivitet): Skjemanummer => {\n    switch (morsAktivitet) {\n        case MorsAktivitet.Innlagt:\n            return Skjemanummer.DOK_INNLEGGELSE;\n        case MorsAktivitet.Kvalifiseringsprogrammet:\n            return Skjemanummer.BEKREFTELSE_DELTAR_KVALIFISERINGSPROGRAM;\n        case MorsAktivitet.Introduksjonsprogrammet:\n            return Skjemanummer.DOK_DELTAKELSE_I_INTRODUKSJONSPROGRAMMET;\n        case MorsAktivitet.ArbeidOgUtdanning:\n        case MorsAktivitet.Arbeid:\n        case MorsAktivitet.TrengerHjelp:\n            return Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM;\n        case MorsAktivitet.Utdanning:\n            return Skjemanummer.BEKREFTELSE_FRA_STUDIESTED;\n        default:\n            return Skjemanummer.ANNET;\n    }\n};\n\nexport const getMorsAktivitet = (\n    aktivitetskravMorValue: string | undefined,\n    erMorForSykValue: boolean | undefined\n): MorsAktivitet | undefined => {\n    if (hasValue(aktivitetskravMorValue)) {\n        return aktivitetskravMorValue as MorsAktivitet;\n    }\n    if (erMorForSykValue) {\n        return MorsAktivitet.TrengerHjelp;\n    }\n    return undefined;\n};\n","import { Tilleggsopplysning, Tilleggsopplysninger } from 'app/context/types/Tilleggsopplysninger';\nimport { replaceInvisibleCharsWithSpace } from './stringUtils';\n\nconst TIL_SAKSBEHANDLER = {\n    'tilleggsopplysning.begrunnelseForSenEndring': 'Begrunnelse for å søke om utsettelse',\n    'tilleggsopplysning.begrunnelseForSenEndring.SYKDOM': 'på grunn av sykdom tilbake i tid',\n    'tilleggsopplysning.begrunnelseForSenEndring.UTTAK': 'på grunn av uttak mer enn tre måneder tilbake i tid',\n    'tilleggsopplysning.begrunnelseForSenEndring.SYKDOM_OG_UTTAK':\n        'på grunn av sykdom tilbake i tid og uttak mer enn tre måneder tilbake i tid',\n};\n\nexport interface TilleggsopplysningMedBeskrivelse {\n    beskrivelse: string;\n    tekst: string;\n    ekstraInformasjon?: string;\n}\n\nexport const beskrivTilleggsopplysning = (tilleggsopplysning: Tilleggsopplysning): TilleggsopplysningMedBeskrivelse => {\n    const { tekst, ekstraInformasjon } = tilleggsopplysning;\n    const beskrivelseMessageId = `tilleggsopplysning.begrunnelseForSenEndring`;\n    const beskrivelseAvOpplysning = TIL_SAKSBEHANDLER[beskrivelseMessageId];\n    const ekstraMessageId = `tilleggsopplysning.begrunnelseForSenEndring.${ekstraInformasjon}`;\n    const ekstraInfoTilSaksbehandling = (TIL_SAKSBEHANDLER as any)[ekstraMessageId];\n\n    return {\n        beskrivelse: beskrivelseAvOpplysning,\n        ekstraInformasjon: ekstraInfoTilSaksbehandling,\n        tekst,\n    };\n};\n\nexport const cleanupInvisibleCharsFromTilleggsopplysninger = (\n    tilleggsopplysninger: Tilleggsopplysninger\n): Tilleggsopplysninger => {\n    return tilleggsopplysninger.begrunnelseForSenEndring\n        ? {\n              ...tilleggsopplysninger,\n              begrunnelseForSenEndring: {\n                  ...tilleggsopplysninger.begrunnelseForSenEndring,\n                  tekst: replaceInvisibleCharsWithSpace(tilleggsopplysninger.begrunnelseForSenEndring.tekst),\n              },\n          }\n        : tilleggsopplysninger;\n};\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { getSisteUttaksdag6UkerEtterFødsel } from 'app/utils/wlbUtils';\nimport dayjs from 'dayjs';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport kontoSkalBesvares from './kontoSkalBesvarer';\nimport uttakRundtFødselÅrsakSpørsmålSkalBesvares from './uttakRundtFødselÅrsakSpørsmålSkalBesvares';\n\nexport const farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk = (\n    famDato: Date,\n    erFarEllerMedmor: boolean,\n    konto: StønadskontoType | undefined,\n    erMorForSyk: boolean | undefined,\n    tidsperiode: TidsperiodeDate,\n    situasjon: Situasjon\n) => {\n    const sisteUttaksdag6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(famDato);\n    return (\n        erFarEllerMedmor &&\n        konto === StønadskontoType.Foreldrepenger &&\n        erMorForSyk === false &&\n        situasjon === 'fødsel' &&\n        dayjs(tidsperiode.fom).isSameOrBefore(sisteUttaksdag6UkerEtterFødsel, 'day')\n    );\n};\n\nexport const aktivitetskravMorSkalBesvares = (\n    ønskerFlerbarnsdager: boolean | undefined,\n    samtidigUttak: boolean | undefined,\n    erMorForSyk: boolean | undefined,\n    periodetype: Periodetype,\n    kontotype: StønadskontoType | undefined,\n    søkerErMor: boolean,\n    erAleneOmOmsorg: boolean,\n    annenForelderKanIkkeOppgis: boolean,\n    søkerHarMidlertidigOmsorg: boolean,\n    tidsperiode: TidsperiodeDate,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n    stønadskontoer: StønadskontoUttak[],\n    bareFarMedmorHarRett: boolean\n): boolean => {\n    if (\n        søkerErMor ||\n        erAleneOmOmsorg ||\n        periodetype !== Periodetype.Uttak ||\n        annenForelderKanIkkeOppgis ||\n        søkerHarMidlertidigOmsorg ||\n        uttakRundtFødselÅrsakSpørsmålSkalBesvares(\n            periodetype,\n            kontotype as StønadskontoType,\n            tidsperiode,\n            !søkerErMor,\n            erAleneOmOmsorg,\n            annenForelderKanIkkeOppgis,\n            søkerHarMidlertidigOmsorg,\n            familiehendelsesdato,\n            termindato,\n            situasjon,\n            bareFarMedmorHarRett\n        ) ||\n        !kontoSkalBesvares(periodetype, tidsperiode, stønadskontoer, familiehendelsesdato, !søkerErMor) ||\n        farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk(\n            familiehendelsesdato,\n            !søkerErMor,\n            kontotype,\n            erMorForSyk,\n            tidsperiode,\n            situasjon\n        )\n    ) {\n        return false;\n    }\n\n    if (\n        !erAleneOmOmsorg &&\n        (kontotype === StønadskontoType.Fellesperiode || kontotype === StønadskontoType.Foreldrepenger)\n    ) {\n        if (ønskerFlerbarnsdager || samtidigUttak || (erMorForSyk && kontotype === StønadskontoType.Fellesperiode)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    return false;\n};\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport dayjs from 'dayjs';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\n\nconst kontoSkalBesvares = (\n    periodetype: Periodetype,\n    tidsperiode: TidsperiodeDate,\n    stønadskontoer: StønadskontoUttak[],\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean\n): boolean => {\n    if (\n        !isValidTidsperiode(tidsperiode) ||\n        stønadskontoer.length === 0 ||\n        (andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n            periodetype === Periodetype.Uttak &&\n            erFarEllerMedmor &&\n            dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'day'))\n    ) {\n        return false;\n    }\n\n    return true;\n};\n\nexport default kontoSkalBesvares;\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport { erFarMedmorSinWLBTidsperiodeRundtFødsel } from 'app/utils/wlbUtils';\nimport dayjs from 'dayjs';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\n\nexport const uttakRundtFødselÅrsakSpørsmålSkalBesvares = (\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    tidsperiode: TidsperiodeDate,\n    søkerErFarEllerMedmor: boolean,\n    erAleneOmOmsorg: boolean,\n    annenForelderKanIkkeOppgis: boolean,\n    søkerHarMidlertidigOmsorg: boolean,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n    bareFarMedmorHarRett: boolean\n): boolean => {\n    if (\n        erAleneOmOmsorg ||\n        annenForelderKanIkkeOppgis ||\n        søkerHarMidlertidigOmsorg ||\n        !søkerErFarEllerMedmor ||\n        bareFarMedmorHarRett ||\n        !andreAugust2022ReglerGjelder(familiehendelsesdato) ||\n        situasjon !== 'fødsel' ||\n        dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'day')\n    ) {\n        return false;\n    }\n\n    if (periodetype === Periodetype.Uttak) {\n        if (\n            erFarMedmorSinWLBTidsperiodeRundtFødsel(\n                tidsperiode,\n                familiehendelsesdato,\n                periodetype,\n                konto,\n                søkerErFarEllerMedmor,\n                termindato,\n                situasjon\n            )\n        ) {\n            return true;\n        }\n        return false;\n    }\n    return false;\n};\n\nexport default uttakRundtFødselÅrsakSpørsmålSkalBesvares;\n"],"names":["OppsummeringsPunkt","_ref","title","visible","children","React","Block","padBottom","Element","InnholdMedLedetekst","ledetekst","className","Array","isArray","hasListOfChildren","props","map","child","Normaltekst","key","guid","KompleksFeltoppsummering","concat","OppsummeringAvDokumentasjon","vedlegg","intl","useIntl","intlUtils","filter","a","isAttachmentWithError","length","renderListOfAttachmentPreviewLinks","url","id","filename","Lenke","href","target","EtikettBase","type","AnnenForelderOppsummering","annenForelder","søker","søkerrolle","barn","farMedmorErAleneOmOmsorg","erFarEllerMedmor","isFarEllerMedmor","dokumentasjonAvAleneomsorg","isAnnenForelderIkkeOppgitt","isAnnenForelderOppgitt","fornavn","etternavn","fnr","erAleneOmOmsorg","FormattedMessage","navn","harRettPåForeldrepengerINorge","harOppholdtSegIEØS","harRettPåForeldrepengerIEØS","erUfør","BarnAdoptertIUtlandetDetaljer","isAdoptertStebarn","adoptertIUtlandet","hasValue","ankomstdato","formatDate","getTerminEllerFødselTittel","BarnType","BarnOppsummering","getAntallBarnTekst","antallBarn","getTerminEllerFødselsdato","isUfødtBarn","termindato","fødselsdatoer","isAdoptertAnnetBarn","adopsjonsdato","OppsummeringsPanel","bem","bemUtils","EkspanderbartPanel","block","tittel","element","KvinneIkon","width","height","role","viewBox","display","version","xmlns","xmlnsXlink","stroke","strokeWidth","fill","fillRule","transform","cx","cy","r","d","MannIkon","xlinkHref","Personalia","søkerinfo","person","getKjønnFromFnrString","Undertittel","UtenlandsoppholdOppsummeringListe","utenlandsopphold","tidligereOpphold","opphold","land","tidsperiode","fom","tom","countries","erAdoptertBarn","UtenlandsoppholdOppsummering","informasjonOmUtenlandsopphold","senereOpphold","erINorgePåFamiliehendelsedato","getErINorgePåFamiliehendelsedato","familiehendelsedato","erINorge","forEach","tidOpphold","doesTidsperiodeContainDate","senOpphold","getFamiliehendelsedato","iNorgeSiste12Mnd","UtenlandsoppholdListe","iNorgeNeste12Mnd","OppsummeringFormField","initialOppsummeringValues","_defineProperty","harGodkjentOppsummering","getInitialOppsummeringValues","OppsummeringFormComponents","getTypedFormComponents","validateHarGodkjentOppsummering","value","AnnenInntektDetaljer","annenInntekt","AnnenInntektType","jobbIUtlandetInntekt","arbeidsgiverNavn","_ref2","InntekterTabell","list","l","headerVenstre","headerHøyre","content","AndreInntekterOppsummering","_useSøknad$søker","useSøknad","harHattAnnenInntektSiste10Mnd","andreInntekterSiste10Mnd","toLowerCase","ISOStringToDate","pågående","FrilansOppsummering","frilansInformasjon","harJobbetSomFrilansSiste10Mnd","oppstart","jobberFremdelesSomFrilans","driverFosterhjem","harJobbetForNærVennEllerFamilieSiste10Mnd","oppdragForNæreVennerEllerFamilieSiste10Mnd","margin","navnPåArbeidsgiver","Næringsdetaljer","næring","næringstyper","organisasjonsnummer","næringsinntekt","registrertINorge","registrertILand","harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene","hattVarigEndringAvNæringsinntektSiste4Kalenderår","endringAvNæringsinntektInformasjon","harRegnskapsfører","regnskapsfører","næringstype","join","dato","næringsinntektEtterEndring","forklaring","telefonnummer","erNærVennEllerFamilie","SelvstendigNæringsdrivendeOppsummering","selvstendigNæringsdrivendeInformasjon","harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd","navnPåNæringen","ArbeidsforholdOgAndreInntekterOppsummering","arbeidsforhold","useSøkerinfo","harArbeidsforhold","undefined","HarIkkeArbeidsforhold","HarArbeidsforhold","Feltoppsummering","feltnavn","verdi","List","data","renderElement","dataObject","i","Oppsummeringslisteelement","venstrestiltTekst","_ref$venstrestiltTag","venstrestiltTag","høyrestiltTekst","kompakt","classNames","tag","Oppsummeringsliste","elementProps","_extends","getÅrsakTekst","messageValues","årsak","intlKeyPrefix","Periodetype","Overføringsperiodedetaljer","periode","navnPåForeldre","periodeErNyEllerEndret","navnAnnenForelder","getNavnPåAnnenForelder","konto","StønadskontoType","farMedmor","mor","dokumentasjonBehøvesForOverføringsperiode","getMorsAktivitetTekst","aktivitet","MorsAktivitet","assertUnreachable","MorsAktivitetDetaljer","morsAktivitet","dokumentasjonAvMorsAktivitet","visOppsummeringAvDokumentasjon","Uttaksperiodedetaljer","registrerteArbeidsforhold","søkerErFarEllerMedmor","morsAktivitetIPerioden","ønskerSamtidigUttak","gradert","stillingsprosent","orgnumre","arbeidsformer","ønskerFlerbarnsdager","arbeidsformTekst","getArbeidsformTekst","arbeidstakerTekster","arbeidsformerTekster","orgnr","getValgtArbeidsgiverNavn","valgtArbeidsgiver","find","arbeidsgiverId","arbeidsgiverIdType","arbeidsform","Arbeidsform","erDeltUttakINorge","shouldPeriodeHaveAttachment","Utsettelsesperiodedetaljer","bekrefterArbeidIPerioden","bekreftErIArbeidSvar","UtsettelseÅrsakType","currentVedlegg","AttachmentType","UttaksplanOppsummeringsliste","perioder","begrunnelseForSenEndring","eksisterendeUttaksplan","familiehendelsesdato","situasjon","ønskerJustertUttakVedFødsel","getStønadskontoNavnFromKonto","getStønadskontoNavn","getUttaksperiodeNavn","appendPeriodeNavnHvisUttakRundtFødselFarMedmor","formatTidsperiode","formatertTidsperiode","uttaksperiodeKanJusteresVedFødsel","createOppsummeringslisteelementProps","finnesPeriodeIOpprinneligPlan","createOppsummeringslisteelementPropsForUttaksperiode","arguments","createOppsummeringslisteelementPropsForUtsettelsesperiode","createOppsummeringslisteelementPropsForOverføringsperiode","kontonavn","createOppsummeringslisteelementPropsForOppholdsperiode","getPeriodeTittel","oppsummeringslisteData","periodeliste","v","begrunnelseForSenEndringList","createOppsummeringslisteelementPropsForBegrunnelseForSenEndring","begrunnelse","beskrivelse","ekstraInformasjon","tekst","beskrivTilleggsopplysning","UttaksplanOppsummering","dekningsgrad","antallUkerUttaksplan","rest","_objectWithoutProperties","_excluded","dekningsgradTekst","Dekningsgrad","antallUker","Oppsummering","_useForeldrepengesøkn","useForeldrepengesøknadContext","dispatch","state","navigate","useNavigate","kvittering","eksisterendeSak","_useState2","_slicedToArray","useState","submitError","setSubmitError","_useState4","formSubmitted","setFormSubmitted","_useState6","isSendingSøknad","setIsSendingSøknad","_useSøknad","søkersituasjon","uttaksplan","tilleggsopplysninger","erEndringssøknad","onFortsettSøknadSenere","useFortsettSøknadSenere","søknad","onAvbrytSøknad","useAvbrytSøknad","getErSøkerFarEllerMedmor","rolle","getNavnPåForeldre","antallUkerIUttaksplan","getFarMedmorErAleneOmOmsorg","getTermindato","erklæringOmAnnenForelderInformert","egenerklæringTekst","cleanedSøknad","useMemo","getSøknadsdataForInnsending","perioderSomSkalSendesInn","endringstidspunkt","useSaveLoadedRoute","SøknadRoutes","useEffect","Error","Api","then","response","actionCreator","error","status","redirectToLogin","sendErrorMessageToSentry","messages","includes","FOR_MANGE_VEDLEGG_ERROR","submitErrorCallId","getErrorCallId","callIdForBruker","UKJENT_UUID","slice","FEIL_VED_INNSENDING","submitKnappTekst","FormikWrapper","initialValues","onSubmit","handleSubmit","values","renderForm","Form","includeButtons","Step","bannerTitle","backLinkHref","getPreviousStepHrefEndringssøknad","getPreviousStepHref","activeStepId","pageTitle","stepTitle","onCancel","onContinueLater","steps","stepConfig","Veilederpanel","fargetema","svg","VeilederNormal","transparentBackground","ConfirmationCheckbox","name","label","validate","style","textAlign","Hovedknapp","disabled","spinner","createMissingAttachment","index","skjemanummer","periodeId","isAttachmentMissing","attachments","dokumentasjonBehøvesForUtsettelsesperiode","aktivitetskravMorUtil","dokumentasjonBehøvesForUttaksperiode","hasPeriodeMissingAttachment","søknadsinfo","_periode$vedlegg","p","innsendingsType","InnsendingsType","findMissingAttachmentsForPerioder","_step","missingAttachments","_iterator","_createForOfIteratorHelper","s","n","done","indexOf","isUtsettelsesperiode","isUttaksperiode","missingAttachmentForAktivitetskrav","push","getMorsAktivitetSkjemanummer","Skjemanummer","morErUfør","morHarRett","isOverføringsperiode","OverføringÅrsakType","erMorForSyk","err","e","f","harIkkeAktivitetskrav","harMorAktivitetskrav","erÅrsakSykdomEllerInstitusjonsopphold","_periode$vedlegg2","søkerErMor","ønskerFlerBarnsdager","erSamtidigUttak","morErForSyk","aktivitetskravMorSkalBesvares","søkerErAleneOmOmsorg","kanIkkeOppgis","søkerHarMidlertidigOmsorg","stønadskontoer","skalBesvaresVedUtsettelse","reglerFørFørsteOkt2021","dayjs","Date","isBefore","annenForelderErUfør","annenForelderHarRett","getMorsAktivitet","aktivitetskravMorValue","erMorForSykValue","TIL_SAKSBEHANDLER","tilleggsopplysning","beskrivelseAvOpplysning","ekstraMessageId","cleanupInvisibleCharsFromTilleggsopplysninger","_objectSpread","replaceInvisibleCharsWithSpace","farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk","famDato","sisteUttaksdag6UkerEtterFødsel","getSisteUttaksdag6UkerEtterFødsel","isSameOrBefore","samtidigUttak","periodetype","kontotype","annenForelderKanIkkeOppgis","bareFarMedmorHarRett","uttakRundtFødselÅrsakSpørsmålSkalBesvares","kontoSkalBesvares","isValidTidsperiode","andreAugust2022ReglerGjelder","erFarMedmorSinWLBTidsperiodeRundtFødsel"],"sourceRoot":""}