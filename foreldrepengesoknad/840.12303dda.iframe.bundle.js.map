{"version":3,"file":"840.12303dda.iframe.bundle.js","mappings":"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","sources":["webpack://foreldrepengesoknad/./src/app/types/Dekningsgrad.ts","webpack://foreldrepengesoknad/./src/app/types/DekningsgradDTO.ts","webpack://foreldrepengesoknad/./src/app/types/RettighetType.ts","webpack://foreldrepengesoknad/./src/app/types/UttakArbeidType.ts","webpack://foreldrepengesoknad/./src/app/types/OppholdÅrsakTypeDTO.ts","webpack://foreldrepengesoknad/./src/app/types/FamiliehendelseType.ts","webpack://foreldrepengesoknad/./src/app/utils/getFamiliehendelseType.ts","webpack://foreldrepengesoknad/./src/app/types/UtsettelseÅrsakTypeDTO.ts","webpack://foreldrepengesoknad/./src/uttaksplan/types/PeriodeResultatÅrsak.ts","webpack://foreldrepengesoknad/./src/app/utils/mapSaksperioderTilUttaksperioder.ts","webpack://foreldrepengesoknad/./src/app/utils/eksisterendeSakUtils.ts","webpack://foreldrepengesoknad/./src/uttaksplan/builder/leggTilPeriode.ts","webpack://foreldrepengesoknad/./src/uttaksplan/types/PeriodeHullÅrsak.ts","webpack://foreldrepengesoknad/./src/uttaksplan/builder/uttaksplanbuilderUtils.ts"],"sourcesContent":["export enum Dekningsgrad {\n    ÅTTI_PROSENT = '80',\n    HUNDRE_PROSENT = '100',\n}\n","export enum DekningsgradDTO {\n    ÅTTI_PROSENT = 'ÅTTI',\n    HUNDRE_PROSENT = 'HUNDRE',\n}\n","export enum RettighetType {\n    BARE_SØKER_RETT = 'BARE_SØKER_RETT',\n    ALENEOMSORG = 'ALENEOMSORG',\n    BEGGE_RETT = 'BEGGE_RETT',\n}\n","export enum UttakArbeidType {\n    'ORDINÆRT_ARBEID' = 'ORDINÆRT_ARBEID',\n    'SELVSTENDIG_NÆRINGSDRIVENDE' = 'SELVSTENDIG_NÆRINGSDRIVENDE',\n    'FRILANS' = 'FRILANS',\n    'ANNET' = 'ANNET',\n}\n","export enum OppholdÅrsakTypeDTO {\n    UttakFellesperiodeAnnenForelder = 'FELLESPERIODE_ANNEN_FORELDER',\n    UttakFedrekvoteAnnenForelder = 'FEDREKVOTE_ANNEN_FORELDER',\n    UttakMødrekvoteAnnenForelder = 'MØDREKVOTE_ANNEN_FORELDER',\n    UttakForeldrepengerAnnenForelder = 'FORELDREPENGER_ANNEN_FORELDER',\n    Ingen = 'INGEN',\n}\n","export enum FamiliehendelseType {\n    'ADOPSJON' = 'ADPSJN',\n    'OMSORGSOVERTAKELSE' = 'OMSRGO',\n    'FØDSEL' = 'FODSL',\n    'TERM' = 'TERM',\n}\n","import { FamiliehendelseType } from 'app/types/FamiliehendelseType';\n\nexport const getFamiliehendelseType = (\n    fødselsdato: string | undefined,\n    termindato: string | undefined,\n    omsorgsovertagelsesdato: string | undefined\n) => {\n    if (omsorgsovertagelsesdato !== undefined) {\n        return FamiliehendelseType.ADOPSJON;\n    } else if (fødselsdato !== undefined) {\n        return FamiliehendelseType.FØDSEL;\n    } else if (termindato !== undefined) {\n        return FamiliehendelseType.TERM;\n    } else {\n        throw new Error('Fødselsdato/ termindato/ omsorgsovertakelsedato mangler');\n    }\n};\n","export enum UtsettelseÅrsakTypeDTO {\n    Ferie = 'LOVBESTEMT_FERIE',\n    Arbeid = 'ARBEID',\n    Sykdom = 'SØKER_SYKDOM',\n    InstitusjonSøker = 'SØKER_INNLAGT',\n    InstitusjonBarnet = 'BARN_INNLAGT',\n    HvØvelse = 'HV_ØVELSE',\n    NavTiltak = 'NAV_TILTAK',\n    Fri = 'FRI',\n}\n","export enum PeriodeResultatÅrsak {\n    AVSLAG_HULL_MELLOM_FORELDRENES_PERIODER = 'AVSLAG_HULL_MELLOM_FORELDRENES_PERIODER',\n    ANNET = 'ANNET',\n}\n","import { guid } from 'nav-frontend-js-utils';\nimport dayjs from 'dayjs';\nimport {\n    AvslåttPeriode,\n    isInfoPeriode,\n    isUttaksperiode,\n    Overføringsperiode,\n    Periode,\n    Periodetype,\n    UtsettelseAnnenPartInfoPeriode,\n    Utsettelsesperiode,\n    UttakAnnenPartInfoPeriode,\n    Uttaksperiode,\n} from 'uttaksplan/types/Periode';\nimport { Perioden } from 'app/steps/uttaksplan-info/utils/Perioden';\nimport { isValidTidsperiode, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { sorterPerioder } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { erUttaksdag, Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { Saksperiode } from 'app/types/Saksperiode';\nimport { Forelder } from 'app/types/Forelder';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { Saksgrunnlag } from 'app/types/Saksgrunnlag';\nimport { getArbeidsformFromUttakArbeidstype } from './eksisterendeSakUtils';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport {\n    convertTidsperiodeToTidsperiodeDate,\n    getRelevantFamiliehendelseDato,\n    tidperiodeOverlapperDato,\n} from './dateUtils';\nimport { UtsettelseÅrsakTypeDTO } from 'app/types/UtsettelseÅrsakTypeDTO';\nimport { FamiliehendelseType } from 'app/types/FamiliehendelseType';\nimport { PeriodeResultatÅrsak } from 'uttaksplan/types/PeriodeResultatÅrsak';\nimport { finnOgSettInnHull, settInnAnnenPartsUttak } from 'uttaksplan/builder/uttaksplanbuilderUtils';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { splittUttaksperiodePåFamiliehendelsesdato, splittPeriodePåDato } from 'uttaksplan/builder/leggTilPeriode';\nimport { PeriodeInfoType } from 'uttaksplan/types/PeriodeInfoType';\nimport { OppholdÅrsakType } from 'uttaksplan/types/OppholdÅrsakType';\n\nconst harUttaksdager = (periode: Periode): boolean => {\n    return Perioden(periode).getAntallUttaksdager() > 0;\n};\n\nconst harGyldigTidsperiode = (periode: Periode): boolean => {\n    return isValidTidsperiode(periode.tidsperiode);\n};\n\nconst slåSammenLikePerioder = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n): Periode[] => {\n    if (perioder.length <= 1) {\n        return perioder;\n    }\n\n    const nyePerioder: Periode[] = [];\n    const infoPerioder = perioder.filter((p) => isInfoPeriode(p));\n    const ordinærePerioder = perioder.filter((p) => !isInfoPeriode(p));\n    const tmp: Periode[] = [...ordinærePerioder, ...infoPerioder];\n    let forrigePeriode: Periode | undefined = { ...tmp[0] };\n\n    tmp.forEach((periode, index) => {\n        if (index === 0) {\n            return;\n        }\n\n        if (forrigePeriode === undefined) {\n            forrigePeriode = periode;\n            return;\n        }\n\n        if (\n            Perioden(forrigePeriode).erLik(periode, false, true) &&\n            Perioden(forrigePeriode).erSammenhengende(periode) &&\n            !dayjs(periode.tidsperiode.fom).isSame(familiehendelsesdato, 'day') &&\n            !(\n                førsteUttaksdagNesteBarnsSak !== undefined &&\n                dayjs(periode.tidsperiode.fom).isSame(førsteUttaksdagNesteBarnsSak, 'day')\n            )\n        ) {\n            forrigePeriode.tidsperiode.tom = periode.tidsperiode.tom;\n            return;\n        } else {\n            nyePerioder.push(forrigePeriode);\n        }\n\n        forrigePeriode = periode;\n    });\n\n    nyePerioder.push(forrigePeriode);\n\n    return nyePerioder.sort(sorterPerioder);\n};\n\nconst korrigerTidsperiodeTilGyldigUttaksdag = (periode: Periode): Periode => {\n    const { fom, tom } = periode.tidsperiode;\n    const fomOk = erUttaksdag(fom);\n    const tomOk = erUttaksdag(tom);\n    if (fomOk && tomOk) {\n        return periode;\n    } else if (!fomOk && !tomOk) {\n        return {\n            ...periode,\n            tidsperiode: {\n                fom: Uttaksdagen(fom).neste(),\n                tom: Uttaksdagen(tom).forrige(),\n            },\n        };\n    } else if (!fomOk && tomOk) {\n        return {\n            ...periode,\n            tidsperiode: {\n                fom: Uttaksdagen(fom).neste(),\n                tom,\n            },\n        };\n    } else {\n        return {\n            ...periode,\n            tidsperiode: {\n                fom,\n                tom: Uttaksdagen(tom).forrige(),\n            },\n        };\n    }\n};\n\nconst getForelderForPeriode = (saksperiode: Saksperiode, søkerErFarEllerMedmor: boolean): Forelder => {\n    if (saksperiode.gjelderAnnenPart) {\n        return søkerErFarEllerMedmor ? Forelder.mor : Forelder.farMedmor;\n    }\n    return søkerErFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n};\n\nexport const getUtsettelseÅrsakFromSaksperiode = (\n    årsak: UtsettelseÅrsakTypeDTO | undefined\n): UtsettelseÅrsakType | undefined => {\n    switch (årsak) {\n        case UtsettelseÅrsakTypeDTO.Arbeid:\n            return UtsettelseÅrsakType.Arbeid;\n        case UtsettelseÅrsakTypeDTO.Ferie:\n            return UtsettelseÅrsakType.Ferie;\n        case UtsettelseÅrsakTypeDTO.InstitusjonBarnet:\n            return UtsettelseÅrsakType.InstitusjonBarnet;\n        case UtsettelseÅrsakTypeDTO.InstitusjonSøker:\n            return UtsettelseÅrsakType.InstitusjonSøker;\n        case UtsettelseÅrsakTypeDTO.Sykdom:\n            return UtsettelseÅrsakType.Sykdom;\n        case UtsettelseÅrsakTypeDTO.HvØvelse:\n            return UtsettelseÅrsakType.HvØvelse;\n        case UtsettelseÅrsakTypeDTO.NavTiltak:\n            return UtsettelseÅrsakType.NavTiltak;\n        default:\n            return undefined;\n    }\n};\n\nconst getOppholdÅrsakFromSaksperiode = (saksperiode: Saksperiode): OppholdÅrsakType | undefined => {\n    switch (saksperiode.kontoType) {\n        case StønadskontoType.Fedrekvote:\n            return OppholdÅrsakType.UttakFedrekvoteAnnenForelder;\n        case StønadskontoType.Fellesperiode:\n            return OppholdÅrsakType.UttakFellesperiodeAnnenForelder;\n        case StønadskontoType.Mødrekvote:\n            return OppholdÅrsakType.UttakMødrekvoteAnnenForelder;\n        case StønadskontoType.Foreldrepenger:\n            return OppholdÅrsakType.UttakForeldrepengerAnnenForelder;\n        case StønadskontoType.ForeldrepengerFørFødsel:\n            return OppholdÅrsakType.ForeldrepengerFørFødsel;\n        default:\n            return undefined;\n    }\n};\n\nconst beregnSamtidigUttaksProsent = (\n    egenProsent: number | undefined,\n    andrePartsProsent: number | undefined,\n    graderingsprosent: number | undefined\n): string | undefined => {\n    if (egenProsent) {\n        return egenProsent.toString();\n    }\n\n    if (andrePartsProsent) {\n        return graderingsprosent ? (100 - graderingsprosent).toString() : '100';\n    }\n\n    return undefined;\n};\n\nexport const getKontotypeBareFarHarRett = (periodeTrekkerMinsterett: boolean): StønadskontoType => {\n    return periodeTrekkerMinsterett ? StønadskontoType.AktivitetsfriKvote : StønadskontoType.Foreldrepenger;\n};\n\nconst getErMorForSyk = (\n    erFarEllerMedmor: boolean,\n    saksperiode: Saksperiode,\n    familiehendelsesdato: string,\n    konto: StønadskontoType | undefined\n) => {\n    if (\n        erFarEllerMedmor &&\n        !saksperiode.flerbarnsdager &&\n        !saksperiode.samtidigUttak &&\n        dayjs(saksperiode.periode.fom).isBefore(dayjs(familiehendelsesdato).add(6, 'weeks'), 'day') &&\n        konto !== StønadskontoType.AktivitetsfriKvote\n    ) {\n        if (saksperiode.morsAktivitet !== MorsAktivitet.Uføre) {\n            return true;\n        }\n    }\n\n    return undefined;\n};\n\nexport const mapUttaksperiodeFromSaksperiode = (\n    saksperiode: Saksperiode,\n    grunnlag: Saksgrunnlag,\n    innvilgedePerioder: Saksperiode[]\n): Periode => {\n    const gradert = saksperiode.gradering !== undefined && saksperiode.resultat.innvilget;\n    const tidsperiodeDate = convertTidsperiodeToTidsperiodeDate(saksperiode.periode);\n    const erFarEllerMedmorOgKunSøkerHarRett =\n        grunnlag.søkerErFarEllerMedmor &&\n        !grunnlag.morHarRett &&\n        !grunnlag.farMedmorErAleneOmOmsorg &&\n        !grunnlag.harAnnenForelderTilsvarendeRettEØS;\n\n    if (saksperiode.gjelderAnnenPart) {\n        return mapAnnenPartInfoPeriodeFromSaksperiode(saksperiode, grunnlag.søkerErFarEllerMedmor, innvilgedePerioder);\n    }\n\n    const annenPartSamtidigUttakPeriode: Saksperiode | undefined =\n        innvilgedePerioder !== undefined\n            ? innvilgedePerioder.find(\n                  (ip) =>\n                      (Tidsperioden(convertTidsperiodeToTidsperiodeDate(ip.periode)).erLik(tidsperiodeDate) ||\n                          Tidsperioden(convertTidsperiodeToTidsperiodeDate(ip.periode)).overlapper(tidsperiodeDate)) &&\n                      ip.guid !== saksperiode.guid\n              )\n            : undefined;\n\n    let samtidigUttakProsentAnnenPart;\n\n    if (annenPartSamtidigUttakPeriode) {\n        samtidigUttakProsentAnnenPart = annenPartSamtidigUttakPeriode.samtidigUttak;\n    }\n\n    const samtidigUttakProsent = beregnSamtidigUttaksProsent(\n        saksperiode.samtidigUttak,\n        samtidigUttakProsentAnnenPart,\n        saksperiode.gradering?.arbeidstidprosent\n    );\n\n    const { termindato, fødselsdato, omsorgsovertakelsesdato } = grunnlag;\n\n    const familiehendelseDato = getRelevantFamiliehendelseDato(termindato, fødselsdato, omsorgsovertakelsesdato);\n    const kontoType = erFarEllerMedmorOgKunSøkerHarRett\n        ? getKontotypeBareFarHarRett(saksperiode.resultat.trekkerMinsterett)\n        : saksperiode.kontoType;\n    const uttaksperiode: Uttaksperiode = {\n        id: guid(),\n        type: Periodetype.Uttak,\n        konto: kontoType!,\n        tidsperiode: tidsperiodeDate,\n        forelder: getForelderForPeriode(saksperiode, grunnlag.søkerErFarEllerMedmor),\n        ønskerSamtidigUttak: saksperiode.samtidigUttak !== undefined,\n        gradert,\n        samtidigUttakProsent,\n        ønskerFlerbarnsdager: grunnlag.antallBarn > 1 ? saksperiode.flerbarnsdager : undefined,\n        stillingsprosent: gradert ? saksperiode.gradering!.arbeidstidprosent.toString() : undefined,\n        arbeidsformer: gradert\n            ? [getArbeidsformFromUttakArbeidstype(saksperiode.gradering!.aktivitet.type)]\n            : undefined,\n        orgnumre:\n            gradert && saksperiode.gradering!.aktivitet.arbeidsgiver !== undefined\n                ? [saksperiode.gradering!.aktivitet.arbeidsgiver.id]\n                : undefined,\n        morsAktivitetIPerioden: saksperiode.morsAktivitet,\n        erMorForSyk: getErMorForSyk(grunnlag.søkerErFarEllerMedmor, saksperiode, familiehendelseDato, kontoType),\n        angittAvAnnenPart: saksperiode.angittAvAnnenPart,\n    };\n\n    return uttaksperiode;\n};\n\nconst mapUtsettelseperiodeFromSaksperiode = (saksperiode: Saksperiode, erFarEllerMedmor: boolean): Periode => {\n    if (saksperiode.gjelderAnnenPart) {\n        return mapAnnenPartInfoPeriodeFromSaksperiode(saksperiode, erFarEllerMedmor);\n    }\n\n    const utsettelsesperiode: Utsettelsesperiode = {\n        id: guid(),\n        type: Periodetype.Utsettelse,\n        årsak: getUtsettelseÅrsakFromSaksperiode(saksperiode.utsettelseÅrsak)!,\n        tidsperiode: convertTidsperiodeToTidsperiodeDate(saksperiode.periode),\n        forelder: getForelderForPeriode(saksperiode, erFarEllerMedmor),\n        erArbeidstaker: false,\n        morsAktivitetIPerioden: saksperiode.morsAktivitet,\n    };\n\n    return utsettelsesperiode;\n};\n\nconst mapInfoPeriodeFromAvslåttSaksperiode = (saksperiode: Saksperiode, erFarEllerMedmor: boolean): AvslåttPeriode => {\n    const avslåttPeriode: AvslåttPeriode = {\n        id: guid(),\n        type: Periodetype.Info,\n        infotype: PeriodeInfoType.avslåttPeriode,\n        tidsperiode: convertTidsperiodeToTidsperiodeDate(saksperiode.periode),\n        avslåttPeriodeType: saksperiode.utsettelseÅrsak !== undefined ? Periodetype.Utsettelse : Periodetype.Uttak,\n        kontoType: saksperiode.kontoType,\n        forelder: getForelderForPeriode(saksperiode, erFarEllerMedmor),\n        overskrives: true,\n        visPeriodeIPlan: true,\n    };\n    return avslåttPeriode;\n};\n\nconst mapAnnenPartInfoPeriodeFromSaksperiode = (\n    saksperiode: Saksperiode,\n    erFarEllerMedmor: boolean,\n    innvilgedePerioder?: Saksperiode[]\n): UttakAnnenPartInfoPeriode | UtsettelseAnnenPartInfoPeriode => {\n    const tidsperiodeDate = convertTidsperiodeToTidsperiodeDate(saksperiode.periode);\n\n    if (saksperiode.utsettelseÅrsak !== undefined && saksperiode.resultat.innvilget === true) {\n        return {\n            type: Periodetype.Info,\n            infotype: PeriodeInfoType.utsettelseAnnenPart,\n            id: guid(),\n            årsak: getUtsettelseÅrsakFromSaksperiode(saksperiode.utsettelseÅrsak)!,\n            tidsperiode: tidsperiodeDate,\n            forelder: getForelderForPeriode(saksperiode, erFarEllerMedmor),\n            overskrives: true,\n            visPeriodeIPlan: true,\n        };\n    }\n\n    const skalVises =\n        innvilgedePerioder !== undefined &&\n        !innvilgedePerioder.some(\n            (ip) =>\n                (Tidsperioden(convertTidsperiodeToTidsperiodeDate(ip.periode)).erLik(tidsperiodeDate) ||\n                    Tidsperioden(convertTidsperiodeToTidsperiodeDate(ip.periode)).overlapper(tidsperiodeDate)) &&\n                ip.guid !== saksperiode.guid\n        );\n    const årsak = getOppholdÅrsakFromSaksperiode(saksperiode);\n\n    const annenPartSamtidigUttakPeriode: Saksperiode | undefined =\n        innvilgedePerioder !== undefined\n            ? innvilgedePerioder.find(\n                  (ip) =>\n                      (Tidsperioden(convertTidsperiodeToTidsperiodeDate(ip.periode)).erLik(tidsperiodeDate) ||\n                          Tidsperioden(convertTidsperiodeToTidsperiodeDate(ip.periode)).overlapper(tidsperiodeDate)) &&\n                      ip.guid !== saksperiode.guid\n              )\n            : undefined;\n    let samtidigUttakProsentAnnenPart;\n\n    if (annenPartSamtidigUttakPeriode) {\n        samtidigUttakProsentAnnenPart = annenPartSamtidigUttakPeriode.samtidigUttak;\n    }\n\n    const samtidigUttakProsent = beregnSamtidigUttaksProsent(\n        saksperiode.samtidigUttak,\n        samtidigUttakProsentAnnenPart,\n        saksperiode.gradering?.arbeidstidprosent\n    );\n\n    return {\n        type: Periodetype.Info,\n        infotype: PeriodeInfoType.uttakAnnenPart,\n        id: guid(),\n        årsak: årsak!,\n        tidsperiode: tidsperiodeDate,\n        forelder: getForelderForPeriode(saksperiode, erFarEllerMedmor),\n        overskrives: true,\n        gradert: saksperiode.gradering !== undefined ? true : false,\n        ønskerSamtidigUttak: samtidigUttakProsent !== undefined,\n        samtidigUttakProsent: samtidigUttakProsent,\n        stillingsprosent:\n            saksperiode.gradering !== undefined ? saksperiode.gradering.arbeidstidprosent.toString() : undefined,\n        visPeriodeIPlan: skalVises,\n    };\n};\n\nconst mapOverføringsperiodeFromSaksperiode = (\n    saksperiode: Saksperiode,\n    erFarEllerMedmor: boolean\n): Overføringsperiode => {\n    return {\n        id: guid(),\n        forelder: getForelderForPeriode(saksperiode, erFarEllerMedmor),\n        konto: saksperiode.kontoType!,\n        tidsperiode: convertTidsperiodeToTidsperiodeDate(saksperiode.periode),\n        type: Periodetype.Overføring,\n        årsak: saksperiode.overføringÅrsak!,\n    };\n};\n\nconst mapPeriodeFromSaksperiode = (\n    saksperiode: Saksperiode,\n    grunnlag: Saksgrunnlag,\n    innvilgedePerioder: Saksperiode[]\n): Periode => {\n    if (saksperiode.gjelderAnnenPart) {\n        return mapAnnenPartInfoPeriodeFromSaksperiode(saksperiode, grunnlag.søkerErFarEllerMedmor, innvilgedePerioder);\n    }\n\n    if (!saksperiode.resultat.innvilget) {\n        return mapInfoPeriodeFromAvslåttSaksperiode(saksperiode, grunnlag.søkerErFarEllerMedmor);\n    }\n\n    if (saksperiode.utsettelseÅrsak !== undefined) {\n        return mapUtsettelseperiodeFromSaksperiode(saksperiode, grunnlag.søkerErFarEllerMedmor);\n    }\n\n    if (saksperiode.overføringÅrsak !== undefined) {\n        return mapOverføringsperiodeFromSaksperiode(saksperiode, grunnlag.søkerErFarEllerMedmor);\n    }\n\n    return mapUttaksperiodeFromSaksperiode(saksperiode, grunnlag, innvilgedePerioder);\n};\n\nexport const gyldigeSaksperioder = (saksperiode: Saksperiode) => {\n    if (saksperiode.resultat.innvilget) return true;\n\n    if (saksperiode.gjelderAnnenPart) {\n        return false;\n    }\n    if (\n        saksperiode.resultat.årsak !== PeriodeResultatÅrsak.AVSLAG_HULL_MELLOM_FORELDRENES_PERIODER &&\n        saksperiode.resultat.trekkerDager === true\n    ) {\n        return true;\n    }\n    return false;\n};\n\nexport const getPerioderSplittetOverFødselOgNesteBarnsFørsteStønadsdag = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n): Periode[] => {\n    const nyePerioder = [] as Periode[];\n    perioder.forEach((p) => {\n        if (tidperiodeOverlapperDato(p.tidsperiode, familiehendelsesdato) && isUttaksperiode(p)) {\n            const splittedePerioder = splittUttaksperiodePåFamiliehendelsesdato(p, familiehendelsesdato);\n            splittedePerioder.forEach((periode) => nyePerioder.push(periode));\n        } else if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(p.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const splittedePerioder = splittPeriodePåDato(p, førsteUttaksdagNesteBarnsSak);\n            splittedePerioder.forEach((periode) => nyePerioder.push(periode));\n        } else {\n            nyePerioder.push(p);\n        }\n    });\n    return nyePerioder;\n};\n\nconst mapSaksperioderTilUttaksperioder = (\n    saksperioder: Saksperiode[],\n    grunnlag: Saksgrunnlag,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n): Periode[] => {\n    const innvilgedePerioder = saksperioder.filter(gyldigeSaksperioder);\n    const perioder = innvilgedePerioder.map((periode) =>\n        mapPeriodeFromSaksperiode(periode, grunnlag, innvilgedePerioder)\n    );\n    const familiehendelsesdato = new Date(grunnlag.familiehendelseDato);\n\n    const splittedePerioder = getPerioderSplittetOverFødselOgNesteBarnsFørsteStønadsdag(\n        perioder,\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak\n    );\n\n    const sammenslåddePerioder: Periode[] = slåSammenLikePerioder(\n        splittedePerioder\n            .sort(sorterPerioder)\n            .filter(harUttaksdager)\n            .map(korrigerTidsperiodeTilGyldigUttaksdag)\n            .filter(harGyldigTidsperiode)\n            .filter(harUttaksdager),\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak\n    );\n\n    const kunFarMedmorHarRett =\n        !grunnlag.morHarRett && grunnlag.farMedmorHarRett && !grunnlag.harAnnenForelderTilsvarendeRettEØS;\n    const erAdopsjon = grunnlag.familiehendelseType === FamiliehendelseType.ADOPSJON;\n\n    const perioderUtenAnnenPartsSamtidigUttak = sammenslåddePerioder.filter((p) => !isInfoPeriode(p));\n\n    const annenPartsUttak = sammenslåddePerioder.filter((p) => isInfoPeriode(p));\n    const harAktivitetskravIPeriodeUtenUttak =\n        !grunnlag.erDeltUttak && kunFarMedmorHarRett && !grunnlag.farMedmorErAleneOmOmsorg;\n    const perioderUtenAnnenPartsSamtidigUttakMedHull = finnOgSettInnHull(\n        perioderUtenAnnenPartsSamtidigUttak,\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        kunFarMedmorHarRett,\n        grunnlag.søkerErFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak\n    );\n\n    return finnOgSettInnHull(\n        settInnAnnenPartsUttak(\n            perioderUtenAnnenPartsSamtidigUttakMedHull,\n            annenPartsUttak,\n            familiehendelsesdato,\n            førsteUttaksdagNesteBarnsSak\n        ),\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        kunFarMedmorHarRett,\n        grunnlag.søkerErFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak\n    );\n};\n\nexport default mapSaksperioderTilUttaksperioder;\n","import { guid } from 'nav-frontend-js-utils';\nimport { UttakArbeidType } from 'app/types/UttakArbeidType';\nimport { Arbeidsform, isInfoPeriode } from 'uttaksplan/types/Periode';\nimport { OppholdÅrsakTypeDTO } from 'app/types/OppholdÅrsakTypeDTO';\nimport { EksisterendeSak } from 'app/types/EksisterendeSak';\nimport { Saksperiode } from 'app/types/Saksperiode';\nimport { Saksgrunnlag } from 'app/types/Saksgrunnlag';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport { getFamiliehendelseType } from './getFamiliehendelseType';\nimport {\n    convertTidsperiodeToTidsperiodeDate,\n    getEldsteDato,\n    getRelevantFamiliehendelseDato,\n    ISOStringToDate,\n} from './dateUtils';\nimport { SaksperiodeDTO } from 'app/types/SaksperiodeDTO';\nimport mapSaksperioderTilUttaksperioder from './mapSaksperioderTilUttaksperioder';\nimport { Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Søkerinfo } from 'app/types/Søkerinfo';\nimport { Søkerrolle } from 'app/types/Søkerrolle';\nimport { Søknad } from 'app/context/types/Søknad';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport Søker from 'app/context/types/Søker';\nimport Person, { RegistrertAnnenForelder, RegistrertBarn } from 'app/types/Person';\nimport { Situasjon } from 'app/types/Situasjon';\nimport Barn, { BarnType, isAdoptertBarn, isFødtBarn, isUfødtBarn } from 'app/context/types/Barn';\nimport { FamiliehendelseType } from 'app/types/FamiliehendelseType';\nimport { DekningsgradDTO } from 'app/types/DekningsgradDTO';\nimport { RettighetType } from 'app/types/RettighetType';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { AnnenPartVedtakDTO } from 'app/types/AnnenPartVedtakDTO';\nimport { dateToISOString } from '@navikt/sif-common-formik/lib';\nimport { SelectableBarn } from 'app/pages/velkommen/components/barnVelger/BarnVelger';\nimport Søkersituasjon from 'app/context/types/Søkersituasjon';\nimport { OppholdÅrsakType } from 'uttaksplan/types/OppholdÅrsakType';\nimport { intlUtils } from '@navikt/fp-common';\nimport { IntlShape } from 'react-intl';\nimport { Sak } from 'app/types/Sak';\nimport PersonFnrDTO from 'app/types/PersonFnrDTO';\nimport { getErDatoInnenEnDagFraAnnenDato } from 'app/pages/velkommen/velkommenUtils';\n\nexport const getArbeidsformFromUttakArbeidstype = (arbeidstype: UttakArbeidType): Arbeidsform => {\n    switch (arbeidstype) {\n        case UttakArbeidType.SELVSTENDIG_NÆRINGSDRIVENDE:\n            return Arbeidsform.selvstendignæringsdrivende;\n        case UttakArbeidType.FRILANS:\n            return Arbeidsform.frilans;\n        default:\n            return Arbeidsform.arbeidstaker;\n    }\n};\n\nconst getStønadskontoTypeFromOppholdÅrsakType = (årsak: OppholdÅrsakTypeDTO): StønadskontoType | undefined => {\n    switch (årsak) {\n        case OppholdÅrsakTypeDTO.UttakFedrekvoteAnnenForelder:\n            return StønadskontoType.Fedrekvote;\n        case OppholdÅrsakTypeDTO.UttakFellesperiodeAnnenForelder:\n            return StønadskontoType.Fellesperiode;\n        case OppholdÅrsakTypeDTO.UttakMødrekvoteAnnenForelder:\n            return StønadskontoType.Mødrekvote;\n        default:\n            return undefined;\n    }\n};\n\nconst mapOppholdÅrsakType = (årsak: OppholdÅrsakTypeDTO | undefined): OppholdÅrsakType | undefined => {\n    switch (årsak) {\n        case OppholdÅrsakTypeDTO.UttakFedrekvoteAnnenForelder:\n            return OppholdÅrsakType.UttakFedrekvoteAnnenForelder;\n        case OppholdÅrsakTypeDTO.UttakFellesperiodeAnnenForelder:\n            return OppholdÅrsakType.UttakFellesperiodeAnnenForelder;\n        case OppholdÅrsakTypeDTO.UttakMødrekvoteAnnenForelder:\n            return OppholdÅrsakType.UttakMødrekvoteAnnenForelder;\n        default:\n            return undefined;\n    }\n};\n\nexport const mapSaksperiodeFromDTO = (p: SaksperiodeDTO, erAnnenPartsSak: boolean): Saksperiode => {\n    const { oppholdÅrsak } = p;\n    const returnPeriode: Saksperiode = {\n        guid: guid(),\n        periode: {\n            fom: p.fom,\n            tom: p.tom,\n        },\n        gjelderAnnenPart: erAnnenPartsSak,\n        resultat: p.resultat,\n        kontoType: p.kontoType,\n        flerbarnsdager: p.flerbarnsdager,\n        gradering: p.gradering,\n        utsettelseÅrsak: p.utsettelseÅrsak,\n        overføringÅrsak: p.overføringÅrsak,\n        samtidigUttak: p.samtidigUttak,\n        morsAktivitet: p.morsAktivitet,\n        oppholdÅrsak: mapOppholdÅrsakType(p.oppholdÅrsak),\n    } as Saksperiode;\n\n    if (oppholdÅrsak !== undefined && erAnnenPartsSak === false) {\n        returnPeriode.gjelderAnnenPart = true;\n        returnPeriode.kontoType = getStønadskontoTypeFromOppholdÅrsakType(oppholdÅrsak)!;\n    }\n\n    if (oppholdÅrsak !== undefined && erAnnenPartsSak) {\n        returnPeriode.gjelderAnnenPart = false;\n        returnPeriode.angittAvAnnenPart = true;\n        returnPeriode.kontoType = getStønadskontoTypeFromOppholdÅrsakType(oppholdÅrsak)!;\n    }\n\n    return returnPeriode as Saksperiode;\n};\n\nconst saksperiodeErInnvilget = (saksperiode: Saksperiode): boolean => saksperiode.resultat.innvilget;\n\nconst filterAvslåttePeriodeMedInnvilgetPeriodeISammeTidsperiode = (\n    periode: Saksperiode,\n    _index: number,\n    saksperioder: Saksperiode[]\n) => {\n    const likePerioder = saksperioder.filter(\n        (periode2) =>\n            periode.guid !== periode2.guid &&\n            Tidsperioden(convertTidsperiodeToTidsperiodeDate(periode.periode)).erLik(\n                convertTidsperiodeToTidsperiodeDate(periode2.periode)\n            )\n    );\n\n    if (likePerioder.length === 0) {\n        return true;\n    }\n\n    const innvilgedePerioder = likePerioder.filter(saksperiodeErInnvilget);\n\n    if (saksperiodeErInnvilget(periode) === false && innvilgedePerioder.length > 0) {\n        return false;\n    }\n\n    return true;\n};\n\nexport const getStartdatoFørstePeriodeAnnenPart = (\n    annenPartsSak: AnnenPartVedtakDTO | undefined | ''\n): Date | undefined => {\n    if (\n        annenPartsSak === undefined ||\n        annenPartsSak === '' ||\n        Object.keys(annenPartsSak).length === 0 ||\n        annenPartsSak.perioder.length === 0\n    ) {\n        return undefined;\n    }\n    return ISOStringToDate(annenPartsSak.perioder[0].fom);\n};\n\nexport const mapAnnenPartsEksisterendeSakFromDTO = (\n    eksisterendeSakAnnenPart: AnnenPartVedtakDTO | undefined | '',\n    barn: Barn,\n    søkerErFarEllerMedmor: boolean,\n    familiehendelsesdato: string,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n): EksisterendeSak | undefined => {\n    if (\n        eksisterendeSakAnnenPart === undefined ||\n        eksisterendeSakAnnenPart === '' ||\n        Object.keys(eksisterendeSakAnnenPart).length === 0\n    ) {\n        return undefined;\n    }\n    const erAnnenPartsSak = true;\n    const saksperioderAnnenPart = eksisterendeSakAnnenPart.perioder\n        .map((p) => {\n            return mapSaksperiodeFromDTO(p, erAnnenPartsSak);\n        })\n        .filter(filterAvslåttePeriodeMedInnvilgetPeriodeISammeTidsperiode);\n    let termindato = undefined;\n    if (eksisterendeSakAnnenPart.termindato !== undefined) {\n        termindato = eksisterendeSakAnnenPart.termindato;\n    } else if ((isFødtBarn(barn) || isUfødtBarn(barn)) && barn.termindato !== undefined) {\n        termindato = dateToISOString(barn.termindato);\n    }\n    const fødselsdato = isFødtBarn(barn) ? dateToISOString(barn.fødselsdatoer[0]) : undefined;\n    const adopsjonsdato = isAdoptertBarn(barn) ? dateToISOString(barn.adopsjonsdato) : undefined;\n\n    const grunnlagForAnnenPart = {\n        dekningsgrad:\n            eksisterendeSakAnnenPart.dekningsgrad === DekningsgradDTO.HUNDRE_PROSENT\n                ? Dekningsgrad.HUNDRE_PROSENT\n                : Dekningsgrad.ÅTTI_PROSENT,\n        antallBarn: eksisterendeSakAnnenPart.antallBarn ? eksisterendeSakAnnenPart.antallBarn : barn.antallBarn,\n        morErAleneOmOmsorg: false,\n        morErUfør: false,\n        morHarRett: true,\n        farMedmorErAleneOmOmsorg: false,\n        farMedmorHarRett: true,\n        søkerErFarEllerMedmor,\n        termindato,\n        fødselsdato,\n        omsorgsovertakelsesdato: adopsjonsdato,\n        erDeltUttak: true,\n        erBarnetFødt: fødselsdato !== undefined,\n        familiehendelseDato: familiehendelsesdato,\n        familiehendelseType: getFamiliehendelseType(fødselsdato, termindato, adopsjonsdato),\n        harAnnenForelderTilsvarendeRettEØS: false,\n        ønskerJustertUttakVedFødsel: undefined,\n        barn: [], // barn brukes ikke videre her\n    };\n\n    const uttaksplanAnnenPart = mapSaksperioderTilUttaksperioder(\n        saksperioderAnnenPart,\n        grunnlagForAnnenPart,\n        førsteUttaksdagNesteBarnsSak\n    );\n\n    return {\n        saksnummer: '',\n        erAnnenPartsSak,\n        grunnlag: grunnlagForAnnenPart,\n        saksperioder: saksperioderAnnenPart,\n        uttaksplan: uttaksplanAnnenPart.filter((p) => isInfoPeriode(p)),\n    };\n};\n\nexport const mapSøkerensEksisterendeSakFromDTO = (\n    eksisterendeSak: Sak | undefined | '',\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n): EksisterendeSak | undefined => {\n    if (eksisterendeSak === undefined || eksisterendeSak === '' || Object.keys(eksisterendeSak).length === 0) {\n        return undefined;\n    }\n    const erAnnenPartsSak = false;\n    const {\n        dekningsgrad,\n        familiehendelse: { fødselsdato, termindato, omsorgsovertakelse, antallBarn },\n        harAnnenForelderTilsvarendeRettEØS,\n        morUføretrygd,\n        rettighetType,\n        sakTilhørerMor,\n        ønskerJustertUttakVedFødsel,\n    } = eksisterendeSak;\n\n    const perioder = eksisterendeSak.gjeldendeVedtak ? eksisterendeSak.gjeldendeVedtak.perioder : [];\n\n    const erFarEllerMedmor = !sakTilhørerMor;\n    const grunnlag: Saksgrunnlag = {\n        dekningsgrad:\n            dekningsgrad === DekningsgradDTO.HUNDRE_PROSENT ? Dekningsgrad.HUNDRE_PROSENT : Dekningsgrad.ÅTTI_PROSENT,\n        antallBarn: antallBarn,\n        morErAleneOmOmsorg: sakTilhørerMor && rettighetType === RettighetType.ALENEOMSORG,\n        morErUfør: morUføretrygd,\n        morHarRett: sakTilhørerMor || rettighetType === RettighetType.BEGGE_RETT,\n        farMedmorErAleneOmOmsorg: !sakTilhørerMor && rettighetType === RettighetType.ALENEOMSORG,\n        farMedmorHarRett: !sakTilhørerMor || rettighetType === RettighetType.BEGGE_RETT,\n        søkerErFarEllerMedmor: erFarEllerMedmor,\n        termindato,\n        fødselsdato,\n        omsorgsovertakelsesdato: omsorgsovertakelse,\n        erDeltUttak: rettighetType === RettighetType.BEGGE_RETT,\n        erBarnetFødt: fødselsdato !== undefined,\n        familiehendelseDato: getRelevantFamiliehendelseDato(termindato, fødselsdato, omsorgsovertakelse),\n        familiehendelseType: getFamiliehendelseType(fødselsdato, termindato, omsorgsovertakelse),\n        ønskerJustertUttakVedFødsel: fødselsdato === undefined ? ønskerJustertUttakVedFødsel : undefined,\n        harAnnenForelderTilsvarendeRettEØS,\n    };\n\n    const saksperioder = perioder\n        .map((p) => {\n            return mapSaksperiodeFromDTO(p, erAnnenPartsSak);\n        })\n        .filter(filterAvslåttePeriodeMedInnvilgetPeriodeISammeTidsperiode);\n\n    const uttaksplan = mapSaksperioderTilUttaksperioder(saksperioder, grunnlag, førsteUttaksdagNesteBarnsSak);\n\n    return {\n        saksnummer: eksisterendeSak.saksnummer,\n        erAnnenPartsSak,\n        grunnlag,\n        saksperioder,\n        uttaksplan,\n    };\n};\n\nconst getSøkersituasjonFromSaksgrunnlag = (familiehendelseType: FamiliehendelseType): Situasjon => {\n    if (familiehendelseType === FamiliehendelseType.TERM || familiehendelseType === FamiliehendelseType.FØDSEL) {\n        return 'fødsel';\n    }\n\n    return 'adopsjon';\n};\n\nconst getSøkerFromSaksgrunnlag = (grunnlag: Saksgrunnlag, erFarEllerMedmor: boolean): Partial<Søker> => {\n    return {\n        erAleneOmOmsorg: erFarEllerMedmor ? grunnlag.farMedmorErAleneOmOmsorg : grunnlag.morErAleneOmOmsorg,\n    };\n};\n\nconst getSøkerrolleFromSaksgrunnlag = (\n    person: Person,\n    situasjon: Situasjon,\n    grunnlag: Saksgrunnlag\n): Søkerrolle | undefined => {\n    const { søkerErFarEllerMedmor } = grunnlag;\n    const søkerErKvinne = person.kjønn === 'K';\n    switch (situasjon) {\n        case 'fødsel':\n        case 'adopsjon':\n            if (søkerErKvinne) {\n                return søkerErFarEllerMedmor ? 'medmor' : 'mor';\n            }\n            return 'far';\n        default:\n            return undefined;\n    }\n};\n\nconst getBarnFromSaksgrunnlag = (\n    situasjon: Situasjon,\n    sak: Saksgrunnlag,\n    valgteBarnFnr: string[] | undefined\n): Barn | undefined => {\n    switch (situasjon) {\n        case 'fødsel':\n            if (sak.fødselsdato) {\n                return {\n                    type: BarnType.FØDT,\n                    antallBarn: sak.antallBarn,\n                    fødselsdatoer: [ISOStringToDate(sak.fødselsdato)!],\n                    termindato: sak.termindato ? ISOStringToDate(sak.termindato) : undefined,\n                    fnr: valgteBarnFnr,\n                };\n            }\n\n            return {\n                type: BarnType.UFØDT,\n                antallBarn: sak.antallBarn,\n                termindato: ISOStringToDate(sak.termindato)!,\n                terminbekreftelse: [],\n            };\n        case 'adopsjon':\n            return {\n                type: BarnType.ADOPTERT_STEBARN,\n                adopsjonsdato: ISOStringToDate(sak.omsorgsovertakelsesdato)!,\n                antallBarn: sak.antallBarn,\n                fødselsdatoer: sak.fødselsdato !== undefined ? [ISOStringToDate(sak.fødselsdato)!] : [],\n                omsorgsovertakelse: [],\n                fnr: valgteBarnFnr,\n            };\n        default:\n            return undefined;\n    }\n};\n\nconst getAnnenForelderFromSaksgrunnlag = (\n    situasjon: Situasjon,\n    grunnlag: Saksgrunnlag,\n    annenPart: RegistrertAnnenForelder,\n    erFarEllerMedmor: boolean,\n    intl: IntlShape\n): AnnenForelder | undefined => {\n    switch (situasjon) {\n        case 'fødsel':\n        case 'adopsjon':\n            if (erFarEllerMedmor) {\n                return {\n                    fornavn:\n                        annenPart.fornavn !== undefined && annenPart.fornavn !== ''\n                            ? annenPart.fornavn\n                            : intlUtils(intl, 'annen.forelder'),\n                    etternavn: annenPart.etternavn,\n                    erUfør: grunnlag.morErUfør,\n                    harRettPåForeldrepengerINorge:\n                        !!grunnlag.morHarRett && !grunnlag.harAnnenForelderTilsvarendeRettEØS,\n                    fnr: annenPart.fnr,\n                    kanIkkeOppgis: false,\n                    harRettPåForeldrepengerIEØS: grunnlag.harAnnenForelderTilsvarendeRettEØS,\n                };\n            }\n            return {\n                fornavn:\n                    annenPart.fornavn !== undefined && annenPart.fornavn !== ''\n                        ? annenPart.fornavn\n                        : intlUtils(intl, 'annen.forelder'),\n                etternavn: annenPart.etternavn,\n                harRettPåForeldrepengerINorge:\n                    !!grunnlag.farMedmorHarRett && !grunnlag.harAnnenForelderTilsvarendeRettEØS,\n                fnr: annenPart.fnr,\n                kanIkkeOppgis: false,\n                harRettPåForeldrepengerIEØS: grunnlag.harAnnenForelderTilsvarendeRettEØS,\n            };\n        default:\n            return undefined;\n    }\n};\n\nconst finnAnnenForelderForSaken = (\n    barn: RegistrertBarn[],\n    fødselsdato: Date | undefined,\n    grunnlag: Saksgrunnlag,\n    situasjon: Situasjon,\n    intl: IntlShape,\n    valgtBarnFnr: string[] | undefined,\n    annenForeldersFnrFraSaken: string | undefined\n): AnnenForelder | undefined => {\n    if ((valgtBarnFnr === undefined && fødselsdato === undefined) || !annenForeldersFnrFraSaken) {\n        return undefined;\n    }\n    const barnMedGittFnr =\n        valgtBarnFnr !== undefined\n            ? barn.find((b) => valgtBarnFnr.includes(b.fnr) && b.annenForelder !== undefined)\n            : undefined;\n    const barnMedGittFødselsdato =\n        fødselsdato !== undefined\n            ? barn.filter(\n                  (b) => getErDatoInnenEnDagFraAnnenDato(b.fødselsdato, fødselsdato) && b.annenForelder !== undefined\n              )\n            : [];\n\n    const barnet = barnMedGittFnr || barnMedGittFødselsdato.length > 0 ? barnMedGittFødselsdato[0] : undefined;\n    if (barnet !== undefined && barnet.annenForelder?.fnr === annenForeldersFnrFraSaken) {\n        const annenForelder = barnet.annenForelder;\n        const { fornavn } = annenForelder;\n        const fornavnAnnenForelder =\n            fornavn !== undefined && fornavn.trim() !== '' ? fornavn : intlUtils(intl, 'annen.forelder');\n        const annenPart: RegistrertAnnenForelder = { ...annenForelder, fornavn: fornavnAnnenForelder };\n        return getAnnenForelderFromSaksgrunnlag(situasjon, grunnlag, annenPart, grunnlag.søkerErFarEllerMedmor, intl);\n    }\n};\n\nconst getBarnFromValgteBarn = (valgteBarn: SelectableBarn): Barn => {\n    if (valgteBarn.fødselsdatoer !== undefined && valgteBarn.fødselsdatoer.length > 0) {\n        return {\n            type: BarnType.FØDT,\n            antallBarn: valgteBarn.antallBarn,\n            fødselsdatoer: [getEldsteDato(valgteBarn.fødselsdatoer!)],\n            fnr:\n                valgteBarn.fnr !== undefined && valgteBarn.fnr.length > 0\n                    ? valgteBarn.fnr.filter((fnr) => !!fnr)\n                    : undefined,\n        };\n    } else if (valgteBarn.termindato !== undefined) {\n        return {\n            type: BarnType.UFØDT,\n            antallBarn: valgteBarn.antallBarn,\n            termindato: valgteBarn.termindato,\n        };\n    } else {\n        return {\n            type: BarnType.IKKE_UTFYLT,\n            antallBarn: valgteBarn.antallBarn,\n            fødselsdatoer: [getEldsteDato(valgteBarn.fødselsdatoer!)],\n            fnr:\n                valgteBarn.fnr !== undefined && valgteBarn.fnr.length > 0\n                    ? valgteBarn.fnr.filter((fnr) => !!fnr)\n                    : undefined,\n        };\n    }\n};\n\nconst getAnnenForelderFromValgteBarn = (valgteBarn: SelectableBarn): AnnenForelder | undefined => {\n    if (valgteBarn.annenForelder !== undefined) {\n        return {\n            fornavn: valgteBarn.annenForelder.fornavn,\n            etternavn: valgteBarn.annenForelder.etternavn,\n            fnr: valgteBarn.annenForelder.fnr,\n            kanIkkeOppgis: false,\n        };\n    }\n    return undefined;\n};\n\nexport const opprettSøknadFraValgteBarn = (valgteBarn: SelectableBarn): Partial<Søknad> | undefined => {\n    const barn = getBarnFromValgteBarn(valgteBarn);\n    const annenForelder = getAnnenForelderFromValgteBarn(valgteBarn);\n    const søknad: Partial<Søknad> = {\n        barn,\n        annenForelder,\n        erEndringssøknad: false,\n    };\n\n    return søknad;\n};\n\nexport const opprettAnnenForelderFraEksisterendeSak = (\n    intl: IntlShape,\n    annenPartFraSak: PersonFnrDTO | undefined,\n    grunnlag: Saksgrunnlag,\n    søkerinfo: Søkerinfo,\n    situasjon: Situasjon,\n    valgteBarnFnr: string[] | undefined\n): AnnenForelder => {\n    const fnrAnnenForelderFraSak = annenPartFraSak !== undefined ? annenPartFraSak.fnr : undefined;\n\n    const mockAnnenForelder = {\n        fornavn: intlUtils(intl, 'annen.forelder'),\n        etternavn: '',\n        fnr: fnrAnnenForelderFraSak ? fnrAnnenForelderFraSak : '',\n        harRettPåForeldrepengerINorge: grunnlag.søkerErFarEllerMedmor\n            ? !!grunnlag.morHarRett && !grunnlag.harAnnenForelderTilsvarendeRettEØS\n            : !!grunnlag.farMedmorHarRett && !grunnlag.harAnnenForelderTilsvarendeRettEØS,\n        harRettPåForeldrepengerIEØS: grunnlag.harAnnenForelderTilsvarendeRettEØS,\n        kanIkkeOppgis: false,\n        erUfør: grunnlag.søkerErFarEllerMedmor ? grunnlag.morErUfør : undefined,\n    };\n    const annenForelderFraSak = finnAnnenForelderForSaken(\n        søkerinfo.registrerteBarn,\n        ISOStringToDate(grunnlag.fødselsdato),\n        grunnlag,\n        situasjon,\n        intl,\n        valgteBarnFnr,\n        fnrAnnenForelderFraSak\n    );\n    return annenForelderFraSak || mockAnnenForelder;\n};\n\nexport const opprettSøknadFraValgteBarnMedSak = (\n    valgteBarn: SelectableBarn,\n    intl: IntlShape,\n    søkerinfo: Søkerinfo\n): Partial<Søknad> | undefined => {\n    const eksisterendeSak = mapSøkerensEksisterendeSakFromDTO(valgteBarn.sak, undefined);\n    const { grunnlag } = eksisterendeSak!;\n    const situasjon = getSøkersituasjonFromSaksgrunnlag(grunnlag.familiehendelseType);\n    const barn = getBarnFromValgteBarn(valgteBarn);\n    const annenForelder = opprettAnnenForelderFraEksisterendeSak(\n        intl,\n        valgteBarn.sak?.annenPart,\n        grunnlag,\n        søkerinfo,\n        situasjon,\n        valgteBarn.fnr\n    );\n    const søknad: Partial<Søknad> = {\n        barn,\n        annenForelder,\n        erEndringssøknad: false,\n    };\n\n    if (valgteBarn.sak !== undefined) {\n        const søkersituasjon = {\n            situasjon: valgteBarn.sak.gjelderAdopsjon ? 'adopsjon' : 'fødsel',\n            rolle: valgteBarn.sak.sakTilhørerMor ? undefined : 'far',\n        } as Søkersituasjon;\n        søknad.søkersituasjon = søkersituasjon;\n    }\n    return søknad;\n};\n\nexport const opprettSøknadFraEksisterendeSak = (\n    søkerinfo: Søkerinfo,\n    eksisterendeSak: EksisterendeSak,\n    intl: IntlShape,\n    annenPartFraSak: PersonFnrDTO | undefined,\n    valgteBarnFnr: string[] | undefined\n): Partial<Søknad> | undefined => {\n    const { grunnlag, uttaksplan } = eksisterendeSak;\n    const { dekningsgrad, familiehendelseType, søkerErFarEllerMedmor, ønskerJustertUttakVedFødsel } = grunnlag;\n    const situasjon = getSøkersituasjonFromSaksgrunnlag(familiehendelseType);\n\n    if (!situasjon) {\n        return undefined;\n    }\n\n    const søker = getSøkerFromSaksgrunnlag(grunnlag, søkerErFarEllerMedmor);\n    const barn = getBarnFromSaksgrunnlag(situasjon, grunnlag, valgteBarnFnr);\n\n    const rolle = getSøkerrolleFromSaksgrunnlag(søkerinfo.person, situasjon, grunnlag);\n\n    if (!barn || !rolle) {\n        return undefined;\n    }\n\n    const annenForelder = opprettAnnenForelderFraEksisterendeSak(\n        intl,\n        annenPartFraSak,\n        grunnlag,\n        søkerinfo,\n        situasjon,\n        valgteBarnFnr\n    );\n\n    const søknad: Partial<Søknad> = {\n        søker: søker as Søker,\n        søkersituasjon: {\n            situasjon,\n            rolle,\n        },\n        barn,\n        annenForelder,\n        erEndringssøknad: true,\n        dekningsgrad,\n        uttaksplan,\n        saksnummer: eksisterendeSak.saksnummer,\n        ønskerJustertUttakVedFødsel: ønskerJustertUttakVedFødsel,\n    };\n\n    return søknad;\n};\n","import { Periodene, sorterPerioder } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport dayjs from 'dayjs';\nimport { guid } from 'nav-frontend-js-utils';\nimport {\n    isForeldrepengerFørFødselUttaksperiode,\n    isOverskrivbarPeriode,\n    isUtsettelsesperiode,\n    Periode,\n    Uttaksperiode,\n} from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { getPeriodeHullEllerPeriodeUtenUttak, getTidsperiodeMellomPerioder } from './uttaksplanbuilderUtils';\n\nconst splittPeriodePåPeriode = (berørtPeriode: Periode, nyPeriode: Periode): Periode[] => {\n    const dagerIBerørtPeriode = Tidsperioden(berørtPeriode.tidsperiode).getAntallUttaksdager();\n\n    const førsteDel: Periode = {\n        ...berørtPeriode,\n        tidsperiode: {\n            fom: berørtPeriode.tidsperiode.fom,\n            tom: Uttaksdagen(nyPeriode.tidsperiode.fom).forrige(),\n        },\n    };\n\n    const dagerIFørsteDel = Tidsperioden(førsteDel.tidsperiode).getAntallUttaksdager();\n    const dagerIAndreDel = dagerIBerørtPeriode - dagerIFørsteDel;\n    const startDatoAndreDel = Uttaksdagen(nyPeriode.tidsperiode.tom).neste();\n\n    if (isOverskrivbarPeriode(berørtPeriode)) {\n        // Hvis berørt periode er overskrivbar, la forskyvPerioder ta seg av logikk for forskyving av datoer\n        const andreDel: Periode = {\n            ...berørtPeriode,\n            id: guid(),\n            tidsperiode: {\n                fom: nyPeriode.tidsperiode.fom,\n                tom: berørtPeriode.tidsperiode.tom,\n            },\n        };\n\n        return [førsteDel, nyPeriode, andreDel];\n    } else {\n        const andreDel: Periode = {\n            ...berørtPeriode,\n            id: guid(),\n            tidsperiode: {\n                fom: startDatoAndreDel,\n                tom: Uttaksdagen(startDatoAndreDel).leggTil(dagerIAndreDel - 1),\n            },\n        };\n\n        return [førsteDel, nyPeriode, andreDel];\n    }\n};\n\nexport const splittPeriodePåDato = (periode: Periode, dato: Date): Periode[] => {\n    const periodeFørDato: Periode = {\n        ...periode,\n        tidsperiode: {\n            fom: periode.tidsperiode.fom,\n            tom: Uttaksdagen(dato).forrige(),\n        },\n    };\n\n    const periodeFraOgMedDato: Periode = {\n        ...periode,\n        id: guid(),\n        tidsperiode: {\n            fom: Uttaksdagen(periodeFørDato.tidsperiode.tom).neste(),\n            tom: periode.tidsperiode.tom,\n        },\n    };\n\n    return [periodeFørDato, periodeFraOgMedDato];\n};\n\nexport const splittUttaksperiodePåFamiliehendelsesdato = (periode: Uttaksperiode, famDato: Date): Uttaksperiode[] => {\n    const periodeFørFamDato: Periode = {\n        ...periode,\n        konto: periode.konto == StønadskontoType.Foreldrepenger ? StønadskontoType.AktivitetsfriKvote : periode.konto,\n        morsAktivitetIPerioden:\n            periode.konto == StønadskontoType.Foreldrepenger ? undefined : periode.morsAktivitetIPerioden,\n        erMorForSyk: periode.konto == StønadskontoType.Foreldrepenger ? undefined : periode.erMorForSyk,\n        tidsperiode: {\n            fom: periode.tidsperiode.fom,\n            tom: Uttaksdagen(famDato).forrige(),\n        },\n    };\n\n    const periodeFraOgMedFamDato: Periode = {\n        ...periode,\n        id: guid(),\n        tidsperiode: {\n            fom: Uttaksdagen(periodeFørFamDato.tidsperiode.tom).neste(),\n            tom: periode.tidsperiode.tom,\n        },\n    };\n\n    return [periodeFørFamDato, periodeFraOgMedFamDato];\n};\n\nconst getAntallOverlappendeUttaksdager = (periode: Periode, nyPeriode: Periode): number => {\n    if (Periodene([periode]).finnOverlappendePerioder(nyPeriode).length > 0) {\n        const dateArray = [\n            dayjs(periode.tidsperiode.fom),\n            dayjs(periode.tidsperiode.tom),\n            dayjs(nyPeriode.tidsperiode.fom),\n            dayjs(nyPeriode.tidsperiode.tom),\n        ];\n        const minDate = dayjs.min(dateArray);\n        const maxDate = dayjs.max(dateArray);\n        const overlappendeTidsperiode = dateArray.filter((date) => date !== minDate && date !== maxDate);\n\n        return Tidsperioden({\n            fom: dayjs.min(overlappendeTidsperiode).toDate(),\n            tom: dayjs.max(overlappendeTidsperiode).toDate(),\n        }).getAntallUttaksdager();\n    }\n\n    return 0;\n};\n\ninterface LeggTilPeriodeParams {\n    perioder: Periode[];\n    nyPeriode: Periode;\n    familiehendelsesdato: Date;\n    harAktivitetskravIPeriodeUtenUttak: boolean;\n    erAdopsjon: boolean;\n    bareFarHarRett: boolean;\n    erFarEllerMedmor: boolean;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n}\n\nexport const leggTilPeriode = ({\n    perioder,\n    nyPeriode,\n    familiehendelsesdato,\n    harAktivitetskravIPeriodeUtenUttak,\n    erAdopsjon,\n    bareFarHarRett,\n    erFarEllerMedmor,\n    førsteUttaksdagNesteBarnsSak,\n}: LeggTilPeriodeParams): Periode[] => {\n    if (perioder.length === 0) {\n        return [nyPeriode];\n    }\n\n    const nyPeriodeFomDate = nyPeriode.tidsperiode.fom;\n    const nyPeriodeTomDate = nyPeriode.tidsperiode.tom;\n\n    if (\n        dayjs(nyPeriodeFomDate).isBefore(familiehendelsesdato, 'day') &&\n        dayjs(nyPeriodeTomDate).isSameOrAfter(familiehendelsesdato, 'day')\n    ) {\n        // Nye perioder skal legges før eller etter famdato ikke begge deler\n        return [...perioder];\n    }\n\n    const berørtPeriode = perioder.find((p) => Tidsperioden(p.tidsperiode).inneholderDato(nyPeriodeFomDate));\n\n    if (berørtPeriode) {\n        if (isUtsettelsesperiode(berørtPeriode) || isForeldrepengerFørFødselUttaksperiode(berørtPeriode)) {\n            // Uttak som legges over utsettelse eller FFF skal ikke tillates av validering. Ignore\n            return [...perioder];\n        }\n\n        const foregåendePerioder = Periodene(perioder).finnAlleForegåendePerioder(berørtPeriode);\n        const påfølgendePerioder = Periodene(perioder).finnAllePåfølgendePerioder(berørtPeriode);\n        const antallDagerINyPeriode = Tidsperioden(nyPeriode.tidsperiode).getAntallUttaksdager();\n\n        if (dayjs(berørtPeriode.tidsperiode.fom).isSame(nyPeriodeFomDate)) {\n            return [\n                ...foregåendePerioder,\n                nyPeriode,\n                ...Periodene([berørtPeriode, ...påfølgendePerioder]).forskyvPerioder(antallDagerINyPeriode),\n            ];\n        }\n\n        const berørtPeriodeSplittetPåNyPeriode = splittPeriodePåPeriode(berørtPeriode, nyPeriode);\n\n        if (isOverskrivbarPeriode(berørtPeriode)) {\n            // Hvis berørt periode er overskrivbar, la forskyvPerioder ta seg av logikk for overskriving\n            return [\n                ...foregåendePerioder,\n                berørtPeriodeSplittetPåNyPeriode[0],\n                berørtPeriodeSplittetPåNyPeriode[1],\n                ...Periodene([berørtPeriodeSplittetPåNyPeriode[2], ...påfølgendePerioder]).forskyvPerioder(\n                    antallDagerINyPeriode\n                ),\n            ];\n        }\n\n        return [\n            ...foregåendePerioder,\n            ...berørtPeriodeSplittetPåNyPeriode,\n            ...Periodene(påfølgendePerioder).forskyvPerioder(antallDagerINyPeriode),\n        ];\n    } else {\n        const førstePeriode = perioder[0];\n        const sistePeriode = perioder[perioder.length - 1];\n        const nyPeriodeFom = dayjs(nyPeriode.tidsperiode.fom);\n        const nyPeriodeTom = dayjs(nyPeriode.tidsperiode.tom);\n\n        if (nyPeriodeFom.isBefore(førstePeriode.tidsperiode.fom, 'day')) {\n            const tidsperiodeMellomNyPeriodeOgFørstePeriode = getTidsperiodeMellomPerioder(\n                nyPeriode.tidsperiode,\n                førstePeriode.tidsperiode\n            );\n\n            if (nyPeriodeTom.isSameOrAfter(førstePeriode.tidsperiode.fom, 'day')) {\n                if (nyPeriodeFom.isBefore(familiehendelsesdato, 'day')) {\n                    // Kan ikke overlappe perioder før fødsel\n                    return [...perioder];\n                }\n\n                const antallOverlappendeUttaksdager = getAntallOverlappendeUttaksdager(førstePeriode, nyPeriode);\n\n                return [nyPeriode, ...Periodene(perioder).forskyvPerioder(antallOverlappendeUttaksdager)];\n            }\n\n            if (tidsperiodeMellomNyPeriodeOgFørstePeriode) {\n                return [\n                    nyPeriode,\n                    ...getPeriodeHullEllerPeriodeUtenUttak(\n                        tidsperiodeMellomNyPeriodeOgFørstePeriode,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        familiehendelsesdato,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        førsteUttaksdagNesteBarnsSak\n                    ),\n                    ...perioder,\n                ];\n            }\n\n            return [nyPeriode, ...perioder];\n        } else {\n            const tidsperiodeMellomSistePeriodeOgNyPeriode = getTidsperiodeMellomPerioder(\n                sistePeriode.tidsperiode,\n                nyPeriode.tidsperiode\n            );\n\n            if (tidsperiodeMellomSistePeriodeOgNyPeriode) {\n                return [\n                    ...perioder,\n                    ...getPeriodeHullEllerPeriodeUtenUttak(\n                        tidsperiodeMellomSistePeriodeOgNyPeriode,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        familiehendelsesdato,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        førsteUttaksdagNesteBarnsSak\n                    ),\n                    nyPeriode,\n                ];\n            }\n\n            return [...perioder, nyPeriode].sort(sorterPerioder);\n        }\n    }\n};\n","export enum PeriodeHullÅrsak {\n    fridag = 'fridag',\n    avslåttPeriode = 'avslåttPeriode',\n}\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { Perioden } from 'app/steps/uttaksplan-info/utils/Perioden';\nimport { Periodene, sorterPerioder } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport {\n    // ANTALL_UTTAKSDAGER_SEKS_UKER,\n    isValidTidsperiode,\n    Tidsperioden,\n} from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport {\n    andreAugust2022ReglerGjelder,\n    førsteOktober2021ReglerGjelder,\n    tidperiodeOverlapperDato,\n} from 'app/utils/dateUtils';\nimport dayjs from 'dayjs';\nimport { guid } from 'nav-frontend-js-utils';\nimport {\n    isHull,\n    isPeriodeUtenUttak,\n    isPeriodeUtenUttakUtsettelse,\n    isUtsettelseAnnenPart,\n    isUttaksperiode,\n    Periode,\n    PeriodeHull,\n    Periodetype,\n    PeriodeUtenUttak,\n} from 'uttaksplan/types/Periode';\nimport { PeriodeHullÅrsak } from 'uttaksplan/types/PeriodeHullÅrsak';\nimport { splittPeriodePåDato } from './leggTilPeriode';\n\nexport const slåSammenLikePerioder = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n    annenPartsUttak?: Periode[]\n): Periode[] => {\n    if (perioder.length <= 1) {\n        return perioder;\n    }\n    const nyePerioder: Periode[] = [];\n    let forrigePeriode: Periode | undefined = { ...perioder[0] };\n    perioder.forEach((periode, index) => {\n        if (index === 0) {\n            return;\n        }\n        if (forrigePeriode === undefined) {\n            forrigePeriode = periode;\n            return;\n        }\n        if (\n            Perioden(forrigePeriode).erLik(periode, false, true) &&\n            Perioden(forrigePeriode).erSammenhengende(periode)\n        ) {\n            if (\n                annenPartsUttak &&\n                isUttaksperiode(periode) &&\n                periode.ønskerSamtidigUttak &&\n                isUttaksperiode(forrigePeriode) &&\n                forrigePeriode.ønskerSamtidigUttak\n            ) {\n                const overlappendePerioderAnnenPartForrigePeriode =\n                    Periodene(annenPartsUttak).finnOverlappendePerioder(forrigePeriode);\n                const overlappendePerioderAnnenPart = Periodene(annenPartsUttak).finnOverlappendePerioder(periode);\n\n                if (\n                    (overlappendePerioderAnnenPart.length === 0 &&\n                        overlappendePerioderAnnenPartForrigePeriode.length > 0) ||\n                    (overlappendePerioderAnnenPart.length > 0 &&\n                        overlappendePerioderAnnenPartForrigePeriode.length === 0)\n                ) {\n                    nyePerioder.push(forrigePeriode);\n                    forrigePeriode = periode;\n                    return;\n                }\n            }\n\n            if (\n                (dayjs(forrigePeriode.tidsperiode.tom).isBefore(familiehendelsesdato, 'day') &&\n                    dayjs(periode.tidsperiode.tom).isSameOrAfter(\n                        Uttaksdagen(familiehendelsesdato).denneEllerNeste()\n                    )) ||\n                (førsteUttaksdagNesteBarnsSak !== undefined &&\n                    dayjs(forrigePeriode.tidsperiode.tom).isBefore(førsteUttaksdagNesteBarnsSak, 'day') &&\n                    dayjs(periode.tidsperiode.fom).isSameOrAfter(\n                        Uttaksdagen(førsteUttaksdagNesteBarnsSak).denneEllerNeste(),\n                        'day'\n                    ))\n            ) {\n                nyePerioder.push(forrigePeriode);\n                forrigePeriode = periode;\n                return;\n            }\n\n            const nyTidsperiode = {\n                fom: forrigePeriode.tidsperiode.fom,\n                tom: periode.tidsperiode.tom,\n            };\n\n            forrigePeriode.tidsperiode = { ...nyTidsperiode };\n            return;\n        } else {\n            nyePerioder.push(forrigePeriode);\n        }\n        forrigePeriode = periode;\n    });\n    nyePerioder.push(forrigePeriode);\n\n    return nyePerioder;\n};\n\nconst getSplittetPeriodeOmNødvendig = (\n    nyHullPeriode: PeriodeHull | PeriodeUtenUttak,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n): Array<PeriodeHull | PeriodeUtenUttak> => {\n    if (\n        førsteUttaksdagNesteBarnsSak !== undefined &&\n        tidperiodeOverlapperDato(nyHullPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n    ) {\n        return splittPeriodePåDato(nyHullPeriode, førsteUttaksdagNesteBarnsSak) as Array<\n            PeriodeHull | PeriodeUtenUttak\n        >;\n    }\n    return [nyHullPeriode];\n};\n\nexport const getPeriodeHullEllerPeriodeUtenUttak = (\n    tidsperiode: TidsperiodeDate,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    familiehendelsesdato: Date,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n    årsak: PeriodeHullÅrsak = PeriodeHullÅrsak.fridag\n): Array<PeriodeHull | PeriodeUtenUttak> => {\n    const skalLeggeInnPerioderUtenUttak = førsteOktober2021ReglerGjelder(familiehendelsesdato);\n\n    if (skalLeggeInnPerioderUtenUttak) {\n        const ANTALL_UTTAKSDAGER_SEKS_UKER = 30;\n        const førsteUttaksdagFamiliehendelsesdato = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n        const førsteUttaksdagEtterSeksUker = Uttaksdagen(førsteUttaksdagFamiliehendelsesdato).leggTil(\n            ANTALL_UTTAKSDAGER_SEKS_UKER\n        );\n        const tidsperiodeErInnenFørsteSeksUker =\n            Tidsperioden(tidsperiode).erInnenforFørsteSeksUker(familiehendelsesdato);\n\n        const farMedmorBeholderDagerIkkeTattUtDeFørsteSeksUkene =\n            dayjs(tidsperiode.fom).isBefore(førsteUttaksdagEtterSeksUker, 'day') &&\n            !erAdopsjon &&\n            ((bareFarHarRett && førsteOktober2021ReglerGjelder(familiehendelsesdato)) ||\n                (erFarEllerMedmor && andreAugust2022ReglerGjelder(familiehendelsesdato)));\n\n        if (harAktivitetskravIPeriodeUtenUttak && !farMedmorBeholderDagerIkkeTattUtDeFørsteSeksUkene) {\n            return getSplittetPeriodeOmNødvendig(getPeriodeHull(tidsperiode, årsak), førsteUttaksdagNesteBarnsSak);\n        }\n\n        if (dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'day')) {\n            return getSplittetPeriodeOmNødvendig(getNyPeriodeUtenUttak(tidsperiode), førsteUttaksdagNesteBarnsSak);\n        }\n\n        if (tidsperiodeErInnenFørsteSeksUker && !erAdopsjon) {\n            if (dayjs(tidsperiode.tom).isBefore(førsteUttaksdagEtterSeksUker, 'day')) {\n                if (\n                    (bareFarHarRett && førsteOktober2021ReglerGjelder(familiehendelsesdato)) ||\n                    (erFarEllerMedmor && andreAugust2022ReglerGjelder(familiehendelsesdato))\n                ) {\n                    return [getNyPeriodeUtenUttak(tidsperiode)];\n                }\n                return [getPeriodeHull(tidsperiode, årsak)];\n            }\n\n            const antallDagerFraFomTilFørsteUttaksdagSeksUker =\n                Tidsperioden({ fom: tidsperiode.fom, tom: førsteUttaksdagEtterSeksUker }).getAntallUttaksdager() - 2;\n\n            const nyPeriodeUtenUttakTidsperiodeLengde =\n                Tidsperioden(tidsperiode).getAntallUttaksdager() - antallDagerFraFomTilFørsteUttaksdagSeksUker;\n\n            const førsteSeksUkerTidsperiode: TidsperiodeDate = {\n                fom: tidsperiode.fom,\n                tom: Uttaksdagen(førsteUttaksdagEtterSeksUker).leggTil(-1),\n            };\n\n            const etterFørsteSeksUkerTidsperiode: TidsperiodeDate = {\n                fom: førsteUttaksdagEtterSeksUker,\n                tom: Uttaksdagen(førsteUttaksdagEtterSeksUker).leggTil(nyPeriodeUtenUttakTidsperiodeLengde - 2),\n            };\n\n            if (\n                (bareFarHarRett && førsteOktober2021ReglerGjelder(familiehendelsesdato)) ||\n                (erFarEllerMedmor && andreAugust2022ReglerGjelder(familiehendelsesdato))\n            ) {\n                if (erFarEllerMedmor && !bareFarHarRett) {\n                    return [getNyPeriodeUtenUttak(tidsperiode)];\n                }\n\n                const periodeUtenUttak = getNyPeriodeUtenUttak(førsteSeksUkerTidsperiode);\n                const periodeHull = getPeriodeHull(etterFørsteSeksUkerTidsperiode, årsak);\n                return [periodeUtenUttak, periodeHull];\n            }\n\n            const periodeHull = getPeriodeHull(førsteSeksUkerTidsperiode, årsak);\n            const periodeUtenUttak = getNyPeriodeUtenUttak(etterFørsteSeksUkerTidsperiode);\n\n            return [periodeHull, periodeUtenUttak];\n        }\n\n        return getSplittetPeriodeOmNødvendig(getNyPeriodeUtenUttak(tidsperiode), førsteUttaksdagNesteBarnsSak);\n    }\n\n    return getSplittetPeriodeOmNødvendig(getPeriodeHull(tidsperiode, årsak), førsteUttaksdagNesteBarnsSak);\n};\n\nexport const getPeriodeHull = (tidsperiode: TidsperiodeDate, årsak?: PeriodeHullÅrsak): PeriodeHull => ({\n    id: guid(),\n    type: Periodetype.Hull,\n    tidsperiode,\n    årsak,\n});\n\nexport const getNyPeriodeUtenUttak = (tidsperiode: TidsperiodeDate): PeriodeUtenUttak => ({\n    id: guid(),\n    type: Periodetype.PeriodeUtenUttak,\n    tidsperiode,\n});\n\nexport const getTidsperiodeMellomPerioder = (\n    tidsperiode1: TidsperiodeDate,\n    tidsperiode2: TidsperiodeDate\n): TidsperiodeDate | undefined => {\n    const tidsperiodeMellomPerioder: TidsperiodeDate = {\n        fom: Uttaksdagen(tidsperiode1.tom).neste(),\n        tom: Uttaksdagen(tidsperiode2.fom).forrige(),\n    };\n\n    const antallDagerIMellomrom = Tidsperioden(tidsperiodeMellomPerioder).getAntallUttaksdager();\n\n    if (isValidTidsperiode(tidsperiodeMellomPerioder) && antallDagerIMellomrom > 0) {\n        return tidsperiodeMellomPerioder;\n    }\n\n    return undefined;\n};\n\nexport const fjernUnødvendigeHull = (perioder: Periode[]) => {\n    return perioder.reduce((res, periode, index) => {\n        if (index === 0) {\n            if (isPeriodeUtenUttak(periode)) {\n                return res;\n            }\n        }\n\n        if (index === perioder.length - 1) {\n            if (isHull(periode) || isPeriodeUtenUttak(periode)) {\n                return res;\n            }\n\n            res.push(periode);\n            return res;\n        }\n\n        res.push(periode);\n        return res;\n    }, [] as Periode[]);\n};\n\nexport const finnOgSettInnHull = (\n    perioder: Periode[],\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    familiehendelsesdato: Date,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n) => {\n    if (perioder.length === 0) {\n        return perioder;\n    }\n\n    const result = perioder.reduce((res, periode, index) => {\n        if (index === 0 && erFarEllerMedmor) {\n            const førsteUttaksdagFamiliehendelsesdato = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n            if (dayjs(førsteUttaksdagFamiliehendelsesdato).isBefore(periode.tidsperiode.fom)) {\n                const tidsperiodeMellom6ukerEtterFødselOgPerioden: TidsperiodeDate = {\n                    fom: førsteUttaksdagFamiliehendelsesdato,\n                    tom: Uttaksdagen(periode.tidsperiode.fom).forrige(),\n                };\n                const uttaksdagerITidsperiode = Tidsperioden(\n                    tidsperiodeMellom6ukerEtterFødselOgPerioden\n                ).getAntallUttaksdager();\n\n                if (uttaksdagerITidsperiode > 0) {\n                    res.push(\n                        ...getPeriodeHullEllerPeriodeUtenUttak(\n                            tidsperiodeMellom6ukerEtterFødselOgPerioden,\n                            harAktivitetskravIPeriodeUtenUttak,\n                            familiehendelsesdato,\n                            erAdopsjon,\n                            bareFarHarRett,\n                            erFarEllerMedmor,\n                            førsteUttaksdagNesteBarnsSak\n                        )\n                    );\n                }\n            }\n        }\n\n        res.push(periode);\n\n        if (index === perioder.length - 1) {\n            return res;\n        }\n\n        const nestePeriode = perioder[index + 1];\n\n        const tidsperiodeMellomPerioder: TidsperiodeDate = {\n            fom: Uttaksdagen(periode.tidsperiode.tom).neste(),\n            tom: Uttaksdagen(nestePeriode.tidsperiode.fom).forrige(),\n        };\n\n        if (dayjs(tidsperiodeMellomPerioder.tom).isBefore(tidsperiodeMellomPerioder.fom, 'day')) {\n            return res;\n        }\n\n        if (!erFarEllerMedmor && dayjs(tidsperiodeMellomPerioder.tom).isBefore(familiehendelsesdato, 'day')) {\n            return res;\n        }\n\n        const uttaksdagerITidsperiode = Tidsperioden(tidsperiodeMellomPerioder).getAntallUttaksdager();\n\n        if (uttaksdagerITidsperiode > 0) {\n            res.push(\n                ...getPeriodeHullEllerPeriodeUtenUttak(\n                    tidsperiodeMellomPerioder,\n                    harAktivitetskravIPeriodeUtenUttak,\n                    familiehendelsesdato,\n                    erAdopsjon,\n                    bareFarHarRett,\n                    erFarEllerMedmor,\n                    førsteUttaksdagNesteBarnsSak\n                )\n            );\n        }\n\n        return res;\n    }, [] as Periode[]);\n\n    return result;\n};\n\ninterface SplittetDatoType {\n    dato: Date;\n    erFom: boolean;\n}\n\nconst splittPeriodePåDatoer = (periode: Periode, alleDatoer: SplittetDatoType[]) => {\n    const datoerIPerioden = alleDatoer.filter((datoWrapper) =>\n        Tidsperioden(periode.tidsperiode).inneholderDato(datoWrapper.dato)\n    );\n    const oppsplittetPeriode: Periode[] = [];\n\n    if (datoerIPerioden.length === 2) {\n        return [periode];\n    }\n\n    datoerIPerioden.forEach((datoWrapper, index) => {\n        if (index === 0) {\n            oppsplittetPeriode.push({\n                ...periode,\n                tidsperiode: { fom: datoWrapper.dato, tom: undefined! },\n            });\n            return;\n        }\n\n        oppsplittetPeriode[index - 1].tidsperiode.tom = datoWrapper.erFom\n            ? Uttaksdagen(datoWrapper.dato).forrige()\n            : datoWrapper.dato;\n\n        if (index < datoerIPerioden.length - 1) {\n            oppsplittetPeriode.push({\n                ...periode,\n                id: guid(),\n                tidsperiode: {\n                    fom: datoWrapper.erFom ? datoWrapper.dato : Uttaksdagen(datoWrapper.dato).neste(),\n                    tom: undefined!,\n                },\n            });\n        }\n    });\n\n    return oppsplittetPeriode.filter((p) => isValidTidsperiode(p.tidsperiode));\n};\n\n// Funksjon som gjør at alle perioder overlapper 1 til 1\nexport const normaliserPerioder = (perioder: Periode[], annenPartsUttak: Periode[]) => {\n    const perioderTidsperioder: SplittetDatoType[] = perioder\n        .filter((per) => isValidTidsperiode(per.tidsperiode))\n        .reduce((res, p) => {\n            res.push({ dato: p.tidsperiode.fom, erFom: true });\n            res.push({ dato: p.tidsperiode.tom, erFom: false });\n            return res;\n        }, [] as SplittetDatoType[]);\n    const annenPartsUttakTidsperioder = annenPartsUttak.reduce((res, p) => {\n        res.push({ dato: p.tidsperiode.fom, erFom: true });\n        res.push({ dato: p.tidsperiode.tom, erFom: false });\n        return res;\n    }, [] as SplittetDatoType[]);\n\n    const alleDatoer = perioderTidsperioder.concat(annenPartsUttakTidsperioder).sort((d1, d2) => {\n        if (d1.dato.getTime() - d2.dato.getTime() === 0) {\n            if (!d1.erFom) {\n                return 1;\n            }\n\n            if (!d2.erFom) {\n                return -1;\n            }\n        }\n\n        return d1.dato.getTime() - d2.dato.getTime();\n    });\n\n    const normaliserteEgnePerioder: Periode[] = [];\n    const normaliserteAnnenPartsPerioder: Periode[] = [];\n\n    perioder.forEach((p) => {\n        const oppsplittetPeriode = splittPeriodePåDatoer(p, alleDatoer);\n        normaliserteEgnePerioder.push(...oppsplittetPeriode);\n    });\n\n    annenPartsUttak.forEach((p) => {\n        const oppsplittetPeriode = splittPeriodePåDatoer(p, alleDatoer);\n        normaliserteAnnenPartsPerioder.push(...oppsplittetPeriode);\n    });\n\n    return {\n        normaliserteEgnePerioder,\n        normaliserteAnnenPartsPerioder,\n    };\n};\n\nexport const settInnAnnenPartsUttak = (\n    perioder: Periode[],\n    annenPartsUttak: Periode[],\n    familiehendelsesdato: Date,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n    initiellMappingFraSaksperioder = false\n) => {\n    if (annenPartsUttak.length === 0) {\n        return perioder;\n    }\n\n    if (perioder.length === 0) {\n        return annenPartsUttak;\n    }\n\n    const { normaliserteEgnePerioder, normaliserteAnnenPartsPerioder } = normaliserPerioder(perioder, annenPartsUttak);\n\n    const result = normaliserteEgnePerioder.reduce((res, p) => {\n        const overlappendePerioderAnnenPart = Periodene(normaliserteAnnenPartsPerioder).finnOverlappendePerioder(p);\n\n        if (overlappendePerioderAnnenPart.length === 0) {\n            if (isUttaksperiode(p) && p.ønskerSamtidigUttak && initiellMappingFraSaksperioder) {\n                res.push({\n                    ...p,\n                    ønskerSamtidigUttak: false,\n                });\n\n                return res;\n            }\n\n            res.push(p);\n\n            return res;\n        }\n\n        if (isPeriodeUtenUttak(p) || isPeriodeUtenUttakUtsettelse(p) || isHull(p)) {\n            const overlappendePeriode = overlappendePerioderAnnenPart[0];\n\n            res.push({ ...overlappendePeriode, visPeriodeIPlan: true } as Periode);\n            return res;\n        }\n\n        if (isUttaksperiode(p) && p.ønskerSamtidigUttak) {\n            const overlappendePeriode = overlappendePerioderAnnenPart[0];\n            res.push(p);\n\n            if (!isUtsettelseAnnenPart(overlappendePeriode)) {\n                res.push({ ...overlappendePeriode, visPeriodeIPlan: false, ønskerSamtidigUttak: true } as Periode);\n            }\n\n            return res;\n        } else {\n            res.push(p);\n            return res;\n        }\n    }, [] as Periode[]);\n\n    result.sort(sorterPerioder);\n\n    const førstePeriodeStartdato = perioder[0].tidsperiode.fom;\n    const annenPartsUttakSomSlutterFørFørstePeriode = normaliserteAnnenPartsPerioder.filter((ap) =>\n        dayjs(ap.tidsperiode.tom).isBefore(førstePeriodeStartdato, 'day')\n    );\n\n    const sistePeriodeSluttdato = perioder[perioder.length - 1].tidsperiode.tom;\n    const annenPartsUttakSomStarterEtterSistePeriode = normaliserteAnnenPartsPerioder.filter((ap) =>\n        dayjs(ap.tidsperiode.fom).isAfter(sistePeriodeSluttdato, 'day')\n    );\n\n    return slåSammenLikePerioder(\n        [...annenPartsUttakSomSlutterFørFørstePeriode, ...result, ...annenPartsUttakSomStarterEtterSistePeriode],\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak,\n        annenPartsUttak\n    );\n};\n"],"names":["Dekningsgrad","DekningsgradDTO","RettighetType","UttakArbeidType","OppholdÅrsakTypeDTO","FamiliehendelseType","UtsettelseÅrsakTypeDTO","PeriodeResultatÅrsak","getFamiliehendelseType","fødselsdato","termindato","omsorgsovertagelsesdato","undefined","ADOPSJON","TERM","Error","harUttaksdager","periode","Perioden","getAntallUttaksdager","harGyldigTidsperiode","isValidTidsperiode","tidsperiode","korrigerTidsperiodeTilGyldigUttaksdag","_periode$tidsperiode","fom","tom","fomOk","erUttaksdag","tomOk","_objectSpread","Uttaksdagen","neste","forrige","getForelderForPeriode","saksperiode","søkerErFarEllerMedmor","gjelderAnnenPart","Forelder","getUtsettelseÅrsakFromSaksperiode","årsak","Arbeid","UtsettelseÅrsakType","Ferie","InstitusjonBarnet","Sykdom","NavTiltak","beregnSamtidigUttaksProsent","egenProsent","andrePartsProsent","graderingsprosent","toString","getErMorForSyk","erFarEllerMedmor","familiehendelsesdato","konto","flerbarnsdager","samtidigUttak","dayjs","isBefore","add","StønadskontoType","morsAktivitet","MorsAktivitet","mapUttaksperiodeFromSaksperiode","grunnlag","innvilgedePerioder","_saksperiode$graderin","gradert","gradering","resultat","innvilget","tidsperiodeDate","convertTidsperiodeToTidsperiodeDate","erFarEllerMedmorOgKunSøkerHarRett","morHarRett","farMedmorErAleneOmOmsorg","harAnnenForelderTilsvarendeRettEØS","mapAnnenPartInfoPeriodeFromSaksperiode","samtidigUttakProsentAnnenPart","annenPartSamtidigUttakPeriode","find","ip","Tidsperioden","erLik","overlapper","guid","samtidigUttakProsent","arbeidstidprosent","omsorgsovertakelsesdato","familiehendelseDato","getRelevantFamiliehendelseDato","kontoType","getKontotypeBareFarHarRett","periodeTrekkerMinsterett","trekkerMinsterett","id","type","Periodetype","forelder","ønskerSamtidigUttak","ønskerFlerbarnsdager","antallBarn","stillingsprosent","arbeidsformer","getArbeidsformFromUttakArbeidstype","aktivitet","orgnumre","arbeidsgiver","morsAktivitetIPerioden","erMorForSyk","angittAvAnnenPart","_saksperiode$graderin2","utsettelseÅrsak","infotype","PeriodeInfoType","overskrives","visPeriodeIPlan","skalVises","some","getOppholdÅrsakFromSaksperiode","OppholdÅrsakType","mapPeriodeFromSaksperiode","mapUtsettelseperiodeFromSaksperiode","erArbeidstaker","overføringÅrsak","mapOverføringsperiodeFromSaksperiode","mapInfoPeriodeFromAvslåttSaksperiode","avslåttPeriodeType","gyldigeSaksperioder","AVSLAG_HULL_MELLOM_FORELDRENES_PERIODER","trekkerDager","mapSaksperioderTilUttaksperioder","saksperioder","førsteUttaksdagNesteBarnsSak","filter","perioder","map","Date","splittedePerioder","getPerioderSplittetOverFødselOgNesteBarnsFørsteStønadsdag","nyePerioder","forEach","p","tidperiodeOverlapperDato","isUttaksperiode","splittUttaksperiodePåFamiliehendelsesdato","push","splittPeriodePåDato","sammenslåddePerioder","slåSammenLikePerioder","length","infoPerioder","isInfoPeriode","ordinærePerioder","tmp","concat","_toConsumableArray","forrigePeriode","index","erSammenhengende","isSame","sort","sorterPerioder","kunFarMedmorHarRett","farMedmorHarRett","erAdopsjon","familiehendelseType","perioderUtenAnnenPartsSamtidigUttak","annenPartsUttak","harAktivitetskravIPeriodeUtenUttak","erDeltUttak","perioderUtenAnnenPartsSamtidigUttakMedHull","finnOgSettInnHull","settInnAnnenPartsUttak","arbeidstype","Arbeidsform","FRILANS","getStønadskontoTypeFromOppholdÅrsakType","UttakFedrekvoteAnnenForelder","UttakFellesperiodeAnnenForelder","mapOppholdÅrsakType","mapSaksperiodeFromDTO","erAnnenPartsSak","oppholdÅrsak","returnPeriode","saksperiodeErInnvilget","filterAvslåttePeriodeMedInnvilgetPeriodeISammeTidsperiode","_index","likePerioder","periode2","getStartdatoFørstePeriodeAnnenPart","annenPartsSak","Object","keys","ISOStringToDate","mapAnnenPartsEksisterendeSakFromDTO","eksisterendeSakAnnenPart","barn","saksperioderAnnenPart","isFødtBarn","isUfødtBarn","dateToISOString","fødselsdatoer","adopsjonsdato","isAdoptertBarn","grunnlagForAnnenPart","dekningsgrad","morErAleneOmOmsorg","morErUfør","erBarnetFødt","ønskerJustertUttakVedFødsel","saksnummer","uttaksplan","mapSøkerensEksisterendeSakFromDTO","eksisterendeSak","_eksisterendeSak$fami","familiehendelse","omsorgsovertakelse","morUføretrygd","rettighetType","sakTilhørerMor","gjeldendeVedtak","getSøkersituasjonFromSaksgrunnlag","finnAnnenForelderForSaken","situasjon","intl","valgtBarnFnr","annenForeldersFnrFraSaken","_barnet$annenForelder","barnMedGittFnr","b","includes","fnr","annenForelder","barnMedGittFødselsdato","getErDatoInnenEnDagFraAnnenDato","barnet","fornavn","fornavnAnnenForelder","trim","intlUtils","getAnnenForelderFromSaksgrunnlag","annenPart","etternavn","erUfør","harRettPåForeldrepengerINorge","kanIkkeOppgis","harRettPåForeldrepengerIEØS","getBarnFromValgteBarn","valgteBarn","BarnType","getEldsteDato","opprettSøknadFraValgteBarn","getAnnenForelderFromValgteBarn","erEndringssøknad","opprettAnnenForelderFraEksisterendeSak","annenPartFraSak","søkerinfo","valgteBarnFnr","fnrAnnenForelderFraSak","mockAnnenForelder","registrerteBarn","opprettSøknadFraValgteBarnMedSak","_valgteBarn$sak","sak","søknad","søkersituasjon","gjelderAdopsjon","rolle","opprettSøknadFraEksisterendeSak","søker","getSøkerFromSaksgrunnlag","erAleneOmOmsorg","getBarnFromSaksgrunnlag","terminbekreftelse","getSøkerrolleFromSaksgrunnlag","person","søkerErKvinne","kjønn","dato","periodeFørDato","famDato","periodeFørFamDato","leggTilPeriode","_ref","nyPeriode","bareFarHarRett","nyPeriodeFomDate","nyPeriodeTomDate","isSameOrAfter","berørtPeriode","inneholderDato","isUtsettelsesperiode","isForeldrepengerFørFødselUttaksperiode","foregåendePerioder","Periodene","finnAlleForegåendePerioder","påfølgendePerioder","finnAllePåfølgendePerioder","antallDagerINyPeriode","forskyvPerioder","berørtPeriodeSplittetPåNyPeriode","splittPeriodePåPeriode","dagerIBerørtPeriode","førsteDel","dagerIAndreDel","startDatoAndreDel","isOverskrivbarPeriode","leggTil","førstePeriode","sistePeriode","nyPeriodeFom","nyPeriodeTom","tidsperiodeMellomNyPeriodeOgFørstePeriode","getTidsperiodeMellomPerioder","antallOverlappendeUttaksdager","getAntallOverlappendeUttaksdager","finnOverlappendePerioder","dateArray","minDate","maxDate","overlappendeTidsperiode","date","toDate","getPeriodeHullEllerPeriodeUtenUttak","tidsperiodeMellomSistePeriodeOgNyPeriode","PeriodeHullÅrsak","overlappendePerioderAnnenPartForrigePeriode","overlappendePerioderAnnenPart","denneEllerNeste","nyTidsperiode","getSplittetPeriodeOmNødvendig","nyHullPeriode","arguments","fridag","førsteOktober2021ReglerGjelder","førsteUttaksdagFamiliehendelsesdato","førsteUttaksdagEtterSeksUker","tidsperiodeErInnenFørsteSeksUker","erInnenforFørsteSeksUker","farMedmorBeholderDagerIkkeTattUtDeFørsteSeksUkene","andreAugust2022ReglerGjelder","getPeriodeHull","getNyPeriodeUtenUttak","antallDagerFraFomTilFørsteUttaksdagSeksUker","nyPeriodeUtenUttakTidsperiodeLengde","førsteSeksUkerTidsperiode","etterFørsteSeksUkerTidsperiode","tidsperiode1","tidsperiode2","tidsperiodeMellomPerioder","antallDagerIMellomrom","fjernUnødvendigeHull","reduce","res","isPeriodeUtenUttak","isHull","tidsperiodeMellom6ukerEtterFødselOgPerioden","apply","nestePeriode","splittPeriodePåDatoer","alleDatoer","datoerIPerioden","datoWrapper","oppsplittetPeriode","erFom","normaliserPerioder","perioderTidsperioder","per","annenPartsUttakTidsperioder","d1","d2","getTime","normaliserteEgnePerioder","normaliserteAnnenPartsPerioder","initiellMappingFraSaksperioder","_normaliserPerioder","result","isPeriodeUtenUttakUtsettelse","overlappendePeriode","_overlappendePeriode","isUtsettelseAnnenPart","førstePeriodeStartdato","annenPartsUttakSomSlutterFørFørstePeriode","ap","sistePeriodeSluttdato","annenPartsUttakSomStarterEtterSistePeriode","isAfter"],"sourceRoot":""}