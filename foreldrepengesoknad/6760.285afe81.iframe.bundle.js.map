{"version":3,"file":"6760.285afe81.iframe.bundle.js","mappings":"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","sources":["webpack://foreldrepengesoknad/./src/app/components/ekstern-url/EksternUrl.tsx","webpack://foreldrepengesoknad/./src/app/components/interactive-list-element/Pencil.tsx","webpack://foreldrepengesoknad/./src/app/components/interactive-list-element/InteractiveListElement.tsx","webpack://foreldrepengesoknad/./src/app/context/types/AnnenInntekt.ts","webpack://foreldrepengesoknad/./src/app/context/types/Næring.ts","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/inntektsinformasjonFormConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/andre-inntekter/AndreInntekterListe.tsx","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/andre-inntekter/modal/andreInntekterModalFormConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/andre-inntekter/modal/andreInntekterModalFormUtils.ts","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/andre-inntekter/modal/andreInntekterModalQuestionsConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/andre-inntekter/validation/andreInntekterValidation.ts","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/andre-inntekter/modal/AndreInntekterModal.tsx","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/andre-inntekter/AndreInntekter.tsx","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/arbeidsforhold-informasjon/ArbeidsforholdInformasjon.tsx","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/egen-næring/EgenNæringListe.tsx","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/egen-næring/HvemKanDriveMedEgenNæring.tsx","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/egen-næring/modal/egenNæringModalFormConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/egen-næring/modal/egenNæringModalFormUtils.ts","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/egen-næring/modal/egenNæringModalQuestionsConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/egen-næring/modal/validation/egenNæringValidation.ts","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/egen-næring/modal/components/OrgnummerEllerLand.tsx","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/egen-næring/modal/components/Regnskapsfører.tsx","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/egen-næring/modal/EgenNæringModal.tsx","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/egen-næring/EgenNæring.tsx","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/validation/inntektsinformasjonValidering.ts","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/frilans/FrilansoppdragListe.tsx","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/frilans/HvemKanVæreFrilanser.tsx","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/frilans/modal/frilansoppdragModalFormConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/frilans/modal/frilansoppdragModalFormUtils.ts","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/frilans/modal/frilansoppdragModalQuestionsConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/frilans/validation/frilansValidation.ts","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/frilans/modal/FrilansoppdragModal.tsx","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/frilans/Frilans.tsx","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/info-til-fiskere/InfoTilFiskere.tsx","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/inntektsinformasjonFormUtils.ts","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/inntektsInformasjonQuestionsConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/Inntektsinformasjon.tsx","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/arbeidsforhold-informasjon/HarArbeidsforhold.tsx","webpack://foreldrepengesoknad/./src/app/steps/inntektsinformasjon/components/arbeidsforhold-informasjon/HarIkkeArbeidsforhold.tsx","webpack://foreldrepengesoknad/./src/app/utils/arbeidsforholdUtils.ts"],"sourcesContent":["import { intlUtils } from '@navikt/fp-common';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\n\nexport interface Props {\n    tekst?: string;\n    url: string;\n    lenkeTekst: string;\n}\n\nconst EksternUrl: React.FunctionComponent<Props> = ({ tekst, url, lenkeTekst }) => {\n    const intl = useIntl();\n    return (\n        <span>\n            {tekst && intlUtils(intl, tekst)}\n            <a href={url} className=\"lenke\" rel=\"noreferrer\" target=\"_blank\" style={{ marginLeft: 3 }}>\n                {lenkeTekst}\n                <EksternIkon />\n            </a>\n        </span>\n    );\n};\n\nconst EksternIkon = () => (\n    <svg\n        className=\"eksternIkon\"\n        width=\"16px\"\n        height=\"16px\"\n        viewBox=\"0 0 24 24\"\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n    >\n        <title>Ekstern lenke</title>\n        <g stroke=\"none\" strokeWidth=\"10\" fill=\"none\" fillRule=\"evenodd\">\n            <path\n                d=\"M22.5217391,16.5696841 C22.5217391,16.3055479 22.7358638,16.0914232 23,16.0914232 C23.2641362,16.0914232 23.4782609,16.3055479 23.4782609,16.5696841 L23.4782609,19.3333333 C23.4782609,21.6225136 21.6225136,23.4782609 19.3333333,23.4782609 L4.66666667,23.4782609 C2.3774864,23.4782609 0.52173913,21.6225136 0.52173913,19.3333333 L0.52173913,4.66666667 C0.52173913,2.3774864 2.3774864,0.52173913 4.66666667,0.52173913 L7.47238494,0.52173913 C7.73652113,0.52173913 7.95064581,0.735863815 7.95064581,1 C7.95064581,1.26413618 7.73652113,1.47826087 7.47238494,1.47826087 L4.66666667,1.47826087 C2.90575877,1.47826087 1.47826087,2.90575877 1.47826087,4.66666667 L1.47826087,19.3333333 C1.47826087,21.0942412 2.90575877,22.5217391 4.66666667,22.5217391 L19.3333333,22.5217391 C21.0942412,22.5217391 22.5217391,21.0942412 22.5217391,19.3333333 L22.5217391,16.5696841 Z\"\n                fill=\"#0067C5\"\n            />\n            <path\n                d=\"M10.1381815,14.5381815 C9.95140902,14.724954 9.64859098,14.724954 9.4618185,14.5381815 C9.27504601,14.351409 9.27504601,14.048591 9.4618185,13.8618185 L22.6618185,0.661818496 C22.848591,0.475046009 23.151409,0.475046009 23.3381815,0.661818496 C23.524954,0.848590983 23.524954,1.15140902 23.3381815,1.3381815 L10.1381815,14.5381815 Z\"\n                fill=\"#0067C5\"\n            />\n            <path\n                d=\"M22.5217391,1.47826087 L14.2158243,1.47826087 C13.9516881,1.47826087 13.7375634,1.26413618 13.7375634,1 C13.7375634,0.735863815 13.9516881,0.52173913 14.2158243,0.52173913 L23.4782609,0.52173913 L23.4782609,9.93487469 C23.4782609,10.1990109 23.2641362,10.4131356 23,10.4131356 C22.7358638,10.4131356 22.5217391,10.1990109 22.5217391,9.93487469 L22.5217391,1.47826087 Z\"\n                fill=\"#0067C5\"\n            />\n        </g>\n    </svg>\n);\n\nexport default EksternUrl;\n","import React from 'react';\n\nconst Pencil = () => {\n    return (\n        <svg width={24} height={24} viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n            <title>{'Rediger'}</title>\n            <path\n                d=\"M7.709 20.66L2 22l1.34-5.708L17.111 2.517a1.766 1.766 0 012.498 0l1.874 1.874c.688.69.688 1.806 0 2.498L7.709 20.66zM20.86 7.515l-4.374-4.372 4.374 4.372zm-1.26 1.26L15.24 4.39 19.6 8.774zM7.931 20.44l-4.37-4.371 4.37 4.37z\"\n                stroke=\"#0067C5\"\n                strokeWidth={0.9}\n                fill=\"none\"\n                fillRule=\"evenodd\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n            />\n        </svg>\n    );\n};\n\nexport default Pencil;\n","import React, { FunctionComponent } from 'react';\nimport Normaltekst from 'nav-frontend-typografi/lib/normaltekst';\nimport { bemUtils } from '@navikt/fp-common';\nimport Pencil from './Pencil';\nimport { EtikettFokus } from 'nav-frontend-etiketter';\n\nimport './interactiveListElement.less';\n\ninterface Props {\n    onEdit: () => void;\n    onDelete: () => void;\n    editButtonAriaText: string;\n    deleteButtonAriaText: string;\n    title: string;\n    text: string;\n    deleteLinkText: string;\n    missingDocumentation?: boolean;\n}\n\nconst InteractiveListElement: FunctionComponent<Props> = ({\n    title,\n    text,\n    deleteLinkText,\n    deleteButtonAriaText,\n    editButtonAriaText,\n    missingDocumentation,\n    onDelete,\n    onEdit,\n}) => {\n    const bem = bemUtils('interactiveListElement');\n\n    return (\n        <li className={bem.block}>\n            <div className={bem.element('top')}>\n                <Normaltekst className=\"title\">{title}</Normaltekst>\n                <button\n                    type=\"button\"\n                    className={bem.element('editButton')}\n                    onClick={onEdit}\n                    aria-label={editButtonAriaText}\n                >\n                    <Pencil />\n                </button>\n            </div>\n            <Normaltekst className={bem.element('text')}>{text}</Normaltekst>\n            <div className={bem.element('bottom')}>\n                {missingDocumentation && <EtikettFokus>Mangler dokumentasjon</EtikettFokus>}\n                <button\n                    className={bem.element('deleteButton')}\n                    onClick={onDelete}\n                    type=\"button\"\n                    aria-label={deleteButtonAriaText}\n                >\n                    {deleteLinkText}\n                </button>\n            </div>\n        </li>\n    );\n};\n\nexport default InteractiveListElement;\n","import { TidsperiodeMedValgfriSluttdato, TidsperiodeMedValgfriSluttdatoDate } from '@navikt/fp-common';\nimport { Attachment } from 'app/types/Attachment';\n\nexport enum AnnenInntektType {\n    SLUTTPAKKE = 'ETTERLØNN_SLUTTPAKKE',\n    MILITÆRTJENESTE = 'MILITÆR_ELLER_SIVILTJENESTE',\n    VENTELØNN = 'VENTELØNN_VARTPENGER',\n    JOBB_I_UTLANDET = 'JOBB_I_UTLANDET',\n}\n\ninterface AnnenInntektBase {\n    type: AnnenInntektType;\n    tidsperiode: TidsperiodeMedValgfriSluttdato;\n    pågående: boolean;\n    vedlegg: Attachment[];\n}\n\nexport interface SluttpakkeInntekt extends AnnenInntektBase {\n    type: AnnenInntektType.SLUTTPAKKE;\n}\n\nexport interface MilitærtjenesteInntekt extends AnnenInntektBase {\n    type: AnnenInntektType.MILITÆRTJENESTE;\n}\n\nexport interface JobbIUtlandetInntekt extends AnnenInntektBase {\n    type: AnnenInntektType.JOBB_I_UTLANDET;\n    arbeidsgiverNavn: string;\n    land: string;\n}\n\nexport interface VentelønnInntekt extends AnnenInntektBase {\n    type: AnnenInntektType.VENTELØNN;\n}\n\nexport type AnnenInntekt = SluttpakkeInntekt | MilitærtjenesteInntekt | JobbIUtlandetInntekt | VentelønnInntekt;\n\nexport interface AnnenInntektBaseInnsending extends Omit<AnnenInntektBase, 'tidsperiode'> {\n    tidsperiode: TidsperiodeMedValgfriSluttdatoDate;\n}\n\nexport interface SluttpakkeInntektInnsending extends AnnenInntektBaseInnsending {\n    type: AnnenInntektType.SLUTTPAKKE;\n}\n\nexport interface MilitærtjenesteInntektInnsending extends AnnenInntektBaseInnsending {\n    type: AnnenInntektType.MILITÆRTJENESTE;\n}\n\nexport interface JobbIUtlandetInntektInnsending extends AnnenInntektBaseInnsending {\n    type: AnnenInntektType.JOBB_I_UTLANDET;\n    arbeidsgiverNavn: string;\n    land: string;\n}\n\nexport interface VentelønnInntektInnsending extends AnnenInntektBaseInnsending {\n    type: AnnenInntektType.VENTELØNN;\n}\n\nexport type AnnenInntektInnsending =\n    | SluttpakkeInntektInnsending\n    | MilitærtjenesteInntektInnsending\n    | JobbIUtlandetInntektInnsending\n    | VentelønnInntektInnsending;\n","import { TidsperiodeMedValgfriSluttdatoDate } from '@navikt/fp-common';\n\nexport enum Næringstype {\n    FISKER = 'FISKE',\n    JORDBRUK = 'JORDBRUK_SKOGBRUK',\n    DAGMAMMA = 'DAGMAMMA',\n    ANNET = 'ANNEN',\n}\n\nexport interface Næring {\n    næringstyper: Næringstype[];\n    tidsperiode: TidsperiodeMedValgfriSluttdatoDate;\n    næringsinntekt?: number;\n    pågående: boolean;\n    navnPåNæringen: string;\n    organisasjonsnummer?: string;\n    registrertINorge: boolean;\n    registrertILand?: string;\n    harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene?: boolean;\n    oppstartsdato?: Date;\n    hattVarigEndringAvNæringsinntektSiste4Kalenderår?: boolean;\n    endringAvNæringsinntektInformasjon?: EndringAvNæringsinntektInformasjon;\n    harRegnskapsfører: boolean;\n    regnskapsfører?: Næringsrelasjon;\n}\n\nexport interface EndringAvNæringsinntektInformasjon {\n    dato: Date;\n    næringsinntektEtterEndring: number;\n    forklaring: string;\n}\n\nexport interface EndringAvNæringsinntektInformasjonInnsending extends Omit<EndringAvNæringsinntektInformasjon, 'dato'> {\n    dato: Date;\n}\n\nexport interface Næringsrelasjon {\n    navn: string;\n    telefonnummer: string;\n    erNærVennEllerFamilie: boolean;\n}\n","import { getTypedFormComponents, YesOrNo } from '@navikt/sif-common-formik/lib';\n\nexport enum InntektsinformasjonFormField {\n    hattInntektSomFrilans = 'hattInntektSomFrilans',\n    hattInntektSomNæringsdrivende = 'hattInntektSomNæringsdrivende',\n    hattAndreInntekter = 'hattAndreInntekter',\n    frilansOppstartsDato = 'frilansOppstartsDato',\n    jobberFremdelesSomFrilanser = 'jobberFremdelesSomFrilanser',\n    oppdragForNæreVennerEllerFamilie = 'oppdragForNæreVennerEllerFamilie',\n    inntektSomFosterforelder = 'inntektSomFosterforelder',\n}\n\nexport interface InntektsinformasjonFormData {\n    [InntektsinformasjonFormField.hattInntektSomFrilans]: YesOrNo;\n    [InntektsinformasjonFormField.hattInntektSomNæringsdrivende]: YesOrNo;\n    [InntektsinformasjonFormField.hattAndreInntekter]: YesOrNo;\n    [InntektsinformasjonFormField.frilansOppstartsDato]: string;\n    [InntektsinformasjonFormField.inntektSomFosterforelder]: YesOrNo;\n    [InntektsinformasjonFormField.jobberFremdelesSomFrilanser]: YesOrNo;\n    [InntektsinformasjonFormField.oppdragForNæreVennerEllerFamilie]: YesOrNo;\n}\n\nexport const InntektsinformasjonFormComponents = getTypedFormComponents<\n    InntektsinformasjonFormField,\n    InntektsinformasjonFormData,\n    string\n>();\n","import { formatTidsperiodeMedValgfriSluttdato, intlUtils } from '@navikt/fp-common';\nimport InteractiveListElement from 'app/components/interactive-list-element/InteractiveListElement';\nimport { AnnenInntekt, AnnenInntektType } from 'app/context/types/AnnenInntekt';\nimport React, { FunctionComponent } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\n\ninterface Props {\n    andreInntekter: AnnenInntekt[];\n    deleteAnnenInntekt: (oppdrag: AnnenInntekt) => void;\n    selectAnnenInntekt: (oppdrag: AnnenInntekt) => void;\n}\n\nconst getTitle = (type: AnnenInntektType, intl: IntlShape): string => {\n    if (type === AnnenInntektType.JOBB_I_UTLANDET) {\n        return intlUtils(intl, 'inntektsinformasjon.andreInntekter.inntektsliste.jobbIUtlandet');\n    }\n\n    if (type === AnnenInntektType.MILITÆRTJENESTE) {\n        return intlUtils(intl, 'inntektsinformasjon.andreInntekter.inntektsliste.førstegangstjeneste');\n    }\n\n    if (type === AnnenInntektType.SLUTTPAKKE) {\n        return intlUtils(intl, 'inntektsinformasjon.andreInntekter.inntektsliste.sluttpakke');\n    }\n\n    return intlUtils(intl, 'inntektsinformasjon.andreInntekter.inntektsliste.ventelønn');\n};\n\nconst AndreInntekterListe: FunctionComponent<Props> = ({ andreInntekter, deleteAnnenInntekt, selectAnnenInntekt }) => {\n    const intl = useIntl();\n\n    if (andreInntekter.length === 0) {\n        return null;\n    }\n\n    return (\n        <ul style={{ margin: 0, padding: 0, listStyle: 'none' }}>\n            {andreInntekter.map((annenInntekt, index) => (\n                <InteractiveListElement\n                    deleteLinkText=\"Slett annen inntekt\"\n                    onDelete={() => deleteAnnenInntekt(annenInntekt)}\n                    onEdit={() => selectAnnenInntekt(annenInntekt)}\n                    text={formatTidsperiodeMedValgfriSluttdato(annenInntekt.tidsperiode)}\n                    title={getTitle(annenInntekt.type, intl)}\n                    deleteButtonAriaText={`Slett annen inntekt`}\n                    editButtonAriaText={`Rediger annen inntekt`}\n                    missingDocumentation={\n                        annenInntekt.vedlegg.length === 0 && annenInntekt.type !== AnnenInntektType.JOBB_I_UTLANDET\n                    }\n                    key={`${annenInntekt.type}${annenInntekt.tidsperiode.fom}${index}`}\n                />\n            ))}\n        </ul>\n    );\n};\n\nexport default AndreInntekterListe;\n","import { getTypedFormComponents, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { AnnenInntektType } from 'app/context/types/AnnenInntekt';\nimport { Attachment } from 'app/types/Attachment';\n\nexport enum AndreInntekterFormField {\n    type = 'type',\n    navnPåArbeidsgiver = 'navnPåArbeidsgiver',\n    land = 'land',\n    fom = 'fom',\n    tom = 'tom',\n    pågående = 'pågående',\n    dokumentasjon = 'dokumentasjon',\n}\n\nexport interface AndreInntekterFormData {\n    [AndreInntekterFormField.type]: AnnenInntektType | undefined;\n    [AndreInntekterFormField.navnPåArbeidsgiver]: string;\n    [AndreInntekterFormField.land]: string;\n    [AndreInntekterFormField.fom]: string;\n    [AndreInntekterFormField.tom]: string;\n    [AndreInntekterFormField.pågående]: YesOrNo;\n    [AndreInntekterFormField.dokumentasjon]: Attachment[];\n}\n\nexport const AndreInntekterModalFormComponents = getTypedFormComponents<\n    AndreInntekterFormField,\n    AndreInntekterFormData,\n    string\n>();\n","import { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { AnnenInntekt, AnnenInntektType } from 'app/context/types/AnnenInntekt';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { Skjemanummer } from 'app/types/Skjemanummer';\nimport { convertBooleanOrUndefinedToYesOrNo, convertYesOrNoOrUndefinedToBoolean } from 'app/utils/formUtils';\nimport { lagSendSenereDokumentNårIngenAndreFinnes } from 'app/utils/vedleggUtils';\nimport { AndreInntekterFormData, AndreInntekterFormField } from './andreInntekterModalFormConfig';\n\nconst initialAndreInntekterFormValues: AndreInntekterFormData = {\n    [AndreInntekterFormField.type]: undefined,\n    [AndreInntekterFormField.fom]: '',\n    [AndreInntekterFormField.tom]: '',\n    [AndreInntekterFormField.pågående]: YesOrNo.UNANSWERED,\n    [AndreInntekterFormField.navnPåArbeidsgiver]: '',\n    [AndreInntekterFormField.land]: '',\n    [AndreInntekterFormField.dokumentasjon]: [],\n};\n\nexport const getSkjemanummer = (values: AndreInntekterFormData): Skjemanummer => {\n    if (values.type === AnnenInntektType.MILITÆRTJENESTE) {\n        return Skjemanummer.DOK_MILITÆR_SILVIL_TJENESTE;\n    }\n\n    if (values.type === AnnenInntektType.SLUTTPAKKE) {\n        return Skjemanummer.ETTERLØNN_ELLER_SLUTTVEDERLAG;\n    }\n\n    return Skjemanummer.ANNET;\n};\n\nexport const cleanupAndreInntekterForm = (\n    values: AndreInntekterFormData,\n    visibility: QuestionVisibility<AndreInntekterFormField, undefined>\n): AndreInntekterFormData => {\n    return {\n        type: visibility.isVisible(AndreInntekterFormField.type) ? values.type : initialAndreInntekterFormValues.type,\n        dokumentasjon: visibility.isVisible(AndreInntekterFormField.dokumentasjon)\n            ? lagSendSenereDokumentNårIngenAndreFinnes(\n                  values.dokumentasjon,\n                  AttachmentType.ANNEN_INNTEKT,\n                  getSkjemanummer(values)\n              )\n            : initialAndreInntekterFormValues.dokumentasjon,\n        fom: visibility.isVisible(AndreInntekterFormField.fom) ? values.fom : initialAndreInntekterFormValues.fom,\n        tom: visibility.isVisible(AndreInntekterFormField.tom) ? values.tom : initialAndreInntekterFormValues.tom,\n        pågående: visibility.isVisible(AndreInntekterFormField.pågående)\n            ? values.pågående\n            : initialAndreInntekterFormValues.pågående,\n        navnPåArbeidsgiver: visibility.isVisible(AndreInntekterFormField.navnPåArbeidsgiver)\n            ? values.navnPåArbeidsgiver\n            : initialAndreInntekterFormValues.navnPåArbeidsgiver,\n        land: visibility.isVisible(AndreInntekterFormField.land) ? values.land : initialAndreInntekterFormValues.land,\n    };\n};\n\nexport const getInitialAndreInntekterFormValues = (annenInntekt: AnnenInntekt | undefined): AndreInntekterFormData => {\n    if (!annenInntekt) {\n        return {\n            ...initialAndreInntekterFormValues,\n        };\n    }\n\n    if (annenInntekt.type === AnnenInntektType.JOBB_I_UTLANDET) {\n        return {\n            ...initialAndreInntekterFormValues,\n            navnPåArbeidsgiver: annenInntekt.arbeidsgiverNavn,\n            land: annenInntekt.land,\n            fom: annenInntekt.tidsperiode.fom,\n            tom: annenInntekt.tidsperiode.tom || '',\n            dokumentasjon: annenInntekt.vedlegg,\n            pågående: convertBooleanOrUndefinedToYesOrNo(annenInntekt.pågående),\n            type: annenInntekt.type,\n        };\n    }\n\n    return {\n        ...initialAndreInntekterFormValues,\n        fom: annenInntekt.tidsperiode.fom,\n        tom: annenInntekt.tidsperiode.tom || '',\n        dokumentasjon: annenInntekt.vedlegg,\n        pågående: convertBooleanOrUndefinedToYesOrNo(annenInntekt.pågående),\n        type: annenInntekt.type,\n    };\n};\n\nexport const mapAnnenInntektModalValuesToState = (annenInntekt: Partial<AndreInntekterFormData>): AnnenInntekt => {\n    if (annenInntekt.type === AnnenInntektType.JOBB_I_UTLANDET) {\n        return {\n            arbeidsgiverNavn: annenInntekt.navnPåArbeidsgiver!,\n            land: annenInntekt.land!,\n            pågående: convertYesOrNoOrUndefinedToBoolean(annenInntekt.pågående)!,\n            tidsperiode: {\n                fom: annenInntekt.fom!,\n                tom: annenInntekt.tom,\n            },\n            type: annenInntekt.type,\n            vedlegg: [],\n        };\n    }\n\n    return {\n        pågående: convertYesOrNoOrUndefinedToBoolean(annenInntekt.pågående)!,\n        tidsperiode: {\n            fom: annenInntekt.fom!,\n            tom: annenInntekt.tom,\n        },\n        type: annenInntekt.type!,\n        vedlegg: annenInntekt.dokumentasjon || [],\n    };\n};\n","import { hasValue } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { AnnenInntektType } from 'app/context/types/AnnenInntekt';\nimport { AndreInntekterFormData, AndreInntekterFormField } from './andreInntekterModalFormConfig';\n\nconst AndreInntekterModalFormConfig: QuestionConfig<AndreInntekterFormData, AndreInntekterFormField> = {\n    [AndreInntekterFormField.type]: {\n        isIncluded: () => true,\n        isAnswered: ({ type }) => hasValue(type),\n    },\n    [AndreInntekterFormField.land]: {\n        isIncluded: ({ type }) => type === AnnenInntektType.JOBB_I_UTLANDET,\n        isAnswered: ({ land }) => hasValue(land),\n        visibilityFilter: ({ type }) => type === AnnenInntektType.JOBB_I_UTLANDET,\n    },\n    [AndreInntekterFormField.navnPåArbeidsgiver]: {\n        isIncluded: ({ type }) => type === AnnenInntektType.JOBB_I_UTLANDET,\n        isAnswered: ({ navnPåArbeidsgiver }) => hasValue(navnPåArbeidsgiver),\n        visibilityFilter: ({ land }) => hasValue(land),\n    },\n    [AndreInntekterFormField.fom]: {\n        isIncluded: () => true,\n        isAnswered: ({ fom }) => hasValue(fom),\n        visibilityFilter: ({ type, navnPåArbeidsgiver, land }) =>\n            (type === AnnenInntektType.JOBB_I_UTLANDET && hasValue(navnPåArbeidsgiver) && hasValue(land)) ||\n            (type !== AnnenInntektType.JOBB_I_UTLANDET && hasValue(type)),\n    },\n    [AndreInntekterFormField.pågående]: {\n        isIncluded: () => true,\n        isAnswered: ({ pågående }) => pågående !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ fom }) => hasValue(fom),\n    },\n    [AndreInntekterFormField.tom]: {\n        isIncluded: ({ pågående }) => pågående === YesOrNo.NO,\n        isAnswered: ({ tom }) => hasValue(tom),\n        visibilityFilter: ({ pågående }) => pågående === YesOrNo.NO,\n    },\n    [AndreInntekterFormField.dokumentasjon]: {\n        isIncluded: ({ type }) => type !== AnnenInntektType.JOBB_I_UTLANDET,\n        isAnswered: () => true,\n        visibilityFilter: ({ pågående, tom }) => pågående === YesOrNo.YES || (pågående === YesOrNo.NO && hasValue(tom)),\n    },\n};\n\nconst andreInntekterModalQuestionsConfig = Questions<AndreInntekterFormData, AndreInntekterFormField>(\n    AndreInntekterModalFormConfig\n);\n\nexport default andreInntekterModalQuestionsConfig;\n","import { hasValue, intlUtils } from '@navikt/fp-common';\nimport { isDateABeforeDateB, isDateInTheFuture } from 'app/utils/dateUtils';\nimport { isISODateString } from 'nav-datovelger';\nimport { IntlShape } from 'react-intl';\n\nexport const validateAnnenInntektFom = (intl: IntlShape, tom: string) => (fom: string) => {\n    if (!hasValue(fom)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.påkrevd');\n    }\n\n    if (!isISODateString(fom)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.gyldigDato');\n    }\n\n    if (isDateInTheFuture(fom)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.erIFremtiden');\n    }\n\n    if (isDateABeforeDateB(tom, fom)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.førTilDato');\n    }\n\n    return undefined;\n};\n\nexport const validateAnnenInntektTom = (intl: IntlShape, fom: string) => (tom: string) => {\n    if (!hasValue(tom)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.påkrevd');\n    }\n\n    if (!isISODateString(tom)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.gyldigDato');\n    }\n\n    if (isDateInTheFuture(tom)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.erIFremtiden');\n    }\n\n    if (isDateABeforeDateB(tom, fom)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.etterFraDato');\n    }\n\n    return undefined;\n};\n","import { bemUtils, Block, intlUtils } from '@navikt/fp-common';\nimport Modal from 'nav-frontend-modal';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    AndreInntekterFormData,\n    AndreInntekterFormField,\n    AndreInntekterModalFormComponents,\n} from './andreInntekterModalFormConfig';\nimport {\n    cleanupAndreInntekterForm,\n    getInitialAndreInntekterFormValues,\n    getSkjemanummer,\n    mapAnnenInntektModalValuesToState,\n} from './andreInntekterModalFormUtils';\nimport { AnnenInntekt, AnnenInntektType } from 'app/context/types/AnnenInntekt';\nimport andreInntekterModalQuestionsConfig from './andreInntekterModalQuestionsConfig';\nimport FormikFileUploader from 'app/components/formik-file-uploader/FormikFileUploader';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport VeilederNormal from 'app/assets/VeilederNormal';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport { validateAnnenInntektFom, validateAnnenInntektTom } from './../validation/andreInntekterValidation';\n\nimport './andreInntekterModal.less';\nimport dayjs from 'dayjs';\nimport { validateRequiredTextInputField } from 'app/utils/validationUtil';\n\ninterface Props {\n    isOpen: boolean;\n    contentLabel: string;\n    onRequestClose: () => void;\n    addAnnenInntekt: (annenInntekt: AnnenInntekt) => void;\n    editAnnenInntekt: (annenInntekt: AnnenInntekt) => void;\n    selectedAnnenInntekt: AnnenInntekt | undefined;\n}\n\nconst AndreInntekterModal: FunctionComponent<Props> = ({\n    isOpen,\n    contentLabel,\n    onRequestClose,\n    selectedAnnenInntekt,\n    addAnnenInntekt,\n    editAnnenInntekt,\n}) => {\n    const intl = useIntl();\n    const bem = bemUtils('andreInntekterModal');\n\n    const onValidSubmit = (values: Partial<AndreInntekterFormData>) => {\n        if (!selectedAnnenInntekt) {\n            addAnnenInntekt(mapAnnenInntektModalValuesToState(values));\n        } else {\n            editAnnenInntekt(mapAnnenInntektModalValuesToState(values));\n        }\n        onRequestClose();\n    };\n\n    const getVeilederMessageId = (values: AndreInntekterFormData): string => {\n        if (values.type === AnnenInntektType.MILITÆRTJENESTE) {\n            return 'inntektsinformasjon.andreInntekterModal.veileder.militær';\n        }\n\n        if (values.type === AnnenInntektType.SLUTTPAKKE) {\n            return 'inntektsinformasjon.andreInntekterModal.veileder.sluttpakke';\n        }\n\n        return 'inntektsinformasjon.andreInntekterModal.veileder.ventelønn';\n    };\n\n    const navnPåArbeidsgiverLabel = intlUtils(intl, 'annenInntekt.spørsmål.arbeidsgiver');\n\n    return (\n        <Modal\n            isOpen={isOpen}\n            contentLabel={contentLabel}\n            onRequestClose={onRequestClose}\n            closeButton={true}\n            shouldCloseOnOverlayClick={false}\n            className={bem.block}\n        >\n            <AndreInntekterModalFormComponents.FormikWrapper\n                initialValues={getInitialAndreInntekterFormValues(selectedAnnenInntekt)}\n                onSubmit={onValidSubmit}\n                renderForm={({ values: formValues }) => {\n                    const visibility = andreInntekterModalQuestionsConfig.getVisbility(formValues);\n\n                    return (\n                        <AndreInntekterModalFormComponents.Form\n                            includeButtons={false}\n                            cleanup={(values) => cleanupAndreInntekterForm(values, visibility)}\n                        >\n                            <Block padBottom=\"l\">\n                                <Undertittel className={bem.element('tittel')}>\n                                    <FormattedMessage id=\"inntektsinformasjon.andreInntekterModal.tittel\" />\n                                </Undertittel>\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(AndreInntekterFormField.type)}>\n                                <AndreInntekterModalFormComponents.RadioPanelGroup\n                                    name={AndreInntekterFormField.type}\n                                    radios={[\n                                        { label: 'Jobb i utlandet', value: AnnenInntektType.JOBB_I_UTLANDET },\n                                        { label: 'Vartpenger og ventelønn', value: AnnenInntektType.VENTELØNN },\n                                        { label: 'Sluttvederlag', value: AnnenInntektType.SLUTTPAKKE },\n                                        { label: 'Førstegangstjeneste', value: AnnenInntektType.MILITÆRTJENESTE },\n                                    ]}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(AndreInntekterFormField.land)}>\n                                <AndreInntekterModalFormComponents.CountrySelect\n                                    name={AndreInntekterFormField.land}\n                                    label={intlUtils(intl, 'annenInntekt.spørsmål.land')}\n                                    useAlpha3Code={false}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(AndreInntekterFormField.navnPåArbeidsgiver)}\n                            >\n                                <AndreInntekterModalFormComponents.Input\n                                    name={AndreInntekterFormField.navnPåArbeidsgiver}\n                                    label={navnPåArbeidsgiverLabel}\n                                    validate={validateRequiredTextInputField(navnPåArbeidsgiverLabel, intl)}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(AndreInntekterFormField.fom)}>\n                                <AndreInntekterModalFormComponents.DatePicker\n                                    name={AndreInntekterFormField.fom}\n                                    label={intlUtils(intl, 'fom')}\n                                    placeholder=\"dd.mm.åååå\"\n                                    fullscreenOverlay={true}\n                                    showYearSelector={true}\n                                    validate={validateAnnenInntektFom(intl, formValues.tom)}\n                                    maxDate={dayjs().toDate()}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(AndreInntekterFormField.pågående)}>\n                                <AndreInntekterModalFormComponents.YesOrNoQuestion\n                                    name={AndreInntekterFormField.pågående}\n                                    legend={intlUtils(intl, 'pågående')}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(AndreInntekterFormField.tom)}>\n                                <AndreInntekterModalFormComponents.DatePicker\n                                    name={AndreInntekterFormField.tom}\n                                    label={intlUtils(intl, 'tom')}\n                                    placeholder=\"dd.mm.åååå\"\n                                    fullscreenOverlay={true}\n                                    showYearSelector={true}\n                                    validate={validateAnnenInntektTom(intl, formValues.fom)}\n                                    maxDate={dayjs().toDate()}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(AndreInntekterFormField.dokumentasjon)}>\n                                <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                                    <FormattedMessage id={getVeilederMessageId(formValues)} />\n                                </Veilederpanel>\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(AndreInntekterFormField.dokumentasjon)}>\n                                <FormikFileUploader\n                                    name={AndreInntekterFormField.dokumentasjon}\n                                    label=\"Last opp dokumentasjon\"\n                                    attachments={formValues.dokumentasjon}\n                                    attachmentType={AttachmentType.ANNEN_INNTEKT}\n                                    skjemanummer={getSkjemanummer(formValues)}\n                                />\n                            </Block>\n                            <Block visible={visibility.areAllQuestionsAnswered()} textAlignCenter={true}>\n                                <Hovedknapp>{intlUtils(intl, 'søknad.gåVidere')}</Hovedknapp>\n                            </Block>\n                        </AndreInntekterModalFormComponents.Form>\n                    );\n                }}\n            />\n        </Modal>\n    );\n};\n\nexport default AndreInntekterModal;\n","import { Block, intlUtils } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { AnnenInntekt } from 'app/context/types/AnnenInntekt';\nimport { Knapp } from 'nav-frontend-knapper';\nimport React, { FunctionComponent, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    InntektsinformasjonFormComponents,\n    InntektsinformasjonFormData,\n    InntektsinformasjonFormField,\n} from '../../inntektsinformasjonFormConfig';\nimport AndreInntekterListe from './AndreInntekterListe';\nimport AndreInntekterModal from './modal/AndreInntekterModal';\n\ninterface Props {\n    andreInntekterInformasjon: AnnenInntekt[];\n    setAndreInntekterInformasjon: any;\n    visibility: QuestionVisibility<InntektsinformasjonFormField, undefined>;\n    formValues: InntektsinformasjonFormData;\n}\n\nconst AndreInntekter: FunctionComponent<Props> = ({\n    andreInntekterInformasjon,\n    setAndreInntekterInformasjon,\n    visibility,\n    formValues,\n}) => {\n    const intl = useIntl();\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [selectedAnnenInntekt, setSelectedAnnenInntekt] = useState<AnnenInntekt>();\n\n    const handleOnLeggTil = () => {\n        setIsModalOpen(true);\n    };\n\n    const addAnnenInntekt = (annenInntekt: AnnenInntekt) => {\n        const updatedandreInntekterInformasjon = andreInntekterInformasjon.concat(annenInntekt);\n\n        setAndreInntekterInformasjon(updatedandreInntekterInformasjon);\n    };\n\n    const deleteAnnenInntekt = (annenInntekt: AnnenInntekt) => {\n        const updatedAndreInntekterInformasjon = andreInntekterInformasjon.filter(\n            (inntekt) => inntekt !== annenInntekt\n        );\n\n        setAndreInntekterInformasjon(updatedAndreInntekterInformasjon);\n    };\n\n    const editAnnenInntekt = (annenInntekt: AnnenInntekt) => {\n        const updatedAndreInntekterInformasjon = andreInntekterInformasjon\n            .filter((inntekt) => inntekt !== selectedAnnenInntekt)\n            .concat(annenInntekt);\n\n        setAndreInntekterInformasjon(updatedAndreInntekterInformasjon);\n    };\n\n    const selectAnnenInntekt = (annenInntekt: AnnenInntekt) => {\n        setSelectedAnnenInntekt(annenInntekt);\n        setIsModalOpen(true);\n    };\n\n    return (\n        <>\n            <Block padBottom=\"l\" visible={visibility.isVisible(InntektsinformasjonFormField.hattAndreInntekter)}>\n                <InntektsinformasjonFormComponents.YesOrNoQuestion\n                    name={InntektsinformasjonFormField.hattAndreInntekter}\n                    legend={intlUtils(intl, 'inntektsinformasjon.annenInntekt')}\n                    validate={(hattAndreInntekter) => {\n                        if (hattAndreInntekter === YesOrNo.YES) {\n                            if (andreInntekterInformasjon.length === 0) {\n                                return intlUtils(\n                                    intl,\n                                    'valideringsfeil.inntektsinformasjon.andreInntekter.måHaOppdrag'\n                                );\n                            }\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n            {formValues.hattAndreInntekter === YesOrNo.YES && (\n                <div style={{ backgroundColor: '#f1f1f1', marginBottom: '1rem', padding: '1rem' }}>\n                    <AndreInntekterModal\n                        isOpen={isModalOpen}\n                        contentLabel={intlUtils(intl, 'inntektsinformasjon.andreInntekterModal.contentLabel')}\n                        onRequestClose={() => setIsModalOpen(false)}\n                        selectedAnnenInntekt={selectedAnnenInntekt}\n                        addAnnenInntekt={addAnnenInntekt}\n                        editAnnenInntekt={editAnnenInntekt}\n                    />\n                    <Block padBottom=\"l\" visible={andreInntekterInformasjon.length > 0}>\n                        <AndreInntekterListe\n                            andreInntekter={andreInntekterInformasjon}\n                            deleteAnnenInntekt={deleteAnnenInntekt}\n                            selectAnnenInntekt={selectAnnenInntekt}\n                        />\n                    </Block>\n                    <Knapp htmlType=\"button\" onClick={handleOnLeggTil}>\n                        <FormattedMessage id=\"inntektsinformasjon.leggTilOppdrag\" />\n                    </Knapp>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default AndreInntekter;\n","import React from 'react';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport HarIkkeArbeidsforhold from './HarIkkeArbeidsforhold';\nimport HarArbeidsforhold from './HarArbeidsforhold';\n\nimport './arbeidsforholdInformasjon.less';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\nimport { UtvidetInformasjon } from '@navikt/fp-common';\n\ninterface Props {\n    arbeidsforhold: Arbeidsforhold[];\n}\nconst ArbeidsforholdInformasjon: React.FunctionComponent<Props> = ({ arbeidsforhold }) => {\n    const harArbeidsforhold = arbeidsforhold !== undefined && arbeidsforhold.length > 0;\n\n    return (\n        <>\n            <Element>Dine arbeidsforhold</Element>\n            <UtvidetInformasjon apneLabel=\"Les mer om dine arbeidsforhold\">\n                <Normaltekst>\n                    Er det feil eller mangler i informasjonen om dine arbeidsforhold? Da må du be din arbeidsgiver\n                    oppdatere med riktig informasjon i Arbeidsgiver- og arbeidstakerregisteret.\n                </Normaltekst>\n            </UtvidetInformasjon>\n            <HarIkkeArbeidsforhold harArbeidsforhold={harArbeidsforhold} />\n            <HarArbeidsforhold harArbeidsforhold={harArbeidsforhold} arbeidsforhold={arbeidsforhold} />\n        </>\n    );\n};\n\nexport default ArbeidsforholdInformasjon;\n","import { formatDate } from '@navikt/fp-common';\nimport InteractiveListElement from 'app/components/interactive-list-element/InteractiveListElement';\nimport { Næring } from 'app/context/types/Næring';\nimport React, { FunctionComponent } from 'react';\n\ninterface Props {\n    næringsInformasjon: Næring[];\n    deleteNæring: (oppdrag: Næring) => void;\n    selectNæring: (oppdrag: Næring) => void;\n}\n\nconst EgenNæringListe: FunctionComponent<Props> = ({ næringsInformasjon, deleteNæring, selectNæring }) => {\n    if (næringsInformasjon.length === 0) {\n        return null;\n    }\n\n    return (\n        <ul style={{ margin: 0, padding: 0, listStyle: 'none' }}>\n            {næringsInformasjon.map((næring, index) => (\n                <InteractiveListElement\n                    deleteLinkText=\"Slett næring\"\n                    onDelete={() => deleteNæring(næring)}\n                    onEdit={() => selectNæring(næring)}\n                    text={`${formatDate(næring.tidsperiode.fom)} - ${\n                        næring.tidsperiode.tom ? formatDate(næring.tidsperiode.tom) : 'pågående'\n                    }`}\n                    title={næring.navnPåNæringen}\n                    deleteButtonAriaText={`Slett næring`}\n                    editButtonAriaText={`Rediger næring`}\n                    key={`${næring.navnPåNæringen}${index}`}\n                />\n            ))}\n        </ul>\n    );\n};\n\nexport default EgenNæringListe;\n","import { intlUtils, UtvidetInformasjon } from '@navikt/fp-common';\nimport EksternUrl from 'app/components/ekstern-url/EksternUrl';\nimport links from 'app/links/links';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\n\nconst HvemKanDriveMedEgenNæring = () => {\n    const intl = useIntl();\n\n    return (\n        <UtvidetInformasjon\n            apneLabel={intlUtils(\n                intl,\n                'inntektsinformasjon.harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd.apneLabel'\n            )}\n        >\n            <div style={{ backgroundColor: '#f1f1f1', padding: '1.5rem' }}>\n                <Normaltekst>\n                    <EksternUrl\n                        tekst=\"inntektsinformasjon.harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd.infoboks.tekst\"\n                        url={links.næringsdrivendeInfoBoks}\n                        lenkeTekst={intlUtils(intl, 'hjemmeside')}\n                    />\n                </Normaltekst>\n            </div>\n        </UtvidetInformasjon>\n    );\n};\n\nexport default HvemKanDriveMedEgenNæring;\n","import { getTypedFormComponents, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { Næringstype } from 'app/context/types/Næring';\n\nexport enum EgenNæringModalFormField {\n    typer = 'typer',\n    navnPåNæringen = 'navnPåNæringen',\n    registrertINorge = 'registrertINorge',\n    orgnr = 'orgnr',\n    land = 'land',\n    fom = 'fom',\n    tom = 'tom',\n    pågående = 'pågående',\n    yrkesAktivDato = 'yrkesAktivDato',\n    næringsresultat = 'næringsresultat',\n    harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene = 'harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene',\n    hattVarigEndringAvNæringsinntektSiste4Kalenderår = 'hattVarigEndringAvNæringsinntektSiste4Kalenderår',\n    datoForEndring = 'datoForEndring',\n    inntektEtterEndring = 'inntektEtterEndring',\n    forklaringEndring = 'forklaringEndring',\n    harRegnskapsfører = 'harRegnskapsfører',\n    navnRegnskapsfører = 'navnRegnskapsfører',\n    telefonRegnskapsfører = 'telefonRegnskapsfører',\n    regnskapsførerNærVennEllerFamilie = 'regnskapsførerNærVennEllerFamilie',\n}\n\nexport interface EgenNæringModalFormData {\n    [EgenNæringModalFormField.typer]: Næringstype[];\n    [EgenNæringModalFormField.navnPåNæringen]: string;\n    [EgenNæringModalFormField.registrertINorge]: YesOrNo;\n    [EgenNæringModalFormField.orgnr]: string;\n    [EgenNæringModalFormField.land]: string;\n    [EgenNæringModalFormField.fom]: string;\n    [EgenNæringModalFormField.tom]: string;\n    [EgenNæringModalFormField.pågående]: YesOrNo;\n    [EgenNæringModalFormField.yrkesAktivDato]: string;\n    [EgenNæringModalFormField.næringsresultat]: string;\n    [EgenNæringModalFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]: YesOrNo;\n    [EgenNæringModalFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]: YesOrNo;\n    [EgenNæringModalFormField.datoForEndring]: string;\n    [EgenNæringModalFormField.inntektEtterEndring]: string;\n    [EgenNæringModalFormField.forklaringEndring]: string;\n    [EgenNæringModalFormField.harRegnskapsfører]: YesOrNo;\n    [EgenNæringModalFormField.navnRegnskapsfører]: string;\n    [EgenNæringModalFormField.telefonRegnskapsfører]: string;\n    [EgenNæringModalFormField.regnskapsførerNærVennEllerFamilie]: YesOrNo;\n}\n\nexport const EgenNæringModalFormComponents = getTypedFormComponents<\n    EgenNæringModalFormField,\n    EgenNæringModalFormData,\n    string\n>();\n","import { hasValue } from '@navikt/fp-common';\nimport { dateToISOString, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { Næring, EndringAvNæringsinntektInformasjon, Næringsrelasjon } from 'app/context/types/Næring';\nimport { date4YearsAgo, ISOStringToDate } from 'app/utils/dateUtils';\nimport { convertBooleanOrUndefinedToYesOrNo, convertYesOrNoOrUndefinedToBoolean } from 'app/utils/formUtils';\nimport dayjs from 'dayjs';\nimport { EgenNæringModalFormData, EgenNæringModalFormField } from './egenNæringModalFormConfig';\n\nexport const initialEgenNæringModalValues: EgenNæringModalFormData = {\n    [EgenNæringModalFormField.typer]: [],\n    [EgenNæringModalFormField.navnPåNæringen]: '',\n    [EgenNæringModalFormField.registrertINorge]: YesOrNo.UNANSWERED,\n    [EgenNæringModalFormField.orgnr]: '',\n    [EgenNæringModalFormField.land]: '',\n    [EgenNæringModalFormField.tom]: '',\n    [EgenNæringModalFormField.fom]: '',\n    [EgenNæringModalFormField.pågående]: YesOrNo.UNANSWERED,\n    [EgenNæringModalFormField.næringsresultat]: '',\n    [EgenNæringModalFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]: YesOrNo.UNANSWERED,\n    [EgenNæringModalFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]: YesOrNo.UNANSWERED,\n    [EgenNæringModalFormField.yrkesAktivDato]: '',\n    [EgenNæringModalFormField.datoForEndring]: '',\n    [EgenNæringModalFormField.inntektEtterEndring]: '',\n    [EgenNæringModalFormField.forklaringEndring]: '',\n    [EgenNæringModalFormField.harRegnskapsfører]: YesOrNo.UNANSWERED,\n    [EgenNæringModalFormField.navnRegnskapsfører]: '',\n    [EgenNæringModalFormField.telefonRegnskapsfører]: '',\n    [EgenNæringModalFormField.regnskapsførerNærVennEllerFamilie]: YesOrNo.UNANSWERED,\n};\n\nexport const cleanupEgenNæringForm = (\n    values: EgenNæringModalFormData,\n    visibility: QuestionVisibility<EgenNæringModalFormField, undefined>\n): EgenNæringModalFormData => {\n    return {\n        typer: visibility.isVisible(EgenNæringModalFormField.typer) ? values.typer : [],\n        navnPåNæringen: visibility.isVisible(EgenNæringModalFormField.navnPåNæringen)\n            ? values.navnPåNæringen\n            : initialEgenNæringModalValues.navnPåNæringen,\n        registrertINorge: visibility.isVisible(EgenNæringModalFormField.registrertINorge)\n            ? values.registrertINorge\n            : initialEgenNæringModalValues.registrertINorge,\n        orgnr: visibility.isVisible(EgenNæringModalFormField.orgnr) ? values.orgnr : initialEgenNæringModalValues.orgnr,\n        land: visibility.isVisible(EgenNæringModalFormField.land) ? values.land : initialEgenNæringModalValues.land,\n        tom: visibility.isVisible(EgenNæringModalFormField.tom) ? values.tom : initialEgenNæringModalValues.tom,\n        fom: visibility.isVisible(EgenNæringModalFormField.fom) ? values.fom : initialEgenNæringModalValues.fom,\n        pågående: visibility.isVisible(EgenNæringModalFormField.pågående)\n            ? values.pågående\n            : initialEgenNæringModalValues.pågående,\n        næringsresultat: visibility.isVisible(EgenNæringModalFormField.næringsresultat)\n            ? values.næringsresultat\n            : initialEgenNæringModalValues.næringsresultat,\n        hattVarigEndringAvNæringsinntektSiste4Kalenderår: visibility.isVisible(\n            EgenNæringModalFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår\n        )\n            ? values.hattVarigEndringAvNæringsinntektSiste4Kalenderår\n            : initialEgenNæringModalValues.hattVarigEndringAvNæringsinntektSiste4Kalenderår,\n        harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene: visibility.isVisible(\n            EgenNæringModalFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n        )\n            ? values.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n            : initialEgenNæringModalValues.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene,\n        yrkesAktivDato: visibility.isVisible(EgenNæringModalFormField.yrkesAktivDato)\n            ? values.yrkesAktivDato\n            : initialEgenNæringModalValues.yrkesAktivDato,\n        datoForEndring: visibility.isVisible(EgenNæringModalFormField.datoForEndring)\n            ? values.datoForEndring\n            : initialEgenNæringModalValues.datoForEndring,\n        inntektEtterEndring: visibility.isVisible(EgenNæringModalFormField.inntektEtterEndring)\n            ? values.inntektEtterEndring\n            : initialEgenNæringModalValues.inntektEtterEndring,\n        forklaringEndring: visibility.isVisible(EgenNæringModalFormField.forklaringEndring)\n            ? values.forklaringEndring\n            : initialEgenNæringModalValues.forklaringEndring,\n        harRegnskapsfører: visibility.isVisible(EgenNæringModalFormField.harRegnskapsfører)\n            ? values.harRegnskapsfører\n            : initialEgenNæringModalValues.harRegnskapsfører,\n        navnRegnskapsfører: visibility.isVisible(EgenNæringModalFormField.navnRegnskapsfører)\n            ? values.navnRegnskapsfører\n            : initialEgenNæringModalValues.navnRegnskapsfører,\n        telefonRegnskapsfører: visibility.isVisible(EgenNæringModalFormField.telefonRegnskapsfører)\n            ? values.telefonRegnskapsfører\n            : initialEgenNæringModalValues.telefonRegnskapsfører,\n        regnskapsførerNærVennEllerFamilie: visibility.isVisible(\n            EgenNæringModalFormField.regnskapsførerNærVennEllerFamilie\n        )\n            ? values.regnskapsførerNærVennEllerFamilie\n            : initialEgenNæringModalValues.regnskapsførerNærVennEllerFamilie,\n    };\n};\n\nexport const getInitialEgenNæringModalValues = (næring: Næring | undefined): EgenNæringModalFormData => {\n    if (!næring) {\n        return {\n            ...initialEgenNæringModalValues,\n        };\n    }\n\n    return {\n        ...initialEgenNæringModalValues,\n        typer: næring.næringstyper,\n        navnPåNæringen: næring.navnPåNæringen,\n        registrertINorge: convertBooleanOrUndefinedToYesOrNo(næring.registrertINorge),\n        land: næring.registrertILand || '',\n        fom: dateToISOString(næring.tidsperiode.fom),\n        tom: dateToISOString(næring.tidsperiode.tom) || '',\n        orgnr: næring.organisasjonsnummer || '',\n        pågående: convertBooleanOrUndefinedToYesOrNo(næring.pågående),\n        næringsresultat: næring.næringsinntekt?.toString() || '',\n        hattVarigEndringAvNæringsinntektSiste4Kalenderår: convertBooleanOrUndefinedToYesOrNo(\n            næring.hattVarigEndringAvNæringsinntektSiste4Kalenderår\n        ),\n        harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene: convertBooleanOrUndefinedToYesOrNo(\n            næring.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n        ),\n        yrkesAktivDato: dateToISOString(næring.oppstartsdato) || '',\n        datoForEndring: næring.endringAvNæringsinntektInformasjon\n            ? dateToISOString(næring.endringAvNæringsinntektInformasjon.dato)\n            : '',\n        inntektEtterEndring: næring.endringAvNæringsinntektInformasjon\n            ? næring.endringAvNæringsinntektInformasjon.næringsinntektEtterEndring.toString()\n            : '',\n        forklaringEndring: næring.endringAvNæringsinntektInformasjon\n            ? næring.endringAvNæringsinntektInformasjon.forklaring\n            : '',\n        harRegnskapsfører: convertBooleanOrUndefinedToYesOrNo(næring.harRegnskapsfører),\n        navnRegnskapsfører: næring.regnskapsfører ? næring.regnskapsfører.navn : '',\n        telefonRegnskapsfører: næring.regnskapsfører ? næring.regnskapsfører.telefonnummer : '',\n        regnskapsførerNærVennEllerFamilie: convertBooleanOrUndefinedToYesOrNo(\n            næring.regnskapsfører ? næring.regnskapsfører.erNærVennEllerFamilie : undefined\n        ),\n    };\n};\n\nexport const mapEgenNæringModalFormValuesToState = (values: Partial<EgenNæringModalFormData>): Næring => {\n    let endringAvNæringsinntektInformasjon: EndringAvNæringsinntektInformasjon | undefined = undefined;\n    let regnskapsfører: Næringsrelasjon | undefined = undefined;\n\n    if (values.hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES) {\n        endringAvNæringsinntektInformasjon = {\n            dato: ISOStringToDate(values.datoForEndring)!,\n            forklaring: values.forklaringEndring!,\n            næringsinntektEtterEndring: parseInt(values.inntektEtterEndring!),\n        };\n    }\n\n    if (values.harRegnskapsfører === YesOrNo.YES) {\n        regnskapsfører = {\n            navn: values.navnRegnskapsfører!,\n            telefonnummer: values.telefonRegnskapsfører!,\n            erNærVennEllerFamilie: convertYesOrNoOrUndefinedToBoolean(values.regnskapsførerNærVennEllerFamilie)!,\n        };\n    }\n\n    return {\n        næringstyper: values.typer!,\n        navnPåNæringen: values.navnPåNæringen!,\n        registrertINorge: convertYesOrNoOrUndefinedToBoolean(values.registrertINorge)!,\n        organisasjonsnummer: hasValue(values.orgnr) ? values.orgnr : undefined,\n        registrertILand: hasValue(values.land) ? values.land : undefined,\n        tidsperiode: {\n            fom: ISOStringToDate(values.fom)!,\n            tom: ISOStringToDate(values.tom),\n        },\n        pågående: convertYesOrNoOrUndefinedToBoolean(values.pågående)!,\n        næringsinntekt: hasValue(values.næringsresultat) ? parseInt(values.næringsresultat!, 10) : undefined,\n        hattVarigEndringAvNæringsinntektSiste4Kalenderår: convertYesOrNoOrUndefinedToBoolean(\n            values.hattVarigEndringAvNæringsinntektSiste4Kalenderår\n        ),\n        harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene: convertYesOrNoOrUndefinedToBoolean(\n            values.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n        ),\n        oppstartsdato: hasValue(values.yrkesAktivDato) ? ISOStringToDate(values.yrkesAktivDato) : undefined,\n        endringAvNæringsinntektInformasjon: endringAvNæringsinntektInformasjon,\n        harRegnskapsfører: convertYesOrNoOrUndefinedToBoolean(values.harRegnskapsfører)!,\n        regnskapsfører: regnskapsfører,\n    };\n};\n\nexport const erVirksomhetRegnetSomNyoppstartet = (oppstartsdato: Date | undefined): boolean => {\n    if (!oppstartsdato) {\n        return true;\n    }\n\n    return dayjs(oppstartsdato).startOf('day').isAfter(date4YearsAgo, 'day');\n};\n","import { hasValue } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport { EgenNæringModalFormData, EgenNæringModalFormField } from './egenNæringModalFormConfig';\nimport { erVirksomhetRegnetSomNyoppstartet } from './egenNæringModalFormUtils';\n\nconst EgenNæringModalFormConfig: QuestionConfig<EgenNæringModalFormData, EgenNæringModalFormField> = {\n    [EgenNæringModalFormField.typer]: {\n        isIncluded: () => true,\n        isAnswered: ({ typer }) => typer.length > 0,\n    },\n    [EgenNæringModalFormField.navnPåNæringen]: {\n        isIncluded: () => true,\n        isAnswered: ({ navnPåNæringen }) => hasValue(navnPåNæringen),\n        visibilityFilter: ({ typer }) => typer.length > 0,\n    },\n    [EgenNæringModalFormField.registrertINorge]: {\n        isIncluded: () => true,\n        isAnswered: ({ registrertINorge }) => registrertINorge !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ navnPåNæringen }) => hasValue(navnPåNæringen),\n    },\n    [EgenNæringModalFormField.orgnr]: {\n        isIncluded: ({ registrertINorge }) => registrertINorge === YesOrNo.YES,\n        isAnswered: ({ orgnr }) => hasValue(orgnr),\n        visibilityFilter: ({ registrertINorge }) => registrertINorge === YesOrNo.YES,\n    },\n    [EgenNæringModalFormField.land]: {\n        isIncluded: ({ registrertINorge }) => registrertINorge === YesOrNo.NO,\n        isAnswered: ({ land }) => hasValue(land),\n        visibilityFilter: ({ registrertINorge }) => registrertINorge === YesOrNo.NO,\n    },\n    [EgenNæringModalFormField.fom]: {\n        isIncluded: () => true,\n        isAnswered: ({ fom }) => hasValue(fom),\n        visibilityFilter: ({ orgnr, land }) => hasValue(orgnr) || hasValue(land),\n    },\n    [EgenNæringModalFormField.pågående]: {\n        isIncluded: () => true,\n        isAnswered: ({ pågående }) => pågående !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ fom }) => hasValue(fom),\n    },\n    [EgenNæringModalFormField.tom]: {\n        isIncluded: ({ pågående }) => pågående === YesOrNo.NO,\n        isAnswered: ({ tom }) => hasValue(tom),\n        visibilityFilter: ({ pågående }) => pågående === YesOrNo.NO,\n    },\n    [EgenNæringModalFormField.næringsresultat]: {\n        isIncluded: ({ fom }) => erVirksomhetRegnetSomNyoppstartet(ISOStringToDate(fom)),\n        isAnswered: ({ næringsresultat }) => hasValue(næringsresultat),\n        visibilityFilter: ({ pågående, tom }) => pågående === YesOrNo.YES || hasValue(tom),\n    },\n    [EgenNæringModalFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene]: {\n        isIncluded: ({ fom }) => erVirksomhetRegnetSomNyoppstartet(ISOStringToDate(fom)),\n        isAnswered: ({ harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene }) =>\n            harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ næringsresultat }) => hasValue(næringsresultat),\n    },\n    [EgenNæringModalFormField.yrkesAktivDato]: {\n        isIncluded: ({ fom }) => erVirksomhetRegnetSomNyoppstartet(ISOStringToDate(fom)),\n        isAnswered: ({ yrkesAktivDato }) => hasValue(yrkesAktivDato),\n        visibilityFilter: ({ harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene }) =>\n            harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene === YesOrNo.YES,\n    },\n    [EgenNæringModalFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår]: {\n        isIncluded: ({ fom }) => !erVirksomhetRegnetSomNyoppstartet(ISOStringToDate(fom)),\n        isAnswered: ({ hattVarigEndringAvNæringsinntektSiste4Kalenderår }) =>\n            hattVarigEndringAvNæringsinntektSiste4Kalenderår !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ pågående, tom }) => pågående === YesOrNo.YES || hasValue(tom),\n    },\n    [EgenNæringModalFormField.datoForEndring]: {\n        isIncluded: ({ hattVarigEndringAvNæringsinntektSiste4Kalenderår }) =>\n            hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES,\n        isAnswered: ({ datoForEndring }) => hasValue(datoForEndring),\n        visibilityFilter: ({ hattVarigEndringAvNæringsinntektSiste4Kalenderår }) =>\n            hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES,\n    },\n    [EgenNæringModalFormField.inntektEtterEndring]: {\n        isIncluded: ({ hattVarigEndringAvNæringsinntektSiste4Kalenderår }) =>\n            hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES,\n        isAnswered: ({ inntektEtterEndring }) => hasValue(inntektEtterEndring),\n        visibilityFilter: ({ datoForEndring }) => hasValue(datoForEndring),\n    },\n    [EgenNæringModalFormField.forklaringEndring]: {\n        isIncluded: ({ hattVarigEndringAvNæringsinntektSiste4Kalenderår }) =>\n            hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.YES,\n        isAnswered: ({ forklaringEndring }) => hasValue(forklaringEndring),\n        visibilityFilter: ({ inntektEtterEndring }) => hasValue(inntektEtterEndring),\n    },\n    [EgenNæringModalFormField.harRegnskapsfører]: {\n        isIncluded: () => true,\n        isAnswered: ({ harRegnskapsfører }) => harRegnskapsfører !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({\n            yrkesAktivDato,\n            forklaringEndring,\n            harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene,\n            hattVarigEndringAvNæringsinntektSiste4Kalenderår,\n        }) =>\n            hasValue(yrkesAktivDato) ||\n            hasValue(forklaringEndring) ||\n            harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene === YesOrNo.NO ||\n            hattVarigEndringAvNæringsinntektSiste4Kalenderår === YesOrNo.NO,\n    },\n    [EgenNæringModalFormField.navnRegnskapsfører]: {\n        isIncluded: ({ harRegnskapsfører }) => harRegnskapsfører === YesOrNo.YES,\n        isAnswered: ({ navnRegnskapsfører }) => hasValue(navnRegnskapsfører),\n        visibilityFilter: ({ harRegnskapsfører }) => harRegnskapsfører === YesOrNo.YES,\n    },\n    [EgenNæringModalFormField.telefonRegnskapsfører]: {\n        isIncluded: ({ harRegnskapsfører }) => harRegnskapsfører === YesOrNo.YES,\n        isAnswered: ({ telefonRegnskapsfører }) => hasValue(telefonRegnskapsfører),\n        visibilityFilter: ({ navnRegnskapsfører }) => hasValue(navnRegnskapsfører),\n    },\n    [EgenNæringModalFormField.regnskapsførerNærVennEllerFamilie]: {\n        isIncluded: ({ harRegnskapsfører }) => harRegnskapsfører === YesOrNo.YES,\n        isAnswered: ({ regnskapsførerNærVennEllerFamilie }) => regnskapsførerNærVennEllerFamilie !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ telefonRegnskapsfører }) => hasValue(telefonRegnskapsfører),\n    },\n};\n\nconst egenNæringModalQuestionsConfig = Questions<EgenNæringModalFormData, EgenNæringModalFormField>(\n    EgenNæringModalFormConfig\n);\n\nexport default egenNæringModalQuestionsConfig;\n","import { hasValue, intlUtils } from '@navikt/fp-common';\nimport { getNumberFromNumberInputValue } from '@navikt/sif-common-formik/lib';\nimport { SkjemaelementFeil } from 'app/types/SkjemaelementFeil';\nimport { isDateABeforeDateB, isDateInTheFuture } from 'app/utils/dateUtils';\nimport { erGyldigNorskOrgnummer } from 'app/utils/numberUtils';\nimport { validateTextInputField } from 'app/utils/validationUtil';\nimport { isISODateString } from 'nav-datovelger';\nimport { IntlShape } from 'react-intl';\n\nexport const validateEgenNæringFom =\n    (intl: IntlShape, tom: string) =>\n    (fom: string): SkjemaelementFeil => {\n        if (!hasValue(fom)) {\n            return intlUtils(intl, 'valideringsfeil.fraOgMedDato.påkrevd');\n        }\n\n        if (!isISODateString(fom)) {\n            return intlUtils(intl, 'valideringsfeil.fraOgMedDato.gyldigDato');\n        }\n\n        if (isDateInTheFuture(fom)) {\n            return intlUtils(intl, 'valideringsfeil.fraOgMedDato.erIFremtiden');\n        }\n\n        if (isDateABeforeDateB(tom, fom)) {\n            return intlUtils(intl, 'valideringsfeil.fraOgMedDato.førTilDato');\n        }\n\n        return undefined;\n    };\n\nexport const validateEgenNæringTom =\n    (intl: IntlShape, fom: string) =>\n    (tom: string): SkjemaelementFeil => {\n        if (!hasValue(tom)) {\n            return intlUtils(intl, 'valideringsfeil.tilOgMedDato.påkrevd');\n        }\n\n        if (!isISODateString(tom)) {\n            return intlUtils(intl, 'valideringsfeil.tilOgMedDato.gyldigDato');\n        }\n\n        if (isDateInTheFuture(tom)) {\n            return intlUtils(intl, 'valideringsfeil.fraOgMedDato.erIFremtiden');\n        }\n\n        if (isDateABeforeDateB(tom, fom)) {\n            return intlUtils(intl, 'valideringsfeil.fraOgMedDato.førTilDato');\n        }\n\n        return undefined;\n    };\n\nexport const validateEgenNæringOrgnr =\n    (intl: IntlShape) =>\n    (orgnr: string): SkjemaelementFeil => {\n        if (!erGyldigNorskOrgnummer(orgnr)) {\n            return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.orgnr.ugyldigFormat');\n        }\n\n        return undefined;\n    };\n\nexport const validateEgenNæringForklaringTilEndring = (intl: IntlShape, label: string) => (forklaring: string) => {\n    if (forklaring.length < 25) {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.forklaringTilEndring.forKort');\n    }\n\n    if (forklaring.length > 1000) {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.forklaringTilEndring.forLang');\n    }\n\n    return validateTextInputField(forklaring, label, intl);\n};\n\nexport const validateEgenNæringEndringAvInntektsDato = (intl: IntlShape) => (dato: string) => {\n    if (!hasValue(dato)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.påkrevd');\n    }\n\n    if (!isISODateString(dato)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.gyldigDato');\n    }\n\n    if (isDateInTheFuture(dato)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.erIFremtiden');\n    }\n\n    return undefined;\n};\n\nexport const validateEgenNæringYrkesAktivDatoDato = (intl: IntlShape) => (dato: string) => {\n    if (!hasValue(dato)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.påkrevd');\n    }\n\n    if (!isISODateString(dato)) {\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.gyldigDato');\n    }\n\n    if (isDateInTheFuture(dato)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.erIFremtiden');\n    }\n\n    return undefined;\n};\n\nexport const validateNumber = (intl: IntlShape, errorKey: string) => (value: string) => {\n    const valueNumber = getNumberFromNumberInputValue(value);\n\n    if (!valueNumber || Math.round(valueNumber) !== valueNumber) {\n        return intlUtils(intl, errorKey);\n    }\n};\n","import { Block, hasValue, intlUtils } from '@navikt/fp-common';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { EgenNæringModalFormComponents, EgenNæringModalFormField } from '../egenNæringModalFormConfig';\nimport { validateEgenNæringOrgnr } from '../validation/egenNæringValidation';\n\ninterface Props {\n    visibility: QuestionVisibility<EgenNæringModalFormField, undefined>;\n}\n\nconst OrgnummerEllerLand: FunctionComponent<Props> = ({ visibility }) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.orgnr)}>\n                <EgenNæringModalFormComponents.NumberInput\n                    name={EgenNæringModalFormField.orgnr}\n                    label={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.orgnr')}\n                    validate={validateEgenNæringOrgnr(intl)}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.land)}>\n                <EgenNæringModalFormComponents.CountrySelect\n                    name={EgenNæringModalFormField.land}\n                    label={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.registrertILand')}\n                    useAlpha3Code={false}\n                    validate={(value) => {\n                        if (!hasValue(value)) {\n                            return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.egenNæring.land');\n                        }\n                    }}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default OrgnummerEllerLand;\n","import React, { FunctionComponent } from 'react';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { EgenNæringModalFormComponents, EgenNæringModalFormField } from '../egenNæringModalFormConfig';\nimport { Block, intlUtils } from '@navikt/fp-common';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport VeilederNormal from 'app/assets/VeilederNormal';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport { validateNumber } from '../validation/egenNæringValidation';\nimport { validateRequiredTextInputField } from 'app/utils/validationUtil';\n\ninterface Props {\n    visibility: QuestionVisibility<EgenNæringModalFormField, undefined>;\n}\n\nconst Regnskapsfører: FunctionComponent<Props> = ({ visibility }) => {\n    const intl = useIntl();\n    const regnskapsførerNavnLabel = intlUtils(intl, 'inntektsinformasjon.egenNæringModal.regnskapsførerNavn');\n\n    return (\n        <>\n            <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.harRegnskapsfører)}>\n                <EgenNæringModalFormComponents.YesOrNoQuestion\n                    name={EgenNæringModalFormField.harRegnskapsfører}\n                    legend={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.harRegnskapsfører')}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.navnRegnskapsfører)}>\n                <EgenNæringModalFormComponents.Input\n                    name={EgenNæringModalFormField.navnRegnskapsfører}\n                    label={regnskapsførerNavnLabel}\n                    validate={validateRequiredTextInputField(regnskapsførerNavnLabel, intl)}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.telefonRegnskapsfører)}>\n                <EgenNæringModalFormComponents.NumberInput\n                    name={EgenNæringModalFormField.telefonRegnskapsfører}\n                    label={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.regnskapsførerTlf')}\n                    validate={validateNumber(\n                        intl,\n                        'valideringsfeil.inntektsinformasjon.regnskapsførerTelefonnummer.ugyldigFormat'\n                    )}\n                />\n            </Block>\n            <Block\n                padBottom=\"l\"\n                visible={visibility.isVisible(EgenNæringModalFormField.regnskapsførerNærVennEllerFamilie)}\n            >\n                <EgenNæringModalFormComponents.YesOrNoQuestion\n                    name={EgenNæringModalFormField.regnskapsførerNærVennEllerFamilie}\n                    legend={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.regnskapsførerNærVennEllerFamilie')}\n                />\n            </Block>\n            <Block\n                padBottom=\"l\"\n                visible={visibility.isVisible(EgenNæringModalFormField.regnskapsførerNærVennEllerFamilie)}\n            >\n                <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                    <Normaltekst>\n                        <FormattedMessage id=\"inntektsinformasjon.egenNæringModal.regnskapsførerVeileder\" />\n                    </Normaltekst>\n                </Veilederpanel>\n            </Block>\n        </>\n    );\n};\n\nexport default Regnskapsfører;\n","import React, { FunctionComponent } from 'react';\nimport Modal from 'nav-frontend-modal';\nimport { bemUtils, Block, intlUtils, UtvidetInformasjon } from '@navikt/fp-common';\nimport { Normaltekst, Undertittel } from 'nav-frontend-typografi';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    EgenNæringModalFormComponents,\n    EgenNæringModalFormData,\n    EgenNæringModalFormField,\n} from './egenNæringModalFormConfig';\nimport {\n    cleanupEgenNæringForm,\n    getInitialEgenNæringModalValues,\n    mapEgenNæringModalFormValuesToState,\n} from './egenNæringModalFormUtils';\nimport { Næring, Næringstype } from 'app/context/types/Næring';\nimport egenNæringModalQuestionsConfig from './egenNæringModalQuestionsConfig';\nimport OrgnummerEllerLand from './components/OrgnummerEllerLand';\nimport Regnskapsfører from './components/Regnskapsfører';\nimport { Hovedknapp } from 'nav-frontend-knapper';\n\nimport './egenNæringModal.less';\nimport {\n    validateEgenNæringFom,\n    validateEgenNæringTom,\n    validateEgenNæringForklaringTilEndring,\n    validateEgenNæringEndringAvInntektsDato,\n    validateEgenNæringYrkesAktivDatoDato,\n    validateNumber,\n} from './validation/egenNæringValidation';\nimport dayjs from 'dayjs';\nimport { validateRequiredTextInputField } from 'app/utils/validationUtil';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\n\ninterface Props {\n    isOpen: boolean;\n    title: string;\n    onRequestClose: () => void;\n    selectedNæring?: Næring;\n    addNæring: (næring: Næring) => void;\n    editNæring: (næring: Næring) => void;\n}\n\nconst EgenNæringModal: FunctionComponent<Props> = ({\n    isOpen,\n    title,\n    onRequestClose,\n    selectedNæring,\n    addNæring,\n    editNæring,\n}) => {\n    const intl = useIntl();\n    const bem = bemUtils('egenNæringModal');\n\n    const onValidSubmit = (values: Partial<EgenNæringModalFormData>) => {\n        if (!selectedNæring) {\n            addNæring(mapEgenNæringModalFormValuesToState(values));\n        } else {\n            editNæring(mapEgenNæringModalFormValuesToState(values));\n        }\n        onRequestClose();\n    };\n\n    const navnPåNæringLabel = intlUtils(intl, 'inntektsinformasjon.egenNæringModal.navnPåNæring');\n    const varigEndringForklaringLabel = intlUtils(\n        intl,\n        'inntektsinformasjon.egenNæringModal.varigEndringAvNæringsinntektForklaring'\n    );\n\n    return (\n        <Modal\n            isOpen={isOpen}\n            contentLabel={title}\n            onRequestClose={onRequestClose}\n            closeButton={true}\n            shouldCloseOnOverlayClick={false}\n            className={bem.block}\n        >\n            <EgenNæringModalFormComponents.FormikWrapper\n                initialValues={getInitialEgenNæringModalValues(selectedNæring)}\n                onSubmit={(values: Partial<EgenNæringModalFormData>) => onValidSubmit(values)}\n                renderForm={({ values: formValues }) => {\n                    const visibility = egenNæringModalQuestionsConfig.getVisbility(formValues);\n\n                    return (\n                        <EgenNæringModalFormComponents.Form\n                            includeButtons={false}\n                            cleanup={(values) => cleanupEgenNæringForm(values, visibility)}\n                            includeValidationSummary={true}\n                        >\n                            <Block padBottom=\"l\">\n                                <Undertittel className={bem.element('tittel')}>\n                                    <FormattedMessage id=\"inntektsinformasjon.egenNæringModal.tittel\" />\n                                </Undertittel>\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.typer)}>\n                                <EgenNæringModalFormComponents.CheckboxPanelGroup\n                                    name={EgenNæringModalFormField.typer}\n                                    legend={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.næringstype')}\n                                    checkboxes={[\n                                        {\n                                            label: intlUtils(\n                                                intl,\n                                                'inntektsinformasjon.egenNæringModal.næringstype.dagmamma'\n                                            ),\n                                            value: Næringstype.DAGMAMMA,\n                                        },\n                                        {\n                                            label: intlUtils(\n                                                intl,\n                                                'inntektsinformasjon.egenNæringModal.næringstype.fiske'\n                                            ),\n                                            value: Næringstype.FISKER,\n                                        },\n                                        {\n                                            label: intlUtils(\n                                                intl,\n                                                'inntektsinformasjon.egenNæringModal.næringstype.jordbrukSkogbruk'\n                                            ),\n                                            value: Næringstype.JORDBRUK,\n                                        },\n                                        {\n                                            label: intlUtils(\n                                                intl,\n                                                'inntektsinformasjon.egenNæringModal.næringstype.annen'\n                                            ),\n                                            value: Næringstype.ANNET,\n                                        },\n                                    ]}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(EgenNæringModalFormField.navnPåNæringen)}\n                            >\n                                <EgenNæringModalFormComponents.Input\n                                    name={EgenNæringModalFormField.navnPåNæringen}\n                                    label={navnPåNæringLabel}\n                                    maxLength={100}\n                                    validate={validateRequiredTextInputField(navnPåNæringLabel, intl)}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(EgenNæringModalFormField.registrertINorge)}\n                            >\n                                <EgenNæringModalFormComponents.YesOrNoQuestion\n                                    name={EgenNæringModalFormField.registrertINorge}\n                                    legend={intlUtils(\n                                        intl,\n                                        'inntektsinformasjon.egenNæringModal.erNæringenRegistrertINorge',\n                                        {\n                                            navnPåNæringen: formValues.navnPåNæringen,\n                                        }\n                                    )}\n                                    validate={(value: YesOrNo) => {\n                                        if (value === YesOrNo.UNANSWERED) {\n                                            return intlUtils(\n                                                intl,\n                                                'valideringsfeil.inntektsinformasjon.egenNæring.registrertINorge'\n                                            );\n                                        }\n                                    }}\n                                />\n                            </Block>\n                            <OrgnummerEllerLand visibility={visibility} />\n                            <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.fom)}>\n                                <EgenNæringModalFormComponents.DatePicker\n                                    name={EgenNæringModalFormField.fom}\n                                    label={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.startetNæring.fom', {\n                                        navnPåNæringen: formValues.navnPåNæringen,\n                                    })}\n                                    placeholder=\"dd.mm.åååå\"\n                                    fullscreenOverlay={true}\n                                    showYearSelector={true}\n                                    validate={validateEgenNæringFom(intl, formValues.tom)}\n                                    maxDate={dayjs().toDate()}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.pågående)}>\n                                <EgenNæringModalFormComponents.YesOrNoQuestion\n                                    name={EgenNæringModalFormField.pågående}\n                                    legend={intlUtils(\n                                        intl,\n                                        'inntektsinformasjon.egenNæringModal.startetNæring.pågående',\n                                        {\n                                            navnPåNæringen: formValues.navnPåNæringen,\n                                        }\n                                    )}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(EgenNæringModalFormField.tom)}>\n                                <EgenNæringModalFormComponents.DatePicker\n                                    name={EgenNæringModalFormField.tom}\n                                    label={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.startetNæring.tom', {\n                                        navnPåNæringen: formValues.navnPåNæringen,\n                                    })}\n                                    placeholder=\"dd.mm.åååå\"\n                                    fullscreenOverlay={true}\n                                    showYearSelector={true}\n                                    validate={validateEgenNæringTom(intl, formValues.fom)}\n                                    maxDate={dayjs().toDate()}\n                                    minDate={dayjs(formValues.fom).toDate()}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(EgenNæringModalFormField.næringsresultat)}\n                            >\n                                <EgenNæringModalFormComponents.NumberInput\n                                    name={EgenNæringModalFormField.næringsresultat}\n                                    label={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.næringsinntekt')}\n                                    description={\n                                        <UtvidetInformasjon\n                                            apneLabel={intlUtils(\n                                                intl,\n                                                'inntektsinformasjon.egenNæringModal.næringsinntekt.info.apneLabel'\n                                            )}\n                                        >\n                                            <Normaltekst>\n                                                <FormattedMessage id=\"inntektsinformasjon.egenNæringModal.næringsinntekt.info\" />\n                                            </Normaltekst>\n                                        </UtvidetInformasjon>\n                                    }\n                                    validate={validateNumber(\n                                        intl,\n                                        'valideringsfeil.inntektsinformasjon.næringsinntekt.ugyldigFormat'\n                                    )}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(\n                                    EgenNæringModalFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n                                )}\n                            >\n                                <EgenNæringModalFormComponents.YesOrNoQuestion\n                                    name={\n                                        EgenNæringModalFormField.harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene\n                                    }\n                                    legend={intlUtils(\n                                        intl,\n                                        'inntektsinformasjon.egenNæringModal.blittYrkesaktivSiste3År'\n                                    )}\n                                    description={\n                                        <UtvidetInformasjon\n                                            apneLabel={intlUtils(\n                                                intl,\n                                                'inntektsinformasjon.egenNæringModal.blittYrkesaktivSiste3År.info.apneLabel'\n                                            )}\n                                        >\n                                            <Normaltekst>\n                                                <FormattedMessage id=\"inntektsinformasjon.egenNæringModal.blittYrkesaktivSiste3År.info\" />\n                                            </Normaltekst>\n                                        </UtvidetInformasjon>\n                                    }\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(EgenNæringModalFormField.yrkesAktivDato)}\n                            >\n                                <EgenNæringModalFormComponents.DatePicker\n                                    name={EgenNæringModalFormField.yrkesAktivDato}\n                                    label={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.yrkesaktivDato')}\n                                    placeholder=\"dd.mm.åååå\"\n                                    fullscreenOverlay={true}\n                                    showYearSelector={true}\n                                    validate={validateEgenNæringYrkesAktivDatoDato(intl)}\n                                    maxDate={dayjs().toDate()}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(\n                                    EgenNæringModalFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår\n                                )}\n                            >\n                                <EgenNæringModalFormComponents.YesOrNoQuestion\n                                    name={EgenNæringModalFormField.hattVarigEndringAvNæringsinntektSiste4Kalenderår}\n                                    legend={intlUtils(\n                                        intl,\n                                        'inntektsinformasjon.egenNæringModal.varigEndringAvNæringsinntekt'\n                                    )}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(EgenNæringModalFormField.datoForEndring)}\n                            >\n                                <EgenNæringModalFormComponents.DatePicker\n                                    name={EgenNæringModalFormField.datoForEndring}\n                                    label={intlUtils(\n                                        intl,\n                                        'inntektsinformasjon.egenNæringModal.varigEndringAvNæringsinntektDato'\n                                    )}\n                                    placeholder=\"dd.mm.åååå\"\n                                    fullscreenOverlay={true}\n                                    showYearSelector={true}\n                                    validate={validateEgenNæringEndringAvInntektsDato(intl)}\n                                    maxDate={dayjs().toDate()}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(EgenNæringModalFormField.inntektEtterEndring)}\n                            >\n                                <EgenNæringModalFormComponents.NumberInput\n                                    name={EgenNæringModalFormField.inntektEtterEndring}\n                                    label={intlUtils(intl, 'inntektsinformasjon.egenNæringModal.inntektEtterEndring')}\n                                    validate={validateNumber(\n                                        intl,\n                                        'valideringsfeil.inntektsinformasjon.varigEndringAvInntekt.ugyldigFormat'\n                                    )}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(EgenNæringModalFormField.forklaringEndring)}\n                            >\n                                <EgenNæringModalFormComponents.Textarea\n                                    name={EgenNæringModalFormField.forklaringEndring}\n                                    label={varigEndringForklaringLabel}\n                                    maxLength={1000}\n                                    validate={validateEgenNæringForklaringTilEndring(intl, varigEndringForklaringLabel)}\n                                />\n                            </Block>\n                            <Regnskapsfører visibility={visibility} />\n                            <Block visible={visibility.areAllQuestionsAnswered()} textAlignCenter={true}>\n                                <Hovedknapp>{intlUtils(intl, 'søknad.gåVidere')}</Hovedknapp>\n                            </Block>\n                        </EgenNæringModalFormComponents.Form>\n                    );\n                }}\n            />\n        </Modal>\n    );\n};\n\nexport default EgenNæringModal;\n","import { Block, intlUtils } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { Næring } from 'app/context/types/Næring';\nimport { Knapp } from 'nav-frontend-knapper';\nimport React, { FunctionComponent, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    InntektsinformasjonFormComponents,\n    InntektsinformasjonFormData,\n    InntektsinformasjonFormField,\n} from '../../inntektsinformasjonFormConfig';\nimport EgenNæringListe from './EgenNæringListe';\nimport HvemKanDriveMedEgenNæring from './HvemKanDriveMedEgenNæring';\nimport EgenNæringModal from './modal/EgenNæringModal';\n\ninterface Props {\n    egenNæringInformasjon: Næring[];\n    setEgenNæringsInformasjon: (oppdrag: Næring[]) => void;\n    visibility: QuestionVisibility<InntektsinformasjonFormField, undefined>;\n    formValues: InntektsinformasjonFormData;\n}\n\nconst EgenNæring: FunctionComponent<Props> = ({\n    egenNæringInformasjon,\n    setEgenNæringsInformasjon,\n    visibility,\n    formValues,\n}) => {\n    const intl = useIntl();\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [selectedNæring, setSelectedNæring] = useState<Næring>();\n\n    const handleOnLeggTil = () => {\n        setIsModalOpen(true);\n        setSelectedNæring(undefined);\n    };\n\n    const addNæring = (næring: Næring) => {\n        const updatedEgenNæringInformasjon = egenNæringInformasjon.concat(næring);\n\n        setEgenNæringsInformasjon(updatedEgenNæringInformasjon);\n    };\n\n    const deleteNæring = (næring: Næring) => {\n        const updatedEgenNæringInformasjon = egenNæringInformasjon.filter((nær) => nær !== næring);\n\n        setEgenNæringsInformasjon(updatedEgenNæringInformasjon);\n    };\n\n    const editNæring = (næring: Næring) => {\n        const updatedEgenNæringInformasjon = egenNæringInformasjon\n            .filter((nær) => nær !== selectedNæring)\n            .concat(næring);\n\n        setEgenNæringsInformasjon(updatedEgenNæringInformasjon);\n    };\n\n    const selectNæring = (næring: Næring) => {\n        setSelectedNæring(næring);\n        setIsModalOpen(true);\n    };\n\n    return (\n        <>\n            <Block\n                padBottom=\"l\"\n                visible={visibility.isVisible(InntektsinformasjonFormField.hattInntektSomNæringsdrivende)}\n            >\n                <InntektsinformasjonFormComponents.YesOrNoQuestion\n                    name={InntektsinformasjonFormField.hattInntektSomNæringsdrivende}\n                    legend={intlUtils(intl, 'inntektsinformasjon.harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd')}\n                    description={<HvemKanDriveMedEgenNæring />}\n                    validate={(hattInntektSomNæringsdrivende) => {\n                        if (hattInntektSomNæringsdrivende === YesOrNo.YES) {\n                            if (egenNæringInformasjon.length === 0) {\n                                return intlUtils(\n                                    intl,\n                                    'valideringsfeil.inntektsinformasjon.andreInntekter.måHaVirksomhet'\n                                );\n                            }\n                        }\n\n                        return undefined;\n                    }}\n                />\n            </Block>\n            {formValues.hattInntektSomNæringsdrivende === YesOrNo.YES && (\n                <div style={{ backgroundColor: '#f1f1f1', marginBottom: '1rem', padding: '1rem' }}>\n                    <EgenNæringModal\n                        isOpen={isModalOpen}\n                        title=\"Næringsinformasjon\"\n                        onRequestClose={() => setIsModalOpen(false)}\n                        selectedNæring={selectedNæring}\n                        addNæring={addNæring}\n                        editNæring={editNæring}\n                    />\n                    <Block padBottom=\"l\" visible={egenNæringInformasjon.length > 0}>\n                        <EgenNæringListe\n                            næringsInformasjon={egenNæringInformasjon}\n                            deleteNæring={deleteNæring}\n                            selectNæring={selectNæring}\n                        />\n                    </Block>\n                    <Knapp htmlType=\"button\" onClick={handleOnLeggTil}>\n                        <FormattedMessage id=\"inntektsinformasjon.leggTilVirksomhet\" />\n                    </Knapp>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default EgenNæring;\n","import { hasValue, intlUtils } from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { isISODateString } from 'nav-datovelger';\nimport { IntlShape } from 'react-intl';\n\nexport const validateFrilansoppstartsDato = (intl: IntlShape) => (oppstartsdato: string) => {\n    if (!hasValue(oppstartsdato)) {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.frilansoppstartsDato.påkrevd');\n    }\n\n    if (!isISODateString(oppstartsdato)) {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.frilansoppstartsDato.ugyldigDatoFormat');\n    }\n\n    if (dayjs().isBefore(dayjs(oppstartsdato), 'day')) {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.frilansoppstartsDato.kanIkkeVæreFremITid');\n    }\n};\n","import { formatDate } from '@navikt/fp-common';\nimport InteractiveListElement from 'app/components/interactive-list-element/InteractiveListElement';\nimport { FrilansOppdrag } from 'app/context/types/Frilans';\nimport React, { FunctionComponent } from 'react';\n\ninterface Props {\n    frilansoppdrag: FrilansOppdrag[];\n    deleteFrilansoppdrag: (oppdrag: FrilansOppdrag) => void;\n    selectOppdrag: (oppdrag: FrilansOppdrag) => void;\n}\n\nconst FrilansoppdragListe: FunctionComponent<Props> = ({ frilansoppdrag, deleteFrilansoppdrag, selectOppdrag }) => {\n    if (frilansoppdrag.length === 0) {\n        return null;\n    }\n\n    return (\n        <ul style={{ margin: 0, padding: 0, listStyle: 'none' }}>\n            {frilansoppdrag.map((oppdrag, index) => (\n                <InteractiveListElement\n                    deleteLinkText=\"Slett oppdrag\"\n                    onDelete={() => deleteFrilansoppdrag(oppdrag)}\n                    onEdit={() => selectOppdrag(oppdrag)}\n                    text={`${formatDate(oppdrag.tidsperiode.fom)} - ${\n                        oppdrag.tidsperiode.tom ? formatDate(oppdrag.tidsperiode.tom) : 'pågående'\n                    }`}\n                    title={oppdrag.navnPåArbeidsgiver}\n                    deleteButtonAriaText={`Slett oppdrag for ${oppdrag.navnPåArbeidsgiver}`}\n                    editButtonAriaText={`Rediger oppdrag for ${oppdrag.navnPåArbeidsgiver}`}\n                    key={`${oppdrag.navnPåArbeidsgiver}+${index}`}\n                />\n            ))}\n        </ul>\n    );\n};\n\nexport default FrilansoppdragListe;\n","import { intlUtils, UtvidetInformasjon } from '@navikt/fp-common';\nimport EksternUrl from 'app/components/ekstern-url/EksternUrl';\nimport links from 'app/links/links';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nconst HvemKanVæreFrilanser = () => {\n    const intl = useIntl();\n\n    return (\n        <UtvidetInformasjon\n            apneLabel={intlUtils(intl, 'inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.apneLabel')}\n        >\n            <div style={{ backgroundColor: '#f1f1f1', padding: '1.5rem' }}>\n                <Normaltekst>\n                    <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.del1\" />\n                </Normaltekst>\n                <ul>\n                    <li>\n                        <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.punkt1\" />\n                    </li>\n                    <li>\n                        <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.punkt2\" />\n                    </li>\n                    <li>\n                        <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.punkt3\" />\n                    </li>\n                    <li>\n                        <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.punkt4\" />\n                    </li>\n                    <li>\n                        <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.punkt5\" />\n                    </li>\n                    <li>\n                        <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.punkt6\" />\n                    </li>\n                    <li>\n                        <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.punkt7\" />\n                    </li>\n                    <li>\n                        <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.punkt8\" />\n                    </li>\n                </ul>\n                <Normaltekst>\n                    <FormattedMessage id=\"inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd.infoboksTekst.del2\" />\n                    <EksternUrl url={links.frilanserInfoBoks} lenkeTekst={intlUtils(intl, 'hjemmeside')} />\n                </Normaltekst>\n            </div>\n        </UtvidetInformasjon>\n    );\n};\n\nexport default HvemKanVæreFrilanser;\n","import { getTypedFormComponents, YesOrNo } from '@navikt/sif-common-formik/lib';\n\nexport enum FrilansoppdragModalFormField {\n    navnOppdragsgiver = 'navnOppdragsgiver',\n    fom = 'fom',\n    tom = 'tom',\n    pågående = 'pågående',\n}\n\nexport interface FrilansoppdragModalFormData {\n    [FrilansoppdragModalFormField.navnOppdragsgiver]: string;\n    [FrilansoppdragModalFormField.fom]: string;\n    [FrilansoppdragModalFormField.tom]: string;\n    [FrilansoppdragModalFormField.pågående]: YesOrNo;\n}\n\nexport const FrilansoppdragModalFormComponents = getTypedFormComponents<\n    FrilansoppdragModalFormField,\n    FrilansoppdragModalFormData,\n    string\n>();\n","import { hasValue } from '@navikt/fp-common';\nimport { dateToISOString, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { FrilansOppdrag } from 'app/context/types/Frilans';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport { convertBooleanOrUndefinedToYesOrNo, convertYesOrNoOrUndefinedToBoolean } from 'app/utils/formUtils';\nimport { FrilansoppdragModalFormData, FrilansoppdragModalFormField } from './frilansoppdragModalFormConfig';\n\nexport const initialFrilansoppdragModalValues: FrilansoppdragModalFormData = {\n    [FrilansoppdragModalFormField.navnOppdragsgiver]: '',\n    [FrilansoppdragModalFormField.fom]: '',\n    [FrilansoppdragModalFormField.tom]: '',\n    [FrilansoppdragModalFormField.pågående]: YesOrNo.UNANSWERED,\n};\n\nexport const cleanupFrilansoppdragForm = (\n    values: FrilansoppdragModalFormData,\n    visibility: QuestionVisibility<FrilansoppdragModalFormField, undefined>\n): FrilansoppdragModalFormData => {\n    return {\n        navnOppdragsgiver: visibility.isVisible(FrilansoppdragModalFormField.navnOppdragsgiver)\n            ? values.navnOppdragsgiver\n            : initialFrilansoppdragModalValues.navnOppdragsgiver,\n        fom: visibility.isVisible(FrilansoppdragModalFormField.fom) ? values.fom : initialFrilansoppdragModalValues.fom,\n        tom: visibility.isVisible(FrilansoppdragModalFormField.tom) ? values.tom : initialFrilansoppdragModalValues.tom,\n        pågående: visibility.isVisible(FrilansoppdragModalFormField.pågående)\n            ? values.pågående\n            : initialFrilansoppdragModalValues.pågående,\n    };\n};\n\nexport const mapFrilansoppdragModalValuesToState = (values: Partial<FrilansoppdragModalFormData>): FrilansOppdrag => {\n    return {\n        navnPåArbeidsgiver: values.navnOppdragsgiver!,\n        pågående: convertYesOrNoOrUndefinedToBoolean(values.pågående)!,\n        tidsperiode: {\n            fom: ISOStringToDate(values.fom)!,\n            tom: hasValue(values.tom) ? ISOStringToDate(values.tom) : undefined,\n        },\n    };\n};\n\nexport const getInitialFrilansoppdragModalValues = (\n    oppdrag: FrilansOppdrag | undefined\n): FrilansoppdragModalFormData => {\n    if (!oppdrag) {\n        return {\n            ...initialFrilansoppdragModalValues,\n        };\n    }\n\n    return {\n        ...initialFrilansoppdragModalValues,\n        fom: dateToISOString(oppdrag.tidsperiode.fom),\n        tom: dateToISOString(oppdrag.tidsperiode.tom) || '',\n        navnOppdragsgiver: oppdrag.navnPåArbeidsgiver,\n        pågående: convertBooleanOrUndefinedToYesOrNo(oppdrag.pågående),\n    };\n};\n","import { hasValue } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { FrilansoppdragModalFormData, FrilansoppdragModalFormField } from './frilansoppdragModalFormConfig';\n\nconst FrilansoppdragModalFormConfig: QuestionConfig<FrilansoppdragModalFormData, FrilansoppdragModalFormField> = {\n    [FrilansoppdragModalFormField.navnOppdragsgiver]: {\n        isIncluded: () => true,\n        isAnswered: ({ navnOppdragsgiver }) => hasValue(navnOppdragsgiver),\n    },\n    [FrilansoppdragModalFormField.fom]: {\n        isIncluded: () => true,\n        isAnswered: ({ fom }) => hasValue(fom),\n        visibilityFilter: ({ navnOppdragsgiver }) => hasValue(navnOppdragsgiver),\n    },\n    [FrilansoppdragModalFormField.pågående]: {\n        isIncluded: () => true,\n        isAnswered: ({ pågående }) => pågående !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ fom }) => hasValue(fom),\n    },\n    [FrilansoppdragModalFormField.tom]: {\n        isIncluded: ({ pågående }) => pågående === YesOrNo.NO,\n        isAnswered: ({ tom }) => hasValue(tom),\n        visibilityFilter: ({ pågående }) => pågående === YesOrNo.NO,\n    },\n};\n\nconst frilansoppdragModalQuestionsConfig = Questions<FrilansoppdragModalFormData, FrilansoppdragModalFormField>(\n    FrilansoppdragModalFormConfig\n);\n\nexport default frilansoppdragModalQuestionsConfig;\n","import { hasValue, intlUtils } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { isDateInTheFuture, isDateABeforeDateB } from 'app/utils/dateUtils';\nimport { validateTextInputField } from 'app/utils/validationUtil';\nimport { isISODateString } from 'nav-datovelger';\nimport { IntlShape } from 'react-intl';\n\nexport const validateNavnPåOppdragsgiver = (intl: IntlShape, label: string) => (navn: string) => {\n    if (!hasValue(navn) || navn.trim() === '') {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.frilansoppdrag.navnPåOppdragsgiver.påkrevd');\n    }\n\n    return validateTextInputField(navn, label, intl);\n};\n\nexport const validateOppdragFom = (intl: IntlShape, tom: string, oppstartsdato: string) => (fom: string) => {\n    if (!hasValue(fom)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.påkrevd');\n    }\n\n    if (!isISODateString(fom)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.gyldigDato');\n    }\n\n    if (isDateInTheFuture(fom)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.erIFremtiden');\n    }\n\n    if (isDateABeforeDateB(fom, oppstartsdato)) {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.frilansoppdrag.fom.førOppstartsdato');\n    }\n\n    if (isDateABeforeDateB(tom, fom)) {\n        return intlUtils(intl, 'valideringsfeil.fraOgMedDato.førTilDato');\n    }\n\n    return undefined;\n};\n\nexport const validatePågåendeOppdrag = (intl: IntlShape) => (pågående: YesOrNo) => {\n    if (pågående === YesOrNo.UNANSWERED) {\n        return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.frilansoppdrag.pågående.påkrevd');\n    }\n\n    return undefined;\n};\n\nexport const validateOppdragTom =\n    (intl: IntlShape, pågående: YesOrNo, fom: string, oppstartsdato: string) => (tom: string) => {\n        if (pågående === YesOrNo.YES) {\n            return undefined;\n        }\n\n        if (!hasValue(tom)) {\n            return intlUtils(intl, 'valideringsfeil.tilOgMedDato.påkrevd');\n        }\n\n        if (!isISODateString(tom)) {\n            return intlUtils(intl, 'valideringsfeil.tilOgMedDato.gyldigDato');\n        }\n\n        if (isDateInTheFuture(tom)) {\n            return intlUtils(intl, 'valideringsfeil.tilOgMedDato.erIFremtiden');\n        }\n\n        if (isDateABeforeDateB(tom, oppstartsdato)) {\n            return intlUtils(intl, 'valideringsfeil.inntektsinformasjon.frilansoppdrag.tom.førOppstartsdato');\n        }\n\n        if (isDateABeforeDateB(tom, fom)) {\n            return intlUtils(intl, 'valideringsfeil.tilOgMedDato.etterFraDato');\n        }\n\n        return undefined;\n    };\n","import React, { FunctionComponent } from 'react';\nimport Modal from 'nav-frontend-modal';\nimport {\n    FrilansoppdragModalFormComponents,\n    FrilansoppdragModalFormData,\n    FrilansoppdragModalFormField,\n} from './frilansoppdragModalFormConfig';\nimport {\n    cleanupFrilansoppdragForm,\n    getInitialFrilansoppdragModalValues,\n    mapFrilansoppdragModalValuesToState,\n} from './frilansoppdragModalFormUtils';\nimport { bemUtils, Block, intlUtils } from '@navikt/fp-common';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport frilansoppdragModalQuestionsConfig from './frilansoppdragModalQuestionsConfig';\nimport { FrilansOppdrag } from 'app/context/types/Frilans';\nimport {\n    validateNavnPåOppdragsgiver,\n    validateOppdragFom,\n    validateOppdragTom,\n    validatePågåendeOppdrag,\n} from '../validation/frilansValidation';\nimport dayjs from 'dayjs';\n\nimport './frilansoppdragModal.less';\n\ninterface Props {\n    isOpen: boolean;\n    title: string;\n    onRequestClose: () => void;\n    selectedFrilansoppdrag?: FrilansOppdrag;\n    addFrilansoppdrag: (oppdrag: FrilansOppdrag) => void;\n    editFrilansoppdrag: (oppdrag: FrilansOppdrag) => void;\n    oppstartsdato: string;\n}\n\nconst startetSomFrilansIForrigeKalenderårEllerTidligere = (oppstartsdato: string) => {\n    return dayjs(oppstartsdato).year() < dayjs().year();\n};\n\nconst FrilansoppdragModal: FunctionComponent<Props> = ({\n    isOpen,\n    title,\n    onRequestClose,\n    selectedFrilansoppdrag,\n    addFrilansoppdrag,\n    editFrilansoppdrag,\n    oppstartsdato,\n}) => {\n    const bem = bemUtils('frilansoppdragModal');\n    const intl = useIntl();\n\n    const onValidSubmit = (values: Partial<FrilansoppdragModalFormData>) => {\n        if (!selectedFrilansoppdrag) {\n            addFrilansoppdrag(mapFrilansoppdragModalValuesToState(values));\n        } else {\n            editFrilansoppdrag(mapFrilansoppdragModalValuesToState(values));\n        }\n        onRequestClose();\n    };\n\n    const oppdragsgiverNavnLabel = intlUtils(intl, 'inntektsinformasjon.frilansOppdrag.oppdragsgiver');\n\n    return (\n        <Modal\n            isOpen={isOpen}\n            contentLabel={title}\n            onRequestClose={onRequestClose}\n            closeButton={true}\n            shouldCloseOnOverlayClick={false}\n            className={bem.block}\n        >\n            <FrilansoppdragModalFormComponents.FormikWrapper\n                initialValues={getInitialFrilansoppdragModalValues(selectedFrilansoppdrag)}\n                onSubmit={(values: Partial<FrilansoppdragModalFormData>) => onValidSubmit(values)}\n                renderForm={({ values: formValues }) => {\n                    const visibility = frilansoppdragModalQuestionsConfig.getVisbility(formValues);\n\n                    return (\n                        <FrilansoppdragModalFormComponents.Form\n                            cleanup={(values) => cleanupFrilansoppdragForm(values, visibility)}\n                        >\n                            <Undertittel className={bem.element('tittel')}>\n                                <FormattedMessage id=\"inntektsinformasjon.frilansOppdrag.tittel\" />\n                            </Undertittel>\n                            <Block padBottom=\"l\">\n                                <FrilansoppdragModalFormComponents.Input\n                                    name={FrilansoppdragModalFormField.navnOppdragsgiver}\n                                    label={oppdragsgiverNavnLabel}\n                                    validate={validateNavnPåOppdragsgiver(intl, oppdragsgiverNavnLabel)}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(FrilansoppdragModalFormField.fom)}>\n                                <FrilansoppdragModalFormComponents.DatePicker\n                                    name={FrilansoppdragModalFormField.fom}\n                                    label={intlUtils(intl, 'fom')}\n                                    placeholder={'dd.mm.åååå'}\n                                    fullscreenOverlay={true}\n                                    validate={validateOppdragFom(intl, formValues.tom, oppstartsdato)}\n                                    minDate={dayjs(oppstartsdato).toDate()}\n                                    maxDate={dayjs().toDate()}\n                                    showYearSelector={startetSomFrilansIForrigeKalenderårEllerTidligere(oppstartsdato)}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(FrilansoppdragModalFormField.pågående)}>\n                                <FrilansoppdragModalFormComponents.YesOrNoQuestion\n                                    name={FrilansoppdragModalFormField.pågående}\n                                    legend={intlUtils(intl, 'inntektsinformasjon.frilansOppdrag.pågående')}\n                                    validate={validatePågåendeOppdrag(intl)}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(FrilansoppdragModalFormField.tom)}>\n                                <FrilansoppdragModalFormComponents.DatePicker\n                                    name={FrilansoppdragModalFormField.tom}\n                                    label={intlUtils(intl, 'tom')}\n                                    placeholder={'dd.mm.åååå'}\n                                    fullscreenOverlay={true}\n                                    validate={validateOppdragTom(\n                                        intl,\n                                        formValues.pågående,\n                                        formValues.fom,\n                                        oppstartsdato\n                                    )}\n                                    minDate={dayjs(formValues.fom).toDate()}\n                                    maxDate={dayjs().toDate()}\n                                    showYearSelector={true}\n                                />\n                            </Block>\n                        </FrilansoppdragModalFormComponents.Form>\n                    );\n                }}\n            />\n        </Modal>\n    );\n};\n\nexport default FrilansoppdragModal;\n","import { Block, dateToday, intlUtils } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { FrilansOppdrag } from 'app/context/types/Frilans';\nimport { Knapp } from 'nav-frontend-knapper';\nimport React, { FunctionComponent, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport {\n    InntektsinformasjonFormComponents,\n    InntektsinformasjonFormData,\n    InntektsinformasjonFormField,\n} from '../../inntektsinformasjonFormConfig';\nimport { validateFrilansoppstartsDato } from '../../validation/inntektsinformasjonValidering';\nimport FrilansoppdragListe from './FrilansoppdragListe';\nimport HvemKanVæreFrilanser from './HvemKanVæreFrilanser';\nimport FrilansoppdragModal from './modal/FrilansoppdragModal';\n\ninterface Props {\n    frilansoppdrag: FrilansOppdrag[];\n    setFrilansoppdrag: (oppdrag: FrilansOppdrag[]) => void;\n    visibility: QuestionVisibility<InntektsinformasjonFormField, undefined>;\n    formValues: InntektsinformasjonFormData;\n}\n\nconst Frilans: FunctionComponent<Props> = ({ frilansoppdrag, setFrilansoppdrag, visibility, formValues }) => {\n    const intl = useIntl();\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [selectedOppdrag, setSelectedOppdrag] = useState<FrilansOppdrag>();\n\n    const addFrilansoppdrag = (oppdrag: FrilansOppdrag) => {\n        const updatedFrilansoppdrag = frilansoppdrag.concat(oppdrag);\n\n        setFrilansoppdrag(updatedFrilansoppdrag);\n    };\n\n    const deleteFrilansoppdrag = (oppdrag: FrilansOppdrag) => {\n        const updatedFrilansoppdrag = frilansoppdrag.filter((opp) => opp !== oppdrag);\n\n        setFrilansoppdrag(updatedFrilansoppdrag);\n    };\n\n    const editFrilansoppdrag = (oppdrag: FrilansOppdrag) => {\n        const updatedFrilansoppdrag = frilansoppdrag.filter((opp) => opp !== selectedOppdrag).concat(oppdrag);\n\n        setFrilansoppdrag(updatedFrilansoppdrag);\n    };\n\n    const selectOppdrag = (frilansoppdrag: FrilansOppdrag) => {\n        setSelectedOppdrag(frilansoppdrag);\n        setIsModalOpen(true);\n    };\n\n    const handleOnLeggTil = () => {\n        setIsModalOpen(true);\n        setSelectedOppdrag(undefined);\n    };\n\n    return (\n        <>\n            <Block padBottom=\"l\" visible={visibility.isVisible(InntektsinformasjonFormField.hattInntektSomFrilans)}>\n                <InntektsinformasjonFormComponents.YesOrNoQuestion\n                    name={InntektsinformasjonFormField.hattInntektSomFrilans}\n                    legend={intlUtils(intl, 'inntektsinformasjon.harDuJobbetSomFrilansSiste10Mnd')}\n                    description={<HvemKanVæreFrilanser />}\n                />\n            </Block>\n            {formValues.hattInntektSomFrilans === YesOrNo.YES && (\n                <div style={{ backgroundColor: '#f1f1f1', marginBottom: '1rem', padding: '1rem' }}>\n                    <Block\n                        padBottom=\"l\"\n                        visible={visibility.isVisible(InntektsinformasjonFormField.frilansOppstartsDato)}\n                    >\n                        <InntektsinformasjonFormComponents.DatePicker\n                            name={InntektsinformasjonFormField.frilansOppstartsDato}\n                            label={intlUtils(intl, 'inntektsinformasjon.frilans.oppstart')}\n                            validate={validateFrilansoppstartsDato(intl)}\n                            maxDate={dateToday}\n                            showYearSelector={true}\n                            placeholder={'dd.mm.åååå'}\n                        />\n                    </Block>\n                    <Block\n                        padBottom=\"l\"\n                        visible={visibility.isVisible(InntektsinformasjonFormField.jobberFremdelesSomFrilanser)}\n                    >\n                        <InntektsinformasjonFormComponents.YesOrNoQuestion\n                            name={InntektsinformasjonFormField.jobberFremdelesSomFrilanser}\n                            legend={intlUtils(intl, 'inntektsinformasjon.frilans.jobberFremdelesSomFrilans')}\n                        />\n                    </Block>\n                    <Block\n                        padBottom=\"l\"\n                        visible={visibility.isVisible(InntektsinformasjonFormField.oppdragForNæreVennerEllerFamilie)}\n                    >\n                        <InntektsinformasjonFormComponents.YesOrNoQuestion\n                            name={InntektsinformasjonFormField.oppdragForNæreVennerEllerFamilie}\n                            legend={intlUtils(intl, 'inntektsinformasjon.harJobbetForNærVennEllerFamilieSiste10Mnd')}\n                            validate={(oppdragForNæreVennerEllerFamilie) => {\n                                if (oppdragForNæreVennerEllerFamilie === YesOrNo.YES) {\n                                    if (frilansoppdrag.length === 0) {\n                                        return intlUtils(\n                                            intl,\n                                            'valideringsfeil.inntektsinformasjon.andreInntekter.måHaFrilansOppdrag'\n                                        );\n                                    }\n                                }\n\n                                return undefined;\n                            }}\n                        />\n                    </Block>\n                    <Block padBottom=\"l\" visible={formValues.oppdragForNæreVennerEllerFamilie === YesOrNo.YES}>\n                        <FrilansoppdragModal\n                            isOpen={isModalOpen}\n                            title={intlUtils(intl, 'inntektsinformasjon.frilansOppdrag.tittel')}\n                            onRequestClose={() => setIsModalOpen(false)}\n                            selectedFrilansoppdrag={selectedOppdrag}\n                            addFrilansoppdrag={addFrilansoppdrag}\n                            editFrilansoppdrag={editFrilansoppdrag}\n                            oppstartsdato={formValues.frilansOppstartsDato}\n                        />\n                        <Block padBottom=\"l\" visible={frilansoppdrag.length > 0}>\n                            <FrilansoppdragListe\n                                frilansoppdrag={frilansoppdrag}\n                                deleteFrilansoppdrag={deleteFrilansoppdrag}\n                                selectOppdrag={selectOppdrag}\n                            />\n                        </Block>\n                        <Knapp htmlType=\"button\" onClick={handleOnLeggTil}>\n                            <FormattedMessage id=\"inntektsinformasjon.leggTilOppdrag\" />\n                        </Knapp>\n                    </Block>\n                    <Block\n                        padBottom=\"l\"\n                        visible={visibility.isVisible(InntektsinformasjonFormField.inntektSomFosterforelder)}\n                    >\n                        <InntektsinformasjonFormComponents.YesOrNoQuestion\n                            name={InntektsinformasjonFormField.inntektSomFosterforelder}\n                            legend={intlUtils(intl, 'inntektsinformasjon.driverFosterhjem')}\n                        />\n                    </Block>\n                </div>\n            )}\n        </>\n    );\n};\n\nexport default Frilans;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\nimport { Block, intlUtils, UtvidetInformasjon } from '@navikt/fp-common';\nimport links from 'app/links/links';\n\nconst InfoTilFiskere = () => {\n    const intl = useIntl();\n\n    return (\n        <UtvidetInformasjon apneLabel={intlUtils(intl, 'inntektsinformasjon.infoTilFiskere.apneLabel')}>\n            <div style={{ backgroundColor: '#f1f1f1', padding: '1.5rem' }}>\n                <Block padBottom=\"m\">\n                    <Normaltekst>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del1\" />\n                    </Normaltekst>\n                </Block>\n                <Element tag=\"h3\" style={{ marginBottom: '.5rem' }}>\n                    <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.hyre\" />\n                </Element>\n                <Block padBottom=\"m\">\n                    <Normaltekst>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del2\" />\n                    </Normaltekst>\n                </Block>\n                <Block padBottom=\"m\">\n                    <Normaltekst>\n                        <FormattedMessage\n                            id=\"inntektsinformasjon.infoTilFiskere.del3\"\n                            values={{\n                                a: (msg: any) => (\n                                    <a\n                                        href={links.hvordanSendeInntektsmelding}\n                                        target=\"_blank\"\n                                        rel=\"noreferrer\"\n                                        className=\"lenke\"\n                                    >\n                                        {msg}\n                                    </a>\n                                ),\n                            }}\n                        />\n                    </Normaltekst>\n                </Block>\n                <Element tag=\"h3\" style={{ marginBottom: '.5rem' }}>\n                    <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.lott\" />\n                </Element>\n                <Block padBottom=\"m\">\n                    <Normaltekst>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del4\" />\n                    </Normaltekst>\n                </Block>\n                <Block padBottom=\"m\">\n                    <Normaltekst>\n                        <FormattedMessage\n                            id=\"inntektsinformasjon.infoTilFiskere.del5\"\n                            values={{\n                                a: (msg: any) => (\n                                    <a href={links.omLottOgHyre} target=\"_blank\" rel=\"noreferrer\" className=\"lenke\">\n                                        {msg}\n                                    </a>\n                                ),\n                            }}\n                        />\n                    </Normaltekst>\n                </Block>\n                <Element tag=\"h3\" style={{ marginBottom: '.5rem' }}>\n                    <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.egenBåt\" />\n                </Element>\n                <Block padBottom=\"m\">\n                    <Normaltekst>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del6\" />\n                    </Normaltekst>\n                </Block>\n                <Element tag=\"h3\" style={{ marginBottom: '.5rem' }}>\n                    <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.lottOgHyre\" />\n                </Element>\n                <Block padBottom=\"m\">\n                    <Normaltekst>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del7\" />\n                    </Normaltekst>\n                </Block>\n                <Block padBottom=\"m\">\n                    <Normaltekst>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del8\" />\n                    </Normaltekst>\n                </Block>\n                <Block padBottom=\"m\">\n                    <Normaltekst>\n                        <FormattedMessage id=\"inntektsinformasjon.infoTilFiskere.del9\" />\n                    </Normaltekst>\n                </Block>\n                <Block margin=\"none\">\n                    <Normaltekst>\n                        <FormattedMessage\n                            id=\"inntektsinformasjon.infoTilFiskere.del5\"\n                            values={{\n                                a: (msg: any) => (\n                                    <a href={links.omLottOgHyre} target=\"_blank\" rel=\"noreferrer\" className=\"lenke\">\n                                        {msg}\n                                    </a>\n                                ),\n                            }}\n                        />\n                    </Normaltekst>\n                </Block>\n            </div>\n        </UtvidetInformasjon>\n    );\n};\n\nexport default InfoTilFiskere;\n","import { dateToISOString, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { AnnenInntekt, AnnenInntektType } from 'app/context/types/AnnenInntekt';\nimport { Frilans, FrilansOppdrag } from 'app/context/types/Frilans';\nimport { Næring } from 'app/context/types/Næring';\nimport Søker from 'app/context/types/Søker';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport { convertBooleanOrUndefinedToYesOrNo, convertYesOrNoOrUndefinedToBoolean } from 'app/utils/formUtils';\nimport { replaceInvisibleCharsWithSpace } from 'app/utils/stringUtils';\nimport { InntektsinformasjonFormData, InntektsinformasjonFormField } from './inntektsinformasjonFormConfig';\n\nexport const initialInntektsinformasjonFormValues: InntektsinformasjonFormData = {\n    [InntektsinformasjonFormField.hattInntektSomFrilans]: YesOrNo.UNANSWERED,\n    [InntektsinformasjonFormField.hattInntektSomNæringsdrivende]: YesOrNo.UNANSWERED,\n    [InntektsinformasjonFormField.hattAndreInntekter]: YesOrNo.UNANSWERED,\n    [InntektsinformasjonFormField.frilansOppstartsDato]: '',\n    [InntektsinformasjonFormField.oppdragForNæreVennerEllerFamilie]: YesOrNo.UNANSWERED,\n    [InntektsinformasjonFormField.inntektSomFosterforelder]: YesOrNo.UNANSWERED,\n    [InntektsinformasjonFormField.jobberFremdelesSomFrilanser]: YesOrNo.UNANSWERED,\n    [InntektsinformasjonFormField.hattAndreInntekter]: YesOrNo.UNANSWERED,\n};\n\nconst cleanUpRegnskapsførerNæring = (næring: Næring): Næring => {\n    if (næring.harRegnskapsfører) {\n        return {\n            ...næring,\n            regnskapsfører: {\n                ...næring.regnskapsfører!,\n                navn: replaceInvisibleCharsWithSpace(næring.regnskapsfører!.navn),\n            },\n        };\n    }\n    return næring;\n};\n\nexport const cleanupInvisibleCharsFromNæring = (næring: Næring): Næring => {\n    const cleanedNavn = replaceInvisibleCharsWithSpace(næring.navnPåNæringen);\n    if (næring.hattVarigEndringAvNæringsinntektSiste4Kalenderår) {\n        const cleanedEndringInformasjon = {\n            ...næring.endringAvNæringsinntektInformasjon!,\n            forklaring: replaceInvisibleCharsWithSpace(næring.endringAvNæringsinntektInformasjon!.forklaring),\n        };\n\n        return {\n            ...cleanUpRegnskapsførerNæring(næring),\n            navnPåNæringen: cleanedNavn,\n            endringAvNæringsinntektInformasjon: cleanedEndringInformasjon,\n        };\n    }\n    return {\n        ...cleanUpRegnskapsførerNæring(næring),\n        navnPåNæringen: cleanedNavn,\n    };\n};\n\nexport const cleanupInvisibleCharsFromFrilansinformasjon = (frilansoppdrag: FrilansOppdrag[]): FrilansOppdrag[] => {\n    return frilansoppdrag.map((oppdrag: FrilansOppdrag) => ({\n        ...oppdrag,\n        navnPåArbeidsgiver: replaceInvisibleCharsWithSpace(oppdrag.navnPåArbeidsgiver),\n    }));\n};\n\nexport const cleanupInvisibleCharsFromAndreInntekter = (andreInntekter: AnnenInntekt[]): AnnenInntekt[] => {\n    return andreInntekter.map((inntekt) =>\n        inntekt.type === AnnenInntektType.JOBB_I_UTLANDET\n            ? {\n                  ...inntekt,\n                  arbeidsgiverNavn: replaceInvisibleCharsWithSpace(inntekt.arbeidsgiverNavn),\n              }\n            : inntekt\n    );\n};\n\nexport const mapInntektsinformasjonFormDataToState = (\n    values: Partial<InntektsinformasjonFormData>,\n    søker: Søker,\n    andreInntekter?: AnnenInntekt[],\n    frilansoppdrag?: FrilansOppdrag[],\n    næringer?: Næring[]\n): Søker => {\n    let frilansInformasjon: Frilans | undefined = undefined;\n\n    if (values.hattInntektSomFrilans === YesOrNo.YES) {\n        frilansInformasjon = {\n            oppstart: ISOStringToDate(values.frilansOppstartsDato)!,\n            jobberFremdelesSomFrilans: convertYesOrNoOrUndefinedToBoolean(values.jobberFremdelesSomFrilanser)!,\n            harJobbetForNærVennEllerFamilieSiste10Mnd: convertYesOrNoOrUndefinedToBoolean(\n                values.oppdragForNæreVennerEllerFamilie\n            )!,\n            driverFosterhjem: convertYesOrNoOrUndefinedToBoolean(values.inntektSomFosterforelder),\n            oppdragForNæreVennerEllerFamilieSiste10Mnd: cleanupInvisibleCharsFromFrilansinformasjon(frilansoppdrag!),\n        };\n    }\n\n    return {\n        erAleneOmOmsorg: søker.erAleneOmOmsorg,\n        språkkode: søker.språkkode,\n        harHattAnnenInntektSiste10Mnd: convertYesOrNoOrUndefinedToBoolean(values.hattAndreInntekter)!,\n        harJobbetSomFrilansSiste10Mnd: convertYesOrNoOrUndefinedToBoolean(values.hattInntektSomFrilans)!,\n        harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd: convertYesOrNoOrUndefinedToBoolean(\n            values.hattInntektSomNæringsdrivende\n        )!,\n        andreInntekterSiste10Mnd:\n            values.hattAndreInntekter === YesOrNo.YES ? cleanupInvisibleCharsFromAndreInntekter(andreInntekter!) : [],\n        selvstendigNæringsdrivendeInformasjon:\n            values.hattInntektSomNæringsdrivende === YesOrNo.YES\n                ? næringer!.map((næring) => cleanupInvisibleCharsFromNæring(næring))\n                : [],\n        frilansInformasjon: values.hattInntektSomFrilans === YesOrNo.YES ? frilansInformasjon : undefined,\n    };\n};\n\nexport const getInitialInntektsinformasjonFormValues = (søker: Søker): InntektsinformasjonFormData => {\n    return {\n        ...initialInntektsinformasjonFormValues,\n        hattAndreInntekter: convertBooleanOrUndefinedToYesOrNo(søker.harHattAnnenInntektSiste10Mnd),\n        hattInntektSomNæringsdrivende: convertBooleanOrUndefinedToYesOrNo(\n            søker.harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd\n        ),\n        hattInntektSomFrilans: convertBooleanOrUndefinedToYesOrNo(søker.harJobbetSomFrilansSiste10Mnd),\n        frilansOppstartsDato: søker.frilansInformasjon ? dateToISOString(søker.frilansInformasjon.oppstart) : '',\n        inntektSomFosterforelder: søker.frilansInformasjon\n            ? convertBooleanOrUndefinedToYesOrNo(søker.frilansInformasjon.driverFosterhjem)\n            : YesOrNo.UNANSWERED,\n        jobberFremdelesSomFrilanser: søker.frilansInformasjon\n            ? convertBooleanOrUndefinedToYesOrNo(søker.frilansInformasjon.jobberFremdelesSomFrilans)\n            : YesOrNo.UNANSWERED,\n        oppdragForNæreVennerEllerFamilie: søker.frilansInformasjon\n            ? convertBooleanOrUndefinedToYesOrNo(søker.frilansInformasjon.harJobbetForNærVennEllerFamilieSiste10Mnd)\n            : YesOrNo.UNANSWERED,\n    };\n};\n","import { hasValue } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { InntektsinformasjonFormData, InntektsinformasjonFormField } from './inntektsinformasjonFormConfig';\n\nconst InntektsinformasjonFormConfig: QuestionConfig<InntektsinformasjonFormData, InntektsinformasjonFormField> = {\n    [InntektsinformasjonFormField.hattInntektSomFrilans]: {\n        isIncluded: () => true,\n        isAnswered: ({ hattInntektSomFrilans }) => hattInntektSomFrilans !== YesOrNo.UNANSWERED,\n    },\n    [InntektsinformasjonFormField.frilansOppstartsDato]: {\n        isIncluded: ({ hattInntektSomFrilans }) => hattInntektSomFrilans === YesOrNo.YES,\n        isAnswered: ({ frilansOppstartsDato }) => hasValue(frilansOppstartsDato),\n        visibilityFilter: ({ hattInntektSomFrilans }) => hattInntektSomFrilans === YesOrNo.YES,\n    },\n    [InntektsinformasjonFormField.jobberFremdelesSomFrilanser]: {\n        isIncluded: ({ hattInntektSomFrilans }) => hattInntektSomFrilans === YesOrNo.YES,\n        isAnswered: ({ jobberFremdelesSomFrilanser }) => jobberFremdelesSomFrilanser !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ frilansOppstartsDato }) => hasValue(frilansOppstartsDato),\n    },\n    [InntektsinformasjonFormField.oppdragForNæreVennerEllerFamilie]: {\n        isIncluded: ({ hattInntektSomFrilans }) => hattInntektSomFrilans === YesOrNo.YES,\n        isAnswered: ({ oppdragForNæreVennerEllerFamilie }) => oppdragForNæreVennerEllerFamilie !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ jobberFremdelesSomFrilanser }) => jobberFremdelesSomFrilanser !== YesOrNo.UNANSWERED,\n    },\n    [InntektsinformasjonFormField.inntektSomFosterforelder]: {\n        isIncluded: ({ hattInntektSomFrilans }) => hattInntektSomFrilans === YesOrNo.YES,\n        isAnswered: ({ inntektSomFosterforelder }) => inntektSomFosterforelder !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ oppdragForNæreVennerEllerFamilie }) =>\n            oppdragForNæreVennerEllerFamilie !== YesOrNo.UNANSWERED,\n    },\n    [InntektsinformasjonFormField.hattInntektSomNæringsdrivende]: {\n        isIncluded: () => true,\n        isAnswered: ({ hattInntektSomNæringsdrivende }) => hattInntektSomNæringsdrivende !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ hattInntektSomFrilans }) => hattInntektSomFrilans !== YesOrNo.UNANSWERED,\n    },\n    [InntektsinformasjonFormField.hattAndreInntekter]: {\n        isIncluded: () => true,\n        isAnswered: ({ hattAndreInntekter }) => hattAndreInntekter !== YesOrNo.UNANSWERED,\n        visibilityFilter: ({ hattInntektSomNæringsdrivende }) => hattInntektSomNæringsdrivende !== YesOrNo.UNANSWERED,\n    },\n};\n\nconst inntektsinforMasjonQuestionsConfig = Questions<InntektsinformasjonFormData, InntektsinformasjonFormField>(\n    InntektsinformasjonFormConfig\n);\n\nexport default inntektsinforMasjonQuestionsConfig;\n","import { Block, intlUtils, Step } from '@navikt/fp-common';\nimport actionCreator from 'app/context/action/actionCreator';\nimport SøknadRoutes from 'app/routes/routes';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\nimport React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport useAvbrytSøknad from 'app/utils/hooks/useAvbrytSøknad';\nimport stepConfig, { getPreviousStepHref } from '../stepsConfig';\nimport AndreInntekter from './components/andre-inntekter/AndreInntekter';\nimport ArbeidsforholdInformasjon from './components/arbeidsforhold-informasjon/ArbeidsforholdInformasjon';\nimport EgenNæring from './components/egen-næring/EgenNæring';\nimport Frilans from './components/frilans/Frilans';\nimport InfoTilFiskere from './components/info-til-fiskere/InfoTilFiskere';\nimport { InntektsinformasjonFormComponents, InntektsinformasjonFormData } from './inntektsinformasjonFormConfig';\nimport {\n    getInitialInntektsinformasjonFormValues,\n    mapInntektsinformasjonFormDataToState,\n} from './inntektsinformasjonFormUtils';\nimport inntektsinforMasjonQuestionsConfig from './inntektsInformasjonQuestionsConfig';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport { getAktiveArbeidsforhold } from 'app/utils/arbeidsforholdUtils';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport { getFamiliehendelsedato } from 'app/utils/barnUtils';\nimport useSaveLoadedRoute from 'app/utils/hooks/useSaveLoadedRoute';\n\nconst Inntektsinformasjon = () => {\n    const intl = useIntl();\n    const { arbeidsforhold } = useSøkerinfo();\n    const { søker, barn } = useSøknad();\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n\n    const [frilansoppdrag, setFrilansoppdrag] = useState(\n        søker.frilansInformasjon ? søker.frilansInformasjon.oppdragForNæreVennerEllerFamilieSiste10Mnd : []\n    );\n    const [egenNæringInformasjon, setEgenNæringsInformasjon] = useState(\n        søker.selvstendigNæringsdrivendeInformasjon ? søker.selvstendigNæringsdrivendeInformasjon : []\n    );\n    const [andreInntekterInformasjon, setAndreInntekterInformasjon] = useState(\n        søker.andreInntekterSiste10Mnd ? søker.andreInntekterSiste10Mnd : []\n    );\n\n    const onValidSubmitHandler = (values: Partial<InntektsinformasjonFormData>) => {\n        const updatedSøker = mapInntektsinformasjonFormDataToState(\n            values,\n            søker,\n            andreInntekterInformasjon,\n            frilansoppdrag,\n            egenNæringInformasjon\n        );\n\n        return [actionCreator.setSøker(updatedSøker)];\n    };\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.OPPSUMMERING,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state)\n    );\n    const onAvbrytSøknad = useAvbrytSøknad();\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n    useSaveLoadedRoute(SøknadRoutes.INNTEKTSINFORMASJON);\n\n    return (\n        <InntektsinformasjonFormComponents.FormikWrapper\n            initialValues={getInitialInntektsinformasjonFormValues(søker)}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues }) => {\n                const visibility = inntektsinforMasjonQuestionsConfig.getVisbility(formValues);\n\n                return (\n                    <Step\n                        bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n                        backLinkHref={getPreviousStepHref('inntektsinformasjon')}\n                        activeStepId=\"inntektsinformasjon\"\n                        pageTitle={intlUtils(intl, 'søknad.inntektsinformasjon')}\n                        stepTitle={intlUtils(intl, 'søknad.inntektsinformasjon')}\n                        onCancel={onAvbrytSøknad}\n                        onContinueLater={onFortsettSøknadSenere}\n                        steps={stepConfig(intl)}\n                        kompakt={true}\n                    >\n                        <InntektsinformasjonFormComponents.Form includeButtons={false} includeValidationSummary={true}>\n                            <Block padBottom=\"l\">\n                                <Element>Utbetalinger fra NAV</Element>\n                                <Normaltekst>\n                                    Hvis du får utbetalinger fra NAV, trenger du ikke å opplyse om det i søknaden\n                                </Normaltekst>\n                            </Block>\n\n                            <ArbeidsforholdInformasjon\n                                arbeidsforhold={getAktiveArbeidsforhold(\n                                    arbeidsforhold,\n                                    ISOStringToDate(familiehendelsesdato)\n                                )}\n                            />\n\n                            <InfoTilFiskere />\n\n                            <Block padBottom=\"l\">\n                                <Frilans\n                                    frilansoppdrag={frilansoppdrag}\n                                    setFrilansoppdrag={setFrilansoppdrag}\n                                    visibility={visibility}\n                                    formValues={formValues}\n                                />\n                            </Block>\n\n                            <Block padBottom=\"l\">\n                                <EgenNæring\n                                    egenNæringInformasjon={egenNæringInformasjon}\n                                    setEgenNæringsInformasjon={setEgenNæringsInformasjon}\n                                    visibility={visibility}\n                                    formValues={formValues}\n                                />\n                            </Block>\n\n                            <Block padBottom=\"l\">\n                                <AndreInntekter\n                                    andreInntekterInformasjon={andreInntekterInformasjon}\n                                    setAndreInntekterInformasjon={setAndreInntekterInformasjon}\n                                    visibility={visibility}\n                                    formValues={formValues}\n                                />\n                            </Block>\n\n                            <Block textAlignCenter={true} visible={visibility.areAllQuestionsAnswered()}>\n                                <Hovedknapp disabled={isSubmitting} spinner={isSubmitting}>\n                                    {intlUtils(intl, 'søknad.gåVidere')}\n                                </Hovedknapp>\n                            </Block>\n                        </InntektsinformasjonFormComponents.Form>\n                    </Step>\n                );\n            }}\n        />\n    );\n};\n\nexport default Inntektsinformasjon;\n","import React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\nimport { bemUtils, formatDate, intlUtils } from '@navikt/fp-common';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\n\ninterface Props {\n    arbeidsforhold: Arbeidsforhold[];\n    harArbeidsforhold: boolean;\n}\n\nconst HarArbeidsforhold: FunctionComponent<Props> = ({ arbeidsforhold, harArbeidsforhold }: Props) => {\n    const intl = useIntl();\n\n    if (!harArbeidsforhold) {\n        return null;\n    }\n\n    const bem = bemUtils('arbeidsforholdInfoBox');\n\n    return (\n        <ul className=\"arbeidsforholdList\">\n            {arbeidsforhold.map((arbforhold: Arbeidsforhold) => (\n                <li key={arbforhold.arbeidsgiverId}>\n                    <div className={bem.block}>\n                        <div className={bem.element('topRow')}>\n                            {arbforhold.arbeidsgiverIdType === 'orgnr' && (\n                                <Normaltekst>\n                                    {intlUtils(intl, 'inntektsinformasjon.arbeidsforhold.organisasjonsnummer', {\n                                        organisasjonsnummer: arbforhold.arbeidsgiverId,\n                                    })}\n                                </Normaltekst>\n                            )}\n                            <Normaltekst className={bem.element('stillingsprosent')}>\n                                {intlUtils(intl, 'inntektsinformasjon.arbeidsforhold.stillingsprosent', {\n                                    stillingsprosent: arbforhold.stillingsprosent,\n                                })}\n                            </Normaltekst>\n                        </div>\n                        <Element>\n                            {arbforhold.arbeidsgiverIdType === 'orgnr'\n                                ? arbforhold.arbeidsgiverNavn\n                                : intlUtils(intl, 'arbeidsgiver')}\n                        </Element>\n                        <Normaltekst>\n                            {intlUtils(intl, 'inntektsinformasjon.arbeidsforhold.periode', {\n                                fom: formatDate(arbforhold.fom),\n                                tom: arbforhold.tom ? formatDate(arbforhold.tom) : intlUtils(intl, 'pågående'),\n                            })}\n                        </Normaltekst>\n                    </div>\n                </li>\n            ))}\n        </ul>\n    );\n};\nexport default HarArbeidsforhold;\n","import { intlUtils } from '@navikt/fp-common';\nimport { Element } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\n\ninterface Props {\n    harArbeidsforhold: boolean;\n}\n\nconst HarIkkeArbeidsforhold: FunctionComponent<Props> = ({ harArbeidsforhold }) => {\n    const intl = useIntl();\n\n    if (harArbeidsforhold) {\n        return null;\n    }\n\n    return (\n        <div className=\"arbeidsforholdInfoBox\" style={{ marginBottom: '1rem' }}>\n            <Element>{intlUtils(intl, 'inntektsinformasjon.arbeidsforhold.ingenRegistrerteArbeidsforhold')}</Element>\n        </div>\n    );\n};\n\nexport default HarIkkeArbeidsforhold;\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport dayjs from 'dayjs';\nimport uniqBy from 'lodash/uniqBy';\nimport { dateIsBetween } from './dateUtils';\n\nconst getArbeidsforholdFromOrgnummer = (\n    orgnummer: string,\n    arbeidsforhold: Arbeidsforhold[]\n): Arbeidsforhold | undefined => {\n    return arbeidsforhold.find((forhold) => forhold.arbeidsgiverId === orgnummer);\n};\n\nexport const getSamletStillingsprosentForArbeidsforhold = (\n    orgnumre: string[],\n    arbeidsforhold: Arbeidsforhold[]\n): number => {\n    return orgnumre\n        .map((orgnr) => getArbeidsforholdFromOrgnummer(orgnr, arbeidsforhold))\n        .filter((forhold) => forhold !== undefined)\n        .reduce((stillingsprosent, forhold) => {\n            return stillingsprosent + (forhold ? forhold.stillingsprosent : 0);\n        }, 0);\n};\n\nexport const getAktiveArbeidsforhold = (arbeidsforhold: Arbeidsforhold[], fraDato?: Date): Arbeidsforhold[] => {\n    return arbeidsforhold.filter(\n        (a) =>\n            a.tom === undefined ||\n            a.tom === null ||\n            (fraDato !== undefined && dayjs(fraDato).isSameOrBefore(a.tom, 'days'))\n    );\n};\n\nconst containsDuplicates = (arbeidsforhold: Arbeidsforhold[]): boolean => {\n    if (arbeidsforhold.length > 1) {\n        const arbeidsgiverIds = arbeidsforhold.map((a) => a.arbeidsgiverId);\n        const uniqueIds = new Set(arbeidsgiverIds);\n\n        return uniqueIds.size !== arbeidsgiverIds.length;\n    }\n\n    return false;\n};\n\nconst getArbeidsgiverId = (arbeidsforhold: Arbeidsforhold): string => {\n    return arbeidsforhold.arbeidsgiverId;\n};\n\nexport const getKunArbeidsforholdForValgtTidsperiode = (\n    arbeidsforhold: Arbeidsforhold[],\n    tidsperiode: TidsperiodeDate\n): Arbeidsforhold[] => {\n    if (tidsperiode.tom && tidsperiode.fom) {\n        const kunArbeidsforholdForValgtTidsperiode = arbeidsforhold.filter((a) => {\n            if (a.tom === undefined) {\n                if (dayjs(tidsperiode.fom).isSameOrAfter(dayjs(a.fom), 'day')) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            if (dateIsBetween(tidsperiode.fom, a.fom, a.tom) || dateIsBetween(tidsperiode.tom, a.fom, a.tom)) {\n                return true;\n            }\n\n            return false;\n        });\n\n        if (containsDuplicates(kunArbeidsforholdForValgtTidsperiode)) {\n            return uniqBy(kunArbeidsforholdForValgtTidsperiode, getArbeidsgiverId);\n        }\n\n        return kunArbeidsforholdForValgtTidsperiode;\n    }\n\n    return arbeidsforhold;\n};\n"],"names":["EksternIkon","React","className","width","height","viewBox","version","xmlns","xmlnsXlink","stroke","strokeWidth","fill","fillRule","d","EksternUrl","_ref","tekst","url","lenkeTekst","intl","useIntl","intlUtils","href","rel","target","style","marginLeft","Pencil","strokeLinecap","strokeLinejoin","InteractiveListElement","title","text","deleteLinkText","deleteButtonAriaText","editButtonAriaText","missingDocumentation","onDelete","onEdit","bem","bemUtils","block","element","Normaltekst","type","onClick","EtikettFokus","AnnenInntektType","Næringstype","InntektsinformasjonFormField","InntektsinformasjonFormComponents","getTypedFormComponents","getTitle","AndreInntekterListe","andreInntekter","deleteAnnenInntekt","selectAnnenInntekt","length","margin","padding","listStyle","map","annenInntekt","index","formatTidsperiodeMedValgfriSluttdato","tidsperiode","vedlegg","key","concat","fom","AndreInntekterFormField","AndreInntekterModalFormComponents","initialAndreInntekterFormValues","_defineProperty","_initialAndreInntekte","undefined","tom","YesOrNo","land","dokumentasjon","getSkjemanummer","values","Skjemanummer","getInitialAndreInntekterFormValues","_objectSpread","navnPåArbeidsgiver","arbeidsgiverNavn","pågående","convertBooleanOrUndefinedToYesOrNo","mapAnnenInntektModalValuesToState","convertYesOrNoOrUndefinedToBoolean","AndreInntekterModalFormConfig","_AndreInntekterModalF","isIncluded","isAnswered","hasValue","_ref2","_ref3","visibilityFilter","_ref4","_ref5","_ref6","_ref7","_ref8","_ref9","_ref10","_ref11","_ref12","_ref13","_ref14","_ref15","_ref16","Questions","validateAnnenInntektFom","isISODateString","isDateInTheFuture","isDateABeforeDateB","validateAnnenInntektTom","AndreInntekterModal","isOpen","contentLabel","onRequestClose","selectedAnnenInntekt","addAnnenInntekt","editAnnenInntekt","getVeilederMessageId","navnPåArbeidsgiverLabel","Modal","closeButton","shouldCloseOnOverlayClick","FormikWrapper","initialValues","onSubmit","onValidSubmit","renderForm","formValues","visibility","andreInntekterModalQuestionsConfig","Form","includeButtons","cleanup","cleanupAndreInntekterForm","isVisible","lagSendSenereDokumentNårIngenAndreFinnes","AttachmentType","Block","padBottom","Undertittel","FormattedMessage","id","visible","RadioPanelGroup","name","radios","label","value","CountrySelect","useAlpha3Code","Input","validate","validateRequiredTextInputField","DatePicker","placeholder","fullscreenOverlay","showYearSelector","maxDate","dayjs","toDate","YesOrNoQuestion","legend","Veilederpanel","fargetema","svg","VeilederNormal","transparentBackground","FormikFileUploader","attachments","attachmentType","skjemanummer","areAllQuestionsAnswered","textAlignCenter","Hovedknapp","AndreInntekter","andreInntekterInformasjon","setAndreInntekterInformasjon","_useState2","_slicedToArray","useState","isModalOpen","setIsModalOpen","_useState4","setSelectedAnnenInntekt","hattAndreInntekter","backgroundColor","marginBottom","updatedandreInntekterInformasjon","updatedAndreInntekterInformasjon","filter","inntekt","Knapp","htmlType","handleOnLeggTil","ArbeidsforholdInformasjon","arbeidsforhold","harArbeidsforhold","Element","UtvidetInformasjon","apneLabel","HarIkkeArbeidsforhold","HarArbeidsforhold","EgenNæringListe","næringsInformasjon","deleteNæring","selectNæring","næring","formatDate","navnPåNæringen","HvemKanDriveMedEgenNæring","links","EgenNæringModalFormField","EgenNæringModalFormComponents","initialEgenNæringModalValues","_initialEgenNæringMod","typer","registrertINorge","orgnr","yrkesAktivDato","datoForEndring","inntektEtterEndring","forklaringEndring","getInitialEgenNæringModalValues","_næring$næringsinntek","næringstyper","registrertILand","dateToISOString","organisasjonsnummer","næringsresultat","næringsinntekt","toString","hattVarigEndringAvNæringsinntektSiste4Kalenderår","harBlittYrkesaktivILøpetAvDeTreSisteFerdigliknedeÅrene","oppstartsdato","endringAvNæringsinntektInformasjon","dato","næringsinntektEtterEndring","forklaring","harRegnskapsfører","navnRegnskapsfører","regnskapsfører","navn","telefonRegnskapsfører","telefonnummer","regnskapsførerNærVennEllerFamilie","erNærVennEllerFamilie","mapEgenNæringModalFormValuesToState","ISOStringToDate","parseInt","erVirksomhetRegnetSomNyoppstartet","startOf","isAfter","date4YearsAgo","EgenNæringModalFormConfig","_EgenNæringModalFormC","_ref17","_ref18","_ref19","_ref20","_ref21","_ref22","_ref23","_ref24","_ref25","_ref26","_ref27","_ref28","_ref29","_ref30","_ref31","_ref32","_ref33","_ref34","_ref35","_ref36","_ref37","_ref38","_ref39","_ref40","_ref41","_ref42","_ref43","_ref44","_ref45","_ref46","_ref47","_ref48","_ref49","_ref50","validateEgenNæringFom","validateEgenNæringTom","validateEgenNæringOrgnr","erGyldigNorskOrgnummer","validateEgenNæringForklaringTilEndring","validateTextInputField","validateEgenNæringEndringAvInntektsDato","validateEgenNæringYrkesAktivDatoDato","validateNumber","errorKey","valueNumber","getNumberFromNumberInputValue","Math","round","OrgnummerEllerLand","NumberInput","Regnskapsfører","regnskapsførerNavnLabel","EgenNæringModal","selectedNæring","addNæring","editNæring","navnPåNæringLabel","varigEndringForklaringLabel","egenNæringModalQuestionsConfig","cleanupEgenNæringForm","includeValidationSummary","CheckboxPanelGroup","checkboxes","maxLength","minDate","description","Textarea","EgenNæring","egenNæringInformasjon","setEgenNæringsInformasjon","setSelectedNæring","hattInntektSomNæringsdrivende","updatedEgenNæringInformasjon","nær","validateFrilansoppstartsDato","isBefore","FrilansoppdragListe","frilansoppdrag","deleteFrilansoppdrag","selectOppdrag","oppdrag","HvemKanVæreFrilanser","FrilansoppdragModalFormField","FrilansoppdragModalFormComponents","initialFrilansoppdragModalValues","_initialFrilansoppdra","navnOppdragsgiver","mapFrilansoppdragModalValuesToState","getInitialFrilansoppdragModalValues","FrilansoppdragModalFormConfig","_FrilansoppdragModalF","validateNavnPåOppdragsgiver","trim","validateOppdragFom","validatePågåendeOppdrag","validateOppdragTom","startetSomFrilansIForrigeKalenderårEllerTidligere","year","FrilansoppdragModal","selectedFrilansoppdrag","addFrilansoppdrag","editFrilansoppdrag","oppdragsgiverNavnLabel","frilansoppdragModalQuestionsConfig","cleanupFrilansoppdragForm","Frilans","setFrilansoppdrag","selectedOppdrag","setSelectedOppdrag","hattInntektSomFrilans","frilansOppstartsDato","dateToday","jobberFremdelesSomFrilanser","oppdragForNæreVennerEllerFamilie","updatedFrilansoppdrag","opp","inntektSomFosterforelder","InfoTilFiskere","tag","a","msg","initialInntektsinformasjonFormValues","_initialInntektsinfor","cleanUpRegnskapsførerNæring","replaceInvisibleCharsWithSpace","cleanupInvisibleCharsFromFrilansinformasjon","cleanupInvisibleCharsFromAndreInntekter","mapInntektsinformasjonFormDataToState","søker","næringer","frilansInformasjon","oppstart","jobberFremdelesSomFrilans","harJobbetForNærVennEllerFamilieSiste10Mnd","driverFosterhjem","oppdragForNæreVennerEllerFamilieSiste10Mnd","erAleneOmOmsorg","språkkode","harHattAnnenInntektSiste10Mnd","harJobbetSomFrilansSiste10Mnd","harJobbetSomSelvstendigNæringsdrivendeSiste10Mnd","andreInntekterSiste10Mnd","selvstendigNæringsdrivendeInformasjon","cleanupInvisibleCharsFromNæring","cleanedNavn","cleanedEndringInformasjon","getInitialInntektsinformasjonFormValues","InntektsinformasjonFormConfig","_InntektsinformasjonF","Inntektsinformasjon","useSøkerinfo","_useSøknad","useSøknad","barn","familiehendelsesdato","getFamiliehendelsedato","_useState6","_useOnValidSubmit","useOnValidSubmit","onValidSubmitHandler","updatedSøker","actionCreator","SøknadRoutes","state","storeAppState","handleSubmit","isSubmitting","onAvbrytSøknad","useAvbrytSøknad","onFortsettSøknadSenere","useFortsettSøknadSenere","useSaveLoadedRoute","inntektsinforMasjonQuestionsConfig","Step","bannerTitle","backLinkHref","getPreviousStepHref","activeStepId","pageTitle","stepTitle","onCancel","onContinueLater","steps","stepConfig","kompakt","getAktiveArbeidsforhold","disabled","spinner","arbforhold","arbeidsgiverId","arbeidsgiverIdType","stillingsprosent","fraDato","isSameOrBefore","getArbeidsgiverId","getKunArbeidsforholdForValgtTidsperiode","kunArbeidsforholdForValgtTidsperiode","isSameOrAfter","dateIsBetween","containsDuplicates","arbeidsgiverIds","Set","size","uniqBy"],"sourceRoot":""}