{"version":3,"file":"AppContainer-stories.4042ddb8.iframe.bundle.js","mappings":"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AM9B,EAAAA,QAAAA,IAAc8B,EAAE,IACxCye,mCACA3sC,qBACA4sC,WACA92B,eACA7V,iBACA4hC,8BAEEoL,cAAgBiB,iBAAiBM,sBAAuBxuC,sBACxDgtC,mBAAqBoB,sBACvBI,sBACAxuC,qBACA2sC,mCACAC,WACA92B,eACA7V,iBACA4hC,8BAEAsL,qBAAyCj3C,EAM7C,OAJIq4C,kBACApB,gBAAkBkB,mBAAmBE,kBAGlC,CACHjB,eAAgB,SAAAA,eAACJ,WAAkB,OAC/BH,sBACIC,mBACAC,cACAC,UACAltC,qBACA2sC,mCACAC,WACA92B,eACA7V,iBACAktC,gBACAtL,6BACH,EACL4M,gBAAiB,SAAAA,gBAACrB,aACd,IAAI3D,SAAsB,GAyC1B,OAxCA2D,YAAY/4C,SAAQ,SAACsO,QAASwd,OAC1B,GAAc,IAAVA,MACAspB,SAAWsD,sBACPC,mBACAC,cACAtqC,QACA3C,qBACA2sC,mCACAC,WACA92B,eACA7V,iBACAktC,gBACAtL,kCAED,CACH,IAAM6M,kBAAoBL,mBAAmB5E,UACvCkF,gBAAkBT,iBAAiBzE,SAAUzpC,sBAC7C4uC,qBAAuBR,sBACzB3E,SACAzpC,qBACA2sC,mCACAC,WACA92B,eACA7V,iBACA4hC,8BAEJ4H,SAAWsD,sBACP6B,qBACAD,gBACAhsC,QACA3C,qBACA2sC,mCACAC,WACA92B,eACA7V,iBACAyuC,kBACA7M,6BAER,CACJ,IACO4H,QACX,EACAsE,gBAAiB,SAAAA,gBAACJ,eAAsB,OACpCD,uBACIC,cACAa,sBACAxuC,qBACA2sC,mCACAC,WACA92B,eACA7V,iBACAktC,gBACAtL,6BACH,EACLgN,iBAAkB,SAAAA,iBAAChB,oBACf,IAAIpE,SAAsB,GAwC1B,OAvCAoE,mBAAmBx5C,SAAQ,SAACs5C,cAAextB,OACvC,GAAc,IAAVA,MACAspB,SAAWiE,uBACPC,cACAa,sBACAxuC,qBACA2sC,mCACAC,WACA92B,eACA7V,iBACAktC,gBACAtL,kCAED,CACH,IAAM6M,kBAAoBL,mBAAmB5E,UACvCkF,gBAAkBT,iBAAiBzE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","sources":["webpack://foreldrepengesoknad/./src/app/pages/feilside/Feilside.tsx","webpack://foreldrepengesoknad/./src/app/pages/ikkeMyndig/IkkeMyndig.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/link-button/LinkButton.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/tidsperiode-display/TidsperiodeDisplay.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/utils/uttaksdatoerUtils.ts","webpack://foreldrepengesoknad/./src/uttaksplan/utils/datoAvgrensningerUtils.ts","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/tidsperiode-form/TidsperiodeForm.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/assets/RangeIcon.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/aria-text/AriaText.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/utils/preventDoubleTapZoom.ts","webpack://foreldrepengesoknad/./src/uttaksplan/components/sirkelknapp/Sirkelknapp.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/number-stepper/StepperKnapp.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/number-stepper/NumberStepper.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/uker-dager-teller/UkerDagerTeller.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttak-endre-tidsperiode-spørsmål/UttakEndreTidsperiodeSpørsmål.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/periode-uttak-form/periodeUttakFormConfig.ts","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/spørsmål/er-mor-for-syk-dokumentasjon/MorErForSykDokumentasjonOpplastning.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/spørsmål/er-mor-for-syk/ErMorForSykSpørsmål.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/spørsmål/flerbarnsdager/FlerbarnsdagerSpørsmål.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/spørsmål/hvem-skal-ha-uttak/HvemSkalHaUttakSpørsmål.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/spørsmål/hvilken-konto/HvilkenKontoSpørsmål.tsx","webpack://foreldrepengesoknad/./src/app/types/UttakRundtFødselÅrsak.ts","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/spørsmål/uttak-rundt-fødsel-årsak/UttakRundtFødselÅrsakSpørsmål.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/spørsmål/overføringsårsak/OverføringsårsakSpørsmål.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/utils/prosentValidering.ts","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/spørsmål/samtidig-uttak/SamtidigUttakSpørsmål.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/spørsmål/skal-ha-gradering/SkalHaGraderingSpørsmål.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/submit-listener/SubmitListener.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/utils/uttaksskjema/hvemSkalTaUttakSkalBesvares.ts","webpack://foreldrepengesoknad/./src/uttaksplan/utils/uttaksskjema/erMorForSykSkalBesvares.ts","webpack://foreldrepengesoknad/./src/uttaksplan/utils/uttaksskjema/graderingSkalBesvares.ts","webpack://foreldrepengesoknad/./src/uttaksplan/utils/uttaksskjema/samtidigUttakSkalBesvares.ts","webpack://foreldrepengesoknad/./src/uttaksplan/utils/uttaksskjema/ønskerFlerbarnsdagerSkalBesvares.ts","webpack://foreldrepengesoknad/./src/uttaksplan/utils/uttaksskjema/overføringsårsakSkalBesvares.ts","webpack://foreldrepengesoknad/./src/uttaksplan/utils/uttaksskjema/uttakSkjemaregler.ts","webpack://foreldrepengesoknad/./src/uttaksplan/utils/uttaksskjema/graderingSkalBesvaresPgaWLBUttakRundtFødsel.ts","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/periode-uttak-form/periodeUttakFormQuestionsConfig.ts","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/periode-uttak-form/periodeUttakFormUtils.ts","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/spørsmål/aktivitetskrav/AktivitetskravSpørsmål.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/periode-uttak-form/PeriodeUttakForm.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/utsettelse-tidsperiode-spørsmål/UtsettelseTidsperiodeSpørsmål.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/periode-utsettelse-form/periodeUtsettelseFormConfig.ts","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/periode-utsettelse-form/periodeUtsettelseFormUtils.ts","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/periode-utsettelse-form/periodeUtsettelseFormQuestionsConfig.ts","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/spørsmål/utsettelse-årsak/UtsettelseÅrsakSpørsmål.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/periode-utsettelse-form/PeriodeUtsettelseForm.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/ny-periode/NyPeriode.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/assets/ArbeidIkon.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/assets/FerieIkon.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/assets/SykdomIkon.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/assets/TerminIkon.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/assets/UttakIkon.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaksplan-ikon/UttaksplanIkon.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/validering/veilederInfo/components/VeilederMelding.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/validering/veilederInfo/VeilederMeldinger.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/types/UttaksplanColor.ts","webpack://foreldrepengesoknad/./src/uttaksplan/utils/styleUtils.ts","webpack://foreldrepengesoknad/./src/uttaksplan/components/icon-box/IconBox.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/stønadskonto-ikon/StønadskontoIkon.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/utsettelse-ikon/UtsettelseIkon.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/assets/UttaksplanAdvarselIkon.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/periodeliste-item-header/PeriodelisteItemHeader.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/perioder/PeriodeHull.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/perioder/PeriodeInfo.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/perioder/PeriodeUtenUttak.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/periode-før-fødsel-form/periodeFørFødselFormConfig.ts","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/periode-før-fødsel-form/periodeFørFødselFormQuestionsConfig.ts","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/periode-før-fødsel-form/periodeFørFødselFormUtils.ts","webpack://foreldrepengesoknad/./src/uttaksplan/components/uttaks-forms/periode-før-fødsel-form/PeriodeFørFødselForm.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/periodeliste-item/PeriodelisteItem.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/assets/HjerteIkon.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/familiehendelsedato-display/FamiliehendelsedatoDisplay.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/periodeliste/Periodeliste.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/planlegger/Planlegger.tsx","webpack://foreldrepengesoknad/./src/app/components/foreldrepar/ForelderIkon.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/utils/uttaksPlanStatus.ts","webpack://foreldrepengesoknad/./src/uttaksplan/utils/brukteDagerUtils.ts","webpack://foreldrepengesoknad/./src/uttaksplan/utils/uttaksstatus.ts","webpack://foreldrepengesoknad/./src/uttaksplan/components/oversikt-kvoter/konto-status/Kontostatus.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/oversikt-kvoter/tilesList/TilesList.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/oversikt-kvoter/OversiktKvoter.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/inneholderUttaksplanPerioderTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/utils/uttakValideringUtils.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/harMorSøktUgyldigUttakFørsteSeksUkerTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/stønadskontoInneholderForMyeUttakKunSøkerTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/erUttaksplanBareOppholdTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/slutterUttaksplanMedOppholdTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/starterUttaksplanMedOppholdTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/erUttaksplanGraderingStørreEnnSamtidigUttakTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/erTilleggsopplysningerGyldigTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/harTilleggsopplysningerGyldigeCharsTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/harUttaksplanForMangeFlerbarnsdagerTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/inneholderUttaksplanDatoSomIkkeErUttaksdagTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/harPerioderManglendeVedleggTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/inneholderSenUtsettelsePgaFerieTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/inneholderTapteDagerTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/inneholderBareUtsettelserTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/inneholderSenUtsettelsePgaArbeidTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/overskriverEndringerAnnenPartsPerioder.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/utils/types/regelTypes.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/overlapperPeriodeAndrePerioderTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/utils/regelUtils.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/periodevalideringstester/index.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/utils/stillingsprosentValideringUtils.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/utils/periodeValideringUtils.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/utils/validatorUtils.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/utils/tidsperiodeValideringUtils.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/periodevalideringstester/forSenUttakVedPåfølgendeBarn.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/periodevalideringstester/harUttaksperiodeGyldigGradering.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/periodevalideringstester/harPeriodeGyldigTidsperiode.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/periodevalideringstester/starterUttaksperiodeRundtFødselEtter2UkerFørFødsel.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/periodevalideringstester/slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/periodevalideringstester/harUttaksperiodeStønadskonto.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/periodevalideringstester/periodeDeFørsteSeksUkeneHarUlovligUttakBFHR.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/periodevalideringstester/erSamtidigUttakGyldig.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/periodevalideringstester/erUtsettelseEtterFamiliehendelsesdato.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/periodevalideringstester/harBekreftet100ProsentArbeidIUtsettelsePgaArbeid.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/harSøktOmFerieUtenArbeidsforholdTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/inneholderForMyeFerie.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/erUttaksmengdeForFarMedmorForHøyTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/burdeKanskjeSøkeGraderingTest.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/inneholderPerioderUtenAktivitetskrav.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/inneholderUtsettelserUtenÅrsak.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/index.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/farMedMorHarRettPåUttakRundtFødselTest.ts","webpack://foreldrepengesoknad/./src/app/utils/minsterettUtils.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/inneholderUttaksperioderMedUbesvartGradering.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/farMedmorHarRettPåFlerbarnsdagerTest.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/overstigerMinsterettVedToTette.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/tester/harPerioderEtterFørsteStønadsdagNesteBarnDerToTette.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/validerUttaksplan.ts","webpack://foreldrepengesoknad/./src/uttaksplan/validering/veilederInfo/VeilederInfo.tsx","webpack://foreldrepengesoknad/./src/app/intl/utils.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/validering/veilederInfo/utils.ts","webpack://foreldrepengesoknad/./src/uttaksplan/components/oppgi-tilleggsopplysninger/OppgiTilleggsopplysninger.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/slett-uttaksplan-modal/SlettUttaksplanModal.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/builder/slettPeriode.ts","webpack://foreldrepengesoknad/./src/uttaksplan/builder/Uttaksplanbuilder.ts","webpack://foreldrepengesoknad/./src/uttaksplan/builder/oppdaterPeriode.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan/UttaksplanFormConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan/UttaksplanFormUtils.ts","webpack://foreldrepengesoknad/./src/uttaksplan/components/automatisk-justering-form/AutomatiskJusteringForm.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/reset-uttaksplan-modal/ResetUttaksplanModal.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/Uttaksplan.tsx","webpack://foreldrepengesoknad/./src/app/utils/hooks/useDebounce.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan/components/vil-du-gå-tilbake-modal/VilDuGåTilbakeModal.tsx","webpack://foreldrepengesoknad/./src/uttaksplan/components/automatisk-justering-form/automatiskJusteringUtils.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan/uttaksplanQuestionConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/uttaksplan/UttaksplanStep.tsx","webpack://foreldrepengesoknad/./src/app/routes/isAvailable.ts","webpack://foreldrepengesoknad/./src/app/routes/ForeldrepengesøknadRoutes.tsx","webpack://foreldrepengesoknad/./src/app/utils/mellomlagringUtils.ts","webpack://foreldrepengesoknad/./src/app/Foreldrepengesøknad.tsx","webpack://foreldrepengesoknad/./src/app/errorBoundary/ErrorBoundary.tsx","webpack://foreldrepengesoknad/./src/app/AppContainer.tsx","webpack://foreldrepengesoknad/./src/app/AppContainer.stories.tsx","webpack://foreldrepengesoknad/./src/app/components/dine-plikter/DinePlikter.tsx","webpack://foreldrepengesoknad/./src/app/utils/browserUtils.ts","webpack://foreldrepengesoknad/./src/app/pages/byttBrowserModal/ByttBrowserModal.tsx","webpack://foreldrepengesoknad/./src/app/pages/modaler/DinePersonopplysningerModal.tsx","webpack://foreldrepengesoknad/./src/app/pages/velkommen/Velkommen.tsx","webpack://foreldrepengesoknad/./src/app/steps/søkersituasjon/søkersituasjonFormConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/søkersituasjon/components/VelgRolle.tsx","webpack://foreldrepengesoknad/./src/app/steps/søkersituasjon/søkersituasjonQuestionsConfig.ts","webpack://foreldrepengesoknad/./src/app/steps/søkersituasjon/søkersituasjonUtils.ts","webpack://foreldrepengesoknad/./src/app/steps/søkersituasjon/Søkersituasjon.tsx","webpack://foreldrepengesoknad/./src/app/steps/utenlandsopphold/utenlandsoppholdFormTypes.ts","webpack://foreldrepengesoknad/./src/app/steps/utenlandsopphold/utenlandsoppholdFormQuestions.ts","webpack://foreldrepengesoknad/./src/app/steps/utenlandsopphold/bostedUtlandListAndDialog/BostedUtlandForm.tsx","webpack://foreldrepengesoknad/./src/app/steps/utenlandsopphold/bostedUtlandListAndDialog/types.ts","webpack://foreldrepengesoknad/./src/app/steps/utenlandsopphold/bostedUtlandListAndDialog/BostedUtlandList.tsx","webpack://foreldrepengesoknad/./src/app/steps/utenlandsopphold/bostedUtlandListAndDialog/BostedUtlandListAndDialog.tsx","webpack://foreldrepengesoknad/./src/app/steps/utenlandsopphold/utenlandsoppholdFormUtils.ts","webpack://foreldrepengesoknad/./src/app/steps/utenlandsopphold/utenlandsoppholdValidering.ts","webpack://foreldrepengesoknad/./src/app/steps/utenlandsopphold/Utenlandsopphold.tsx"],"sourcesContent":["import React, { useCallback } from 'react';\nimport Lenke from 'nav-frontend-lenker';\nimport { Innholdstittel, Normaltekst } from 'nav-frontend-typografi';\nimport { VeilederProps } from '@navikt/fp-common/lib/components/veileder/Veileder';\nimport { bemUtils, Block, LanguageToggle, Locale, Sidebanner, useDocumentTitle } from '@navikt/fp-common';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport { logAmplitudeEvent } from 'app/amplitude/amplitude';\nimport actionCreator from 'app/context/action/actionCreator';\nimport Api from 'app/api/api';\n\nimport './feilside.less';\n\nexport interface Props {\n    containerId?: string;\n    dokumenttittel: string;\n    illustrasjon?: {\n        tittel: string;\n        tekst: React.ReactNode;\n        lenke?: {\n            url: string;\n            tekst: string;\n        };\n        veileder?: VeilederProps;\n    };\n    tittel: React.ReactNode;\n    ingress: React.ReactNode;\n    skalKunneGåTilbakeTilSøknad: boolean;\n    språkkode?: Locale;\n    setLanguage?: (languageCode: string) => void;\n}\n\nconst Feilside: React.FunctionComponent<Props> = ({\n    containerId,\n    dokumenttittel,\n    illustrasjon,\n    tittel,\n    ingress,\n    skalKunneGåTilbakeTilSøknad,\n    språkkode,\n    setLanguage,\n}) => {\n    const bem = bemUtils('feilside');\n    const { dispatch, state } = useForeldrepengesøknadContext();\n    const { søkerinfo } = state;\n\n    const avbrytSøknadHandler = useCallback(async () => {\n        if (!søkerinfo) {\n            return;\n        }\n\n        logAmplitudeEvent('applikasjon-hendelse', {\n            app: 'foreldrepengesoknad',\n            team: 'foreldrepenger',\n            hendelse: 'avbrutt',\n        });\n\n        dispatch(actionCreator.avbrytSøknad());\n        await Api.deleteStoredAppState(søkerinfo.person.fnr);\n        window.location.href = 'http://localhost:8080';\n    }, [dispatch, søkerinfo]);\n\n    const gåTilbakeTilSøknadenHandler = useCallback(() => {\n        window.location.reload();\n    }, []);\n\n    useDocumentTitle(dokumenttittel);\n\n    return (\n        <>\n            {setLanguage && språkkode && (\n                <LanguageToggle locale={språkkode} availableLocales={['en', 'nb', 'nn']} toggle={setLanguage} />\n            )}\n            {illustrasjon && (\n                <Sidebanner\n                    veileder={illustrasjon.veileder}\n                    dialog={{\n                        title: illustrasjon.tittel,\n                        text: (\n                            <>\n                                <Block padBottom=\"m\">{illustrasjon.tekst}</Block>\n                                {illustrasjon.lenke && (\n                                    <Lenke href={illustrasjon.lenke.url}>{illustrasjon.lenke.tekst}</Lenke>\n                                )}\n                            </>\n                        ),\n                    }}\n                />\n            )}\n            <div id={containerId} className={bem.block}>\n                <Block padBottom=\"l\">\n                    <Innholdstittel>{tittel}</Innholdstittel>\n                </Block>\n                <Block padBottom=\"l\">\n                    <Normaltekst>{ingress}</Normaltekst>\n                </Block>\n                {søkerinfo !== undefined && !skalKunneGåTilbakeTilSøknad && (\n                    <div className={bem.element('avbrytKnapp')}>\n                        <Hovedknapp onClick={avbrytSøknadHandler}>Start søknaden på nytt</Hovedknapp>\n                    </div>\n                )}\n                {søkerinfo !== undefined && skalKunneGåTilbakeTilSøknad && (\n                    <div className={bem.element('avbrytKnapp')}>\n                        <Hovedknapp onClick={gåTilbakeTilSøknadenHandler}>Gå tilbake til søknaden</Hovedknapp>\n                    </div>\n                )}\n            </div>\n        </>\n    );\n};\n\nexport default Feilside;\n","import { intlUtils } from '@navikt/fp-common';\nimport links from 'app/links/links';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport Feilside from '../feilside/Feilside';\n\ninterface Props {\n    fornavn: string;\n}\n\nconst IkkeMyndig: FunctionComponent<Props> = ({ fornavn }) => {\n    const intl = useIntl();\n\n    return (\n        <Feilside\n            dokumenttittel=\"NAV Foreldrepengesøknad\"\n            ingress={intlUtils(intl, 'velkommen.ingress')}\n            tittel={intlUtils(intl, 'velkommen.tittel')}\n            illustrasjon={{\n                tittel: intlUtils(intl, 'velkommen.ikkeMyndig.tittel', {\n                    navn: fornavn.toLowerCase(),\n                }),\n                tekst: intlUtils(intl, 'velkommen.ikkeMyndig.ingress'),\n                veileder: {\n                    ansikt: 'skeptisk',\n                },\n                lenke: {\n                    tekst: intlUtils(intl, 'velkommen.ikkeMyndig.boblelenketekst'),\n                    url: links.papirsøknad,\n                },\n            }}\n            skalKunneGåTilbakeTilSøknad={false}\n        />\n    );\n};\n\nexport default IkkeMyndig;\n","import React, { ButtonHTMLAttributes, FunctionComponent, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport { bemUtils } from '@navikt/fp-common';\n\nexport interface LinkButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n    children: ReactNode;\n    color?: 'default' | 'white';\n}\n\nimport './linkButton.less';\n\nconst LinkButton: FunctionComponent<LinkButtonProps> = ({ color, className, ...rest }) => {\n    const bem = bemUtils('linkButton');\n\n    return (\n        <button\n            type=\"button\"\n            className={classNames(bem.block, className, color ? `linkButton--${color}` : undefined)}\n            {...rest}\n        />\n    );\n};\nexport default LinkButton;\n","import React from 'react';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\nimport Lenke from 'nav-frontend-lenker';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { formatDate, Block, intlUtils, TidsperiodeDate, bemUtils } from '@navikt/fp-common';\n\nimport './tidsperiodeDisplay.less';\n\ninterface Props {\n    tidsperiode: Partial<TidsperiodeDate> | undefined;\n    toggleVisTidsperiode: () => void;\n}\n\nconst bem = bemUtils('tidsperiodeDisplay');\n\nconst formaterTidsperiodeDato = (dato: Date | undefined) => {\n    if (dato) {\n        return formatDate(dato);\n    }\n\n    return 'Ingen valgt dato';\n};\n\nconst renderTidsperiode = (tidsperiode: Partial<TidsperiodeDate> | undefined, intl: IntlShape) => {\n    if (tidsperiode) {\n        return (\n            <div className={bem.element('dato-container')}>\n                <div className={bem.element('dato')}>\n                    <Element>{`${intlUtils(intl, 'fraogmed')}:`}</Element>\n                    <Normaltekst>{formaterTidsperiodeDato(tidsperiode.fom)}</Normaltekst>\n                </div>\n                <div className={bem.element('dato')}>\n                    <Element>{`${intlUtils(intl, 'tilogmed')}:`}</Element>\n                    <Normaltekst>{formaterTidsperiodeDato(tidsperiode.tom)}</Normaltekst>\n                </div>\n            </div>\n        );\n    }\n\n    return 'Ingen valgt tidsperiode';\n};\n\nconst TidsperiodeDisplay: React.FunctionComponent<Props> = ({ tidsperiode, toggleVisTidsperiode }) => {\n    const intl = useIntl();\n\n    return (\n        <Block padBottom=\"l\">\n            <Element>Tidsrom</Element>\n            <div className={bem.block}>\n                {renderTidsperiode(tidsperiode, intl)}\n                <Lenke\n                    href=\"#\"\n                    onClick={(e: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        toggleVisTidsperiode();\n                    }}\n                >\n                    <Normaltekst>Endre tidsrom</Normaltekst>\n                </Lenke>\n            </div>\n        </Block>\n    );\n};\n\nexport default TidsperiodeDisplay;\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport uttaksConstants from 'app/constants';\nimport { getTidsperiode, isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport { getFørsteUttaksdag2UkerFørFødsel } from 'app/utils/wlbUtils';\nimport dayjs from 'dayjs';\n\nexport interface Uttaksdatoer {\n    førsteUttaksdag: Date;\n    førFødsel: {\n        førsteMuligeUttaksdag: Date;\n        førsteUttaksdagForeldrepengerFørFødsel: Date;\n        sisteUttaksdagFørFødsel: Date;\n    };\n    etterFødsel: {\n        sisteUttaksdagInnenforSeksUker: Date;\n        førsteUttaksdagEtterSeksUker: Date;\n        sisteMuligeUttaksdag: Date;\n    };\n}\n\nexport const uttaksdatoer = (familiehendelsesdato: Date, erFarEllerMedmor: boolean, termindato: Date | undefined) => ({\n    førsteUttaksdagForeldrepengerFørFødsel: getFørsteUttaksdagForeldrepengerFørFødsel(familiehendelsesdato),\n    førsteUttaksdagPåEllerEtterFødsel: Uttaksdagen(familiehendelsesdato).denneEllerNeste(),\n    førsteMuligeUttaksdagFørTermin: getFørsteMuligeUttaksdag(familiehendelsesdato, erFarEllerMedmor, termindato),\n    sisteMuligeUttaksdagEtterTermin: getSisteMuligeUttaksdag(familiehendelsesdato),\n});\n\nexport const getUttaksdatoer = (\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): Uttaksdatoer => {\n    const førsteUttaksdag = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n\n    const førsteUttaksdagForeldrepengerFørFødsel = getFørsteUttaksdagForeldrepengerFørFødsel(familiehendelsesdato);\n    const førsteMuligeUttaksdag = getFørsteMuligeUttaksdag(familiehendelsesdato, erFarEllerMedmor, termindato);\n    const sisteUttaksdagFørFødsel = Uttaksdagen(førsteUttaksdag).forrige();\n    const sisteMuligeUttaksdag = getSisteMuligeUttaksdag(familiehendelsesdato);\n\n    const sisteUttaksdagInnenforSeksUker = getTidsperiode(førsteUttaksdag, 30).tom;\n    return {\n        førsteUttaksdag,\n        førFødsel: {\n            førsteMuligeUttaksdag,\n            sisteUttaksdagFørFødsel,\n            førsteUttaksdagForeldrepengerFørFødsel,\n        },\n        etterFødsel: {\n            sisteUttaksdagInnenforSeksUker,\n            førsteUttaksdagEtterSeksUker: Uttaksdagen(sisteUttaksdagInnenforSeksUker).neste(),\n            sisteMuligeUttaksdag,\n        },\n    };\n};\n\nexport function getFørsteUttaksdagPåEllerEtterFødsel(familiehendelsesdato: Date) {\n    return Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n}\n\nexport function getFørsteUttaksdagForeldrepengerFørFødsel(familiehendelsesdato: Date): Date {\n    return Uttaksdagen(getFørsteUttaksdagPåEllerEtterFødsel(familiehendelsesdato)).trekkFra(\n        uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5\n    );\n}\n\nexport function getFørsteMuligeUttaksdag(\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): Date {\n    if (erFarEllerMedmor) {\n        if (andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n            return getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato);\n        } else {\n            return Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n        }\n    }\n    return Uttaksdagen(getFørsteUttaksdagPåEllerEtterFødsel(familiehendelsesdato)).trekkFra(\n        uttaksConstants.MAKS_ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5\n    );\n}\n\nexport function getSisteMuligeUttaksdag(familiehendelsesdato: Date): Date {\n    return Uttaksdagen(\n        dayjs(getFørsteUttaksdagPåEllerEtterFødsel(familiehendelsesdato))\n            .add(uttaksConstants.MAKS_PERMISJONSLENGDE_I_ÅR, 'year')\n            .subtract(1, 'day')\n            .toDate()\n    ).denneEllerNeste();\n}\n\nexport const erInnenFørsteSeksUkerFødselFarMedmor = (\n    tidsperiode: TidsperiodeDate,\n    situasjon: Situasjon,\n    søkerErFarEllerMedmor: boolean,\n    førsteUttaksdagEtterSeksUker: Date\n): boolean => {\n    if (\n        situasjon !== 'fødsel' ||\n        !søkerErFarEllerMedmor ||\n        tidsperiode === undefined ||\n        isValidTidsperiode(tidsperiode) === false\n    ) {\n        return false;\n    }\n    return dayjs(tidsperiode.fom).isBefore(dayjs(førsteUttaksdagEtterSeksUker), 'day');\n};\n","import { Tidsperiode, TidsperiodeDate } from '@navikt/fp-common';\nimport { dateToISOString } from '@navikt/sif-common-formik/lib';\nimport { isValidTidsperiode, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { uttaksplanDatoavgrensninger } from 'app/steps/uttaksplan-info/utils/uttaksplanDatoavgrensninger';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport { getFørsteUttaksdag2UkerFørFødsel, getSisteUttaksdag6UkerEtterFødsel } from 'app/utils/wlbUtils';\nimport { DatepickerLimitations } from 'nav-datovelger';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { getFørsteMuligeUttaksdag, getSisteMuligeUttaksdag } from './uttaksdatoerUtils';\n\nexport interface DatoAvgrensninger {\n    fra: Avgrensninger;\n    til: Avgrensninger;\n}\n\nexport interface Avgrensninger {\n    minDato: Date;\n    maksDato: Date;\n    ugyldigeTidsperioder?: Tidsperiode[] | undefined;\n    helgedagerIkkeTillatt: boolean;\n}\n\nexport const getDatoavgrensningerForFarMedmorPeriodeRundtFødselWLB = (\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    ugyldigeTidsperioder: Tidsperiode[] | undefined\n): DatoAvgrensninger => {\n    const minDato = getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato);\n    const maksDato = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n    return {\n        fra: {\n            minDato,\n            maksDato,\n            helgedagerIkkeTillatt: true,\n            ugyldigeTidsperioder,\n        },\n        til: {\n            minDato,\n            maksDato,\n            helgedagerIkkeTillatt: true,\n            ugyldigeTidsperioder,\n        },\n    };\n};\n\nexport const getDatoavgrensningerForStønadskonto = (\n    konto: StønadskontoType | undefined,\n    familiehendelsesdato: Date,\n    tidsperiode: Partial<TidsperiodeDate> | undefined,\n    ugyldigeTidsperioder: Tidsperiode[] | undefined,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): DatoAvgrensninger => {\n    if (konto === undefined) {\n        return getDatoavgrensningerForPeriodeUtenKonto(\n            familiehendelsesdato,\n            ugyldigeTidsperioder,\n            erFarEllerMedmor,\n            termindato\n        );\n    }\n    if (konto === StønadskontoType.ForeldrepengerFørFødsel) {\n        return getDatoavgrensningerForForeldrepengerFørFødsel(familiehendelsesdato);\n    }\n    if (isValidTidsperiode(tidsperiode) && Tidsperioden(tidsperiode).erFørDato(familiehendelsesdato)) {\n        return getDatoavgrensningerForEkstrauttakFørTermin(familiehendelsesdato);\n    }\n\n    const standardAvgrensninger = standardAvgrensningerForUttakEtterFødsel(familiehendelsesdato);\n\n    return {\n        fra: {\n            ...standardAvgrensninger,\n            ugyldigeTidsperioder,\n        },\n        til: {\n            ...standardAvgrensninger,\n            ugyldigeTidsperioder,\n        },\n    };\n};\n\nconst getDatoavgrensningerForPeriodeUtenKonto = (\n    familiehendelsesdato: Date,\n    ugyldigeTidsperioder: Tidsperiode[] | undefined,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n) => {\n    const minDato = getFørsteMuligeUttaksdag(familiehendelsesdato, erFarEllerMedmor, termindato);\n\n    return {\n        fra: {\n            minDato,\n            maksDato: getSisteMuligeUttaksdag(familiehendelsesdato),\n            ugyldigeTidsperioder,\n            helgedagerIkkeTillatt: true,\n        },\n        til: {\n            minDato,\n            maksDato: getSisteMuligeUttaksdag(familiehendelsesdato),\n            ugyldigeTidsperioder,\n            helgedagerIkkeTillatt: true,\n        },\n    };\n};\n\nconst standardAvgrensningerForUttakEtterFødsel = (familiehendelsesdato: Date): Avgrensninger => {\n    return {\n        helgedagerIkkeTillatt: true,\n        minDato: Uttaksdagen(familiehendelsesdato).denneEllerNeste(),\n        maksDato: getSisteMuligeUttaksdag(familiehendelsesdato),\n    };\n};\n\nconst getDatoavgrensningerForForeldrepengerFørFødsel = (familiehendelsesdato: Date): DatoAvgrensninger => {\n    const avgrensninger: DatepickerLimitations = {\n        ...standardAvgrensningerForUttakEtterFødsel,\n        ...uttaksplanDatoavgrensninger.startdatoFørTerminForeldrepengerFørFødselKonto(\n            dateToISOString(familiehendelsesdato)\n        ),\n    };\n\n    return {\n        fra: {\n            helgedagerIkkeTillatt: !!avgrensninger.weekendsNotSelectable,\n            minDato: ISOStringToDate(avgrensninger.minDate)!,\n            maksDato: ISOStringToDate(avgrensninger.maxDate)!,\n        },\n        til: {\n            helgedagerIkkeTillatt: !!avgrensninger.weekendsNotSelectable,\n            minDato: ISOStringToDate(avgrensninger.minDate)!,\n            maksDato: ISOStringToDate(avgrensninger.maxDate)!,\n        },\n    };\n};\n\nconst getDatoavgrensningerForEkstrauttakFørTermin = (familiehendelsesdato: Date): DatoAvgrensninger => {\n    const avgrensninger: DatepickerLimitations = {\n        ...standardAvgrensningerForUttakEtterFødsel,\n        ...uttaksplanDatoavgrensninger.ekstrauttakFørFødsel(dateToISOString(familiehendelsesdato)),\n    };\n\n    return {\n        fra: {\n            helgedagerIkkeTillatt: !!avgrensninger.weekendsNotSelectable,\n            minDato: ISOStringToDate(avgrensninger.minDate)!,\n            maksDato: ISOStringToDate(avgrensninger.maxDate)!,\n        },\n        til: {\n            helgedagerIkkeTillatt: !!avgrensninger.weekendsNotSelectable,\n            minDato: ISOStringToDate(avgrensninger.minDate)!,\n            maksDato: ISOStringToDate(avgrensninger.maxDate)!,\n        },\n    };\n};\n\nexport const getDatoavgrensningerForBareFarMedmorHarRettWLB = (\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    ugyldigeTidsperioder: Tidsperiode[] | undefined\n): DatoAvgrensninger => {\n    const minDato = getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato);\n    const maksDato = getSisteMuligeUttaksdag(familiehendelsesdato);\n    return {\n        fra: {\n            minDato,\n            maksDato,\n            helgedagerIkkeTillatt: true,\n            ugyldigeTidsperioder,\n        },\n        til: {\n            minDato,\n            maksDato,\n            helgedagerIkkeTillatt: true,\n            ugyldigeTidsperioder,\n        },\n    };\n};\n","import React from 'react';\nimport { intlUtils, Tidsperiode, Block, TidsperiodeDate } from '@navikt/fp-common';\nimport { dateToISOString, getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport dayjs from 'dayjs';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { isUtsettelsesperiode, isUttaksperiode, Periode, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { andreAugust2022ReglerGjelder, dateRangeValidation, ISOStringToDate } from 'app/utils/dateUtils';\nimport { Knapp } from 'nav-frontend-knapper';\nimport {\n    DatoAvgrensninger,\n    getDatoavgrensningerForBareFarMedmorHarRettWLB,\n    getDatoavgrensningerForFarMedmorPeriodeRundtFødselWLB,\n    getDatoavgrensningerForStønadskonto,\n} from 'uttaksplan/utils/datoAvgrensningerUtils';\nimport { mapTidsperiodeStringToTidsperiode } from 'uttaksplan/utils/periodeUtils';\nimport { getFørsteMuligeUttaksdag, getFørsteUttaksdagPåEllerEtterFødsel } from 'uttaksplan/utils/uttaksdatoerUtils';\nimport { isUttaksperiodeBareFarMedmorHarRett, isUttaksperiodeFarMedmorPgaFødsel } from 'app/utils/wlbUtils';\nimport { Situasjon } from 'app/types/Situasjon';\n\ninterface Props {\n    periode?: Periode;\n    tidsperiode: TidsperiodeDate;\n    familiehendelsesdato: Date;\n    ugyldigeTidsperioder: Tidsperiode[] | undefined;\n    utsettelserIPlan: Utsettelsesperiode[];\n    erFarEllerMedmor: boolean;\n    morHarRett: boolean;\n    onBekreft: (tidsperiode: Partial<Tidsperiode>) => void;\n    onCancel?: () => void;\n    initialMonth?: Date;\n    termindato?: Date;\n    situasjon: Situasjon;\n    erFarMedmorOgHarAleneomsorg: boolean;\n}\n\nenum TidsperiodeFormFields {\n    fom = 'fom',\n    tom = 'tom',\n}\n\nexport type TidsperiodeFormValues = Partial<Tidsperiode>;\n\nconst Form = getTypedFormComponents<TidsperiodeFormFields, TidsperiodeFormValues>();\n\nconst getDatoAvgrensninger = (\n    periode: Periode | undefined,\n    familiehendelsesdato: Date,\n    fom: string | undefined,\n    tom: string | undefined,\n    tidsperiode: Partial<TidsperiodeDate>,\n    ugyldigeTidsperioder: Tidsperiode[] | undefined,\n    termindato: Date | undefined,\n    erFarEllerMedmor: boolean,\n    morHarRett: boolean,\n    situasjon: Situasjon,\n    erFarMedmorOgHarAleneomsorg: boolean\n): DatoAvgrensninger => {\n    if (periode && !isUtsettelsesperiode(periode)) {\n        if (\n            isUttaksperiodeFarMedmorPgaFødsel(periode, familiehendelsesdato, termindato) &&\n            andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n            situasjon === 'fødsel'\n        ) {\n            return getDatoavgrensningerForFarMedmorPeriodeRundtFødselWLB(\n                familiehendelsesdato,\n                termindato,\n                ugyldigeTidsperioder\n            );\n        }\n        if (\n            isUttaksperiodeBareFarMedmorHarRett(periode, morHarRett) &&\n            andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n            situasjon === 'fødsel'\n        ) {\n            return getDatoavgrensningerForBareFarMedmorHarRettWLB(\n                familiehendelsesdato,\n                termindato,\n                ugyldigeTidsperioder\n            );\n        }\n        return getDatoavgrensningerForStønadskonto(\n            isUttaksperiode(periode) ? periode.konto : undefined,\n            familiehendelsesdato,\n            mapTidsperiodeStringToTidsperiode({ fom, tom }),\n            ugyldigeTidsperioder,\n            erFarEllerMedmor,\n            termindato\n        );\n    }\n\n    const førsteMuligeUttaksdag = erFarMedmorOgHarAleneomsorg\n        ? getFørsteUttaksdagPåEllerEtterFødsel(familiehendelsesdato)\n        : getFørsteMuligeUttaksdag(familiehendelsesdato, erFarEllerMedmor, termindato);\n\n    return {\n        fra: {\n            minDato: førsteMuligeUttaksdag,\n            maksDato: tidsperiode\n                ? ISOStringToDate(tom)!\n                : dayjs(familiehendelsesdato).add(3, 'years').subtract(1, 'day').toDate(),\n            ugyldigeTidsperioder,\n            helgedagerIkkeTillatt: true,\n        },\n        til: {\n            minDato: tidsperiode ? ISOStringToDate(fom)! : førsteMuligeUttaksdag,\n            maksDato: dayjs(familiehendelsesdato).add(3, 'years').subtract(1, 'day').toDate(),\n            ugyldigeTidsperioder,\n            helgedagerIkkeTillatt: true,\n        },\n    };\n};\n\nconst TidsperiodeForm: React.FunctionComponent<Props> = ({\n    periode,\n    tidsperiode,\n    familiehendelsesdato,\n    ugyldigeTidsperioder,\n    utsettelserIPlan,\n    initialMonth,\n    termindato,\n    erFarEllerMedmor,\n    morHarRett,\n    situasjon,\n    onBekreft,\n    onCancel,\n    erFarMedmorOgHarAleneomsorg,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <Form.FormikWrapper\n            initialValues={{ fom: dateToISOString(tidsperiode.fom), tom: dateToISOString(tidsperiode.tom) }}\n            onSubmit={onBekreft}\n            enableReinitialize={true}\n            renderForm={({ values }) => {\n                const datoAvgrensninger = getDatoAvgrensninger(\n                    periode,\n                    familiehendelsesdato,\n                    values.fom,\n                    values.tom,\n                    tidsperiode,\n                    ugyldigeTidsperioder,\n                    termindato,\n                    erFarEllerMedmor,\n                    morHarRett,\n                    situasjon,\n                    erFarMedmorOgHarAleneomsorg\n                );\n\n                return (\n                    <Form.Form onCancel={onCancel} includeButtons={false}>\n                        <Block>\n                            <Form.DateIntervalPicker\n                                legend={intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.tidsrom')}\n                                fromDatepickerProps={{\n                                    name: TidsperiodeFormFields.fom,\n                                    disableWeekend: true,\n                                    label: intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.fraogmed'),\n                                    fullscreenOverlay: true,\n                                    placeholder: 'dd.mm.åååå',\n                                    minDate: datoAvgrensninger.fra.minDato,\n                                    maxDate: datoAvgrensninger.fra.maksDato,\n                                    validate: (value) =>\n                                        dateRangeValidation.validateFromDateInRange({\n                                            intl,\n                                            date: ISOStringToDate(value),\n                                            minDate: datoAvgrensninger.fra.minDato,\n                                            maxDate: datoAvgrensninger.fra.maksDato,\n                                            errorKey: 'valideringsfeil.fraOgMedDato.førTilDato',\n                                            toDate: ISOStringToDate(values.tom),\n                                            disableWeekend: datoAvgrensninger.fra.helgedagerIkkeTillatt,\n                                            utsettelserIPlan: utsettelserIPlan,\n                                            periodeId: periode !== undefined ? periode.id : undefined,\n                                        }),\n                                    dayPickerProps: {\n                                        initialMonth: initialMonth || familiehendelsesdato,\n                                    },\n                                }}\n                                toDatepickerProps={{\n                                    name: TidsperiodeFormFields.tom,\n                                    disableWeekend: true,\n                                    label: intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.tilogmed'),\n                                    fullscreenOverlay: true,\n                                    placeholder: 'dd.mm.åååå',\n                                    minDate: ISOStringToDate(values.fom) || familiehendelsesdato,\n                                    maxDate: datoAvgrensninger.til.maksDato,\n                                    validate: (value) =>\n                                        dateRangeValidation.validateToDateInRange({\n                                            intl,\n                                            date: ISOStringToDate(value),\n                                            minDate: datoAvgrensninger.til.minDato,\n                                            maxDate: datoAvgrensninger.til.maksDato,\n                                            errorKey: 'valideringsfeil.tilOgMedDato.etterFraDato',\n                                            fromDate: ISOStringToDate(values.fom),\n                                            disableWeekend: datoAvgrensninger.til.helgedagerIkkeTillatt,\n                                            utsettelserIPlan: utsettelserIPlan,\n                                            periodeId: periode !== undefined ? periode.id : undefined,\n                                        }),\n                                    dayPickerProps: {\n                                        initialMonth: ISOStringToDate(values.fom),\n                                    },\n                                }}\n                            />\n                        </Block>\n                        <Knapp type=\"hoved\">\n                            <FormattedMessage id=\"uttaksplan.gåVidere\" />\n                        </Knapp>\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default TidsperiodeForm;\n","import React from 'react';\n\ninterface RangeIconProps {\n    type: 'plus' | 'minus';\n}\n\nexport default class RangeIcon extends React.Component<RangeIconProps> {\n    renderPlusIcon() {\n        return (\n            <path\n                d=\"M18.2616283,12.5217391 L12.5222595,12.5217391 L12.5222595,18.2608696 C12.5222595,18.5488696 12.2874672,18.7826087 12.0004988,18.7826087 C11.7124868,18.7826087 11.478738,18.5488696 11.478738,18.2608696 L11.478738,12.5217391 L5.73936926,12.5217391 C5.4513573,12.5206957 5.21656494,12.288 5.21760846,12 C5.21760846,11.7130435 5.4513573,11.4782609 5.73936926,11.4782609 L11.478738,11.4782609 L11.478738,5.73913043 C11.478738,5.45113043 11.7124868,5.2173913 12.0004988,5.2173913 C12.2874672,5.2173913 12.5222595,5.45113043 12.5222595,5.73913043 L12.5222595,11.4782609 L18.2616283,11.4782609 C18.5485967,11.4782609 18.7844326,11.712 18.783389,12 C18.783389,12.288 18.5496402,12.5217391 18.2616283,12.5217391 Z\"\n                id=\"Inner\"\n                fill=\"#FFFFFF\"\n            />\n        );\n    }\n\n    renderMinusIcon() {\n        return (\n            <path\n                d=\"M18.2616283,12.5217391 L5.73936926,12.5217391 C5.4513573,12.5206957 5.21656494,12.288 5.21760846,12 C5.21760846,11.7130435 5.4513573,11.4782609 5.73936926,11.4782609 L18.2616283,11.4782609 C18.5485967,11.4782609 18.7844326,11.712 18.783389,12 C18.783389,12.288 18.5496402,12.5217391 18.2616283,12.5217391 Z\"\n                id=\"Inner\"\n                fill=\"#FFFFFF\"\n            />\n        );\n    }\n\n    render() {\n        const { type } = this.props;\n        const icon = type === 'minus' ? this.renderMinusIcon() : this.renderPlusIcon();\n\n        return (\n            <svg\n                focusable=\"false\"\n                role=\"img\"\n                aria-hidden=\"true\"\n                width=\"24px\"\n                height=\"24px\"\n                viewBox=\"0 0 24 24\"\n                className=\"rangeIcon\"\n            >\n                <g id=\"Icons/subtract/default\" stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n                    {icon}\n                </g>\n            </svg>\n        );\n    }\n}\n","import React from 'react';\n\n/**\n *  Skjuler tekst slik at den ikke er synlig på skjerm, men leses av skjermleser\n */\nexport interface AriaTextProps {\n    id?: string;\n    children?: React.ReactNode;\n    tag?: string;\n}\n\nconst AriaText: React.FunctionComponent<AriaTextProps> = ({ id, children, tag }) => {\n    const tagName = tag || 'span';\n    return React.createElement(tagName, { id, className: 'sr-only' }, children);\n};\n\nexport default AriaText;\n","// Ensure touches occur rapidly\nconst delay = 500;\n// Sequential touches must be in close vicinity\nconst minZoomTouchDelta = 10;\n\n// Track state of the last touch\nlet lastTapAt = 0;\nlet lastClientX = 0;\nlet lastClientY = 0;\n\nexport default function preventDoubleTapZoom(event: React.TouchEvent<any>) {\n    // Exit early if this involves more than one finger (e.g. pinch to zoom)\n    if (event.touches.length > 1) {\n        return;\n    }\n\n    const tapAt = new Date().getTime();\n    const timeDiff = tapAt - lastTapAt;\n    const { clientX, clientY } = event.touches[0];\n    const xDiff = Math.abs(lastClientX - clientX);\n    const yDiff = Math.abs(lastClientY - clientY);\n    if (xDiff < minZoomTouchDelta && yDiff < minZoomTouchDelta && event.touches.length === 1 && timeDiff < delay) {\n        event.preventDefault();\n        // Trigger a fake click for the tap we just prevented\n        (event.target as any).click();\n    }\n    lastClientX = clientX;\n    lastClientY = clientY;\n    lastTapAt = tapAt;\n}\n","import React from 'react';\nimport classnames from 'classnames';\nimport { guid } from 'nav-frontend-js-utils';\nimport AriaText from '../aria-text/AriaText';\nimport preventDoubleTapZoom from 'uttaksplan/utils/preventDoubleTapZoom';\n\nimport './sirkelknapp.less';\n\nexport type Stil = 'hvit' | 'bla' | 'info';\n\nexport interface SirkelknappProps {\n    /** Tekst som blir lest opp og satt som tittel på knappen */\n    ariaLabel: string;\n    /** Ikon som brukes inne i knappen */\n    ikon: React.ReactNode;\n    /** Funksjon som kalles knappen klikkes på */\n    onClick: () => void;\n    /** Om knappen er disabled eller ikke. Default false. */\n    disabled?: boolean;\n    /** Om knappen skal ha tilstanded pressed/valgt. Default false. */\n    toggle?: {\n        pressed: boolean;\n    };\n    /** Layout varianter */\n    stil?: Stil;\n    /** Størrelse - default normal */\n    size?: 'normal' | 'stor';\n    posisjoneringFraHøyre?: number;\n}\n\nconst Sirkelknapp: React.FunctionComponent<SirkelknappProps> = ({\n    onClick,\n    ariaLabel,\n    ikon,\n    toggle,\n    disabled,\n    stil = 'info',\n    size = 'normal',\n    posisjoneringFraHøyre,\n}) => {\n    const labelId = guid();\n    return (\n        <button\n            style={{ left: posisjoneringFraHøyre }}\n            type=\"button\"\n            onClick={() => onClick()}\n            onTouchStart={preventDoubleTapZoom}\n            aria-labelledby={labelId}\n            className={classnames(`sirkelknapp`, `sirkelknapp--${stil}`, `sirkelknapp--${size}`, {\n                'sirkelknapp--pressed': toggle && toggle.pressed,\n                'sirkelknapp--disabled': disabled,\n            })}\n            disabled={disabled}\n            aria-pressed={toggle ? toggle.pressed : undefined}\n        >\n            <span className=\"sirkelknapp__ikon\" role=\"presentation\">\n                {ikon}\n            </span>\n            <AriaText id={labelId}>{ariaLabel}</AriaText>\n        </button>\n    );\n};\n\nexport default Sirkelknapp;\n","import React from 'react';\nimport RangeIcon from 'uttaksplan/assets/RangeIcon';\nimport Sirkelknapp from '../sirkelknapp/Sirkelknapp';\n\nexport type Direction = 'next' | 'previous';\n\nexport interface Props {\n    onClick: () => void;\n    direction: Direction;\n    label: string;\n    disabled?: boolean;\n}\n\nconst StepperKnapp: React.FunctionComponent<Props> = ({ direction, onClick, label, disabled }) => (\n    <Sirkelknapp\n        stil=\"hvit\"\n        onClick={() => onClick()}\n        ariaLabel={label}\n        disabled={disabled}\n        ikon={direction === 'previous' ? <RangeIcon type=\"minus\" /> : <RangeIcon type=\"plus\" />}\n    />\n);\n\nexport default StepperKnapp;\n","import React from 'react';\nimport StepperKnapp from './StepperKnapp';\nimport { bemUtils } from '@navikt/fp-common';\n\nimport './numberStepper.less';\n\nexport interface Props {\n    value: number;\n    increaseAriaLabel: string;\n    decreaseAriaLabel: string;\n    stepSize?: number;\n    max?: number;\n    min?: number;\n    onChange: (value: number) => void;\n    legendId?: string;\n}\n\nconst bem = bemUtils('numberStepper');\n\nconst NumberStepper: React.FunctionComponent<Props> = ({\n    value,\n    min,\n    max,\n    stepSize = 1,\n    legendId,\n    onChange,\n    increaseAriaLabel,\n    decreaseAriaLabel,\n}) => {\n    const canDecrease = min === undefined || value > min;\n    const canIncrease = max === undefined || value < max;\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('decrease')}>\n                <StepperKnapp\n                    direction=\"previous\"\n                    disabled={canDecrease === false}\n                    onClick={() => onChange(value - stepSize)}\n                    label={decreaseAriaLabel}\n                />\n            </div>\n            <div className={bem.element('input')}>\n                <input\n                    className=\"skjemaelement__input input--fullbredde\"\n                    type=\"number\"\n                    value={value}\n                    onChange={(evt) => onChange(parseInt(evt.target.value, 10))}\n                    aria-labelledby={legendId}\n                />\n            </div>\n            <div className={bem.element('increase')}>\n                <StepperKnapp\n                    direction=\"next\"\n                    disabled={canIncrease === false}\n                    onClick={() => onChange(value + stepSize)}\n                    label={increaseAriaLabel}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default NumberStepper;\n","import React from 'react';\nimport { SkjemaGruppe } from 'nav-frontend-skjema';\nimport { Element } from 'nav-frontend-typografi';\nimport { guid } from 'nav-frontend-js-utils';\nimport Fieldset from 'app/components/fieldset/Fieldset';\nimport { Block } from '@navikt/fp-common';\nimport NumberStepper, { Props as NumberStepperProps } from './../number-stepper/NumberStepper';\n\nimport './ukerDagerTeller.less';\nimport { bemUtils } from '@navikt/fp-common';\n\nexport interface Props {\n    ukeLegend: string;\n    dagLegend: string;\n    feil?: React.ReactNode;\n    ukeStepper: NumberStepperProps;\n    dagStepper: NumberStepperProps;\n}\n\nconst UkerDagerTeller: React.FunctionComponent<Props> = ({ feil, ukeStepper, dagStepper, ukeLegend, dagLegend }) => {\n    const bem = bemUtils('ukerDagerTeller');\n    const ukeLegendId = guid();\n    const dagLegendId = guid();\n    return (\n        <SkjemaGruppe feil={feil} legend={<Element tag=\"span\">Varighet på perioden</Element>}>\n            <div className={bem.block}>\n                <div className={bem.element('ukerFelt')}>\n                    <Block padBottom=\"l\">\n                        <Fieldset legend={<span id={ukeLegendId}>{ukeLegend}</span>}>\n                            <NumberStepper {...ukeStepper} legendId={ukeLegendId} />\n                        </Fieldset>\n                    </Block>\n                </div>\n                <Fieldset legend={<span id={dagLegendId}>{dagLegend}</span>}>\n                    <NumberStepper {...dagStepper} legendId={dagLegendId} />\n                </Fieldset>\n            </div>\n        </SkjemaGruppe>\n    );\n};\n\nexport default UkerDagerTeller;\n","import React from 'react';\nimport Modal from 'nav-frontend-modal';\nimport { useIntl } from 'react-intl';\nimport { isForeldrepengerFørFødselUttaksperiode, Periode, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport dayjs from 'dayjs';\nimport { getTidsperiode, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport TidsperiodeForm, { TidsperiodeFormValues } from '../uttaks-forms/tidsperiode-form/TidsperiodeForm';\nimport { intlUtils, Tidsperiode, TidsperiodeDate } from '@navikt/fp-common';\nimport { getUkerOgDagerFromDager } from 'app/utils/dateUtils';\nimport UkerDagerTeller from './../uker-dager-teller/UkerDagerTeller';\nimport { Situasjon } from 'app/types/Situasjon';\n\ninterface Props {\n    periode: Periode;\n    tidsperiode: TidsperiodeDate;\n    familiehendelsesdato: Date;\n    ugyldigeTidsperioder: Tidsperiode[] | undefined;\n    utsettelserIPlan: Utsettelsesperiode[];\n    visible: boolean;\n    onAvbryt: () => void;\n    onBekreft: (tidsperiode: TidsperiodeFormValues) => void;\n    changeTidsperiode: (tidsperiode: Partial<TidsperiodeDate>) => void;\n    erFarEllerMedmor: boolean;\n    morHarRett: boolean;\n    situasjon: Situasjon;\n    erFarMedmorOgHarAleneomsorg: boolean;\n    termindato?: Date;\n}\n\nconst UttakEndreTidsperiodeSpørsmål: React.FunctionComponent<Props> = ({\n    onBekreft,\n    onAvbryt,\n    changeTidsperiode,\n    visible,\n    periode,\n    tidsperiode,\n    familiehendelsesdato,\n    ugyldigeTidsperioder,\n    utsettelserIPlan,\n    termindato,\n    erFarEllerMedmor,\n    morHarRett,\n    situasjon,\n    erFarMedmorOgHarAleneomsorg,\n}) => {\n    const intl = useIntl();\n    const erForeldrepengerFørFødsel = isForeldrepengerFørFødselUttaksperiode(periode);\n    const initialMonth = erForeldrepengerFørFødsel ? familiehendelsesdato : undefined;\n    const varighetIDager = dayjs(tidsperiode.fom).isSameOrBefore(tidsperiode.tom, 'day')\n        ? Tidsperioden({\n              fom: tidsperiode.fom,\n              tom: tidsperiode.tom,\n          }).getAntallUttaksdager()\n        : undefined;\n    const { uker, dager } = varighetIDager ? getUkerOgDagerFromDager(Math.abs(varighetIDager)) : { uker: 0, dager: 0 };\n    const handleOnSubmit = (values: TidsperiodeFormValues) => {\n        onBekreft(values);\n    };\n\n    const getDagValue = (uker: number, dager: number): number => {\n        if (dager >= 5) {\n            return 0;\n        }\n\n        if (uker === 0 && dager === 0) {\n            return 1;\n        }\n\n        return dager;\n    };\n\n    return (\n        <>\n            <Modal isOpen={visible} closeButton={true} onRequestClose={onAvbryt} contentLabel=\"Endre tidsperiode\">\n                <TidsperiodeForm\n                    familiehendelsesdato={familiehendelsesdato}\n                    onBekreft={handleOnSubmit}\n                    periode={periode}\n                    tidsperiode={tidsperiode}\n                    ugyldigeTidsperioder={ugyldigeTidsperioder}\n                    utsettelserIPlan={utsettelserIPlan}\n                    initialMonth={initialMonth}\n                    termindato={termindato}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    morHarRett={morHarRett}\n                    situasjon={situasjon}\n                    erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                />\n            </Modal>\n            <UkerDagerTeller\n                ukeLegend={intlUtils(intl, 'uker.label')}\n                dagLegend={intlUtils(intl, 'dager.label')}\n                ukeStepper={{\n                    value: uker !== undefined ? uker : 0,\n                    min: 0,\n                    max: 100,\n                    onChange: (nyUker: number) => {\n                        const date = tidsperiode.fom;\n                        if (date) {\n                            changeTidsperiode({\n                                fom: date,\n                                tom: getTidsperiode(date, Math.min(nyUker, 200) * 5 + getDagValue(nyUker, dager)).tom,\n                            });\n                        }\n                    },\n                    increaseAriaLabel: 'Øk antall uker med en uke',\n                    decreaseAriaLabel: 'Mink antall uker med en uke',\n                }}\n                dagStepper={{\n                    value: getDagValue(uker, dager),\n                    min: uker === 0 ? 1 : 0,\n                    max: 5,\n                    onChange: (nyDager: number) => {\n                        const date = tidsperiode.fom;\n                        const ekstraUke = nyDager === 5 ? 1 : 0;\n\n                        if (date) {\n                            changeTidsperiode({\n                                fom: date,\n                                tom: getTidsperiode(date, (uker + ekstraUke) * 5 + getDagValue(uker, nyDager)).tom,\n                            });\n                        }\n                    },\n                    increaseAriaLabel: 'Øk antall dager med en dag',\n                    decreaseAriaLabel: 'Mink antall dager med en dag',\n                }}\n            />\n        </>\n    );\n};\n\nexport default UttakEndreTidsperiodeSpørsmål;\n","import { getTypedFormComponents, YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { Attachment } from 'app/types/Attachment';\nimport { Forelder } from 'app/types/Forelder';\nimport { UttakRundtFødselÅrsak } from 'app/types/UttakRundtFødselÅrsak';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { OverføringÅrsakType } from 'uttaksplan/types/OverføringÅrsakType';\nimport { Arbeidsform } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\n\nexport enum PeriodeUttakFormField {\n    fom = 'fom',\n    tom = 'tom',\n    konto = 'konto',\n    samtidigUttak = 'samtidigUttak',\n    aktivitetskravMor = 'aktivitetskravMor',\n    aktivitetskravMorDokumentasjon = 'aktivitetskravMorDokumentasjon',\n    overføringsårsak = 'overføringsårsak',\n    overføringsdokumentasjon = 'overføringsdokumentasjon',\n    skalHaGradering = 'skalHaGradering',\n    stillingsprosent = 'stillingsprosent',\n    arbeidsformer = 'arbeidsformer',\n    erMorForSyk = 'erMorForSyk',\n    erMorForSykDokumentasjon = 'erMorForSykDokumentasjon',\n    uttakRundtFødselÅrsak = 'uttakRundtFødselÅrsak',\n    samtidigUttakProsent = 'samtidigUttakProsent',\n    hvemSkalTaUttak = 'hvemSkalTaUttak',\n    ønskerFlerbarnsdager = 'ønskerFlerbarnsdager',\n}\n\nexport interface PeriodeUttakFormData {\n    [PeriodeUttakFormField.fom]: Date | undefined;\n    [PeriodeUttakFormField.tom]: Date | undefined;\n    [PeriodeUttakFormField.konto]: StønadskontoType | '';\n    [PeriodeUttakFormField.samtidigUttak]: YesOrNo;\n    [PeriodeUttakFormField.aktivitetskravMor]: MorsAktivitet | '';\n    [PeriodeUttakFormField.aktivitetskravMorDokumentasjon]: Attachment[];\n    [PeriodeUttakFormField.overføringsårsak]: OverføringÅrsakType | '';\n    [PeriodeUttakFormField.overføringsdokumentasjon]: Attachment[];\n    [PeriodeUttakFormField.skalHaGradering]: YesOrNo;\n    [PeriodeUttakFormField.stillingsprosent]: string;\n    [PeriodeUttakFormField.arbeidsformer]: Arbeidsform | '';\n    [PeriodeUttakFormField.erMorForSyk]: YesOrNo;\n    [PeriodeUttakFormField.erMorForSykDokumentasjon]: Attachment[];\n    [PeriodeUttakFormField.uttakRundtFødselÅrsak]: UttakRundtFødselÅrsak | '';\n    [PeriodeUttakFormField.samtidigUttakProsent]: string;\n    [PeriodeUttakFormField.hvemSkalTaUttak]: Forelder | '';\n    [PeriodeUttakFormField.ønskerFlerbarnsdager]: YesOrNo;\n}\n\nexport const PeriodeUttakFormComponents = getTypedFormComponents<PeriodeUttakFormField, PeriodeUttakFormData, string>();\n","import { Block } from '@navikt/fp-common';\nimport VeilederNormal from 'app/assets/VeilederNormal';\nimport FormikFileUploader from 'app/components/formik-file-uploader/FormikFileUploader';\nimport { Attachment } from 'app/types/Attachment';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { Skjemanummer } from 'app/types/Skjemanummer';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\n\ninterface Props {\n    vedlegg: Attachment[];\n    navnMor: string;\n}\n\nconst MorErForSykDokumentasjonOpplastning: FunctionComponent<Props> = ({ navnMor, vedlegg }) => {\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                    <FormattedMessage id=\"uttaksplan.erMorForSykVeileder\" values={{ navn: navnMor }} />\n                </Veilederpanel>\n            </Block>\n            <Block>\n                <FormikFileUploader\n                    label=\"Last opp dokumentasjon for mors sykdom\"\n                    name={PeriodeUttakFormField.erMorForSykDokumentasjon}\n                    attachmentType={AttachmentType.UTSETTELSE_SYKDOM}\n                    skjemanummer={Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM}\n                    attachments={vedlegg}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default MorErForSykDokumentasjonOpplastning;\n","import { Block, intlUtils } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { Attachment } from 'app/types/Attachment';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport MorErForSykDokumentasjonOpplastning from '../er-mor-for-syk-dokumentasjon/MorErForSykDokumentasjonOpplastning';\n\ninterface Props {\n    fieldName: PeriodeUttakFormField;\n    erMorForSyk: YesOrNo;\n    vedlegg: Attachment[];\n    navnMor: string;\n}\n\nconst ErMorForSykSpørsmål: FunctionComponent<Props> = ({ fieldName, erMorForSyk, navnMor, vedlegg }) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUttakFormComponents.YesOrNoQuestion\n                    name={fieldName}\n                    legend={intlUtils(intl, 'uttaksplan.erMorForSyk')}\n                    validate={(value: YesOrNo) => {\n                        if (value === YesOrNo.UNANSWERED) {\n                            return intlUtils(intl, 'uttaksplan.validering.erMorForSyk');\n                        }\n                    }}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={erMorForSyk === YesOrNo.YES}>\n                <MorErForSykDokumentasjonOpplastning navnMor={navnMor} vedlegg={vedlegg} />\n            </Block>\n        </>\n    );\n};\n\nexport default ErMorForSykSpørsmål;\n","import { intlUtils } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\n\ninterface Props {\n    fieldName: PeriodeUttakFormField;\n}\n\nconst FlerbarnsdagerSpørsmål: FunctionComponent<Props> = ({ fieldName }) => {\n    const intl = useIntl();\n\n    return (\n        <PeriodeUttakFormComponents.YesOrNoQuestion\n            name={fieldName}\n            legend={intlUtils(intl, 'uttaksplan.flerbarnsdager')}\n            validate={(value: YesOrNo) => {\n                if (value === YesOrNo.UNANSWERED) {\n                    return intlUtils(intl, 'uttaksplan.validering.flerbarnsdager');\n                }\n            }}\n        />\n    );\n};\n\nexport default FlerbarnsdagerSpørsmål;\n","import { hasValue, intlUtils } from '@navikt/fp-common';\nimport { Forelder } from 'app/types/Forelder';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { capitalizeFirstLetter } from 'app/utils/stringUtils';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\n\ninterface Props {\n    fieldName: PeriodeUttakFormField;\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor: boolean;\n}\n\nconst HvemSkalHaUttakSpørsmål: FunctionComponent<Props> = ({ fieldName, navnPåForeldre, erFarEllerMedmor }) => {\n    const intl = useIntl();\n\n    return (\n        <PeriodeUttakFormComponents.RadioPanelGroup\n            legend={intlUtils(intl, 'uttaksplan.hvemSkalHaUttak')}\n            name={fieldName}\n            radios={[\n                {\n                    label: erFarEllerMedmor\n                        ? capitalizeFirstLetter(navnPåForeldre.farMedmor)\n                        : capitalizeFirstLetter(navnPåForeldre.mor),\n                    value: erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor,\n                },\n                {\n                    label: erFarEllerMedmor\n                        ? capitalizeFirstLetter(navnPåForeldre.mor)\n                        : capitalizeFirstLetter(navnPåForeldre.farMedmor),\n                    value: erFarEllerMedmor ? Forelder.mor : Forelder.farMedmor,\n                },\n            ]}\n            useTwoColumns={true}\n            validate={(value) => {\n                if (!hasValue(value)) {\n                    return intlUtils(intl, 'uttaksplan.validering.hvemSkalHaUttak');\n                }\n            }}\n        />\n    );\n};\n\nexport default HvemSkalHaUttakSpørsmål;\n","import { hasValue, intlUtils } from '@navikt/fp-common';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { RadioPanelProps } from 'nav-frontend-skjema';\nimport React, { FunctionComponent } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { getStønadskontoNavn } from 'uttaksplan/utils/stønadskontoerUtils';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\n\ninterface Props {\n    velgbareStønadskontoer: StønadskontoType[];\n    erOppholdsperiode: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    navnAnnenForelder?: string;\n    fieldName: PeriodeUttakFormField;\n    erFarEllerMedmor: boolean;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n}\n\nconst getSpørsmålsTekst = (erOppholdsperiode: boolean, intl: IntlShape, navnAnnenForelder?: string): string => {\n    if (erOppholdsperiode) {\n        return intlUtils(intl, 'uttaksplan.hvilkenKvote.annenForelder', {\n            navnAnnenForelder,\n        });\n    } else {\n        return intlUtils(intl, 'uttaksplan.hvilkenKvote');\n    }\n};\n\nconst HvilkenKontoSpørsmål: FunctionComponent<Props> = ({\n    velgbareStønadskontoer,\n    erOppholdsperiode,\n    navnAnnenForelder,\n    navnPåForeldre,\n    fieldName,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n}) => {\n    const intl = useIntl();\n    const legend = getSpørsmålsTekst(erOppholdsperiode, intl, navnAnnenForelder);\n\n    const radios = velgbareStønadskontoer.map(\n        (konto): RadioPanelProps => ({\n            label: getStønadskontoNavn(intl, konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg),\n            value: `${konto}`,\n        })\n    );\n\n    return (\n        <PeriodeUttakFormComponents.RadioPanelGroup\n            name={fieldName}\n            radios={radios}\n            legend={legend}\n            useTwoColumns={true}\n            validate={(value) => {\n                if (!hasValue(value)) {\n                    return intlUtils(intl, 'uttaksplan.validering.hvilkenKonto');\n                }\n            }}\n        />\n    );\n};\n\nexport default HvilkenKontoSpørsmål;\n","export enum UttakRundtFødselÅrsak {\n    samtidigUttak = 'Samtidig Uttak',\n    morErForSyk = 'Mor er for syk',\n}\n","import { Block, hasValue, intlUtils } from '@navikt/fp-common';\nimport { UttakRundtFødselÅrsak } from 'app/types/UttakRundtFødselÅrsak';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\n\nimport { Attachment } from 'app/types/Attachment';\nimport MorErForSykDokumentasjonOpplastning from '../er-mor-for-syk-dokumentasjon/MorErForSykDokumentasjonOpplastning';\n\ninterface Props {\n    fieldName: PeriodeUttakFormField;\n    uttakRundtFødselÅrsak: UttakRundtFødselÅrsak | '';\n    vedlegg: Attachment[];\n    navnMor: string;\n}\n\nconst UttakRundtFødselÅrsakSpørsmål: FunctionComponent<Props> = ({\n    fieldName,\n    uttakRundtFødselÅrsak,\n    navnMor,\n    vedlegg,\n}) => {\n    const intl = useIntl();\n    const radios = [\n        {\n            label: intlUtils(intl, 'ja'),\n            value: UttakRundtFødselÅrsak.samtidigUttak,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.uttakrundtFødselÅrsak.nei.morErForSyk'),\n            value: UttakRundtFødselÅrsak.morErForSyk,\n        },\n    ];\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUttakFormComponents.RadioPanelGroup\n                    legend={intlUtils(intl, 'uttaksplan.uttakrundtFødselÅrsak.spørsmål')}\n                    name={fieldName}\n                    radios={radios}\n                    useTwoColumns={true}\n                    validate={(value) => {\n                        if (!hasValue(value)) {\n                            return intlUtils(intl, 'uttaksplan.validering.uttakRundtFødselFarMedmorWLB');\n                        }\n                    }}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.morErForSyk}>\n                <MorErForSykDokumentasjonOpplastning navnMor={navnMor} vedlegg={vedlegg} />\n            </Block>\n        </>\n    );\n};\n\nexport default UttakRundtFødselÅrsakSpørsmål;\n","import { intlUtils, Block, hasValue } from '@navikt/fp-common';\nimport VeilederNormal from 'app/assets/VeilederNormal';\nimport FormikFileUploader from 'app/components/formik-file-uploader/FormikFileUploader';\nimport { Attachment } from 'app/types/Attachment';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { Skjemanummer } from 'app/types/Skjemanummer';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { OverføringÅrsakType } from 'uttaksplan/types/OverføringÅrsakType';\nimport { getNavnGenitivEierform } from 'uttaksplan/utils/stønadskontoerUtils';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { capitalizeFirstLetter } from 'app/utils/stringUtils';\ninterface Props {\n    vedlegg: Attachment[];\n    navnAnnenForelder: string;\n    erEndringssøknad: boolean;\n    valgtOverføringsårsak: OverføringÅrsakType | '';\n}\n\nconst OverføringsårsakSpørsmål: FunctionComponent<Props> = ({\n    vedlegg,\n    navnAnnenForelder,\n    erEndringssøknad,\n    valgtOverføringsårsak,\n}) => {\n    const intl = useIntl();\n    const navn = capitalizeFirstLetter(navnAnnenForelder);\n    const radios = [\n        {\n            label: intlUtils(intl, 'uttaksplan.overføringsårsaktype.INSTITUSJONSOPPHOLD_ANNEN_FORELDER', {\n                navnAnnenForelder: navn,\n            }),\n            value: OverføringÅrsakType.institusjonsoppholdAnnenForelder,\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.overføringsårsaktype.SYKDOM_ANNEN_FORELDER', {\n                navnAnnenForelder: navn,\n            }),\n            value: OverføringÅrsakType.sykdomAnnenForelder,\n        },\n    ];\n\n    if (erEndringssøknad) {\n        radios.push({\n            label: intlUtils(intl, 'uttaksplan.overføringsårsaktype.ALENEOMSORG'),\n            value: OverføringÅrsakType.aleneomsorg,\n        });\n        radios.push({\n            label: intlUtils(intl, 'uttaksplan.overføringsårsaktype.IKKE_RETT_ANNEN_FORELDER', {\n                navnAnnenForelder: navn,\n            }),\n            value: OverføringÅrsakType.ikkeRettAnnenForelder,\n        });\n    }\n\n    const beOmDokumentasjon =\n        valgtOverføringsårsak !== '' &&\n        valgtOverføringsårsak !== OverføringÅrsakType.aleneomsorg &&\n        valgtOverføringsårsak !== OverføringÅrsakType.ikkeRettAnnenForelder;\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUttakFormComponents.RadioPanelGroup\n                    name={PeriodeUttakFormField.overføringsårsak}\n                    legend={intlUtils(intl, 'uttaksplan.overføringsårsak', {\n                        navnAnnenForelder: getNavnGenitivEierform(navnAnnenForelder, intl.locale),\n                    })}\n                    radios={radios}\n                    useTwoColumns={true}\n                    validate={(value) => {\n                        if (!hasValue(value)) {\n                            return intlUtils(intl, 'uttaksplan.validering.overføringsårsak');\n                        }\n                    }}\n                />\n            </Block>\n            {beOmDokumentasjon && (\n                <Block padBottom=\"l\">\n                    <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                        <FormattedMessage\n                            id=\"uttaksplan.overføringsårsak.informasjonVedSykdomAnnenForelder\"\n                            values={{ navnAnnenForelder }}\n                        />\n                    </Veilederpanel>\n                </Block>\n            )}\n            {beOmDokumentasjon && (\n                <Block padBottom=\"l\">\n                    <FormikFileUploader\n                        label={intlUtils(intl, 'uttaksplan.overføringsårsak.dokumentasjon')}\n                        name={PeriodeUttakFormField.overføringsdokumentasjon}\n                        attachments={vedlegg || []}\n                        attachmentType={AttachmentType.OVERFØRING_KVOTE}\n                        skjemanummer={Skjemanummer.DOK_OVERFØRING_FOR_SYK}\n                    />\n                </Block>\n            )}\n        </>\n    );\n};\n\nexport default OverføringsårsakSpørsmål;\n","import { hasValue, intlUtils } from '@navikt/fp-common';\nimport { getFloatFromString } from 'app/utils/numberUtils';\nimport { IntlShape } from 'react-intl';\n\nexport const prosentValideringSamtidigUttak = (intl: IntlShape) => (value: string) => {\n    const samtidigUttakProsent = getFloatFromString(value);\n\n    if (!hasValue(value)) {\n        return intlUtils(intl, 'uttaksplan.validering.samtidigUttaksprosent.required');\n    }\n\n    if (samtidigUttakProsent === undefined) {\n        return intlUtils(intl, 'uttaksplan.validering.samtidigUttaksprosent.måVæreEtTall');\n    }\n\n    if (samtidigUttakProsent < 0) {\n        return intlUtils(intl, 'uttaksplan.validering.samtidigUttaksprosent.måVæreStørreEnn0');\n    }\n\n    if (samtidigUttakProsent > 100) {\n        return intlUtils(intl, 'uttaksplan.validering.samtidigUttaksprosent.måVæreMindreEnn100');\n    }\n\n    return undefined;\n};\n\nexport const prosentValideringGradering = (intl: IntlShape) => (value: string) => {\n    const stillingsprosent = getFloatFromString(value);\n\n    if (!hasValue(value) || value.trim() === '') {\n        return intlUtils(intl, 'uttaksplan.validering.stillingsprosent.required');\n    }\n\n    if (stillingsprosent === undefined) {\n        return intlUtils(intl, 'uttaksplan.validering.stillingsprosent.måVæreEtTall');\n    }\n\n    if (stillingsprosent < 0) {\n        return intlUtils(intl, 'uttaksplan.validering.stillingsprosent.måVæreStørreEnn0');\n    }\n\n    if (stillingsprosent > 100) {\n        return intlUtils(intl, 'uttaksplan.validering.stillingsprosent.måVæreMindreEnn100');\n    }\n\n    return undefined;\n};\n","import VeilederNormal from 'app/assets/VeilederNormal';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport React, { FunctionComponent } from 'react';\nimport { Block, intlUtils } from '@navikt/fp-common';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Lenke from 'nav-frontend-lenker';\nimport links from 'app/links/links';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { prosentValideringSamtidigUttak } from 'uttaksplan/utils/prosentValidering';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport { Situasjon } from 'app/types/Situasjon';\n\ninterface Props {\n    erFlerbarnssøknad: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    navnPåAnnenForelder: string | undefined;\n    samtidigUttakProsentVisible: boolean;\n    familiehendelsesdato: Date;\n    situasjon: Situasjon;\n}\n\nconst SamtidigUttakSpørsmål: FunctionComponent<Props> = ({\n    erFlerbarnssøknad,\n    navnPåForeldre,\n    navnPåAnnenForelder,\n    samtidigUttakProsentVisible,\n    familiehendelsesdato,\n    situasjon,\n}) => {\n    const intl = useIntl();\n    let samtidigUttakInfoTekst;\n    if (erFlerbarnssøknad) {\n        samtidigUttakInfoTekst = 'uttaksplan.samtidigUttak.flerBarnsuker.veiledertekst';\n    } else if (andreAugust2022ReglerGjelder(familiehendelsesdato) && situasjon === 'fødsel') {\n        samtidigUttakInfoTekst = 'uttaksplan.samtidigUttak.veiledertekst.etterWLB';\n    } else {\n        samtidigUttakInfoTekst = 'uttaksplan.samtidigUttak.veiledertekst.førWLB';\n    }\n\n    return (\n        <>\n            <Block padBottom={samtidigUttakProsentVisible ? 'l' : 'none'}>\n                <PeriodeUttakFormComponents.YesOrNoQuestion\n                    name={PeriodeUttakFormField.samtidigUttak}\n                    legend={intlUtils(intl, 'uttaksplan.samtidigUttak', { navnAnnenForelder: navnPåAnnenForelder })}\n                    validate={(value: YesOrNo) => {\n                        if (value === YesOrNo.UNANSWERED) {\n                            return intlUtils(intl, 'uttaksplan.validering.samtidigUttak');\n                        }\n                    }}\n                />\n            </Block>\n            <Block visible={samtidigUttakProsentVisible} padBottom=\"l\">\n                <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                    <FormattedMessage\n                        id={samtidigUttakInfoTekst}\n                        values={{\n                            link: (\n                                <Lenke href={links.fleksibeltuttak} target=\"_blank\">\n                                    <FormattedMessage id=\"uttaksplan.samtidigUttak.veiledertekst.lenke\" />\n                                </Lenke>\n                            ),\n                            navnMor: navnPåForeldre.mor,\n                            navnFar: navnPåForeldre.farMedmor,\n                        }}\n                    />\n                </Veilederpanel>\n            </Block>\n            <Block visible={samtidigUttakProsentVisible}>\n                <PeriodeUttakFormComponents.NumberInput\n                    name={PeriodeUttakFormField.samtidigUttakProsent}\n                    label={intlUtils(intl, 'uttaksplan.samtidigUttakProsent')}\n                    maxLength={5}\n                    validate={prosentValideringSamtidigUttak(intl)}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default SamtidigUttakSpørsmål;\n","import { intlUtils, Block, UtvidetInformasjon, hasValue, TidsperiodeDate } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { getKunArbeidsforholdForValgtTidsperiode } from 'app/utils/arbeidsforholdUtils';\nimport { RadioPanelProps } from 'nav-frontend-skjema';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Arbeidsform } from 'uttaksplan/types/Periode';\nimport { prosentValideringGradering } from 'uttaksplan/utils/prosentValidering';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\n\ninterface Props {\n    graderingsprosentVisible: boolean;\n    arbeidsforhold: Arbeidsforhold[];\n    tidsperiode: TidsperiodeDate;\n}\n\nexport const getArbeidsOptions = (\n    arbeidsforhold: Arbeidsforhold[],\n    tidsperiode: TidsperiodeDate\n): RadioPanelProps[] => {\n    const aktiveArbeidsforholdIPerioden = getKunArbeidsforholdForValgtTidsperiode(arbeidsforhold, tidsperiode);\n\n    const defaultOptions: RadioPanelProps[] = [\n        {\n            label: 'Selvstendig næringsdrivende',\n            value: Arbeidsform.selvstendignæringsdrivende,\n        },\n        {\n            label: 'Frilans',\n            value: Arbeidsform.frilans,\n        },\n    ];\n    const eksisterendeArbeidsforhold: RadioPanelProps[] = [];\n\n    if (aktiveArbeidsforholdIPerioden.length > 0) {\n        aktiveArbeidsforholdIPerioden.forEach((arb) =>\n            eksisterendeArbeidsforhold.push({ label: `${arb.arbeidsgiverNavn}`, value: `${arb.arbeidsgiverId}` })\n        );\n    }\n\n    return [...eksisterendeArbeidsforhold, ...defaultOptions];\n};\n\nconst SkalHaGraderingSpørsmål: FunctionComponent<Props> = ({\n    graderingsprosentVisible,\n    arbeidsforhold,\n    tidsperiode,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUttakFormComponents.YesOrNoQuestion\n                    name={PeriodeUttakFormField.skalHaGradering}\n                    legend={intlUtils(intl, 'uttaksplan.skalHaGradering')}\n                    validate={(value: YesOrNo) => {\n                        if (value === YesOrNo.UNANSWERED) {\n                            return intlUtils(intl, 'uttaksplan.validering.skalHaGradering');\n                        }\n                    }}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={graderingsprosentVisible}>\n                <PeriodeUttakFormComponents.NumberInput\n                    name={PeriodeUttakFormField.stillingsprosent}\n                    label={intlUtils(intl, 'uttaksplan.stillingsprosent')}\n                    description={\n                        <UtvidetInformasjon apneLabel={intlUtils(intl, 'uttaksplan.stillingsprosent.lesMer.tittel')}>\n                            <Normaltekst>\n                                <FormattedMessage id=\"uttaksplan.stillingsprosent.lesMer.innhold\" />\n                            </Normaltekst>\n                        </UtvidetInformasjon>\n                    }\n                    maxLength={5}\n                    validate={prosentValideringGradering(intl)}\n                />\n            </Block>\n            <Block visible={graderingsprosentVisible}>\n                <PeriodeUttakFormComponents.RadioPanelGroup\n                    name={PeriodeUttakFormField.arbeidsformer}\n                    legend={intlUtils(intl, 'uttaksplan.arbeidsformer')}\n                    description={\n                        <UtvidetInformasjon apneLabel={intlUtils(intl, 'uttaksplan.arbeidsformer.lesMer.tittel')}>\n                            <Normaltekst>\n                                <FormattedMessage id=\"uttaksplan.arbeidsformer.lesMer.innhold\" />\n                            </Normaltekst>\n                        </UtvidetInformasjon>\n                    }\n                    useTwoColumns={true}\n                    radios={getArbeidsOptions(arbeidsforhold, tidsperiode)}\n                    validate={(value) => {\n                        if (!hasValue(value)) {\n                            return intlUtils(intl, 'uttaksplan.validering.arbeidsformer');\n                        }\n                    }}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default SkalHaGraderingSpørsmål;\n","import { FunctionComponent, useEffect, useRef } from 'react';\nimport { useFormikContext } from 'formik';\nimport { PeriodeUttakFormData } from '../periode-uttak-form/periodeUttakFormConfig';\nimport { PeriodeUtsettelseFormData } from '../periode-utsettelse-form/periodeUtsettelseFormConfig';\nimport { PeriodeFørFødselFormData } from '../periode-før-fødsel-form/periodeFørFødselFormConfig';\n\ninterface Props {\n    cleanup: () => PeriodeUttakFormData | PeriodeUtsettelseFormData | PeriodeFørFødselFormData;\n}\n\nexport const jsonSort = (json: any): string => {\n    function isObject(v: any) {\n        return '[object Object]' === Object.prototype.toString.call(v);\n    }\n\n    const sort = (o: any): any => {\n        if (Array.isArray(o)) {\n            return o.sort().map(sort);\n        } else if (isObject(o)) {\n            return Object.keys(o)\n                .sort()\n                .reduce((a: any, k) => {\n                    a[k] = sort(o[k]);\n                    return a;\n                }, {});\n        }\n\n        return o;\n    };\n    return sort(json);\n};\n\nexport const SubmitListener: FunctionComponent<Props> = ({ cleanup }) => {\n    const formik = useFormikContext<PeriodeUttakFormData | PeriodeUtsettelseFormData | PeriodeFørFødselFormData>();\n    const { isSubmitting, isValidating, submitForm, setValues } = formik;\n    const cleanedValues = cleanup();\n    const ref = useRef(cleanedValues);\n\n    useEffect(() => {\n        if (!isSubmitting && !isValidating) {\n            const currentValuesJSONString = JSON.stringify(jsonSort(ref.current));\n            const previousValuesJSONString = JSON.stringify(jsonSort(cleanedValues));\n            const valuesEqualLastValues = previousValuesJSONString === currentValuesJSONString;\n\n            if (!valuesEqualLastValues) {\n                ref.current = cleanedValues;\n            }\n\n            if (!valuesEqualLastValues) {\n                setValues(cleanedValues);\n                setTimeout(() => submitForm(), 0);\n            }\n        }\n    }, [isSubmitting, isValidating, submitForm, setValues, cleanedValues, cleanup]);\n\n    return null;\n};\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB } from 'uttaksplan/components/uttaks-forms/periode-uttak-form/periodeUttakFormQuestionsConfig';\n\nconst hvemSkalTaUttakSkalBesvares = (\n    tidsperiode: TidsperiodeDate,\n    erDeltUttakINorge: boolean,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    situasjon: Situasjon\n): boolean => {\n    if (erFarEllerMedmor) {\n        if (\n            erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB(\n                { fom: tidsperiode.fom },\n                familiehendelsesdato,\n                erFarEllerMedmor,\n                erDeltUttakINorge,\n                situasjon\n            )\n        ) {\n            return false;\n        }\n    }\n    return erDeltUttakINorge;\n};\n\nexport default hvemSkalTaUttakSkalBesvares;\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { Situasjon } from 'app/types/Situasjon';\nimport dayjs from 'dayjs';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { erInnenFørsteSeksUkerFødselFarMedmor, Uttaksdatoer } from '../uttaksdatoerUtils';\nimport uttakRundtFødselÅrsakSpørsmålSkalBesvares from './uttakRundtFødselÅrsakSpørsmålSkalBesvares';\n\nconst erMorForForSykSkalBesvares = (\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    tidsperiode: TidsperiodeDate,\n    situasjon: Situasjon,\n    søkerErFarEllerMedmor: boolean,\n    uttaksdatoer: Uttaksdatoer,\n    erFlerbarnssøknad: boolean,\n    erAleneOmOmsorg: boolean,\n    annenForelderKanIkkeOppgis: boolean,\n    ønskerFlerbarnsdager: boolean | undefined,\n    søkerHarMidlertidigOmsorg: boolean,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    bareFarMedmorHarRett: boolean\n): boolean => {\n    const årsakTilUttakRundtFødselSkalBesvares = uttakRundtFødselÅrsakSpørsmålSkalBesvares(\n        periodetype,\n        konto as StønadskontoType,\n        tidsperiode,\n        søkerErFarEllerMedmor,\n        erAleneOmOmsorg,\n        annenForelderKanIkkeOppgis,\n        søkerHarMidlertidigOmsorg,\n        familiehendelsesdato,\n        termindato,\n        situasjon,\n        bareFarMedmorHarRett\n    );\n\n    if (\n        erAleneOmOmsorg ||\n        annenForelderKanIkkeOppgis ||\n        søkerHarMidlertidigOmsorg ||\n        årsakTilUttakRundtFødselSkalBesvares ||\n        dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'day') ||\n        konto === StønadskontoType.AktivitetsfriKvote\n    ) {\n        return false;\n    }\n\n    if (periodetype === Periodetype.Uttak && søkerErFarEllerMedmor) {\n        if (\n            (konto === StønadskontoType.Fedrekvote || konto === StønadskontoType.Foreldrepenger) &&\n            erInnenFørsteSeksUkerFødselFarMedmor(\n                tidsperiode,\n                situasjon,\n                søkerErFarEllerMedmor,\n                uttaksdatoer.etterFødsel.førsteUttaksdagEtterSeksUker\n            )\n        ) {\n            if (erFlerbarnssøknad) {\n                return ønskerFlerbarnsdager !== undefined && ønskerFlerbarnsdager === false;\n            }\n\n            return true;\n        }\n        return false;\n    }\n\n    return false;\n};\n\nexport default erMorForForSykSkalBesvares;\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport { getSisteUttaksdag6UkerEtterFødsel } from 'app/utils/wlbUtils';\nimport dayjs from 'dayjs';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\n\nexport const graderingSkalBesvares = (\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    familiehendelsesdato: Date,\n    erFarMedmor: boolean,\n    morErForSyk: boolean | undefined,\n    tidsperiode: TidsperiodeDate\n): boolean => {\n    const farMedmorSøkerDeFørsteSeksUkeneFørWLBOgMorErIkkeSyk =\n        !andreAugust2022ReglerGjelder(familiehendelsesdato) && erFarMedmor && morErForSyk === false;\n    const sisteUttaksdagInnenSeksUkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n    const bareFarHarRettSøkerAktivitetsKravKontoDeFørsteSeksUkeneOgMorErIkkeSyk =\n        erFarMedmor &&\n        konto === StønadskontoType.Foreldrepenger &&\n        morErForSyk === false &&\n        dayjs(tidsperiode.fom).isSameOrBefore(sisteUttaksdagInnenSeksUkerEtterFødsel, 'day');\n    if (\n        periodetype === Periodetype.Uttak &&\n        konto !== StønadskontoType.ForeldrepengerFørFødsel &&\n        !farMedmorSøkerDeFørsteSeksUkeneFørWLBOgMorErIkkeSyk &&\n        !bareFarHarRettSøkerAktivitetsKravKontoDeFørsteSeksUkeneOgMorErIkkeSyk\n    ) {\n        return true;\n    }\n    return false;\n};\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { Situasjon } from 'app/types/Situasjon';\nimport dayjs from 'dayjs';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { uttakRundtFødselÅrsakSpørsmålSkalBesvares } from './uttakRundtFødselÅrsakSpørsmålSkalBesvares';\n\nconst samtidigUttakSkalBesvares = (\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    erUttakInnenFørsteSeksUkerFødselFarMedmor: boolean,\n    erUttakFørFødsel: boolean,\n    erAleneOmsorg: boolean,\n    erDeltUttakINorge: boolean,\n    søkerHarMidlertidigOmsorg: boolean,\n    erMorForSyk: boolean | undefined,\n    ønskerFlerbarnsdager: boolean | undefined,\n    tidsperiode: TidsperiodeDate,\n    søkerErFarEllerMedmor: boolean,\n    annenforelderKanIkkeOppgis: boolean,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon,\n    bareFarMedmorHarRett: boolean\n): boolean => {\n    if (erAleneOmsorg || !erDeltUttakINorge || søkerHarMidlertidigOmsorg) {\n        return false;\n    }\n    if (søkerErFarEllerMedmor && dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'd')) {\n        return false;\n    }\n    if (\n        uttakRundtFødselÅrsakSpørsmålSkalBesvares(\n            periodetype,\n            konto,\n            tidsperiode,\n            søkerErFarEllerMedmor,\n            erAleneOmsorg,\n            annenforelderKanIkkeOppgis,\n            søkerHarMidlertidigOmsorg,\n            familiehendelsesdato,\n            termindato,\n            situasjon,\n            bareFarMedmorHarRett\n        )\n    ) {\n        return false;\n    }\n\n    if (periodetype === Periodetype.Uttak) {\n        if (erMorForSyk) {\n            return false;\n        }\n\n        const erUttakEgenKvoteFarMedmorFørsteSeksUkerUtenFlerbarnsdager: boolean =\n            erUttakInnenFørsteSeksUkerFødselFarMedmor &&\n            (konto === StønadskontoType.Fedrekvote || konto === StønadskontoType.Foreldrepenger) &&\n            ønskerFlerbarnsdager !== true;\n\n        return !(erUttakFørFødsel || erUttakEgenKvoteFarMedmorFørsteSeksUkerUtenFlerbarnsdager);\n    }\n\n    return false;\n};\n\nexport default samtidigUttakSkalBesvares;\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport dayjs from 'dayjs';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { UttakRundtFødselÅrsak } from 'app/types/UttakRundtFødselÅrsak';\n\nexport const ønskerFlerbarnsdagerSkalBesvares = (\n    periodetype: Periodetype,\n    erFlerbarnssøknad: boolean,\n    søkerErFarEllerMedmor: boolean,\n    familiehendelsesdato: Date,\n    tidsperiode: TidsperiodeDate,\n    stønadskontoType: StønadskontoType,\n    bareFarHarRett: boolean,\n    antallBarn: number,\n    erAleneOmOmsorg: boolean,\n    erDeltUttakINorge: boolean,\n    uttakRundtFødselÅrsak: UttakRundtFødselÅrsak | undefined\n): boolean => {\n    if (dayjs(tidsperiode.fom).isBefore(familiehendelsesdato, 'day')) {\n        return false;\n    }\n\n    if (\n        stønadskontoType === StønadskontoType.AktivitetsfriKvote ||\n        uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.morErForSyk\n    ) {\n        return false;\n    }\n    if (søkerErFarEllerMedmor && (bareFarHarRett || erAleneOmOmsorg) && antallBarn > 1) {\n        if (andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n            return false;\n        }\n        return true;\n    }\n    if (!erDeltUttakINorge && stønadskontoType !== StønadskontoType.Fellesperiode) {\n        return false;\n    }\n    return periodetype === Periodetype.Uttak && erFlerbarnssøknad && søkerErFarEllerMedmor;\n};\n","import AnnenForelder from 'app/context/types/AnnenForelder';\nimport { harAnnenForelderRettIEØS } from 'app/utils/annenForelderUtils';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\n\nconst overføringsårsakSkalBesvares = (\n    periodetype: Periodetype,\n    erFarEllerMedmor: boolean,\n    kontoValue: StønadskontoType,\n    annenForelder: AnnenForelder\n): boolean => {\n    const annenForelderHarRettIEØS = harAnnenForelderRettIEØS(annenForelder);\n    return (\n        periodetype === Periodetype.Overføring ||\n        (annenForelderHarRettIEØS && erFarEllerMedmor && kontoValue === StønadskontoType.Mødrekvote) ||\n        (annenForelderHarRettIEØS && !erFarEllerMedmor && kontoValue === StønadskontoType.Fedrekvote)\n    );\n};\n\nexport default overføringsårsakSkalBesvares;\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport { Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { convertYesOrNoOrUndefinedToBoolean } from 'app/utils/formUtils';\nimport { PeriodeUttakFormData } from 'uttaksplan/components/uttaks-forms/periode-uttak-form/periodeUttakFormConfig';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { getUttaksdatoer } from '../uttaksdatoerUtils';\nimport { aktivitetskravMorSkalBesvares } from './aktivitetskravMorSkalBesvares';\nimport erMorForForSykSkalBesvares from './erMorForSykSkalBesvares';\nimport { graderingSkalBesvares } from './graderingSkalBesvares';\nimport { graderingSkalBesvaresPgaWLBUttakRundtFødsel } from './graderingSkalBesvaresPgaWLBUttakRundtFødsel';\nimport samtidigUttakSkalBesvares from './samtidigUttakSkalBesvares';\nimport { ønskerFlerbarnsdagerSkalBesvares } from './ønskerFlerbarnsdagerSkalBesvares';\nimport uttakRundtFødselÅrsakSpørsmålSkalBesvares from './uttakRundtFødselÅrsakSpørsmålSkalBesvares';\nimport kontoSkalBesvares from './kontoSkalBesvarer';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport hvemSkalTaUttakSkalBesvares from './hvemSkalTaUttakSkalBesvares';\nimport overføringsårsakSkalBesvares from './overføringsårsakSkalBesvares';\nexport interface UttakSkjemaregler {\n    aktivitetskravMorSkalBesvares: () => boolean;\n    erMorForSykSkalBesvares: () => boolean;\n    uttakRundtFødselÅrsakSpørsmålSkalBesvares: () => boolean;\n    samtidigUttakSkalBesvares: () => boolean;\n    kontoSkalBesvares: () => boolean;\n    hvemSkalTaUttakSkalBesvares: () => boolean;\n    overføringsårsakSkalBesvares: () => boolean;\n    ønskerFlerbarnsdagerSkalBesvares: () => boolean;\n    graderingSkalBesvares: () => boolean;\n    graderingSkalBesvaresPgaWLBUttakRundtFødsel: () => boolean;\n}\n\nexport interface UttakSkjemaReglerProps {\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n    annenForelder: AnnenForelder;\n    situasjon: Situasjon;\n    erFlerbarnssøknad: boolean;\n    erDeltUttakINorge: boolean;\n    familiehendelsesdato: Date;\n    periodetype: Periodetype;\n    termindato: Date | undefined;\n    morHarRett: boolean;\n    stønadskontoer: StønadskontoUttak[];\n    antallBarn: number;\n}\n\nexport const getUttakSkjemaregler = (\n    formValues: PeriodeUttakFormData,\n    regelProps: UttakSkjemaReglerProps\n): UttakSkjemaregler => {\n    const {\n        erFarEllerMedmor,\n        erAleneOmOmsorg,\n        annenForelder,\n        situasjon,\n        erFlerbarnssøknad,\n        erDeltUttakINorge,\n        familiehendelsesdato,\n        periodetype,\n        termindato,\n        stønadskontoer,\n        morHarRett,\n        antallBarn,\n    } = regelProps;\n\n    const { konto } = formValues;\n\n    const uttaksdatoer = getUttaksdatoer(familiehendelsesdato, erFarEllerMedmor, termindato);\n    const tidsperiode: TidsperiodeDate = { fom: formValues.fom!, tom: formValues.tom! };\n\n    return {\n        aktivitetskravMorSkalBesvares: () =>\n            aktivitetskravMorSkalBesvares(\n                convertYesOrNoOrUndefinedToBoolean(formValues.ønskerFlerbarnsdager),\n                convertYesOrNoOrUndefinedToBoolean(formValues.samtidigUttak),\n                convertYesOrNoOrUndefinedToBoolean(formValues.erMorForSyk),\n                periodetype,\n                konto as StønadskontoType,\n                !erFarEllerMedmor,\n                erAleneOmOmsorg,\n                annenForelder.kanIkkeOppgis,\n                false, // TODO Midlertidig omsorg,\n                tidsperiode,\n                familiehendelsesdato,\n                termindato,\n                situasjon,\n                stønadskontoer,\n                !morHarRett\n            ),\n        erMorForSykSkalBesvares: (): boolean =>\n            erMorForForSykSkalBesvares(\n                periodetype,\n                konto as StønadskontoType,\n                tidsperiode,\n                situasjon,\n                erFarEllerMedmor,\n                uttaksdatoer,\n                erFlerbarnssøknad,\n                erAleneOmOmsorg,\n                annenForelder.kanIkkeOppgis,\n                convertYesOrNoOrUndefinedToBoolean(formValues.ønskerFlerbarnsdager),\n                false, // TODO Midlertidig omsorg,\n                familiehendelsesdato,\n                termindato,\n                !morHarRett\n            ),\n        samtidigUttakSkalBesvares: (): boolean =>\n            samtidigUttakSkalBesvares(\n                periodetype,\n                konto as StønadskontoType,\n                Tidsperioden(tidsperiode).erInnenforFørsteSeksUker(familiehendelsesdato) && situasjon === 'fødsel',\n                periodetype === Periodetype.Uttak && konto === StønadskontoType.ForeldrepengerFørFødsel,\n                erAleneOmOmsorg,\n                erDeltUttakINorge,\n                false, // TODO Midlertidig omsorg,\n                convertYesOrNoOrUndefinedToBoolean(formValues.erMorForSyk),\n                convertYesOrNoOrUndefinedToBoolean(formValues.ønskerFlerbarnsdager),\n                tidsperiode,\n                erFarEllerMedmor,\n                annenForelder.kanIkkeOppgis,\n                familiehendelsesdato,\n                termindato,\n                situasjon,\n                !morHarRett\n            ),\n        kontoSkalBesvares: (): boolean =>\n            kontoSkalBesvares(periodetype, tidsperiode, stønadskontoer, familiehendelsesdato, erFarEllerMedmor),\n        ønskerFlerbarnsdagerSkalBesvares: (): boolean => {\n            return ønskerFlerbarnsdagerSkalBesvares(\n                periodetype,\n                erFlerbarnssøknad,\n                erFarEllerMedmor,\n                familiehendelsesdato,\n                tidsperiode,\n                konto as StønadskontoType,\n                !morHarRett,\n                antallBarn,\n                erAleneOmOmsorg,\n                erDeltUttakINorge,\n                formValues.uttakRundtFødselÅrsak === '' ? undefined : formValues.uttakRundtFødselÅrsak\n            );\n        },\n        hvemSkalTaUttakSkalBesvares: (): boolean =>\n            hvemSkalTaUttakSkalBesvares(\n                tidsperiode,\n                erDeltUttakINorge,\n                familiehendelsesdato,\n                erFarEllerMedmor,\n                situasjon\n            ),\n        graderingSkalBesvares: (): boolean => {\n            return graderingSkalBesvares(\n                periodetype,\n                konto as StønadskontoType,\n                familiehendelsesdato,\n                erFarEllerMedmor,\n                convertYesOrNoOrUndefinedToBoolean(formValues.erMorForSyk),\n                tidsperiode\n            );\n        },\n        graderingSkalBesvaresPgaWLBUttakRundtFødsel: (): boolean => {\n            return graderingSkalBesvaresPgaWLBUttakRundtFødsel(\n                tidsperiode,\n                periodetype,\n                konto as StønadskontoType,\n                erFarEllerMedmor,\n                familiehendelsesdato,\n                termindato,\n                situasjon\n            );\n        },\n        overføringsårsakSkalBesvares: (): boolean => {\n            return overføringsårsakSkalBesvares(\n                periodetype,\n                erFarEllerMedmor,\n                konto as StønadskontoType,\n                annenForelder\n            );\n        },\n        uttakRundtFødselÅrsakSpørsmålSkalBesvares: () => {\n            return uttakRundtFødselÅrsakSpørsmålSkalBesvares(\n                periodetype,\n                konto as StønadskontoType,\n                tidsperiode,\n                erFarEllerMedmor,\n                erAleneOmOmsorg,\n                annenForelder.kanIkkeOppgis,\n                false, //TODO: midlertidig omsorg\n                familiehendelsesdato,\n                termindato,\n                situasjon,\n                !morHarRett\n            );\n        },\n    };\n};\n\nexport default getUttakSkjemaregler;\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { erFarMedmorSinWLBTidsperiodeRundtFødsel } from 'app/utils/wlbUtils';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\n\nexport const graderingSkalBesvaresPgaWLBUttakRundtFødsel = (\n    tidperiode: TidsperiodeDate,\n    periodetype: Periodetype,\n    konto: StønadskontoType,\n    erFarEllerMedmor: boolean,\n    familiehendelsesdato: Date,\n    termindato: Date | undefined,\n    situasjon: Situasjon\n): boolean => {\n    return erFarMedmorSinWLBTidsperiodeRundtFødsel(\n        tidperiode,\n        familiehendelsesdato,\n        periodetype,\n        konto,\n        erFarEllerMedmor,\n        termindato,\n        situasjon\n    );\n};\n","import { hasValue, TidsperiodeDate } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { UttakRundtFødselÅrsak } from 'app/types/UttakRundtFødselÅrsak';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport { erFarMedmorSinWLBTidsperiodeRundtFødsel, getSisteUttaksdag6UkerEtterFødsel } from 'app/utils/wlbUtils';\nimport dayjs from 'dayjs';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport hvemSkalTaUttakSkalBesvares from 'uttaksplan/utils/uttaksskjema/hvemSkalTaUttakSkalBesvares';\nimport getUttakSkjemaregler, {\n    UttakSkjemaregler,\n    UttakSkjemaReglerProps,\n} from 'uttaksplan/utils/uttaksskjema/uttakSkjemaregler';\nimport { PeriodeUttakFormData, PeriodeUttakFormField } from './periodeUttakFormConfig';\nimport { harAnnenForelderRettIEØS } from 'app/utils/annenForelderUtils';\nimport { Periodetype } from 'uttaksplan/types/Periode';\ninterface PeriodeUttakFormQuestionsPayload {\n    values: PeriodeUttakFormData;\n    regelProps: UttakSkjemaReglerProps;\n}\n\nexport const erSamtidigUttakFarMedmorFørFødselWLB = (\n    values: Partial<PeriodeUttakFormData>,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon\n) => {\n    return (\n        andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n        erFarEllerMedmor &&\n        erDeltUttak &&\n        situasjon === 'fødsel' &&\n        hasValue(values.fom) &&\n        dayjs(values.fom).isBefore(familiehendelsesdato, 'day')\n    );\n};\n\nexport const erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB = (\n    values: Partial<PeriodeUttakFormData>,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon\n) => {\n    const sisteUttaksdag6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n\n    return (\n        andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n        erFarEllerMedmor &&\n        erDeltUttak &&\n        situasjon === 'fødsel' &&\n        hasValue(values.fom) &&\n        dayjs(values.fom).isSameOrBefore(sisteUttaksdag6UkerEtterFødsel, 'day')\n    );\n};\n\nexport const skalViseWLBInfoOmSamtidigUttakRundtFødsel = (\n    values: PeriodeUttakFormData,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon\n) => {\n    return (\n        values.uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.samtidigUttak ||\n        erSamtidigUttakFarMedmorFørFødselWLB(values, familiehendelsesdato, erFarEllerMedmor, erDeltUttak, situasjon)\n    );\n};\n\nconst skalViseGradering = (\n    regler: UttakSkjemaregler,\n    values: PeriodeUttakFormData,\n    familiehendelsesdato: Date,\n    erDeltUttakINorge: boolean,\n    annenForelder: AnnenForelder\n): boolean => {\n    if (!isValidTidsperiode({ fom: values.fom, tom: values.tom })) {\n        return false;\n    }\n\n    if (regler.overføringsårsakSkalBesvares() && !hasValue(values.overføringsårsak)) {\n        return false;\n    }\n\n    if (\n        regler.graderingSkalBesvaresPgaWLBUttakRundtFødsel() &&\n        dayjs(values.fom).isSameOrAfter(familiehendelsesdato, 'd') &&\n        (erDeltUttakINorge || harAnnenForelderRettIEØS(annenForelder)) &&\n        !hasValue(values.uttakRundtFødselÅrsak)\n    ) {\n        return false;\n    }\n\n    if (\n        values.konto === '' ||\n        (regler.samtidigUttakSkalBesvares() && values.samtidigUttak === YesOrNo.UNANSWERED) ||\n        (regler.ønskerFlerbarnsdagerSkalBesvares() && values.ønskerFlerbarnsdager === YesOrNo.UNANSWERED) ||\n        (regler.aktivitetskravMorSkalBesvares() &&\n            values.aktivitetskravMor === '' &&\n            values.erMorForSyk !== YesOrNo.YES) ||\n        (regler.erMorForSykSkalBesvares() && values.erMorForSyk !== YesOrNo.YES)\n    ) {\n        return false;\n    }\n\n    return true;\n};\n\nconst skalViseAktivitetskrav = (regler: UttakSkjemaregler, values: PeriodeUttakFormData): boolean => {\n    if (!isValidTidsperiode({ fom: values.fom, tom: values.tom })) {\n        return false;\n    }\n\n    if (regler.erMorForSykSkalBesvares() && values.erMorForSyk !== YesOrNo.NO) {\n        return false;\n    }\n\n    if (regler.ønskerFlerbarnsdagerSkalBesvares() && values.ønskerFlerbarnsdager === YesOrNo.UNANSWERED) {\n        return false;\n    }\n\n    return regler.samtidigUttakSkalBesvares()\n        ? values.samtidigUttak !== YesOrNo.UNANSWERED\n        : values.konto !== undefined;\n};\n\nconst skalViseSamtidigUttak = (regler: UttakSkjemaregler, values: PeriodeUttakFormData): boolean => {\n    if (!isValidTidsperiode({ fom: values.fom, tom: values.tom })) {\n        return false;\n    }\n\n    if (values.konto === StønadskontoType.Foreldrepenger) {\n        return false;\n    }\n\n    if (values.konto === '') {\n        return false;\n    }\n\n    if (regler.ønskerFlerbarnsdagerSkalBesvares() && values.ønskerFlerbarnsdager === YesOrNo.UNANSWERED) {\n        return false;\n    }\n\n    if (regler.erMorForSykSkalBesvares() && values.erMorForSyk === YesOrNo.NO) {\n        return false;\n    }\n\n    return true;\n};\n\nconst skalViseFlerbarnsdager = (\n    values: PeriodeUttakFormData,\n    tidsperiode: TidsperiodeDate,\n    familiehendelsesdato: Date,\n    periodetype: Periodetype,\n    kontoValue: StønadskontoType | '',\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n    situasjon: Situasjon\n): boolean => {\n    if (!isValidTidsperiode({ fom: values.fom, tom: values.tom })) {\n        return false;\n    }\n    if (\n        kontoValue !== '' &&\n        erFarMedmorSinWLBTidsperiodeRundtFødsel(\n            tidsperiode,\n            familiehendelsesdato,\n            periodetype,\n            kontoValue,\n            erFarEllerMedmor,\n            termindato,\n            situasjon\n        ) &&\n        values.uttakRundtFødselÅrsak === ''\n    ) {\n        return false;\n    }\n\n    return (\n        values.konto === StønadskontoType.Fellesperiode ||\n        values.konto === StønadskontoType.Fedrekvote ||\n        values.konto === StønadskontoType.Foreldrepenger\n    );\n};\n\nconst skalViseKonto = (\n    values: PeriodeUttakFormData,\n    familiehendelsesdato: Date,\n    erDeltUttakINorge: boolean,\n    erFarEllerMedmor: boolean,\n    situasjon: Situasjon\n): boolean => {\n    const tidsperiode = { fom: values.fom, tom: values.tom };\n    if (!isValidTidsperiode(tidsperiode)) {\n        return false;\n    }\n    if (\n        hvemSkalTaUttakSkalBesvares(\n            tidsperiode,\n            erDeltUttakINorge,\n            familiehendelsesdato,\n            erFarEllerMedmor,\n            situasjon\n        ) &&\n        !hasValue(values.hvemSkalTaUttak)\n    ) {\n        return false;\n    }\n    return true;\n};\n\nconst PeriodeUttakFormConfig: QuestionConfig<PeriodeUttakFormQuestionsPayload, PeriodeUttakFormField> = {\n    [PeriodeUttakFormField.fom]: {\n        isAnswered: ({ values }) => hasValue(values.fom),\n        isIncluded: () => true,\n    },\n    [PeriodeUttakFormField.tom]: {\n        isAnswered: ({ values }) => hasValue(values.tom),\n        isIncluded: () => true,\n    },\n    [PeriodeUttakFormField.hvemSkalTaUttak]: {\n        isAnswered: ({ values }) => hasValue(values.hvemSkalTaUttak),\n        isIncluded: ({ regelProps, values }) => getUttakSkjemaregler(values, regelProps).hvemSkalTaUttakSkalBesvares(),\n        visibilityFilter: ({ values }) => isValidTidsperiode({ fom: values.fom, tom: values.tom }),\n    },\n    [PeriodeUttakFormField.konto]: {\n        isAnswered: ({ values }) => hasValue(values.konto),\n        isIncluded: ({ regelProps, values }) => getUttakSkjemaregler(values, regelProps).kontoSkalBesvares(),\n        visibilityFilter: ({ regelProps, values }) =>\n            skalViseKonto(\n                values,\n                regelProps.familiehendelsesdato,\n                regelProps.erDeltUttakINorge,\n                regelProps.erFarEllerMedmor,\n                regelProps.situasjon\n            ),\n    },\n    [PeriodeUttakFormField.ønskerFlerbarnsdager]: {\n        isAnswered: ({ values }) => values.ønskerFlerbarnsdager !== YesOrNo.UNANSWERED,\n        isIncluded: ({ values, regelProps }) =>\n            getUttakSkjemaregler(values, regelProps).ønskerFlerbarnsdagerSkalBesvares(),\n        visibilityFilter: ({ values, regelProps }) =>\n            skalViseFlerbarnsdager(\n                values,\n                { fom: values.fom!, tom: values.tom! },\n                regelProps.familiehendelsesdato,\n                regelProps.periodetype,\n                values.konto,\n                regelProps.erFarEllerMedmor,\n                regelProps.termindato,\n                regelProps.situasjon\n            ),\n    },\n    [PeriodeUttakFormField.erMorForSyk]: {\n        isAnswered: ({ values }) => values.erMorForSyk !== YesOrNo.UNANSWERED,\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).erMorForSykSkalBesvares(),\n        visibilityFilter: ({ values }) => values.ønskerFlerbarnsdager !== YesOrNo.UNANSWERED || hasValue(values.konto),\n    },\n    [PeriodeUttakFormField.uttakRundtFødselÅrsak]: {\n        isAnswered: ({ values }) => hasValue(values.uttakRundtFødselÅrsak),\n        isIncluded: ({ values, regelProps }) =>\n            getUttakSkjemaregler(values, regelProps).uttakRundtFødselÅrsakSpørsmålSkalBesvares(),\n        visibilityFilter: ({ values }) => values.ønskerFlerbarnsdager !== YesOrNo.UNANSWERED || hasValue(values.konto),\n    },\n    [PeriodeUttakFormField.samtidigUttak]: {\n        isAnswered: ({ values }) => values.samtidigUttak !== YesOrNo.UNANSWERED,\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).samtidigUttakSkalBesvares(),\n        visibilityFilter: ({ values, regelProps }) =>\n            skalViseSamtidigUttak(getUttakSkjemaregler(values, regelProps), values),\n    },\n    [PeriodeUttakFormField.samtidigUttakProsent]: {\n        isAnswered: ({ values }) => hasValue(values.samtidigUttakProsent),\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).samtidigUttakSkalBesvares(),\n        visibilityFilter: ({ values }) => values.samtidigUttak === YesOrNo.YES,\n    },\n    [PeriodeUttakFormField.skalHaGradering]: {\n        isAnswered: ({ values }) => values.skalHaGradering !== YesOrNo.UNANSWERED,\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).graderingSkalBesvares(),\n        visibilityFilter: ({ values, regelProps }) =>\n            skalViseGradering(\n                getUttakSkjemaregler(values, regelProps),\n                values,\n                regelProps.familiehendelsesdato,\n                regelProps.erDeltUttakINorge,\n                regelProps.annenForelder\n            ),\n    },\n    [PeriodeUttakFormField.stillingsprosent]: {\n        isAnswered: ({ values }) => hasValue(values.stillingsprosent),\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).graderingSkalBesvares(),\n        visibilityFilter: ({ values }) => values.skalHaGradering === YesOrNo.YES,\n    },\n    [PeriodeUttakFormField.arbeidsformer]: {\n        isAnswered: ({ values }) => values.arbeidsformer.length > 0,\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).graderingSkalBesvares(),\n        visibilityFilter: ({ values }) => values.skalHaGradering === YesOrNo.YES,\n    },\n    [PeriodeUttakFormField.overføringsårsak]: {\n        isAnswered: ({ values }) => hasValue(values.overføringsårsak),\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).overføringsårsakSkalBesvares(),\n        visibilityFilter: ({ values }) => hasValue(values.konto),\n    },\n    [PeriodeUttakFormField.overføringsdokumentasjon]: {\n        isAnswered: ({ values }) => values.overføringsdokumentasjon.length >= 0,\n        isIncluded: ({ values, regelProps }) => getUttakSkjemaregler(values, regelProps).overføringsårsakSkalBesvares(),\n        visibilityFilter: ({ values }) => hasValue(values.overføringsårsak),\n    },\n    [PeriodeUttakFormField.aktivitetskravMor]: {\n        isAnswered: ({ values }) => hasValue(values.aktivitetskravMor),\n        isIncluded: ({ values, regelProps }) =>\n            getUttakSkjemaregler(values, regelProps).aktivitetskravMorSkalBesvares(),\n        visibilityFilter: ({ values, regelProps }) =>\n            skalViseAktivitetskrav(getUttakSkjemaregler(values, regelProps), values),\n    },\n    [PeriodeUttakFormField.aktivitetskravMorDokumentasjon]: {\n        isAnswered: ({ values }) => values.aktivitetskravMorDokumentasjon.length >= 0,\n        isIncluded: ({ values, regelProps }) =>\n            getUttakSkjemaregler(values, regelProps).aktivitetskravMorSkalBesvares(),\n        visibilityFilter: ({ values, regelProps }) =>\n            skalViseAktivitetskrav(getUttakSkjemaregler(values, regelProps), values),\n    },\n};\n\nexport const periodeUttakFormQuestionsConfig = Questions<PeriodeUttakFormQuestionsPayload, PeriodeUttakFormField>(\n    PeriodeUttakFormConfig\n);\n","import { hasValue } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { Attachment } from 'app/types/Attachment';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { Forelder } from 'app/types/Forelder';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { Skjemanummer } from 'app/types/Skjemanummer';\nimport { UttakRundtFødselÅrsak } from 'app/types/UttakRundtFødselÅrsak';\nimport { convertBooleanOrUndefinedToYesOrNo, convertYesOrNoOrUndefinedToBoolean } from 'app/utils/formUtils';\nimport { getMorsAktivitet, getMorsAktivitetSkjemanummer } from 'app/utils/morsAktivitetUtils';\nimport { trimNumberValue } from 'app/utils/numberUtils';\nimport { lagSendSenereDokumentNårIngenAndreFinnes } from 'app/utils/vedleggUtils';\nimport dayjs from 'dayjs';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { OverføringÅrsakType } from 'uttaksplan/types/OverføringÅrsakType';\nimport {\n    Arbeidsform,\n    isOppholdsperiode,\n    isOverføringsperiode,\n    isUttaksperiode,\n    Oppholdsperiode,\n    Overføringsperiode,\n    Periode,\n    Periodetype,\n    Uttaksperiode,\n} from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { getOppholdsÅrsakFromStønadskonto, getStønadskontoFromOppholdsårsak } from 'uttaksplan/utils/periodeUtils';\nimport { PeriodeUttakFormData, PeriodeUttakFormField } from './periodeUttakFormConfig';\nimport {\n    erSamtidigUttakFarMedmorFørFødselWLB,\n    erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB,\n} from './periodeUttakFormQuestionsConfig';\n\nconst getInitialKonto = (\n    erDeltUttak: boolean,\n    erMorUfør: boolean,\n    periodenStarterFørFamdato: boolean,\n    erFarEllerMedmor: boolean\n) => {\n    if (erDeltUttak) {\n        if (periodenStarterFørFamdato && erFarEllerMedmor) {\n            return StønadskontoType.Fedrekvote;\n        }\n\n        return '';\n    }\n\n    if (erFarEllerMedmor && periodenStarterFørFamdato) {\n        return StønadskontoType.AktivitetsfriKvote;\n    }\n\n    if (erMorUfør) {\n        return '';\n    }\n\n    return StønadskontoType.Foreldrepenger;\n};\n\nconst getHvemSkalTaUttak = (\n    erDeltUttak: boolean,\n    forelder: Forelder,\n    periodenStarterFørFamdato: boolean,\n    erFarEllerMedmor: boolean,\n    annenForelderHarRettIEØS: boolean\n) => {\n    if (erDeltUttak) {\n        if ((periodenStarterFørFamdato || annenForelderHarRettIEØS) && erFarEllerMedmor) {\n            return Forelder.farMedmor;\n        }\n        if (annenForelderHarRettIEØS) {\n            return erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n        }\n\n        return '';\n    }\n\n    return forelder;\n};\n\nconst getInitialValues = (\n    erDeltUttak: boolean,\n    forelder: Forelder,\n    erMorUfør: boolean,\n    familiehendelsesdato: Date,\n    startdatoPeriode: Date | undefined,\n    erFarEllerMedmor: boolean,\n    annenForelderHarRettIEØS: boolean\n): PeriodeUttakFormData => {\n    const periodenStarterFørFamdato = startdatoPeriode\n        ? dayjs(startdatoPeriode).isBefore(familiehendelsesdato, 'day')\n        : false;\n    const hvemSkalTaUttak = getHvemSkalTaUttak(\n        erDeltUttak,\n        forelder,\n        periodenStarterFørFamdato,\n        erFarEllerMedmor,\n        annenForelderHarRettIEØS\n    );\n    const konto = getInitialKonto(erDeltUttak, erMorUfør, periodenStarterFørFamdato, erFarEllerMedmor);\n\n    return {\n        [PeriodeUttakFormField.fom]: undefined,\n        [PeriodeUttakFormField.tom]: undefined,\n        [PeriodeUttakFormField.konto]: konto,\n        [PeriodeUttakFormField.samtidigUttak]: YesOrNo.UNANSWERED,\n        [PeriodeUttakFormField.aktivitetskravMor]: '',\n        [PeriodeUttakFormField.aktivitetskravMorDokumentasjon]: [],\n        [PeriodeUttakFormField.overføringsårsak]: '',\n        [PeriodeUttakFormField.overføringsdokumentasjon]: [],\n        [PeriodeUttakFormField.skalHaGradering]: YesOrNo.UNANSWERED,\n        [PeriodeUttakFormField.stillingsprosent]: '',\n        [PeriodeUttakFormField.arbeidsformer]: '',\n        [PeriodeUttakFormField.erMorForSyk]: YesOrNo.UNANSWERED,\n        [PeriodeUttakFormField.erMorForSykDokumentasjon]: [],\n        [PeriodeUttakFormField.uttakRundtFødselÅrsak]: '',\n        [PeriodeUttakFormField.samtidigUttakProsent]: '',\n        [PeriodeUttakFormField.hvemSkalTaUttak]: hvemSkalTaUttak,\n        [PeriodeUttakFormField.ønskerFlerbarnsdager]: YesOrNo.UNANSWERED,\n    };\n};\n\nexport const cleanPeriodeUttakFormData = (\n    values: PeriodeUttakFormData,\n    visibility: QuestionVisibility<PeriodeUttakFormField, undefined>,\n    erDeltUttak: boolean,\n    forelder: Forelder,\n    erMorUfør: boolean,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    annenForelderHarRettIEØS: boolean\n): PeriodeUttakFormData => {\n    const initialValues = getInitialValues(\n        erDeltUttak,\n        forelder,\n        erMorUfør,\n        familiehendelsesdato,\n        values.fom,\n        erFarEllerMedmor,\n        annenForelderHarRettIEØS\n    );\n\n    const cleanedData: PeriodeUttakFormData = {\n        fom: values.fom,\n        tom: values.tom,\n        hvemSkalTaUttak: values.hvemSkalTaUttak,\n        aktivitetskravMor: visibility.isVisible(PeriodeUttakFormField.aktivitetskravMor)\n            ? values.aktivitetskravMor\n            : '',\n        aktivitetskravMorDokumentasjon: visibility.isVisible(PeriodeUttakFormField.aktivitetskravMorDokumentasjon)\n            ? values.aktivitetskravMorDokumentasjon\n            : [],\n        erMorForSyk: visibility.isVisible(PeriodeUttakFormField.erMorForSyk)\n            ? values.erMorForSyk\n            : initialValues.erMorForSyk,\n        erMorForSykDokumentasjon:\n            visibility.isVisible(PeriodeUttakFormField.erMorForSyk) ||\n            values.uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.morErForSyk\n                ? values.erMorForSykDokumentasjon\n                : initialValues.erMorForSykDokumentasjon,\n        uttakRundtFødselÅrsak: visibility.isVisible(PeriodeUttakFormField.uttakRundtFødselÅrsak)\n            ? values.uttakRundtFødselÅrsak\n            : initialValues.uttakRundtFødselÅrsak,\n        arbeidsformer: visibility.isVisible(PeriodeUttakFormField.arbeidsformer) ? values.arbeidsformer : '',\n        konto: values.konto,\n        overføringsdokumentasjon: visibility.isVisible(PeriodeUttakFormField.overføringsdokumentasjon)\n            ? values.overføringsdokumentasjon\n            : [],\n        overføringsårsak: visibility.isVisible(PeriodeUttakFormField.overføringsårsak)\n            ? values.overføringsårsak\n            : initialValues.overføringsårsak,\n        samtidigUttak: visibility.isVisible(PeriodeUttakFormField.samtidigUttak)\n            ? values.samtidigUttak\n            : initialValues.samtidigUttak,\n        samtidigUttakProsent: visibility.isVisible(PeriodeUttakFormField.samtidigUttakProsent)\n            ? values.samtidigUttakProsent\n            : initialValues.samtidigUttakProsent,\n        skalHaGradering: visibility.isVisible(PeriodeUttakFormField.skalHaGradering)\n            ? values.skalHaGradering\n            : initialValues.skalHaGradering,\n        stillingsprosent: visibility.isVisible(PeriodeUttakFormField.stillingsprosent)\n            ? values.stillingsprosent\n            : initialValues.stillingsprosent,\n        ønskerFlerbarnsdager: visibility.isVisible(PeriodeUttakFormField.ønskerFlerbarnsdager)\n            ? values.ønskerFlerbarnsdager\n            : initialValues.ønskerFlerbarnsdager,\n    };\n\n    return cleanedData;\n};\n\nconst getInitialÅrsakForUttakRundtFødsel = (\n    erMorForSyk: boolean | undefined,\n    ønskerSamtidigUttak: boolean | undefined,\n    erDeltUttak: boolean\n): UttakRundtFødselÅrsak | undefined => {\n    if (!erDeltUttak) {\n        return undefined;\n    }\n    if (erMorForSyk) {\n        return UttakRundtFødselÅrsak.morErForSyk;\n    }\n    if (ønskerSamtidigUttak) {\n        return UttakRundtFødselÅrsak.samtidigUttak;\n    }\n    return undefined;\n};\n\nexport const getPeriodeUttakFormInitialValues = (\n    periode: Periode,\n    erDeltUttak: boolean,\n    forelder: Forelder,\n    erMorUfør: boolean,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    annenForelderHarRettIEØS: boolean\n): PeriodeUttakFormData => {\n    const initialValues = getInitialValues(\n        erDeltUttak,\n        forelder,\n        erMorUfør,\n        familiehendelsesdato,\n        periode.tidsperiode.fom,\n        erFarEllerMedmor,\n        annenForelderHarRettIEØS\n    );\n\n    if (periode !== undefined) {\n        if (isUttaksperiode(periode)) {\n            return {\n                ...initialValues,\n                fom: periode.tidsperiode.fom,\n                tom: periode.tidsperiode.tom,\n                aktivitetskravMor: periode.morsAktivitetIPerioden || '',\n                aktivitetskravMorDokumentasjon: periode.vedlegg || [],\n                erMorForSyk: convertBooleanOrUndefinedToYesOrNo(periode.erMorForSyk),\n                erMorForSykDokumentasjon: periode.vedlegg || [],\n                hvemSkalTaUttak: periode.forelder || initialValues.hvemSkalTaUttak,\n                arbeidsformer:\n                    periode.arbeidsformer && periode.arbeidsformer.length > 0\n                        ? getFrilansSNEllerOrgnr(periode.arbeidsformer, periode.orgnumre)\n                        : '',\n                konto: periode.konto || initialValues.konto,\n                samtidigUttak: convertBooleanOrUndefinedToYesOrNo(periode.ønskerSamtidigUttak),\n                samtidigUttakProsent: periode.samtidigUttakProsent || '',\n                skalHaGradering: convertBooleanOrUndefinedToYesOrNo(periode.gradert),\n                stillingsprosent: periode.stillingsprosent || '',\n                ønskerFlerbarnsdager: convertBooleanOrUndefinedToYesOrNo(periode.ønskerFlerbarnsdager),\n                uttakRundtFødselÅrsak:\n                    getInitialÅrsakForUttakRundtFødsel(periode.erMorForSyk, periode.ønskerSamtidigUttak, erDeltUttak) ||\n                    initialValues.uttakRundtFødselÅrsak,\n            };\n        }\n\n        if (isOverføringsperiode(periode)) {\n            return {\n                ...initialValues,\n                hvemSkalTaUttak: periode.forelder,\n                konto: periode.konto,\n                fom: periode.tidsperiode.fom,\n                tom: periode.tidsperiode.tom,\n                overføringsårsak: periode.årsak,\n                overføringsdokumentasjon: periode.vedlegg || [],\n            };\n        }\n\n        if (isOppholdsperiode(periode)) {\n            return {\n                ...initialValues,\n                hvemSkalTaUttak: periode.forelder,\n                konto: getStønadskontoFromOppholdsårsak(periode.årsak),\n                fom: periode.tidsperiode.fom,\n                tom: periode.tidsperiode.tom,\n            };\n        }\n\n        return {\n            ...initialValues,\n            fom: periode.tidsperiode.fom,\n            tom: periode.tidsperiode.tom,\n        };\n    }\n\n    return {\n        ...initialValues,\n    };\n};\n\nconst getFrilansSNEllerOrgnr = (arbeidsformer: Arbeidsform[], orgnumre?: string[]): Arbeidsform => {\n    if (arbeidsformer.includes(Arbeidsform.frilans) || arbeidsformer.includes(Arbeidsform.selvstendignæringsdrivende)) {\n        return arbeidsformer[0];\n    }\n\n    return orgnumre![0] as Arbeidsform;\n};\n\nconst getArbeidsform = (arbeidsformer: Arbeidsform[]): Arbeidsform[] => {\n    return arbeidsformer.includes(Arbeidsform.frilans) || arbeidsformer.includes(Arbeidsform.selvstendignæringsdrivende)\n        ? arbeidsformer\n        : [Arbeidsform.arbeidstaker];\n};\n\nconst getOrgnummer = (arbeidsformer: Arbeidsform[]): string[] => {\n    return arbeidsformer.includes(Arbeidsform.frilans) || arbeidsformer.includes(Arbeidsform.selvstendignæringsdrivende)\n        ? []\n        : arbeidsformer;\n};\n\nconst getErArbeidstaker = (arbeidsformer: Arbeidsform[]): boolean => {\n    return (\n        arbeidsformer.includes(Arbeidsform.frilans) || arbeidsformer.includes(Arbeidsform.selvstendignæringsdrivende)\n    );\n};\n\nconst getSamtidigUttaksProsentWLB = (\n    ønskerGradering: boolean | undefined,\n    dekningsgrad: string | undefined\n): string => {\n    return ønskerGradering && dekningsgrad !== undefined\n        ? (100 - parseFloat(trimNumberValue(dekningsgrad))).toString()\n        : '100';\n};\n\nconst velgVedleggSomSkalBrukes = (\n    aktivitetskravMorDokumentasjon: Attachment[],\n    erMorForSykDokumentasjon: Attachment[]\n): Attachment[] => {\n    if (aktivitetskravMorDokumentasjon.length > 0) {\n        return aktivitetskravMorDokumentasjon;\n    }\n\n    return erMorForSykDokumentasjon;\n};\n\nconst skalVedleggPåkreves = (\n    morsAktivitetIPerioden: '' | MorsAktivitet | undefined,\n    erMorForSyk: boolean,\n    uttakRundtFødselÅrsak: UttakRundtFødselÅrsak | '' | undefined\n): boolean => {\n    if (\n        hasValue(morsAktivitetIPerioden) ||\n        erMorForSyk ||\n        (uttakRundtFødselÅrsak !== undefined && uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.morErForSyk)\n    ) {\n        return true;\n    }\n\n    return false;\n};\n\nconst getKontoVerdi = (\n    samtidigWLBUttakFørFødselFarMedmor: boolean,\n    erFarEllerMedmor: boolean,\n    erDeltUttak: boolean,\n    startDato: Date,\n    inputKonto: StønadskontoType,\n    familiehendelsesdato: Date\n): StønadskontoType => {\n    if (samtidigWLBUttakFørFødselFarMedmor) {\n        return StønadskontoType.Fedrekvote;\n    }\n    if (!erDeltUttak && erFarEllerMedmor && dayjs(startDato).isBefore(familiehendelsesdato, 'day')) {\n        return StønadskontoType.AktivitetsfriKvote;\n    }\n\n    return inputKonto;\n};\n\nexport const mapPeriodeUttakFormToPeriode = (\n    values: Partial<PeriodeUttakFormData>,\n    id: string,\n    type: Periodetype,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon\n): Periode => {\n    if (type === Periodetype.Overføring) {\n        const overføringTrengerDokumentasjon =\n            values.overføringsårsak !== OverføringÅrsakType.aleneomsorg &&\n            values.overføringsårsak !== OverføringÅrsakType.ikkeRettAnnenForelder;\n        const vedlegg = overføringTrengerDokumentasjon\n            ? lagSendSenereDokumentNårIngenAndreFinnes(\n                  values.overføringsdokumentasjon!,\n                  AttachmentType.OVERFØRING_KVOTE,\n                  Skjemanummer.DOK_OVERFØRING_FOR_SYK\n              )\n            : undefined;\n        const periode: Overføringsperiode = {\n            id,\n            type,\n            forelder: values.hvemSkalTaUttak as Forelder,\n            konto: values.konto as StønadskontoType,\n            tidsperiode: {\n                fom: values.fom!,\n                tom: values.tom!,\n            },\n            årsak: values.overføringsårsak as OverføringÅrsakType,\n            vedlegg,\n        };\n\n        return periode;\n    }\n\n    if (type === Periodetype.Opphold) {\n        const periode: Oppholdsperiode = {\n            id,\n            type,\n            forelder: values.hvemSkalTaUttak as Forelder,\n            årsak: getOppholdsÅrsakFromStønadskonto(values.konto as StønadskontoType)!,\n            tidsperiode: {\n                fom: values.fom!,\n                tom: values.tom!,\n            },\n        };\n\n        return periode;\n    }\n    const samtidigWLBUttakFørFødselFarMedmor = erSamtidigUttakFarMedmorFørFødselWLB(\n        values,\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        erDeltUttak,\n        situasjon\n    );\n    const samtidigWLBUttakFørFørsteSeksUkerFarMedmor = erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB(\n        values,\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        erDeltUttak,\n        situasjon\n    );\n    const attachmentType = hasValue(values.aktivitetskravMor)\n        ? AttachmentType.MORS_AKTIVITET_DOKUMENTASJON\n        : AttachmentType.UTSETTELSE_SYKDOM;\n\n    const skjemanummer = hasValue(values.aktivitetskravMor)\n        ? getMorsAktivitetSkjemanummer(values.aktivitetskravMor as MorsAktivitet)\n        : Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM;\n\n    const relevantVedlegg = velgVedleggSomSkalBrukes(\n        values.aktivitetskravMorDokumentasjon!,\n        values.erMorForSykDokumentasjon!\n    );\n\n    const morErForSyk =\n        hasValue(values.uttakRundtFødselÅrsak) && values.uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.morErForSyk\n            ? true\n            : convertYesOrNoOrUndefinedToBoolean(values.erMorForSyk);\n\n    const erSamtidigUttak =\n        values.uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.samtidigUttak || samtidigWLBUttakFørFødselFarMedmor\n            ? true\n            : convertYesOrNoOrUndefinedToBoolean(values.samtidigUttak);\n\n    const samtidigUttakProsentInputVerdi = hasValue(values.samtidigUttakProsent)\n        ? trimNumberValue(values.samtidigUttakProsent!)\n        : undefined;\n\n    const samtidigUttakProsentVerdi =\n        values.uttakRundtFødselÅrsak === UttakRundtFødselÅrsak.samtidigUttak || samtidigWLBUttakFørFødselFarMedmor\n            ? getSamtidigUttaksProsentWLB(\n                  convertYesOrNoOrUndefinedToBoolean(values.skalHaGradering),\n                  values.stillingsprosent\n              )\n            : samtidigUttakProsentInputVerdi;\n\n    const forelderVerdi = samtidigWLBUttakFørFørsteSeksUkerFarMedmor\n        ? Forelder.farMedmor\n        : (values.hvemSkalTaUttak as Forelder);\n\n    const kontoVerdi = getKontoVerdi(\n        samtidigWLBUttakFørFødselFarMedmor,\n        erFarEllerMedmor,\n        erDeltUttak,\n        values.fom!,\n        values.konto as StønadskontoType,\n        familiehendelsesdato\n    );\n\n    const periode: Uttaksperiode = {\n        id,\n        forelder: forelderVerdi,\n        konto: kontoVerdi,\n        tidsperiode: {\n            fom: values.fom!,\n            tom: values.tom!,\n        },\n        type: Periodetype.Uttak,\n        arbeidsformer: hasValue(values.arbeidsformer)\n            ? getArbeidsform([values.arbeidsformer as Arbeidsform])\n            : undefined,\n        morsAktivitetIPerioden: getMorsAktivitet(\n            values.aktivitetskravMor,\n            convertYesOrNoOrUndefinedToBoolean(values.erMorForSyk)\n        ),\n\n        erArbeidstaker: getErArbeidstaker(\n            hasValue(values.arbeidsformer) ? getArbeidsform([values.arbeidsformer as Arbeidsform]) : []\n        ),\n        erMorForSyk: morErForSyk,\n        gradert: convertYesOrNoOrUndefinedToBoolean(values.skalHaGradering),\n        harIkkeAktivitetskrav: values.konto === StønadskontoType.AktivitetsfriKvote ? true : undefined,\n        orgnumre: getOrgnummer(hasValue(values.arbeidsformer) ? [values.arbeidsformer as Arbeidsform] : []),\n        stillingsprosent: hasValue(values.stillingsprosent) ? trimNumberValue(values.stillingsprosent!) : undefined,\n        ønskerFlerbarnsdager: convertYesOrNoOrUndefinedToBoolean(values.ønskerFlerbarnsdager),\n        ønskerSamtidigUttak: erSamtidigUttak,\n        samtidigUttakProsent: samtidigUttakProsentVerdi,\n        vedlegg: skalVedleggPåkreves(\n            values.aktivitetskravMor,\n            convertYesOrNoOrUndefinedToBoolean(values.erMorForSyk) || false,\n            values.uttakRundtFødselÅrsak\n        )\n            ? lagSendSenereDokumentNårIngenAndreFinnes(relevantVedlegg, attachmentType, skjemanummer)\n            : [],\n    };\n\n    return periode;\n};\n","import { Block, hasValue, intlUtils } from '@navikt/fp-common';\nimport VeilederNormal from 'app/assets/VeilederNormal';\nimport FormikFileUploader from 'app/components/formik-file-uploader/FormikFileUploader';\nimport links from 'app/links/links';\nimport { Attachment } from 'app/types/Attachment';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { Skjemanummer } from 'app/types/Skjemanummer';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { getNavnGenitivEierform } from 'uttaksplan/utils/stønadskontoerUtils';\nimport { PeriodeUtsettelseFormField } from '../../periode-utsettelse-form/periodeUtsettelseFormConfig';\nimport { PeriodeUttakFormField } from '../../periode-uttak-form/periodeUttakFormConfig';\n\ninterface Props {\n    fieldName: PeriodeUttakFormField | PeriodeUtsettelseFormField;\n    vedleggFieldName:\n        | PeriodeUttakFormField.aktivitetskravMorDokumentasjon\n        | PeriodeUtsettelseFormField.morsAktivitetIPeriodenDokumentasjon;\n    FormComponents: any;\n    navnPåForeldre: NavnPåForeldre;\n    aktivitetskravMorValue: MorsAktivitet | '';\n    aktivitetskravVedlegg: Attachment[];\n}\n\nconst getVeilederTekst = (\n    intl: IntlShape,\n    morsAktivitetIPerioden: MorsAktivitet | '',\n    navnPåForeldre: NavnPåForeldre\n) => {\n    if (morsAktivitetIPerioden === MorsAktivitet.Arbeid) {\n        return (\n            <Normaltekst>\n                <FormattedMessage\n                    id=\"uttaksplan.morsAktivitet.veileder.arbeid\"\n                    values={{ navnMor: getNavnGenitivEierform(navnPåForeldre.mor, intl.locale) }}\n                />\n            </Normaltekst>\n        );\n    } else if (morsAktivitetIPerioden === MorsAktivitet.ArbeidOgUtdanning) {\n        const listData = [\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.arbeidOgUtdanning.punkt1'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.arbeidOgUtdanning.punkt2'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.arbeidOgUtdanning.punkt3'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.arbeidOgUtdanning.punkt4'),\n        ];\n\n        return (\n            <>\n                <Normaltekst>\n                    <FormattedMessage\n                        id=\"uttaksplan.morsAktivitet.veileder.arbeidOgUtdanning\"\n                        values={{ navnMor: navnPåForeldre.mor }}\n                    />\n                </Normaltekst>\n                <ul>\n                    {listData.map((listItem, index) => (\n                        <li key={`arbeidOgUtdanning${index}`}>{listItem}</li>\n                    ))}\n                </ul>\n            </>\n        );\n    } else if (morsAktivitetIPerioden === MorsAktivitet.Innlagt) {\n        return (\n            <Normaltekst>\n                <FormattedMessage\n                    id=\"uttaksplan.morsAktivitet.veileder.informasjonVedSykdomAnnenForelder\"\n                    values={{ navn: navnPåForeldre.mor }}\n                />\n            </Normaltekst>\n        );\n    } else if (morsAktivitetIPerioden === MorsAktivitet.Introduksjonsprogrammet) {\n        return (\n            <Normaltekst>\n                <FormattedMessage\n                    id=\"uttaksplan.morsAktivitet.veileder.introduksjonsprogrammet\"\n                    values={{ navnMor: navnPåForeldre.mor }}\n                />\n            </Normaltekst>\n        );\n    } else if (morsAktivitetIPerioden === MorsAktivitet.Kvalifiseringsprogrammet) {\n        return (\n            <Normaltekst>\n                <FormattedMessage\n                    id=\"uttaksplan.morsAktivitet.veileder.kvalifiseringsprogrammet\"\n                    values={{ navnMor: navnPåForeldre.mor }}\n                />\n            </Normaltekst>\n        );\n    } else if (morsAktivitetIPerioden === MorsAktivitet.TrengerHjelp) {\n        return (\n            <Normaltekst>\n                <FormattedMessage\n                    id=\"uttaksplan.morsAktivitet.veileder.informasjonVedSykdomAnnenForelder\"\n                    values={{ navn: navnPåForeldre.mor }}\n                />\n            </Normaltekst>\n        );\n    } else if (morsAktivitetIPerioden === MorsAktivitet.Utdanning) {\n        const listData = [\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.utdanning.punkt1'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.utdanning.punkt2'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.utdanning.punkt3'),\n            intlUtils(intl, 'uttaksplan.morsAktivitet.veileder.utdanning.punkt4'),\n        ];\n\n        return (\n            <>\n                <Normaltekst>\n                    <FormattedMessage\n                        id=\"uttaksplan.morsAktivitet.veileder.utdanning\"\n                        values={{ navnMor: navnPåForeldre.mor }}\n                    />\n                </Normaltekst>\n                <ul>\n                    {listData.map((listItem, index) => (\n                        <li key={`trengerhjelp${index}`}>{listItem}</li>\n                    ))}\n                </ul>\n            </>\n        );\n    } else {\n        return '';\n    }\n};\n\nconst renderOptions = (intl: IntlShape) => {\n    return Object.keys(MorsAktivitet)\n        .filter(\n            (aktivitetsid) =>\n                (MorsAktivitet as any)[aktivitetsid] !== MorsAktivitet.Uføre &&\n                (MorsAktivitet as any)[aktivitetsid] !== MorsAktivitet.IkkeOppgitt\n        )\n        .map((aktivitetsid) => (\n            <option value={(MorsAktivitet as any)[aktivitetsid]} key={(MorsAktivitet as any)[aktivitetsid]}>\n                {intlUtils(intl, `uttaksplan.morsAktivitet.${aktivitetsid}`)}\n            </option>\n        ));\n};\n\nexport const getMorsAktivitetSkjemanummer = (morsAktivitet?: MorsAktivitet): Skjemanummer => {\n    switch (morsAktivitet) {\n        case MorsAktivitet.Innlagt:\n            return Skjemanummer.DOK_INNLEGGELSE;\n        case MorsAktivitet.Kvalifiseringsprogrammet:\n            return Skjemanummer.BEKREFTELSE_DELTAR_KVALIFISERINGSPROGRAM;\n        case MorsAktivitet.Introduksjonsprogrammet:\n            return Skjemanummer.DOK_DELTAKELSE_I_INTRODUKSJONSPROGRAMMET;\n        case MorsAktivitet.ArbeidOgUtdanning:\n        case MorsAktivitet.Arbeid:\n        case MorsAktivitet.TrengerHjelp:\n            return Skjemanummer.DOK_MORS_UTDANNING_ARBEID_SYKDOM;\n        case MorsAktivitet.Utdanning:\n            return Skjemanummer.BEKREFTELSE_FRA_STUDIESTED;\n        default:\n            return Skjemanummer.ANNET;\n    }\n};\n\nconst AktivitetskravSpørsmål: FunctionComponent<Props> = ({\n    fieldName,\n    vedleggFieldName,\n    navnPåForeldre,\n    aktivitetskravMorValue,\n    aktivitetskravVedlegg,\n    FormComponents,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <FormComponents.Select\n                    name={fieldName}\n                    label={intlUtils(intl, 'uttaksplan.aktivitetskrav', { navnMor: navnPåForeldre.mor })}\n                    validate={(value: MorsAktivitet | '') => {\n                        if (!hasValue(value)) {\n                            return intlUtils(intl, 'uttaksplan.validering.aktivitetskrav');\n                        }\n                    }}\n                >\n                    <option value=\"\" />\n                    {renderOptions(intl)}\n                </FormComponents.Select>\n            </Block>\n            <Block padBottom=\"l\" visible={hasValue(aktivitetskravMorValue)}>\n                <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                    {getVeilederTekst(intl, aktivitetskravMorValue, navnPåForeldre)}\n                    <Normaltekst>\n                        <FormattedMessage\n                            id=\"uttaksplan.morsAktivitet.lesmer\"\n                            values={{\n                                a: (msg: any) => (\n                                    <a\n                                        href={links.morsAktivitetskrav}\n                                        className=\"lenke\"\n                                        rel=\"noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        {msg}\n                                    </a>\n                                ),\n                            }}\n                        />\n                    </Normaltekst>\n                </Veilederpanel>\n            </Block>\n            <Block padBottom=\"l\" visible={hasValue(aktivitetskravMorValue)}>\n                <FormikFileUploader\n                    label=\"Last opp dokumentasjon for mors aktivitet\"\n                    name={vedleggFieldName}\n                    attachmentType={AttachmentType.MORS_AKTIVITET_DOKUMENTASJON}\n                    skjemanummer={getMorsAktivitetSkjemanummer(aktivitetskravMorValue as MorsAktivitet)}\n                    attachments={aktivitetskravVedlegg}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default AktivitetskravSpørsmål;\n","import { bemUtils, Block, intlUtils, TidsperiodeDate } from '@navikt/fp-common';\nimport AnnenForelder, { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { Forelder } from 'app/types/Forelder';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { Hovedknapp, Knapp } from 'nav-frontend-knapper';\nimport React, { Dispatch, FunctionComponent, SetStateAction, useEffect, useState } from 'react';\nimport LinkButton from 'uttaksplan/components/link-button/LinkButton';\nimport TidsperiodeDisplay from 'uttaksplan/components/tidsperiode-display/TidsperiodeDisplay';\nimport UttakEndreTidsperiodeSpørsmål from 'uttaksplan/components/uttak-endre-tidsperiode-spørsmål/UttakEndreTidsperiodeSpørsmål';\nimport { Periode, Periodetype, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { getVelgbareStønadskontotyper } from 'uttaksplan/utils/stønadskontoerUtils';\nimport ErMorForSykSpørsmål from '../spørsmål/er-mor-for-syk/ErMorForSykSpørsmål';\nimport FlerbarnsdagerSpørsmål from '../spørsmål/flerbarnsdager/FlerbarnsdagerSpørsmål';\nimport HvemSkalHaUttakSpørsmål from '../spørsmål/hvem-skal-ha-uttak/HvemSkalHaUttakSpørsmål';\nimport HvilkenKontoSpørsmål from '../spørsmål/hvilken-konto/HvilkenKontoSpørsmål';\nimport UttakRundtFødselÅrsakSpørsmål from '../spørsmål/uttak-rundt-fødsel-årsak/UttakRundtFødselÅrsakSpørsmål';\nimport OverføringsårsakSpørsmål from '../spørsmål/overføringsårsak/OverføringsårsakSpørsmål';\nimport SamtidigUttakSpørsmål from '../spørsmål/samtidig-uttak/SamtidigUttakSpørsmål';\nimport SkalHaGraderingSpørsmål from '../spørsmål/skal-ha-gradering/SkalHaGraderingSpørsmål';\nimport { SubmitListener } from '../submit-listener/SubmitListener';\nimport TidsperiodeForm from '../tidsperiode-form/TidsperiodeForm';\nimport { PeriodeUttakFormComponents, PeriodeUttakFormData, PeriodeUttakFormField } from './periodeUttakFormConfig';\nimport {\n    periodeUttakFormQuestionsConfig,\n    skalViseWLBInfoOmSamtidigUttakRundtFødsel,\n} from './periodeUttakFormQuestionsConfig';\nimport {\n    cleanPeriodeUttakFormData,\n    getPeriodeUttakFormInitialValues,\n    mapPeriodeUttakFormToPeriode,\n} from './periodeUttakFormUtils';\nimport { FormattedMessage, IntlShape } from 'react-intl';\nimport { getSlettPeriodeTekst } from 'uttaksplan/utils/periodeUtils';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { andreAugust2022ReglerGjelder, formaterDatoKompakt, ISOStringToDate } from 'app/utils/dateUtils';\nimport AktivitetskravSpørsmål from '../spørsmål/aktivitetskrav/AktivitetskravSpørsmål';\nimport { guid } from 'nav-frontend-js-utils';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport VeilederNormal from 'app/assets/VeilederNormal';\nimport {\n    getFørsteUttaksdag2UkerFørFødsel,\n    getSisteUttaksdag6UkerEtterFødsel,\n    starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel,\n} from 'app/utils/wlbUtils';\n\nimport './periodeUttakForm.less';\n\ninterface Props {\n    periode: Periode;\n    erEndringssøknad: boolean;\n    familiehendelsesdato: Date;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    handleAddPeriode?: (nyPeriode: Periode, familiehendelsedato: Date) => void;\n    setNyPeriodeFormIsVisible?: Dispatch<SetStateAction<boolean>>;\n    toggleIsOpen?: (id: string) => void;\n    handleDeletePeriode?: (periodeId: string) => void;\n    isNyPeriode?: boolean;\n    erMorUfør: boolean;\n    setPeriodeErGyldig: Dispatch<SetStateAction<boolean>>;\n    termindato: Date | undefined;\n    morHarRett: boolean;\n    antallBarn: number;\n    utsettelserIPlan: Utsettelsesperiode[];\n    intl: IntlShape;\n}\n\nconst periodenGjelderAnnenForelder = (erFarEllerMedmor: boolean, forelder: Forelder): boolean => {\n    return (erFarEllerMedmor && forelder === Forelder.farMedmor) || (!erFarEllerMedmor && forelder === Forelder.mor)\n        ? false\n        : true;\n};\n\nconst erUttakAvAnnenForeldersKvote = (konto: StønadskontoType | '', søkerErFarEllerMedmor: boolean): boolean => {\n    return (\n        (konto === StønadskontoType.Mødrekvote && søkerErFarEllerMedmor === true) ||\n        (konto === StønadskontoType.Fedrekvote && søkerErFarEllerMedmor === false)\n    );\n};\n\nconst getPeriodeType = (\n    periodenGjelder: Forelder | '',\n    erFarEllerMedmor: boolean,\n    konto: StønadskontoType | '',\n    familiehendelsedato: Date,\n    termindato: Date | undefined,\n    tidsperiode: TidsperiodeDate\n): Periodetype => {\n    if (\n        erFarEllerMedmor &&\n        erUttakAvAnnenForeldersKvote(konto, erFarEllerMedmor) &&\n        starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(tidsperiode, familiehendelsedato, termindato)\n    ) {\n        return Periodetype.Overføring;\n    }\n    if (periodenGjelder === '' || konto === '') {\n        return Periodetype.Uttak;\n    }\n\n    if (periodenGjelderAnnenForelder(erFarEllerMedmor, periodenGjelder)) {\n        return Periodetype.Opphold;\n    }\n\n    if (erUttakAvAnnenForeldersKvote(konto, erFarEllerMedmor)) {\n        return Periodetype.Overføring;\n    }\n\n    return Periodetype.Uttak;\n};\n\nconst PeriodeUttakForm: FunctionComponent<Props> = ({\n    familiehendelsesdato,\n    periode,\n    handleUpdatePeriode,\n    stønadskontoer,\n    navnPåForeldre,\n    annenForelder,\n    toggleIsOpen,\n    arbeidsforhold,\n    handleDeletePeriode,\n    setNyPeriodeFormIsVisible,\n    handleAddPeriode,\n    isNyPeriode = false,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    erMorUfør,\n    erEndringssøknad,\n    setPeriodeErGyldig,\n    termindato,\n    morHarRett,\n    antallBarn,\n    utsettelserIPlan,\n    intl,\n}) => {\n    const [tidsperiodeIsOpen, setTidsperiodeIsOpen] = useState(false);\n    const bem = bemUtils('periodeUttakForm');\n\n    useEffect(() => {\n        return () => {\n            setPeriodeErGyldig(true);\n        };\n    }, [setPeriodeErGyldig]);\n\n    const toggleVisTidsperiode = () => {\n        setTidsperiodeIsOpen(!tidsperiodeIsOpen);\n    };\n    const forelder = erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n    const annenForelderHarRettIEØS =\n        isAnnenForelderOppgitt(annenForelder) && !!annenForelder.harRettPåForeldrepengerIEØS;\n\n    const handleCleanup = (\n        values: PeriodeUttakFormData,\n        visibility: QuestionVisibility<PeriodeUttakFormField, undefined>\n    ): PeriodeUttakFormData => {\n        return cleanPeriodeUttakFormData(\n            values,\n            visibility,\n            erDeltUttak,\n            forelder,\n            erMorUfør,\n            familiehendelsesdato,\n            erFarEllerMedmor,\n            annenForelderHarRettIEØS\n        );\n    };\n    const erDeltUttakINorge = erDeltUttak && !annenForelderHarRettIEØS;\n    const velgbareStønadskontoer = getVelgbareStønadskontotyper(stønadskontoer);\n    const navnPåAnnenForelder =\n        isAnnenForelderOppgitt(annenForelder) && annenForelder.fornavn !== undefined && annenForelder.fornavn !== ''\n            ? annenForelder.fornavn\n            : intlUtils(intl, 'annen.forelder');\n\n    const startDatoPeriodeRundtFødselFarMedmor =\n        erFarEllerMedmor && andreAugust2022ReglerGjelder(familiehendelsesdato)\n            ? getFørsteUttaksdag2UkerFørFødsel(familiehendelsesdato, termindato)\n            : undefined;\n    const sluttDatoPeriodeRundtFødselFarMedmor =\n        erFarEllerMedmor && andreAugust2022ReglerGjelder(familiehendelsesdato)\n            ? getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato)\n            : undefined;\n\n    const erFarMedmorOgHarAleneomsorg = erFarEllerMedmor && erAleneOmOmsorg;\n\n    return (\n        <PeriodeUttakFormComponents.FormikWrapper\n            initialValues={getPeriodeUttakFormInitialValues(\n                periode,\n                erDeltUttak,\n                forelder,\n                erMorUfør,\n                familiehendelsesdato,\n                erFarEllerMedmor,\n                annenForelderHarRettIEØS\n            )}\n            enableReinitialize={false}\n            onSubmit={(values: Partial<PeriodeUttakFormData>) => {\n                if (isNyPeriode) {\n                    const periodetype = getPeriodeType(\n                        values.hvemSkalTaUttak!,\n                        erFarEllerMedmor,\n                        values.konto!,\n                        familiehendelsesdato,\n                        termindato,\n                        { fom: values.fom, tom: values.tom } as TidsperiodeDate\n                    );\n                    setNyPeriodeFormIsVisible!(false);\n                    handleAddPeriode!(\n                        mapPeriodeUttakFormToPeriode(\n                            values,\n                            guid(),\n                            periodetype,\n                            familiehendelsesdato,\n                            erFarEllerMedmor,\n                            erDeltUttak,\n                            situasjon\n                        ),\n                        familiehendelsesdato\n                    );\n                } else {\n                    return handleUpdatePeriode(\n                        mapPeriodeUttakFormToPeriode(\n                            values,\n                            periode.id,\n                            getPeriodeType(\n                                values.hvemSkalTaUttak!,\n                                erFarEllerMedmor,\n                                values.konto!,\n                                familiehendelsesdato,\n                                termindato,\n                                { fom: values.fom, tom: values.tom } as TidsperiodeDate\n                            ),\n                            familiehendelsesdato,\n                            erFarEllerMedmor,\n                            erDeltUttak,\n                            situasjon\n                        ),\n                        familiehendelsesdato\n                    );\n                }\n            }}\n            renderForm={({ setFieldValue, values, isValid }) => {\n                const periodetype = getPeriodeType(\n                    values.hvemSkalTaUttak!,\n                    erFarEllerMedmor,\n                    values.konto!,\n                    familiehendelsesdato,\n                    termindato,\n                    { fom: values.fom, tom: values.tom } as TidsperiodeDate\n                );\n                setPeriodeErGyldig(isValid);\n\n                const visibility = periodeUttakFormQuestionsConfig.getVisbility({\n                    values,\n                    regelProps: {\n                        annenForelder,\n                        erAleneOmOmsorg,\n                        erDeltUttakINorge,\n                        erFarEllerMedmor,\n                        erFlerbarnssøknad,\n                        familiehendelsesdato,\n                        periodetype,\n                        situasjon,\n                        termindato,\n                        morHarRett,\n                        stønadskontoer,\n                        antallBarn,\n                    },\n                });\n\n                return (\n                    <>\n                        <Block visible={!isValidTidsperiode({ fom: values.fom!, tom: values.tom! })} padBottom=\"l\">\n                            <TidsperiodeForm\n                                tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                familiehendelsesdato={familiehendelsesdato}\n                                periode={periode}\n                                onBekreft={(values) => {\n                                    setFieldValue(PeriodeUttakFormField.fom, ISOStringToDate(values.fom));\n                                    setFieldValue(PeriodeUttakFormField.tom, ISOStringToDate(values.tom));\n                                }}\n                                ugyldigeTidsperioder={undefined}\n                                utsettelserIPlan={utsettelserIPlan}\n                                termindato={termindato}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                morHarRett={morHarRett}\n                                situasjon={situasjon}\n                                erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                            />\n                        </Block>\n                        <PeriodeUttakFormComponents.Form includeButtons={false}>\n                            {!isNyPeriode && <SubmitListener cleanup={() => handleCleanup(values, visibility)} />}\n\n                            <Block visible={isValidTidsperiode({ fom: values.fom!, tom: values.tom! })} padBottom=\"l\">\n                                <TidsperiodeDisplay\n                                    tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                    toggleVisTidsperiode={toggleVisTidsperiode}\n                                />\n                                <UttakEndreTidsperiodeSpørsmål\n                                    periode={periode}\n                                    familiehendelsesdato={familiehendelsesdato}\n                                    ugyldigeTidsperioder={undefined}\n                                    utsettelserIPlan={utsettelserIPlan}\n                                    onBekreft={(values) => {\n                                        toggleVisTidsperiode();\n                                        setFieldValue(PeriodeUttakFormField.fom, ISOStringToDate(values.fom));\n                                        setFieldValue(PeriodeUttakFormField.tom, ISOStringToDate(values.tom));\n                                    }}\n                                    changeTidsperiode={(values) => {\n                                        setFieldValue(PeriodeUttakFormField.fom, values.fom);\n                                        setFieldValue(PeriodeUttakFormField.tom, values.tom);\n                                    }}\n                                    tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                    onAvbryt={() => toggleVisTidsperiode()}\n                                    visible={tidsperiodeIsOpen}\n                                    termindato={termindato}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    morHarRett={morHarRett}\n                                    situasjon={situasjon}\n                                    erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(PeriodeUttakFormField.hvemSkalTaUttak)}>\n                                <HvemSkalHaUttakSpørsmål\n                                    fieldName={PeriodeUttakFormField.hvemSkalTaUttak}\n                                    erFarEllerMedmor={false}\n                                    navnPåForeldre={navnPåForeldre}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(PeriodeUttakFormField.konto)}>\n                                <HvilkenKontoSpørsmål\n                                    fieldName={PeriodeUttakFormField.konto}\n                                    velgbareStønadskontoer={velgbareStønadskontoer}\n                                    erOppholdsperiode={false}\n                                    navnPåForeldre={navnPåForeldre}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    situasjon={situasjon}\n                                    erAleneOmOmsorg={erAleneOmOmsorg}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(PeriodeUttakFormField.overføringsårsak)}>\n                                <OverføringsårsakSpørsmål\n                                    vedlegg={values.overføringsdokumentasjon}\n                                    navnAnnenForelder={navnPåAnnenForelder!}\n                                    erEndringssøknad={erEndringssøknad}\n                                    valgtOverføringsårsak={values.overføringsårsak}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(PeriodeUttakFormField.uttakRundtFødselÅrsak)}\n                            >\n                                <UttakRundtFødselÅrsakSpørsmål\n                                    fieldName={PeriodeUttakFormField.uttakRundtFødselÅrsak}\n                                    uttakRundtFødselÅrsak={values.uttakRundtFødselÅrsak}\n                                    navnMor={navnPåForeldre.mor}\n                                    vedlegg={values.erMorForSykDokumentasjon}\n                                />\n                            </Block>\n                            {startDatoPeriodeRundtFødselFarMedmor !== undefined &&\n                                sluttDatoPeriodeRundtFødselFarMedmor !== undefined && (\n                                    <Block\n                                        padBottom=\"l\"\n                                        visible={skalViseWLBInfoOmSamtidigUttakRundtFødsel(\n                                            values,\n                                            familiehendelsesdato,\n                                            erFarEllerMedmor,\n                                            erDeltUttak,\n                                            situasjon\n                                        )}\n                                    >\n                                        <Veilederpanel\n                                            fargetema=\"normal\"\n                                            svg={<VeilederNormal transparentBackground={true} />}\n                                        >\n                                            <FormattedMessage\n                                                id=\"uttaksplan.samtidigUttakVeileder\"\n                                                values={{\n                                                    fomDato: formaterDatoKompakt(startDatoPeriodeRundtFødselFarMedmor),\n                                                    tomDato: formaterDatoKompakt(sluttDatoPeriodeRundtFødselFarMedmor),\n                                                }}\n                                            />\n                                        </Veilederpanel>\n                                    </Block>\n                                )}\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(PeriodeUttakFormField.ønskerFlerbarnsdager)}\n                            >\n                                <FlerbarnsdagerSpørsmål fieldName={PeriodeUttakFormField.ønskerFlerbarnsdager} />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(PeriodeUttakFormField.erMorForSyk)}>\n                                <ErMorForSykSpørsmål\n                                    fieldName={PeriodeUttakFormField.erMorForSyk}\n                                    erMorForSyk={values.erMorForSyk}\n                                    navnMor={navnPåForeldre.mor}\n                                    vedlegg={values.erMorForSykDokumentasjon}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(PeriodeUttakFormField.samtidigUttak)}>\n                                <SamtidigUttakSpørsmål\n                                    erFlerbarnssøknad={erFlerbarnssøknad}\n                                    navnPåForeldre={navnPåForeldre}\n                                    navnPåAnnenForelder={navnPåAnnenForelder}\n                                    samtidigUttakProsentVisible={visibility.isVisible(\n                                        PeriodeUttakFormField.samtidigUttakProsent\n                                    )}\n                                    familiehendelsesdato={familiehendelsesdato}\n                                    situasjon={situasjon}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(PeriodeUttakFormField.aktivitetskravMor)}\n                            >\n                                <AktivitetskravSpørsmål\n                                    fieldName={PeriodeUttakFormField.aktivitetskravMor}\n                                    navnPåForeldre={navnPåForeldre}\n                                    aktivitetskravMorValue={values.aktivitetskravMor}\n                                    aktivitetskravVedlegg={values.aktivitetskravMorDokumentasjon}\n                                    FormComponents={PeriodeUttakFormComponents}\n                                    vedleggFieldName={PeriodeUttakFormField.aktivitetskravMorDokumentasjon}\n                                />\n                            </Block>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(PeriodeUttakFormField.skalHaGradering)}>\n                                <SkalHaGraderingSpørsmål\n                                    graderingsprosentVisible={visibility.isVisible(\n                                        PeriodeUttakFormField.stillingsprosent\n                                    )}\n                                    arbeidsforhold={arbeidsforhold}\n                                    tidsperiode={{ fom: values.fom!, tom: values.tom! }}\n                                />\n                            </Block>\n                            <Block\n                                visible={\n                                    !isNyPeriode && handleDeletePeriode !== undefined && toggleIsOpen !== undefined\n                                }\n                            >\n                                <div className={bem.element('knapperad-endre')}>\n                                    <Knapp htmlType=\"button\" onClick={() => toggleIsOpen!(periode.id)}>\n                                        <FormattedMessage id=\"uttaksplan.lukk\" />\n                                    </Knapp>\n                                    <div className={bem.element('slettPeriodeWrapper')}>\n                                        <LinkButton\n                                            onClick={() => handleDeletePeriode!(periode.id)}\n                                            className={bem.element('slettPeriode')}\n                                        >\n                                            <FormattedMessage id={getSlettPeriodeTekst(periode.type)} />\n                                        </LinkButton>\n                                    </div>\n                                </div>\n                            </Block>\n                            <Block\n                                visible={\n                                    isNyPeriode &&\n                                    setNyPeriodeFormIsVisible !== undefined &&\n                                    handleAddPeriode !== undefined\n                                }\n                            >\n                                <div className={bem.element('knapperad-legg-til')}>\n                                    <Knapp htmlType=\"button\" onClick={() => setNyPeriodeFormIsVisible!(false)}>\n                                        <FormattedMessage id=\"uttaksplan.avbryt\" />\n                                    </Knapp>\n                                    {visibility.areAllQuestionsAnswered() ? (\n                                        <Hovedknapp>\n                                            <FormattedMessage id=\"uttaksplan.leggTil\" />\n                                        </Hovedknapp>\n                                    ) : null}\n                                </div>\n                            </Block>\n                        </PeriodeUttakFormComponents.Form>\n                    </>\n                );\n            }}\n        />\n    );\n};\n\nexport default PeriodeUttakForm;\n","import { intlUtils, Tidsperiode, TidsperiodeDate } from '@navikt/fp-common';\nimport Modal from 'nav-frontend-modal';\nimport { getTidsperiode, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { getUkerOgDagerFromDager } from 'app/utils/dateUtils';\nimport UkerDagerTeller from './../uker-dager-teller/UkerDagerTeller';\nimport dayjs from 'dayjs';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport { isForeldrepengerFørFødselUttaksperiode, Periode, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport TidsperiodeForm, { TidsperiodeFormValues } from '../uttaks-forms/tidsperiode-form/TidsperiodeForm';\nimport { Situasjon } from 'app/types/Situasjon';\n\ninterface Props {\n    periode: Periode;\n    tidsperiode: TidsperiodeDate;\n    familiehendelsesdato: Date;\n    ugyldigeTidsperioder: Tidsperiode[] | undefined;\n    utsettelserIPlan: Utsettelsesperiode[];\n    visible: boolean;\n    erFarEllerMedmor: boolean;\n    morHarRett: boolean;\n    situasjon: Situasjon;\n    erFarMedmorOgHarAleneomsorg: boolean;\n    onAvbryt: () => void;\n    onBekreft: (tidsperiode: TidsperiodeFormValues) => void;\n    changeTidsperiode: (tidsperiode: Partial<TidsperiodeDate>) => void;\n}\n\nconst UtsettelseEndreTidsperiodeSpørsmål: React.FunctionComponent<Props> = ({\n    onBekreft,\n    onAvbryt,\n    changeTidsperiode,\n    visible,\n    periode,\n    tidsperiode,\n    familiehendelsesdato,\n    ugyldigeTidsperioder,\n    utsettelserIPlan,\n    erFarEllerMedmor,\n    morHarRett,\n    situasjon,\n    erFarMedmorOgHarAleneomsorg,\n}) => {\n    const intl = useIntl();\n    const erForeldrepengerFørFødsel = isForeldrepengerFørFødselUttaksperiode(periode);\n    const initialMonth = erForeldrepengerFørFødsel ? familiehendelsesdato : undefined;\n    const varighetIDager =\n        tidsperiode &&\n        tidsperiode.fom &&\n        tidsperiode.tom &&\n        dayjs(tidsperiode.fom).isSameOrBefore(tidsperiode.tom, 'day')\n            ? Tidsperioden({\n                  fom: tidsperiode.fom,\n                  tom: tidsperiode.tom,\n              }).getAntallUttaksdager()\n            : undefined;\n    const { uker, dager } = varighetIDager ? getUkerOgDagerFromDager(Math.abs(varighetIDager)) : { uker: 0, dager: 0 };\n    const handleOnSubmit = (values: TidsperiodeFormValues) => {\n        onBekreft(values);\n    };\n\n    const getDagValue = (uker: number, dager: number): number => {\n        if (dager >= 5) {\n            return 0;\n        }\n\n        if (uker === 0 && dager === 0) {\n            return 1;\n        }\n\n        return dager;\n    };\n\n    return (\n        <>\n            <Modal isOpen={visible} closeButton={true} onRequestClose={onAvbryt} contentLabel=\"Test\">\n                <TidsperiodeForm\n                    familiehendelsesdato={familiehendelsesdato}\n                    onBekreft={handleOnSubmit}\n                    periode={periode}\n                    tidsperiode={tidsperiode}\n                    ugyldigeTidsperioder={ugyldigeTidsperioder}\n                    utsettelserIPlan={utsettelserIPlan}\n                    initialMonth={initialMonth}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    morHarRett={morHarRett}\n                    situasjon={situasjon}\n                    erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                />\n            </Modal>\n            <UkerDagerTeller\n                ukeLegend={intlUtils(intl, 'uker.label')}\n                dagLegend={intlUtils(intl, 'dager.label')}\n                ukeStepper={{\n                    value: uker !== undefined ? uker : 0,\n                    min: 0,\n                    max: 100,\n                    onChange: (nyUker: number) => {\n                        const date = tidsperiode.fom;\n                        if (date) {\n                            changeTidsperiode({\n                                fom: date,\n                                tom: getTidsperiode(date, Math.min(nyUker, 200) * 5 + getDagValue(nyUker, dager)).tom,\n                            });\n                        }\n                    },\n                    increaseAriaLabel: 'Øk antall uker med en uke',\n                    decreaseAriaLabel: 'Mink antall uker med en uke',\n                }}\n                dagStepper={{\n                    value: getDagValue(uker, dager),\n                    min: uker === 0 ? 1 : 0,\n                    max: 5,\n                    onChange: (nyDager: number) => {\n                        const date = tidsperiode.fom;\n                        const ekstraUke = nyDager === 5 ? 1 : 0;\n\n                        if (date) {\n                            changeTidsperiode({\n                                fom: date,\n                                tom: getTidsperiode(date, (uker + ekstraUke) * 5 + getDagValue(uker, nyDager)).tom,\n                            });\n                        }\n                    },\n                    increaseAriaLabel: 'Øk antall dager med en dag',\n                    decreaseAriaLabel: 'Mink antall dager med en dag',\n                }}\n            />\n        </>\n    );\n};\n\nexport default UtsettelseEndreTidsperiodeSpørsmål;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Attachment } from 'app/types/Attachment';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { Arbeidsform } from 'uttaksplan/types/Periode';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\n\nexport enum PeriodeUtsettelseFormField {\n    fom = 'fom',\n    tom = 'tom',\n    årsak = 'årsak',\n    vedlegg = 'vedlegg',\n    morsAktivitetIPeriodenDokumentasjon = 'morsAktivitetIPeriodenDokumentasjon',\n    morsAktivitetIPerioden = 'morsAktivitetIPerioden',\n    bekrefterArbeidIPerioden = 'bekrefterArbeidIPerioden',\n}\n\nexport type ArbeidUnderUtsettelse = Arbeidsform | string;\n\nexport interface PeriodeUtsettelseFormData {\n    [PeriodeUtsettelseFormField.fom]: Date | undefined;\n    [PeriodeUtsettelseFormField.tom]: Date | undefined;\n    [PeriodeUtsettelseFormField.årsak]: UtsettelseÅrsakType | '';\n    [PeriodeUtsettelseFormField.morsAktivitetIPerioden]: MorsAktivitet | '';\n    [PeriodeUtsettelseFormField.morsAktivitetIPeriodenDokumentasjon]: Attachment[];\n    [PeriodeUtsettelseFormField.vedlegg]: Attachment[];\n    [PeriodeUtsettelseFormField.bekrefterArbeidIPerioden]: boolean | undefined;\n}\n\nexport const PeriodeUtsettelseFormComponents = getTypedFormComponents<\n    PeriodeUtsettelseFormField,\n    PeriodeUtsettelseFormData,\n    string\n>();\n","import { Attachment } from 'app/types/Attachment';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { Forelder } from 'app/types/Forelder';\nimport { isUtsettelsePgaArbeid, isUtsettelsesperiode, Periode, Periodetype } from 'uttaksplan/types/Periode';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport { PeriodeUtsettelseFormData, PeriodeUtsettelseFormField } from './periodeUtsettelseFormConfig';\n\nexport const initialValues: PeriodeUtsettelseFormData = {\n    [PeriodeUtsettelseFormField.fom]: undefined,\n    [PeriodeUtsettelseFormField.tom]: undefined,\n    [PeriodeUtsettelseFormField.årsak]: '',\n    [PeriodeUtsettelseFormField.morsAktivitetIPerioden]: '',\n    [PeriodeUtsettelseFormField.morsAktivitetIPeriodenDokumentasjon]: [],\n    [PeriodeUtsettelseFormField.vedlegg]: [],\n    [PeriodeUtsettelseFormField.bekrefterArbeidIPerioden]: undefined,\n};\n\nconst getFormStateFraVedlegg = (vedlegg: Attachment[], gjelderMorsAktivitet: boolean): Attachment[] => {\n    return gjelderMorsAktivitet\n        ? vedlegg.filter((v) => v.type === AttachmentType.MORS_AKTIVITET_DOKUMENTASJON)\n        : vedlegg.filter((v) => v.type !== AttachmentType.MORS_AKTIVITET_DOKUMENTASJON);\n};\n\nexport const getPeriodeUtsettelseFormInitialValues = (periode: Periode): PeriodeUtsettelseFormData => {\n    if (isUtsettelsesperiode(periode)) {\n        return {\n            ...initialValues,\n            fom: periode.tidsperiode.fom,\n            tom: periode.tidsperiode.tom,\n            årsak: periode.årsak,\n            morsAktivitetIPerioden: periode.morsAktivitetIPerioden ? periode.morsAktivitetIPerioden : '',\n            morsAktivitetIPeriodenDokumentasjon: getFormStateFraVedlegg(periode.vedlegg || [], true),\n            vedlegg: getFormStateFraVedlegg(periode.vedlegg || [], false),\n            bekrefterArbeidIPerioden: isUtsettelsePgaArbeid(periode) ? periode.bekrefterArbeidIPerioden : undefined,\n        };\n    }\n\n    return initialValues;\n};\n\nconst getVedleggFraFormState = (\n    morsAktivitetIPeriodenDokumentasjon: Attachment[],\n    vedlegg: Attachment[]\n): Attachment[] => {\n    return [...morsAktivitetIPeriodenDokumentasjon, ...vedlegg];\n};\n\nexport const mapPeriodeUtsettelseFormToPeriode = (\n    values: Partial<PeriodeUtsettelseFormData>,\n    id: string,\n    erFarEllerMedmor: boolean\n): Periode => {\n    return {\n        id,\n        type: Periodetype.Utsettelse,\n        årsak: values.årsak as UtsettelseÅrsakType,\n        morsAktivitetIPerioden: values.morsAktivitetIPerioden ? values.morsAktivitetIPerioden : undefined,\n        forelder: erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor,\n        tidsperiode: {\n            fom: values.fom!,\n            tom: values.tom!,\n        },\n        vedlegg: getVedleggFraFormState(values.morsAktivitetIPeriodenDokumentasjon || [], values.vedlegg || []),\n        bekrefterArbeidIPerioden: values.bekrefterArbeidIPerioden,\n        erArbeidstaker: !!values.bekrefterArbeidIPerioden,\n    };\n};\n\nexport const cleanupPeriodeUtsettelseFormData = (values: PeriodeUtsettelseFormData): PeriodeUtsettelseFormData => {\n    if (values.årsak !== UtsettelseÅrsakType.Arbeid) {\n        return {\n            ...values,\n            bekrefterArbeidIPerioden: undefined,\n        };\n    }\n    return values;\n};\n","import { hasValue } from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { PeriodeUtsettelseFormData, PeriodeUtsettelseFormField } from './periodeUtsettelseFormConfig';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\n\ninterface PeriodeUtsettelseFormConfigPayload {\n    values: PeriodeUtsettelseFormData;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n}\n\nconst PeriodeUtsettelseFormConfig: QuestionConfig<PeriodeUtsettelseFormConfigPayload, PeriodeUtsettelseFormField> = {\n    [PeriodeUtsettelseFormField.fom]: {\n        isAnswered: ({ values }) => hasValue(values.fom),\n        isIncluded: () => true,\n    },\n    [PeriodeUtsettelseFormField.tom]: {\n        isAnswered: ({ values }) => hasValue(values.tom),\n        isIncluded: () => true,\n    },\n    [PeriodeUtsettelseFormField.årsak]: {\n        isAnswered: ({ values }) => hasValue(values.årsak),\n        isIncluded: () => true,\n        visibilityFilter: ({ values }) => isValidTidsperiode({ fom: values.fom, tom: values.tom }),\n    },\n    [PeriodeUtsettelseFormField.bekrefterArbeidIPerioden]: {\n        isAnswered: ({ values }) =>\n            values.årsak !== UtsettelseÅrsakType.Arbeid ||\n            (hasValue(values.bekrefterArbeidIPerioden) && values.bekrefterArbeidIPerioden !== undefined),\n        isIncluded: ({ values }) => hasValue(values.årsak) && values.årsak === UtsettelseÅrsakType.Arbeid,\n        visibilityFilter: ({ values }) => hasValue(values.årsak),\n    },\n    [PeriodeUtsettelseFormField.vedlegg]: {\n        isAnswered: () => true,\n        isIncluded: ({ values }) => hasValue(values.årsak),\n        visibilityFilter: ({ values }) => hasValue(values.årsak),\n    },\n    [PeriodeUtsettelseFormField.morsAktivitetIPerioden]: {\n        isAnswered: ({ values, søkerErFarEllerMedmorOgKunDeHarRett }) =>\n            hasValue(values.morsAktivitetIPerioden) || !søkerErFarEllerMedmorOgKunDeHarRett,\n        isIncluded: ({ søkerErFarEllerMedmorOgKunDeHarRett }) => søkerErFarEllerMedmorOgKunDeHarRett,\n        visibilityFilter: ({ values }) => hasValue(values.årsak),\n    },\n};\n\nexport const periodeUtsettelseFormQuestionsConfig = Questions<\n    PeriodeUtsettelseFormConfigPayload,\n    PeriodeUtsettelseFormField\n>(PeriodeUtsettelseFormConfig);\n","import { Block, intlUtils } from '@navikt/fp-common';\nimport VeilederNormal from 'app/assets/VeilederNormal';\nimport FormikFileUploader from 'app/components/formik-file-uploader/FormikFileUploader';\nimport { Attachment } from 'app/types/Attachment';\nimport { AttachmentType } from 'app/types/AttachmentType';\nimport { Skjemanummer } from 'app/types/Skjemanummer';\nimport { RadioProps } from 'nav-frontend-skjema';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport {\n    PeriodeUtsettelseFormComponents,\n    PeriodeUtsettelseFormField,\n} from '../../periode-utsettelse-form/periodeUtsettelseFormConfig';\n\ninterface Props {\n    periodenErKunHelligdager: boolean;\n    skalViseGamleUtsettelseÅrsaker: boolean;\n    erFarEllerMedmor: boolean;\n    tidsperiodenErInnenforFørsteSeksUker: boolean;\n    utsettelseårsak: UtsettelseÅrsakType | '';\n    vedlegg: Attachment[];\n    erMorUfør: boolean;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n}\n\nconst getUtsettelseÅrsakOptions = (\n    intl: IntlShape,\n    periodenErKunHelligdager: boolean,\n    skalViseGamleUtsettelseÅrsaker: boolean,\n    erFarEllerMedmor: boolean,\n    tidsperiodenErInnenforFørsteSeksUker: boolean,\n    erMorUfør: boolean,\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean\n) => {\n    const allRadios: RadioProps[] = [\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.jegskalhaferie'),\n            value: UtsettelseÅrsakType.Ferie,\n            disabled: periodenErKunHelligdager === true,\n            name: 'utsettelseÅrsak',\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.jegskaljobbeheltid'),\n            value: UtsettelseÅrsakType.Arbeid,\n            name: 'utsettelseÅrsak',\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.pgasykdom'),\n            value: UtsettelseÅrsakType.Sykdom,\n            name: 'utsettelseÅrsak',\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.institusjonBarn'),\n            value: UtsettelseÅrsakType.InstitusjonBarnet,\n            name: 'utsettelseÅrsak',\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.institusjonSøker'),\n            value: UtsettelseÅrsakType.InstitusjonSøker,\n            name: 'utsettelseÅrsak',\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.hv_øvelse'),\n            value: UtsettelseÅrsakType.HvØvelse,\n            name: 'utsettelseÅrsak',\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.navtiltak'),\n            value: UtsettelseÅrsakType.NavTiltak,\n            name: 'utsettelseÅrsak',\n        },\n        {\n            label: intlUtils(intl, 'uttaksplan.utsettelseårsak.fri'),\n            value: UtsettelseÅrsakType.Fri,\n            name: 'utsettelseÅrsak',\n        },\n    ];\n\n    const defaultRadios = allRadios.filter((option) => {\n        if (skalViseGamleUtsettelseÅrsaker) {\n            if (option.value === UtsettelseÅrsakType.Fri) {\n                return false;\n            }\n\n            return true;\n        }\n\n        if (!skalViseGamleUtsettelseÅrsaker && !erFarEllerMedmor) {\n            if (tidsperiodenErInnenforFørsteSeksUker) {\n                return (\n                    option.value === UtsettelseÅrsakType.Sykdom ||\n                    option.value === UtsettelseÅrsakType.InstitusjonBarnet ||\n                    option.value === UtsettelseÅrsakType.InstitusjonSøker\n                );\n            }\n\n            return false;\n        }\n\n        if (!skalViseGamleUtsettelseÅrsaker && erFarEllerMedmor) {\n            if (!erMorUfør) {\n                if (option.value === UtsettelseÅrsakType.Fri && søkerErFarEllerMedmorOgKunDeHarRett) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            if (tidsperiodenErInnenforFørsteSeksUker) {\n                return (\n                    option.value === UtsettelseÅrsakType.Sykdom ||\n                    option.value === UtsettelseÅrsakType.InstitusjonBarnet ||\n                    option.value === UtsettelseÅrsakType.InstitusjonSøker\n                );\n            }\n\n            return option.value === UtsettelseÅrsakType.Fri;\n        }\n\n        return option.value === UtsettelseÅrsakType.Sykdom || option.value === UtsettelseÅrsakType.Fri;\n    });\n\n    return defaultRadios;\n};\n\nconst getUtsettelseårsakSkjemanummer = (årsak: UtsettelseÅrsakType | '') => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n            return Skjemanummer.DOK_OVERFØRING_FOR_SYK;\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n            return Skjemanummer.DOK_INNLEGGELSE;\n        case UtsettelseÅrsakType.HvØvelse:\n            return Skjemanummer.HV_ØVELSE;\n        case UtsettelseÅrsakType.NavTiltak:\n            return Skjemanummer.NAV_TILTAK;\n        default:\n            return Skjemanummer.ANNET;\n    }\n};\n\nconst showAttachmentUploader = (årsak: UtsettelseÅrsakType | ''): boolean => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n        case UtsettelseÅrsakType.HvØvelse:\n        case UtsettelseÅrsakType.NavTiltak:\n            return true;\n        default:\n            return false;\n    }\n};\n\nconst getAttachmentUploaderLabel = (årsak: UtsettelseÅrsakType | ''): string => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n            return 'Last opp dokumentasjon for sykdom';\n        case UtsettelseÅrsakType.HvØvelse:\n            return 'Last opp dokumentasjon for HV-øvelse';\n        case UtsettelseÅrsakType.NavTiltak:\n            return 'Last opp dokumentasjon for NAV tiltak';\n        default:\n            return '';\n    }\n};\n\nconst getAttachmentUploaderType = (årsak: UtsettelseÅrsakType | ''): AttachmentType => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n            return AttachmentType.UTSETTELSE_SYKDOM;\n        case UtsettelseÅrsakType.HvØvelse:\n            return AttachmentType.HV_ØVELSE;\n        case UtsettelseÅrsakType.NavTiltak:\n            return AttachmentType.NAV_TILTAK;\n        default:\n            return AttachmentType.UTSETTELSE_SYKDOM; // Should never happen\n    }\n};\n\nconst getVeilederTekst = (årsak: UtsettelseÅrsakType | ''): React.ReactElement => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Sykdom:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n            return <FormattedMessage id=\"uttaksplan.veileder.sykdom\" />;\n        case UtsettelseÅrsakType.HvØvelse:\n            return <FormattedMessage id=\"uttaksplan.veileder.hvØvelse\" />;\n        case UtsettelseÅrsakType.NavTiltak:\n            return <FormattedMessage id=\"uttaksplan.veileder.navTiltak\" />;\n        default:\n            return <FormattedMessage id=\"uttaksplan.veileder.sykdom\" />; // Should never happen\n    }\n};\n\nconst UtsettelseÅrsakSpørsmål: FunctionComponent<Props> = ({\n    periodenErKunHelligdager,\n    skalViseGamleUtsettelseÅrsaker,\n    erFarEllerMedmor,\n    tidsperiodenErInnenforFørsteSeksUker,\n    utsettelseårsak,\n    vedlegg,\n    erMorUfør,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n}) => {\n    const intl = useIntl();\n    const årsakOptions = getUtsettelseÅrsakOptions(\n        intl,\n        periodenErKunHelligdager,\n        skalViseGamleUtsettelseÅrsaker,\n        erFarEllerMedmor,\n        tidsperiodenErInnenforFørsteSeksUker,\n        erMorUfør,\n        søkerErFarEllerMedmorOgKunDeHarRett\n    );\n\n    if (årsakOptions.length === 0) {\n        return (\n            <Veilederpanel fargetema=\"normal\" type=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                <Block padBottom=\"l\">\n                    <Normaltekst>\n                        <b>\n                            <FormattedMessage id=\"uttaksplan.veileder.trengerIkkeUtsettelse.del1\" />\n                        </b>\n                    </Normaltekst>\n                </Block>\n                <Block padBottom=\"l\">\n                    <Normaltekst>\n                        <FormattedMessage id=\"uttaksplan.veileder.trengerIkkeUtsettelse.del2\" />\n                    </Normaltekst>\n                </Block>\n                <Block padBottom=\"l\">\n                    <Normaltekst>\n                        <FormattedMessage id=\"uttaksplan.veileder.trengerIkkeUtsettelse.del3\" />\n                    </Normaltekst>\n                </Block>\n            </Veilederpanel>\n        );\n    }\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <PeriodeUtsettelseFormComponents.RadioPanelGroup\n                    name={PeriodeUtsettelseFormField.årsak}\n                    radios={årsakOptions}\n                    useTwoColumns={true}\n                />\n            </Block>\n            <Block padBottom=\"l\" visible={showAttachmentUploader(utsettelseårsak)}>\n                <Veilederpanel fargetema=\"normal\" svg={<VeilederNormal transparentBackground={true} />}>\n                    {getVeilederTekst(utsettelseårsak)}\n                </Veilederpanel>\n            </Block>\n            <Block padBottom=\"l\" visible={showAttachmentUploader(utsettelseårsak)}>\n                <FormikFileUploader\n                    label={getAttachmentUploaderLabel(utsettelseårsak)}\n                    name={PeriodeUtsettelseFormField.vedlegg}\n                    attachments={vedlegg || []}\n                    attachmentType={getAttachmentUploaderType(utsettelseårsak)}\n                    skjemanummer={getUtsettelseårsakSkjemanummer(utsettelseårsak)}\n                />\n            </Block>\n        </>\n    );\n};\n\nexport default UtsettelseÅrsakSpørsmål;\n","import { bemUtils, Block, hasValue, intlUtils } from '@navikt/fp-common';\nimport { isValidTidsperiode, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Hovedknapp, Knapp } from 'nav-frontend-knapper';\nimport React, { Dispatch, FunctionComponent, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport LinkButton from 'uttaksplan/components/link-button/LinkButton';\nimport TidsperiodeDisplay from 'uttaksplan/components/tidsperiode-display/TidsperiodeDisplay';\nimport UtsettelseEndreTidsperiodeSpørsmål from 'uttaksplan/components/utsettelse-tidsperiode-spørsmål/UtsettelseTidsperiodeSpørsmål';\nimport { Periode, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { getSlettPeriodeTekst } from 'uttaksplan/utils/periodeUtils';\nimport { SubmitListener } from '../submit-listener/SubmitListener';\nimport TidsperiodeForm from '../tidsperiode-form/TidsperiodeForm';\nimport { PeriodeUtsettelseFormComponents, PeriodeUtsettelseFormField } from './periodeUtsettelseFormConfig';\nimport {\n    cleanupPeriodeUtsettelseFormData,\n    getPeriodeUtsettelseFormInitialValues,\n    mapPeriodeUtsettelseFormToPeriode,\n} from './periodeUtsettelseFormUtils';\n\nimport './periodeUtsettelseForm.less';\nimport { periodeUtsettelseFormQuestionsConfig } from './periodeUtsettelseFormQuestionsConfig';\nimport UtsettelseÅrsakSpørsmål from '../spørsmål/utsettelse-årsak/UtsettelseÅrsakSpørsmål';\nimport { førsteOktober2021ReglerGjelder, ISOStringToDate } from 'app/utils/dateUtils';\nimport AktivitetskravSpørsmål from '../spørsmål/aktivitetskrav/AktivitetskravSpørsmål';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { guid } from 'nav-frontend-js-utils';\nimport { Situasjon } from 'app/types/Situasjon';\n\ninterface Props {\n    periode: Periode;\n    familiehendelsesdato: Date;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    handleAddPeriode?: (nyPeriode: Periode, familiehendelsedato: Date) => void;\n    setNyPeriodeFormIsVisible?: Dispatch<React.SetStateAction<boolean>>;\n    toggleIsOpen?: (id: string) => void;\n    handleDeletePeriode?: (periodeId: string) => void;\n    isNyPeriode?: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    erMorUfør: boolean;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    arbeidsforhold: Arbeidsforhold[];\n    situasjon: Situasjon;\n    utsettelserIPlan: Utsettelsesperiode[];\n}\n\nconst PeriodeUtsettelseForm: FunctionComponent<Props> = ({\n    periode,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n    handleAddPeriode,\n    handleDeletePeriode,\n    toggleIsOpen,\n    isNyPeriode = false,\n    setNyPeriodeFormIsVisible,\n    navnPåForeldre,\n    erMorUfør,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    situasjon,\n    utsettelserIPlan,\n}) => {\n    const intl = useIntl();\n    const { tidsperiode, id } = periode;\n    const [tidsperiodeIsOpen, setTidsperiodeIsOpen] = useState(false);\n    const bem = bemUtils('periodeUtsettelseForm');\n\n    const antallHelligdager = Tidsperioden(tidsperiode).getAntallFridager();\n    const antallUttaksdager = Tidsperioden(tidsperiode).getAntallUttaksdager();\n    const periodenErKunHelligdager = antallHelligdager === antallUttaksdager;\n    const skalViseGamleUtsettelseÅrsaker = førsteOktober2021ReglerGjelder(familiehendelsesdato) === false; // Utsettelseårsaker som gjelder for søknader sendt før 1. oktober 2021\n    const erFarMedmorOgHarAleneomsorg = erFarEllerMedmor && erAleneOmOmsorg;\n\n    const toggleVisTidsperiode = () => {\n        setTidsperiodeIsOpen(!tidsperiodeIsOpen);\n    };\n\n    return (\n        <PeriodeUtsettelseFormComponents.FormikWrapper\n            initialValues={getPeriodeUtsettelseFormInitialValues(periode)}\n            onSubmit={(values) =>\n                handleUpdatePeriode(\n                    mapPeriodeUtsettelseFormToPeriode(values, id, erFarEllerMedmor),\n                    familiehendelsesdato\n                )\n            }\n            renderForm={({ setFieldValue, values }) => {\n                const visibility = periodeUtsettelseFormQuestionsConfig.getVisbility({\n                    values,\n                    erFarEllerMedmor,\n                    erAleneOmOmsorg,\n                    søkerErFarEllerMedmorOgKunDeHarRett,\n                });\n\n                return (\n                    <>\n                        <Block visible={!isValidTidsperiode(tidsperiode)} padBottom=\"l\">\n                            <TidsperiodeForm\n                                tidsperiode={tidsperiode}\n                                familiehendelsesdato={familiehendelsesdato}\n                                onBekreft={(values) => {\n                                    setFieldValue(PeriodeUtsettelseFormField.fom, ISOStringToDate(values.fom));\n                                    setFieldValue(PeriodeUtsettelseFormField.tom, ISOStringToDate(values.tom));\n                                }}\n                                ugyldigeTidsperioder={undefined}\n                                utsettelserIPlan={utsettelserIPlan}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                                situasjon={situasjon}\n                                erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                            />\n                        </Block>\n                        <PeriodeUtsettelseFormComponents.Form includeButtons={false}>\n                            <SubmitListener cleanup={() => cleanupPeriodeUtsettelseFormData(values)} />\n\n                            <Block visible={isValidTidsperiode(tidsperiode)} padBottom=\"l\">\n                                <TidsperiodeDisplay\n                                    tidsperiode={tidsperiode}\n                                    toggleVisTidsperiode={toggleVisTidsperiode}\n                                />\n                                <UtsettelseEndreTidsperiodeSpørsmål\n                                    periode={periode}\n                                    familiehendelsesdato={familiehendelsesdato}\n                                    ugyldigeTidsperioder={undefined}\n                                    utsettelserIPlan={utsettelserIPlan}\n                                    onBekreft={(values) => {\n                                        toggleVisTidsperiode();\n                                        setFieldValue(PeriodeUtsettelseFormField.fom, ISOStringToDate(values.fom));\n                                        setFieldValue(PeriodeUtsettelseFormField.tom, ISOStringToDate(values.tom));\n                                    }}\n                                    changeTidsperiode={(values) => {\n                                        setFieldValue(PeriodeUtsettelseFormField.fom, values.fom);\n                                        setFieldValue(PeriodeUtsettelseFormField.tom, values.tom);\n                                    }}\n                                    tidsperiode={tidsperiode}\n                                    onAvbryt={() => toggleVisTidsperiode()}\n                                    visible={tidsperiodeIsOpen}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                                    situasjon={situasjon}\n                                    erFarMedmorOgHarAleneomsorg={erFarMedmorOgHarAleneomsorg}\n                                />\n                            </Block>\n                            <Block visible={visibility.isVisible(PeriodeUtsettelseFormField.årsak)} padBottom=\"l\">\n                                <UtsettelseÅrsakSpørsmål\n                                    periodenErKunHelligdager={periodenErKunHelligdager}\n                                    skalViseGamleUtsettelseÅrsaker={skalViseGamleUtsettelseÅrsaker}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    tidsperiodenErInnenforFørsteSeksUker={Tidsperioden(\n                                        tidsperiode\n                                    ).erInnenforFørsteSeksUker(familiehendelsesdato)}\n                                    utsettelseårsak={values.årsak}\n                                    vedlegg={values.vedlegg}\n                                    erMorUfør={erMorUfør}\n                                    søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                                />\n                            </Block>\n                            <Block\n                                visible={visibility.isVisible(PeriodeUtsettelseFormField.bekrefterArbeidIPerioden)}\n                                padBottom=\"l\"\n                            >\n                                <PeriodeUtsettelseFormComponents.Checkbox\n                                    name={PeriodeUtsettelseFormField.bekrefterArbeidIPerioden}\n                                    label={intlUtils(intl, 'uttaksplan.bekrefterArbeidIPerioden')}\n                                    validate={(value) => {\n                                        if (!hasValue(value) || value === undefined || value === false) {\n                                            return intlUtils(intl, 'uttaksplan.validering.bekrefterArbeidIPerioden');\n                                        }\n                                    }}\n                                />\n                            </Block>\n                            <Block\n                                visible={visibility.isVisible(PeriodeUtsettelseFormField.morsAktivitetIPerioden)}\n                                padBottom=\"l\"\n                            >\n                                <AktivitetskravSpørsmål\n                                    aktivitetskravMorValue={values.morsAktivitetIPerioden}\n                                    aktivitetskravVedlegg={values.morsAktivitetIPeriodenDokumentasjon}\n                                    fieldName={PeriodeUtsettelseFormField.morsAktivitetIPerioden}\n                                    navnPåForeldre={navnPåForeldre}\n                                    FormComponents={PeriodeUtsettelseFormComponents}\n                                    vedleggFieldName={PeriodeUtsettelseFormField.morsAktivitetIPeriodenDokumentasjon}\n                                />\n                            </Block>\n                            <Block\n                                visible={\n                                    !isNyPeriode && handleDeletePeriode !== undefined && toggleIsOpen !== undefined\n                                }\n                            >\n                                <div style={{ textAlign: 'center', position: 'relative' }}>\n                                    <Knapp htmlType=\"button\" onClick={() => toggleIsOpen!(periode.id)}>\n                                        <FormattedMessage id=\"uttaksplan.lukk\" />\n                                    </Knapp>\n                                    <div className={bem.element('slettPeriodeWrapper')}>\n                                        <LinkButton\n                                            onClick={() => handleDeletePeriode!(periode.id)}\n                                            className={bem.element('slettPeriode')}\n                                        >\n                                            <FormattedMessage id={getSlettPeriodeTekst(periode.type)} />\n                                        </LinkButton>\n                                    </div>\n                                </div>\n                            </Block>\n                            <Block\n                                visible={\n                                    isNyPeriode &&\n                                    setNyPeriodeFormIsVisible !== undefined &&\n                                    handleAddPeriode !== undefined\n                                }\n                            >\n                                <div className={bem.element('knapperad')}>\n                                    <Knapp htmlType=\"button\" onClick={() => setNyPeriodeFormIsVisible!(false)}>\n                                        <FormattedMessage id=\"uttaksplan.avbryt\" />\n                                    </Knapp>\n                                    {visibility.areAllQuestionsAnswered() ? (\n                                        <Hovedknapp\n                                            htmlType=\"button\"\n                                            onClick={() => {\n                                                handleAddPeriode!(\n                                                    mapPeriodeUtsettelseFormToPeriode(values, guid(), erFarEllerMedmor),\n                                                    familiehendelsesdato\n                                                );\n                                                setNyPeriodeFormIsVisible!(false);\n                                            }}\n                                        >\n                                            <FormattedMessage id=\"uttaksplan.leggTil\" />\n                                        </Hovedknapp>\n                                    ) : null}\n                                </div>\n                            </Block>\n                        </PeriodeUtsettelseFormComponents.Form>\n                    </>\n                );\n            }}\n        />\n    );\n};\n\nexport default PeriodeUtsettelseForm;\n","import { Block } from '@navikt/fp-common';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport React, { Dispatch, FunctionComponent, SetStateAction, useState } from 'react';\nimport { Periode, Periodetype, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport PeriodeUttakForm from '../periode-uttak-form/PeriodeUttakForm';\nimport PeriodeUtsettelseForm from '../periode-utsettelse-form/PeriodeUtsettelseForm';\nimport { FormattedMessage, IntlShape } from 'react-intl';\nimport { Situasjon } from 'app/types/Situasjon';\n\ninterface Props {\n    familiehendelsesdato: Date;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    setNyPeriodeFormIsVisible: Dispatch<SetStateAction<boolean>>;\n    arbeidsforhold: Arbeidsforhold[];\n    isUtsettelse: boolean;\n    handleAddPeriode: (nyPeriode: Periode, familiehendelsedato: Date) => void;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    erMorUfør: boolean;\n    setPeriodeErGyldig: Dispatch<SetStateAction<boolean>>;\n    nesteLedigeUttaksdato: Date | undefined;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    erEndringssøknad: boolean;\n    termindato: Date | undefined;\n    antallBarn: number;\n    utsettelserIPlan: Utsettelsesperiode[];\n    intl: IntlShape;\n}\n\nconst NyPeriode: FunctionComponent<Props> = ({\n    setNyPeriodeFormIsVisible,\n    isUtsettelse,\n    annenForelder,\n    arbeidsforhold,\n    navnPåForeldre,\n    stønadskontoer,\n    familiehendelsesdato,\n    handleAddPeriode,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    erMorUfør,\n    setPeriodeErGyldig,\n    nesteLedigeUttaksdato,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    erEndringssøknad,\n    termindato,\n    antallBarn,\n    utsettelserIPlan,\n    intl,\n}) => {\n    const [periode, setPeriode] = useState<Periode>({\n        type: isUtsettelse ? Periodetype.Utsettelse : Periodetype.Uttak,\n        tidsperiode: { fom: isUtsettelse ? undefined : nesteLedigeUttaksdato },\n    } as Periode);\n\n    return !isUtsettelse ? (\n        <>\n            <Block padBottom=\"l\">\n                <Undertittel>\n                    <FormattedMessage id=\"uttaksplan.nyPeriode.tittel\" />\n                </Undertittel>\n            </Block>\n            <PeriodeUttakForm\n                periode={periode}\n                handleUpdatePeriode={setPeriode}\n                handleAddPeriode={handleAddPeriode}\n                annenForelder={annenForelder}\n                arbeidsforhold={arbeidsforhold}\n                familiehendelsesdato={familiehendelsesdato}\n                navnPåForeldre={navnPåForeldre}\n                stønadskontoer={stønadskontoer}\n                setNyPeriodeFormIsVisible={setNyPeriodeFormIsVisible}\n                isNyPeriode={true}\n                erFarEllerMedmor={erFarEllerMedmor}\n                erFlerbarnssøknad={erFlerbarnssøknad}\n                erAleneOmOmsorg={erAleneOmOmsorg}\n                erDeltUttak={erDeltUttak}\n                situasjon={situasjon}\n                erMorUfør={erMorUfør}\n                setPeriodeErGyldig={setPeriodeErGyldig}\n                erEndringssøknad={erEndringssøknad}\n                termindato={termindato}\n                morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                antallBarn={antallBarn}\n                utsettelserIPlan={utsettelserIPlan}\n                intl={intl}\n            />\n        </>\n    ) : (\n        <PeriodeUtsettelseForm\n            periode={periode}\n            familiehendelsesdato={familiehendelsesdato}\n            handleUpdatePeriode={setPeriode}\n            erFarEllerMedmor={erFarEllerMedmor}\n            erAleneOmOmsorg={erAleneOmOmsorg}\n            handleAddPeriode={handleAddPeriode}\n            setNyPeriodeFormIsVisible={setNyPeriodeFormIsVisible}\n            isNyPeriode={true}\n            navnPåForeldre={navnPåForeldre}\n            erMorUfør={erMorUfør}\n            søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n            arbeidsforhold={arbeidsforhold}\n            situasjon={situasjon}\n            utsettelserIPlan={utsettelserIPlan}\n        />\n    );\n};\n\nexport default NyPeriode;\n","import React from 'react';\nimport { UttaksplanIkonProps } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\n\nconst ArbeidIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={32}\n            height={32}\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <rect id=\"a\" width={32} height={32} rx={10} />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <path\n                    fill=\"#FFF\"\n                    fillRule=\"nonzero\"\n                    d=\"M23.378 7.79l-.001-.002-1.666-1.665A.413.413 0 0 0 21.417 6H10.583a.417.417 0 0 0-.295.123L8.622 7.788l-.002.002a.463.463 0 0 0-.12.293v17.5c0 .23.187.417.417.417h5.416v-3.75c0-.23.187-.417.417-.417h2.5c.23 0 .417.187.417.417V26h5.416c.23 0 .417-.187.417-.417v-17.5a.46.46 0 0 0-.122-.293zM12.667 20.167h-2.5v-2.5h2.5v2.5zm0-4.167h-2.5v-2.5h2.5V16zm0-4.167h-2.5v-2.5h2.5v2.5zm5 8.334h-3.334v-2.5h3.334v2.5zm0-4.167h-3.334v-2.5h3.334V16zm0-4.167h-3.334v-2.5h3.334v2.5zm4.166 8.334h-2.5v-2.5h2.5v2.5zm0-4.167h-2.5v-2.5h2.5V16zm0-4.167h-2.5v-2.5h2.5v2.5zM9.923 7.667l.833-.834h10.488l.834.834H9.923z\"\n                />\n            </g>\n        </svg>\n    );\n};\n\nexport default ArbeidIkon;\n","import React from 'react';\nimport { UttaksplanIkonProps } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\n\nconst FerieIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={32}\n            height={32}\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <rect id=\"a\" width={32} height={32} rx={10} />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g stroke=\"#FFF\" strokeLinecap=\"round\" strokeLinejoin=\"round\">\n                    <path d=\"M25.583 19.737h-5c-2.042 0-3.85.657-4.991 1.667m4.991-1.654l-2.763-6.973m-2.149-5.423l-.307-.774\" />\n                    <path\n                        fill=\"#FFF\"\n                        d=\"M15.671 7.354c-4.065 1.61-6.704 4.571-5.517 7.566l.306.775 1.937-.769.468-1.081 1.082.468 7.747-3.07.467-1.082 1.082.467 1.937-.768-.307-.775c-1.188-2.995-5.138-3.342-9.202-1.731z\"\n                    />\n                    <path d=\"M25.583 24.75c-.833 0-1.666-.747-1.666-1.667 0 .92-.834 1.667-1.667 1.667-.833 0-1.667-.747-1.667-1.667 0 .92-.833 1.667-1.666 1.667-.834 0-1.667-.747-1.667-1.667 0 .92-.833 1.667-1.667 1.667-.833 0-1.666-.747-1.666-1.667 0 .92-.834 1.667-1.667 1.667-.833 0-1.667-.747-1.667-1.667 0 .92-.833 1.667-1.666 1.667-.834 0-1.667-.747-1.667-1.667 0 .575-.386 1.083-.833 1.383\" />\n                </g>\n            </g>\n        </svg>\n    );\n};\n\nexport default FerieIkon;\n","import React from 'react';\nimport { UttaksplanIkonProps } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\n\nconst SykdomIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={32}\n            height={32}\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <rect id=\"a\" width={32} height={32} rx={10} />\n                <path\n                    id=\"c\"\n                    d=\"M8.294 1.518l10.19 10.19c1.823 1.822 1.785 4.82-.086 6.69s-4.867 1.91-6.69.086L1.518 8.294c-1.823-1.822-1.786-4.818.086-6.69 1.872-1.871 4.867-1.91 6.69-.086zm6.27 7.4l-3.473-3.476-5.648 5.647 3.475 3.476 5.646-5.648zM3.258 6.65a.472.472 0 0 0-.138.339.499.499 0 0 0 .49.489A.472.472 0 0 0 4.085 7a.497.497 0 0 0-.489-.489.472.472 0 0 0-.34.138zM4.96 4.963a.47.47 0 0 0-.137.34.498.498 0 0 0 .488.488.47.47 0 0 0 .476-.476.496.496 0 0 0-.488-.488.466.466 0 0 0-.34.136zm-2.005-.31a.468.468 0 0 0-.138.338.499.499 0 0 0 .49.49.47.47 0 0 0 .476-.478.497.497 0 0 0-.489-.489.468.468 0 0 0-.34.138zm1.694-1.694a.472.472 0 0 0-.138.34.496.496 0 0 0 .488.487.467.467 0 0 0 .477-.477.496.496 0 0 0-.488-.488.472.472 0 0 0-.34.138zm.622 4.009a.47.47 0 0 0-.136.34.496.496 0 0 0 .489.488.466.466 0 0 0 .476-.476.498.498 0 0 0-.488-.489.474.474 0 0 0-.341.137zm1.694-1.693a.472.472 0 0 0-.138.34.496.496 0 0 0 .488.487.467.467 0 0 0 .477-.477.495.495 0 0 0-.488-.487.472.472 0 0 0-.34.137zM6.654 3.27a.472.472 0 0 0-.138.339.5.5 0 0 0 .49.49.47.47 0 0 0 .477-.477.5.5 0 0 0-.49-.49.472.472 0 0 0-.34.138zm5.993 12.771a.468.468 0 0 0-.138.34.498.498 0 0 0 .49.488.47.47 0 0 0 .337-.139.47.47 0 0 0 .14-.337.499.499 0 0 0-.49-.49.468.468 0 0 0-.34.138zm1.694-1.696a.473.473 0 0 0-.137.339c.002.268.22.486.489.489a.466.466 0 0 0 .476-.476.499.499 0 0 0-.49-.49.476.476 0 0 0-.338.138zm.31 2.006a.472.472 0 0 0-.137.339.499.499 0 0 0 .49.489.472.472 0 0 0 .476-.477.497.497 0 0 0-.489-.489.472.472 0 0 0-.34.138zm1.696-1.693a.469.469 0 0 0-.137.338c.002.267.22.485.489.49a.469.469 0 0 0 .476-.477.499.499 0 0 0-.49-.489.472.472 0 0 0-.338.138zm-4.011-.623a.469.469 0 0 0-.137.338.497.497 0 0 0 .489.49.469.469 0 0 0 .476-.477.499.499 0 0 0-.489-.489.472.472 0 0 0-.34.138zm1.694-1.694a.472.472 0 0 0-.138.339.499.499 0 0 0 .489.489.472.472 0 0 0 .476-.476.495.495 0 0 0-.489-.49.469.469 0 0 0-.338.138zm2.005.31a.472.472 0 0 0-.137.34.499.499 0 0 0 .489.489.466.466 0 0 0 .475-.476.495.495 0 0 0-.489-.488.466.466 0 0 0-.338.136z\"\n                />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g transform=\"translate(6 6)\">\n                    <mask id=\"d\" fill=\"#fff\">\n                        <use xlinkHref=\"#c\" />\n                    </mask>\n                    <g fill=\"#FFF\" mask=\"url(#d)\">\n                        <path d=\"M0 20h20V0H0z\" />\n                    </g>\n                </g>\n            </g>\n        </svg>\n    );\n};\n\nexport default SykdomIkon;\n","import React from 'react';\nimport { UttaksplanIkonProps } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\n\nconst TerminIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg focusable=\"false\" role=\"img\" aria-hidden=\"true\" width={24} height={24} viewBox=\"0 0 24 24\" {...rest}>\n            <title>{props.title}</title>\n            <path\n                fill=\"none\"\n                fillRule=\"evenodd\"\n                stroke=\"#3E3832\"\n                strokeLinejoin=\"round\"\n                d=\"M12 22.993s10.5-8.128 10.5-15.82-9.316-8.284-10.5-.59C10.816-1.112 1.5-.52 1.5 7.764S12 22.993 12 22.993z\"\n            />\n        </svg>\n    );\n};\n\nexport default TerminIkon;\n","import React from 'react';\nimport { UttaksplanIkonProps } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\n\nconst UttakIkon = (props: UttaksplanIkonProps) => {\n    const { title, ...rest } = props;\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={32}\n            height={32}\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <rect id=\"a\" width={32} height={32} rx={10} />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <g transform=\"translate(6 6)\">\n                    <circle cx={14.583} cy={17.083} r={1.083} stroke=\"#FFF\" strokeWidth={2} />\n                    <circle cx={7.083} cy={17.083} r={1.083} stroke=\"#FFF\" strokeWidth={2} />\n                    <path\n                        fill=\"#FFF\"\n                        d=\"M19.928 8.718c0 3.453-1.997 6.282-5.586 6.282H7.106c-2.586 0-4.682-2.21-4.682-4.936 0-.467.062-.918.176-1.346 3.038 0 14.084-.004 17.328 0zM13.886 2.5c3.734 0 6.042 2.836 6.042 5.385-1.835 0-4.85-.005-8.841-.005l2.8-5.38z\"\n                    />\n                    <path\n                        stroke=\"#FFF\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        d=\"M3.107 9.612c0-2.314-1.218-3.962-2.678-3.962\"\n                    />\n                </g>\n            </g>\n        </svg>\n    );\n};\n\nexport default UttakIkon;\n","import React, { SVGProps } from 'react';\nimport Ikon from 'nav-frontend-ikoner-assets';\nimport ArbeidIkon from 'uttaksplan/assets/ArbeidIkon';\nimport FerieIkon from 'uttaksplan/assets/FerieIkon';\nimport SykdomIkon from 'uttaksplan/assets/SykdomIkon';\nimport TerminIkon from 'uttaksplan/assets/TerminIkon';\nimport UttakIkon from 'uttaksplan/assets/UttakIkon';\n\nexport interface UttaksplanIkonProps extends SVGProps<any> {\n    title: string;\n}\n\nexport enum UttaksplanIkonKeys {\n    'arbeid' = 'arbeid',\n    'ferie' = 'ferie',\n    'sykdom' = 'sykdom',\n    'termin' = 'termin',\n    'uttak' = 'uttak',\n    'info' = 'info',\n    'advarsel' = 'advarsel',\n    'feil' = 'feil',\n}\n\nexport interface Props {\n    ikon: UttaksplanIkonKeys;\n    title: string;\n}\n\nconst UttaksplanIkon: React.FunctionComponent<Props> = ({ ikon, title }) => {\n    switch (ikon) {\n        case 'arbeid':\n            return <ArbeidIkon title={title} />;\n        case 'ferie':\n            return <FerieIkon title={title} />;\n        case 'sykdom':\n            return <SykdomIkon title={title} />;\n        case 'termin':\n            return <TerminIkon title={title} />;\n        case 'info':\n            return <Ikon kind=\"info-sirkel-fyll\" size=\"1.5rem\" />;\n        case 'advarsel':\n            return <Ikon kind=\"advarsel-sirkel-fyll\" size=\"1.5rem\" />;\n        case 'feil':\n            return <Ikon kind=\"feil-sirkel-fyll\" size=\"1.5rem\" />;\n        default:\n            return <UttakIkon title={title} />;\n    }\n};\n\nexport default UttaksplanIkon;\n","import React from 'react';\nimport { VeilederMessage } from '../types';\nimport { FormattedMessage } from 'react-intl';\nimport AlertStripe, { AlertStripeType } from 'nav-frontend-alertstriper';\nimport { Element } from 'nav-frontend-typografi';\n\nimport './veilederMelding.less';\nimport { bemUtils } from '@navikt/fp-common';\nimport { UttaksplanIkonKeys } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\n\nexport type VeilederMeldingStil = 'transparent' | 'default';\n\ninterface VeilederpanelInnholdContentProps {\n    message: VeilederMessage;\n    stil?: VeilederMeldingStil;\n    skjulMeldingIkon?: boolean;\n}\n\nconst getAlertStripeTypeFromMessageType = (message: VeilederMessage): AlertStripeType => {\n    switch (message.type) {\n        case 'normal':\n        case 'info':\n            return 'info';\n        case 'advarsel':\n            return 'advarsel';\n        case 'feil':\n            return 'feil';\n    }\n};\n\nexport const getIkonForVeilederMelding = (melding: VeilederMessage): UttaksplanIkonKeys => {\n    switch (melding.type) {\n        case 'feil':\n            return UttaksplanIkonKeys.feil;\n        case 'advarsel':\n            return UttaksplanIkonKeys.advarsel;\n        default:\n            return UttaksplanIkonKeys.info;\n    }\n};\n\nconst renderAlert = (message: VeilederMessage, skjulMeldingIkon: boolean) => {\n    const content = (\n        <>\n            {message.titleIntlKey !== undefined && (\n                <Element>\n                    <FormattedMessage id={message.titleIntlKey} />\n                </Element>\n            )}\n            <FormattedMessage id={message.contentIntlKey} values={message.values} />\n        </>\n    );\n    return skjulMeldingIkon ? (\n        <div>{content}</div>\n    ) : (\n        <AlertStripe type={getAlertStripeTypeFromMessageType(message)}>{content}</AlertStripe>\n    );\n};\n\nconst VeilederMelding: React.FunctionComponent<VeilederpanelInnholdContentProps> = ({\n    message,\n    stil = 'default',\n    skjulMeldingIkon = false,\n}) => {\n    const bem = bemUtils('veilederMelding');\n    return (\n        <div className={bem.classNames(bem.block, bem.modifier(stil))}>\n            {message.type !== 'normal' ? (\n                renderAlert(message, skjulMeldingIkon)\n            ) : (\n                <div className=\"veilederMelding__padding\">\n                    <FormattedMessage id={message.contentIntlKey} values={message.values} />\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default VeilederMelding;\n","import * as React from 'react';\nimport { VeilederMessage } from '../veilederInfo/types';\nimport VeilederMelding, { VeilederMeldingStil } from './components/VeilederMelding';\n\ninterface Props {\n    meldinger: VeilederMessage[];\n    stil?: VeilederMeldingStil;\n    skjulMeldingIkon?: boolean;\n}\n\nconst VeilederMeldinger: React.FunctionComponent<Props> = ({ meldinger, stil, skjulMeldingIkon }) => {\n    return (\n        <div>\n            {meldinger.map((melding: VeilederMessage, index: number) => (\n                <VeilederMelding\n                    key={melding.contentIntlKey + index}\n                    message={melding}\n                    stil={stil}\n                    skjulMeldingIkon={skjulMeldingIkon}\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default VeilederMeldinger;\n","export enum UttaksplanColor {\n    'purple' = 'purple',\n    'blue' = 'blue',\n    'green' = 'green',\n    'purpleBlue' = 'purpleBlue',\n    'yellow' = 'yellow',\n    'white' = 'white',\n    'transparent' = 'transparent',\n    'infoBlue' = 'infoBlue',\n}\n","import { Forelder } from 'app/types/Forelder';\nimport { Oppholdsperiode, Periode, Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { UttaksplanColor } from 'uttaksplan/types/UttaksplanColor';\n\nexport const getForelderFarge = (forelder: Forelder) => {\n    return forelder === Forelder.mor ? UttaksplanColor.purple : UttaksplanColor.blue;\n};\n\nexport const getStønadskontoFarge = (\n    konto: StønadskontoType,\n    forelder: Forelder | undefined,\n    forIkon?: boolean,\n    harMidlertidigOmsorg?: boolean\n): UttaksplanColor => {\n    if (forIkon && konto === StønadskontoType.Fellesperiode) {\n        return UttaksplanColor.purpleBlue;\n    }\n\n    if (harMidlertidigOmsorg) {\n        return UttaksplanColor.purple;\n    }\n\n    if (forelder === undefined) {\n        switch (konto) {\n            case StønadskontoType.Fedrekvote:\n            case StønadskontoType.AktivitetsfriKvote:\n                return UttaksplanColor.blue;\n            case StønadskontoType.Mødrekvote:\n            case StønadskontoType.Foreldrepenger:\n            case StønadskontoType.ForeldrepengerFørFødsel:\n                return UttaksplanColor.purple;\n            case StønadskontoType.Fellesperiode:\n                return UttaksplanColor.purpleBlue;\n            default:\n                return UttaksplanColor.transparent;\n        }\n    }\n    return getForelderFarge(forelder);\n};\n\nexport const getUtsettelseFarge = (): UttaksplanColor => {\n    return UttaksplanColor.green;\n};\n\nexport const getOppholdFarge = (periode: Oppholdsperiode): UttaksplanColor => {\n    return getForelderFarge(periode.forelder);\n};\n\nexport const getPeriodeFarge = (\n    periode: Periode,\n    forelder?: Forelder,\n    harMidlertidligOmsorg?: boolean\n): UttaksplanColor | undefined => {\n    if (harMidlertidligOmsorg) {\n        return UttaksplanColor.purple;\n    }\n\n    if (periode.type === Periodetype.Uttak || periode.type === Periodetype.Overføring) {\n        return getStønadskontoFarge(periode.konto, periode.forelder || forelder);\n    }\n    if (periode.type === Periodetype.Utsettelse) {\n        return getUtsettelseFarge();\n    }\n    if (periode.type === Periodetype.Opphold) {\n        return getOppholdFarge(periode);\n    }\n    return undefined;\n};\n","import React from 'react';\nimport classnames from 'classnames';\n\nimport './iconBox.less';\nimport { UttaksplanColor } from 'uttaksplan/types/UttaksplanColor';\nimport { bemUtils } from '@navikt/fp-common';\n\nexport interface Props {\n    color: UttaksplanColor;\n    stripes?: boolean;\n    children?: React.ReactNode;\n}\n\nconst IconBox: React.FunctionComponent<Props> = ({ children, color, stripes }) => {\n    const bem = bemUtils('iconBox');\n\n    return (\n        <div className={classnames(bem.block, bem.modifier(`${color}${stripes ? '--striped' : ''}`))}>{children}</div>\n    );\n};\n\nexport default IconBox;\n","import { Forelder } from 'app/types/Forelder';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { Situasjon } from 'app/types/Situasjon';\nimport React, { FunctionComponent } from 'react';\nimport { useIntl } from 'react-intl';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { getStønadskontoFarge } from 'uttaksplan/utils/styleUtils';\nimport { getStønadskontoNavn } from 'uttaksplan/utils/stønadskontoerUtils';\nimport IconBox from '../icon-box/IconBox';\nimport UttaksplanIkon, { UttaksplanIkonKeys } from '../uttaksplan-ikon/UttaksplanIkon';\n\nexport interface Props {\n    konto: StønadskontoType;\n    forelder?: Forelder;\n    gradert?: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    erFarEllerMedmor?: boolean;\n    situasjon?: Situasjon;\n    erAleneOmOmsorg?: boolean;\n    harMidlertidigOmsorg?: boolean;\n}\n\nconst StønadskontoIkon: FunctionComponent<Props> = ({\n    konto,\n    forelder,\n    gradert,\n    navnPåForeldre,\n    harMidlertidigOmsorg,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n}) => {\n    const intl = useIntl();\n\n    return (\n        <IconBox color={getStønadskontoFarge(konto, forelder, true, harMidlertidigOmsorg)} stripes={gradert}>\n            <UttaksplanIkon\n                ikon={UttaksplanIkonKeys.uttak}\n                title={getStønadskontoNavn(intl, konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg)}\n            />\n        </IconBox>\n    );\n};\n\nexport default StønadskontoIkon;\n","import { intlUtils } from '@navikt/fp-common';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport { getUtsettelseFarge } from 'uttaksplan/utils/styleUtils';\nimport IconBox from '../icon-box/IconBox';\nimport UttaksplanIkon, { UttaksplanIkonKeys } from '../uttaksplan-ikon/UttaksplanIkon';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\n\nexport interface Props {\n    årsak: UtsettelseÅrsakType;\n    gradert?: boolean;\n}\n\nconst getIkonForKonto = (årsak: UtsettelseÅrsakType): UttaksplanIkonKeys => {\n    switch (årsak) {\n        case UtsettelseÅrsakType.Ferie:\n            return UttaksplanIkonKeys.ferie;\n        case UtsettelseÅrsakType.Arbeid:\n        case UtsettelseÅrsakType.HvØvelse:\n        case UtsettelseÅrsakType.NavTiltak:\n        case UtsettelseÅrsakType.Fri:\n            return UttaksplanIkonKeys.arbeid;\n        case UtsettelseÅrsakType.InstitusjonBarnet:\n        case UtsettelseÅrsakType.InstitusjonSøker:\n        case UtsettelseÅrsakType.Sykdom:\n            return UttaksplanIkonKeys.sykdom;\n    }\n};\n\nconst UtsettelseIkon: React.FunctionComponent<Props> = ({ årsak, gradert }) => {\n    const intl = useIntl();\n\n    return (\n        <IconBox color={getUtsettelseFarge()} stripes={gradert}>\n            <UttaksplanIkon\n                ikon={getIkonForKonto(årsak)}\n                title={intlUtils(intl, `uttaksplan.utsettelsesårsak.${årsak || 'ukjent'}`)}\n            />\n        </IconBox>\n    );\n};\n\nexport default UtsettelseIkon;\n","import React, { SVGProps } from 'react';\n\nexport interface OwnProps {\n    type?: 'advarsel' | 'feil';\n    title?: string;\n}\n\ntype Props = OwnProps & SVGProps<any>;\n\nconst UttaksplanAdvarselIkon = (props: Props) => {\n    const farge = props.type === 'feil' ? '#ba3a26' : '#ff9100';\n    const { title, ...rest } = props;\n\n    return (\n        <svg\n            focusable=\"false\"\n            role=\"img\"\n            aria-hidden=\"true\"\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n            width={24}\n            height={24}\n            viewBox=\"0 0 24 24\"\n            {...rest}\n        >\n            <title>{props.title}</title>\n            <defs>\n                <path\n                    id=\"advarsel-a\"\n                    d=\"M23.892 22.23L12.462 1.243c-.178-.324-.758-.324-.934 0L.055 22.307a.445.445 0 0 0 .022.465c.094.14.264.228.446.228h22.955c.287 0 .522-.214.522-.479 0-.109-.04-.21-.108-.29zM11.474 8.784c0-.264.233-.479.521-.479.287 0 .522.215.522.48v7.326c0 .264-.235.479-.522.479-.288 0-.521-.215-.521-.479V8.784zm.521 11.447c-.551 0-.998-.41-.998-.915 0-.505.447-.916.998-.916.55 0 .997.411.997.916 0 .506-.447.915-.997.915z\"\n                />\n            </defs>\n            <g fill=\"none\" fillRule=\"evenodd\">\n                <mask id=\"advarsel-b\" fill=\"#fff\">\n                    <use xlinkHref=\"#advarsel-a\" />\n                </mask>\n                <g fill={farge} mask=\"url(#advarsel-b)\">\n                    <path d=\"M0 24h24V0H0z\" />\n                </g>\n            </g>\n        </svg>\n    );\n};\n\nexport default UttaksplanAdvarselIkon;\n","import { bemUtils, intlUtils } from '@navikt/fp-common';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { getUkerOgDagerFromDager, måned, måned3bokstaver, år } from 'app/utils/dateUtils';\nimport classNames from 'classnames';\nimport dayjs from 'dayjs';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport {\n    isForeldrepengerFørFødselUttaksperiode,\n    isUtsettelseAnnenPart,\n    isUttakAnnenPart,\n    Periode,\n    Periodetype,\n} from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport StønadskontoIkon from '../stønadskonto-ikon/StønadskontoIkon';\nimport UtsettelseIkon from '../utsettelse-ikon/UtsettelseIkon';\nimport { getForelderNavn, getPeriodeTittel } from 'uttaksplan/utils/periodeUtils';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { getValidTidsperiode, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\n\nimport './periodelisteItemHeader.less';\nimport UttaksplanIkon from '../uttaksplan-ikon/UttaksplanIkon';\nimport { getIkonForVeilederMelding } from 'uttaksplan/validering/veilederInfo/components/VeilederMelding';\nimport { VeilederMessage } from 'uttaksplan/validering/veilederInfo/types';\nimport UttaksplanAdvarselIkon from 'uttaksplan/assets/UttaksplanAdvarselIkon';\nimport { Forelder } from 'app/types/Forelder';\nimport { Situasjon } from 'app/types/Situasjon';\n\ninterface Props {\n    egenPeriode: boolean;\n    periode: Periode;\n    navnPåForeldre: NavnPåForeldre;\n    melding: VeilederMessage | undefined;\n    annenForelderSamtidigUttakPeriode?: Periode;\n    familiehendelsesdato: Date;\n    termindato: Date | undefined;\n    situasjon: Situasjon;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n}\n\nconst bem = bemUtils('periodelisteItemHeader');\n\nexport const getPeriodeIkon = (\n    periode: Periode,\n    navnPåForeldre: NavnPåForeldre,\n    harMidlertidigOmsorg?: boolean,\n    erFarEllerMedmor?: boolean,\n    situasjon?: Situasjon,\n    erAleneOmOmsorg?: boolean\n): React.ReactNode | undefined => {\n    switch (periode.type) {\n        case Periodetype.Uttak:\n            return (\n                <StønadskontoIkon\n                    konto={periode.konto}\n                    forelder={periode.forelder}\n                    gradert={periode.gradert}\n                    navnPåForeldre={navnPåForeldre}\n                    harMidlertidigOmsorg={harMidlertidigOmsorg}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    situasjon={situasjon}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                />\n            );\n        case Periodetype.Overføring:\n            return (\n                <StønadskontoIkon konto={periode.konto} forelder={periode.forelder} navnPåForeldre={navnPåForeldre} />\n            );\n        case Periodetype.Utsettelse:\n            return <UtsettelseIkon årsak={periode.årsak} />;\n        case Periodetype.Opphold:\n            return (\n                <StønadskontoIkon\n                    konto={StønadskontoType.Foreldrepenger}\n                    forelder={periode.forelder}\n                    navnPåForeldre={navnPåForeldre}\n                />\n            );\n        case Periodetype.Info:\n            if (isUtsettelseAnnenPart(periode)) {\n                return <UtsettelseIkon årsak={periode.årsak} />;\n            } else {\n                return (\n                    <StønadskontoIkon\n                        konto={StønadskontoType.Foreldrepenger}\n                        forelder={periode.forelder}\n                        navnPåForeldre={navnPåForeldre}\n                    />\n                );\n            }\n        case Periodetype.Hull:\n            return <UttaksplanAdvarselIkon />;\n    }\n    return undefined;\n};\n\ntype VarighetFormat = 'full' | 'normal';\n\nexport const getVarighetString = (antallDager: number, intl: IntlShape, format: VarighetFormat = 'full'): string => {\n    const { uker, dager } = getUkerOgDagerFromDager(Math.abs(antallDager));\n    const dagerStr = intl.formatMessage(\n        { id: 'common.varighet.dager' },\n        {\n            dager,\n        }\n    );\n    if (uker === 0) {\n        return dagerStr;\n    }\n    const ukerStr = intl.formatMessage({ id: 'common.varighet.uker' }, { uker });\n    if (dager > 0) {\n        return `${ukerStr}${intl.formatMessage({\n            id: `common.varighet.separator--${format}`,\n        })}${dagerStr}`;\n    }\n    return ukerStr;\n};\n\nconst renderDagMnd = (dato: Date, visÅr = true): JSX.Element => {\n    const d = dayjs(dato);\n\n    return (\n        <div className={bem.element('dagmnd')}>\n            <span className={bem.element('dagmnd__dato')}>\n                <Normaltekst>\n                    {d.get('date')}. {måned3bokstaver(d)}.\n                </Normaltekst>\n            </span>\n            {visÅr && (\n                <Normaltekst tag=\"span\" className={bem.element('dagmnd__mnd')}>\n                    <abbr title={`${måned(d)} ${år(d)}`}>{år(d)}</abbr>\n                </Normaltekst>\n            )}\n        </div>\n    );\n};\n\nconst PeriodelisteItemHeader: FunctionComponent<Props> = ({\n    egenPeriode,\n    periode,\n    navnPåForeldre,\n    melding,\n    annenForelderSamtidigUttakPeriode,\n    familiehendelsesdato,\n    termindato,\n    situasjon,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n}) => {\n    const intl = useIntl();\n\n    let varighetString;\n    const erFpFørTerminUtenUttak =\n        isForeldrepengerFørFødselUttaksperiode(periode) && periode.skalIkkeHaUttakFørTermin === true;\n    if (erFpFørTerminUtenUttak) {\n        varighetString = intlUtils(intl, 'uttaksplan.periodeliste.header.skalIkkeHaUttakFørTermin');\n    } else {\n        varighetString = getVarighetString(Tidsperioden(periode.tidsperiode).getAntallUttaksdager(), intl);\n    }\n\n    let annenForelderIsMor;\n    let annenForelderNavn;\n    let beskrivelseSamtidigUttak;\n    if (annenForelderSamtidigUttakPeriode && isUttakAnnenPart(annenForelderSamtidigUttakPeriode)) {\n        annenForelderIsMor = annenForelderSamtidigUttakPeriode.forelder === Forelder.mor;\n        annenForelderNavn = getForelderNavn(annenForelderSamtidigUttakPeriode.forelder, navnPåForeldre);\n        beskrivelseSamtidigUttak = getVarighetString(\n            getValidTidsperiode(annenForelderSamtidigUttakPeriode.tidsperiode)\n                ? Tidsperioden(annenForelderSamtidigUttakPeriode.tidsperiode).getAntallUttaksdager()\n                : 0,\n            intl\n        );\n    }\n\n    return (\n        <div>\n            <div className={bem.block}>\n                <div\n                    className={classNames(\n                        bem.element('content'),\n                        egenPeriode ? bem.modifier('egenPeriode') : bem.modifier('annenPart')\n                    )}\n                >\n                    <div className={bem.element('ikon')}>{getPeriodeIkon(periode, navnPåForeldre)}</div>\n                    <div className={bem.element('tittel')}>\n                        <Element tag=\"h3\">\n                            {getPeriodeTittel(\n                                intl,\n                                periode,\n                                navnPåForeldre,\n                                familiehendelsesdato,\n                                termindato,\n                                situasjon,\n                                erFarEllerMedmor,\n                                erAleneOmOmsorg\n                            )}\n                        </Element>\n                        <Normaltekst>{varighetString}</Normaltekst>\n                    </div>\n                    <div className={bem.element('advarsel')}>\n                        {melding && (\n                            <span role=\"presentation\">\n                                <UttaksplanIkon\n                                    ikon={getIkonForVeilederMelding(melding)}\n                                    title={melding.contentIntlKey}\n                                />\n                            </span>\n                        )}\n                    </div>\n                    {!erFpFørTerminUtenUttak && (\n                        <div className={bem.element('dato-container')}>\n                            {renderDagMnd(periode.tidsperiode.fom)}\n                            {renderDagMnd(periode.tidsperiode.tom)}\n                        </div>\n                    )}\n                </div>\n            </div>\n\n            {annenForelderSamtidigUttakPeriode && (\n                <div\n                    className={classNames(bem.element('samtidig-uttak'), {\n                        [bem.element('samtidig-uttak-mor')]: annenForelderIsMor,\n                        [bem.element('samtidig-uttak-far')]: !annenForelderIsMor,\n                    })}\n                >\n                    <div>\n                        <Element>\n                            <FormattedMessage id=\"oppsummering.morsAktivitet.SamtidigUttak\" />\n                        </Element>\n                    </div>\n                    <div className={bem.element('beskrivelse')}>\n                        <em className={bem.element('beskrivelse__tekst')}>\n                            {beskrivelseSamtidigUttak}\n                            <em className={bem.element('hvem')}> - {annenForelderNavn}</em>\n                        </em>\n                    </div>\n                    {annenForelderSamtidigUttakPeriode.tidsperiode && (\n                        <div className={bem.element('tidsrom')}>\n                            {renderDagMnd(annenForelderSamtidigUttakPeriode.tidsperiode.fom, false)}\n                            {renderDagMnd(annenForelderSamtidigUttakPeriode.tidsperiode.tom, false)}\n                        </div>\n                    )}\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default PeriodelisteItemHeader;\n","import { ActionLink, bemUtils, Block, intlUtils } from '@navikt/fp-common';\nimport { Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { førsteOktober2021ReglerGjelder } from 'app/utils/dateUtils';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Periode, Periodetype } from 'uttaksplan/types/Periode';\n\nimport './periodeHull.less';\n\ninterface Props {\n    periode: Periode;\n    navnAnnenForelder: string;\n    erDeltUttak: boolean;\n    familiehendelsesdato: Date;\n    erFarEllerMedmor: boolean;\n    erAleneOmOmsorg: boolean;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n}\n\nconst PeriodeHull: FunctionComponent<Props> = ({\n    periode,\n    navnAnnenForelder,\n    erDeltUttak,\n    familiehendelsesdato,\n    erFarEllerMedmor,\n    erAleneOmOmsorg,\n    handleUpdatePeriode,\n}) => {\n    const intl = useIntl();\n    const bem = bemUtils('periodeHull');\n\n    const antallDager = Tidsperioden(periode.tidsperiode).getAntallUttaksdager();\n    const antallHelligdager = Tidsperioden(periode.tidsperiode).getAntallFridager();\n    const antallUttaksdager = Tidsperioden(periode.tidsperiode).getAntallUttaksdager();\n    const kunHelligdager = antallHelligdager === antallUttaksdager;\n    const kunUttaksdager = antallHelligdager === 0;\n\n    const onLeggInnNyPeriode = () => {\n        const { id, tidsperiode } = periode;\n\n        handleUpdatePeriode({ id, type: Periodetype.Uttak, tidsperiode } as Periode, familiehendelsesdato);\n    };\n\n    const leggInnNyUtsettelse = () => {\n        const { id, tidsperiode } = periode;\n\n        handleUpdatePeriode({ id, type: Periodetype.Utsettelse, tidsperiode } as Periode, familiehendelsesdato);\n    };\n\n    const nyeRegler = førsteOktober2021ReglerGjelder(familiehendelsesdato);\n\n    return (\n        <div className={bem.block}>\n            <Block padBottom=\"l\" visible={kunHelligdager}>\n                <Normaltekst>\n                    <FormattedMessage id=\"uttaksplan.hull.helligdager\" />\n                </Normaltekst>\n            </Block>\n            <Block padBottom=\"l\" visible={kunUttaksdager || (kunUttaksdager === false && kunHelligdager === false)}>\n                <Normaltekst>\n                    {erDeltUttak ? (\n                        <FormattedMessage\n                            id=\"uttaksplan.hull.uttaksdager.deltUttak\"\n                            values={{\n                                navn: navnAnnenForelder,\n                                dager: antallDager,\n                            }}\n                        />\n                    ) : (\n                        <FormattedMessage\n                            id={\n                                nyeRegler && erFarEllerMedmor && !erAleneOmOmsorg\n                                    ? 'uttaksplan.hull.uttaksdager.ikkeDeltUttak.nyeRegler'\n                                    : 'uttaksplan.hull.uttaksdager.ikkeDeltUttak'\n                            }\n                            values={{\n                                dager: antallDager,\n                            }}\n                        />\n                    )}\n                </Normaltekst>\n            </Block>\n            <div className={bem.element('lenker')}>\n                <ActionLink onClick={onLeggInnNyPeriode}>{intlUtils(intl, 'uttaksplan.leggInnNyPeriode')}</ActionLink>\n                <ActionLink onClick={leggInnNyUtsettelse}>\n                    {intlUtils(intl, 'uttaksplan.leggInnNyUtsettelse')}\n                </ActionLink>\n            </div>\n        </div>\n    );\n};\n\nexport default PeriodeHull;\n","import { intlUtils } from '@navikt/fp-common';\nimport { Forelder } from 'app/types/Forelder';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { formaterDatoKompakt } from 'app/utils/dateUtils';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { isUttakAnnenPart, UtsettelseAnnenPartInfoPeriode, UttakAnnenPartInfoPeriode } from 'uttaksplan/types/Periode';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport { getForelderNavn, getOppholdskontoNavn } from 'uttaksplan/utils/periodeUtils';\n\nexport interface Props {\n    periode: UttakAnnenPartInfoPeriode | UtsettelseAnnenPartInfoPeriode;\n    navnPåForeldre: NavnPåForeldre;\n}\n\nconst getUtsettelseTekst = (intl: IntlShape, årsak: UtsettelseÅrsakType, foreldernavn: string, erMor: boolean) => {\n    return erMor\n        ? intlUtils(intl, `uttaksplan.utsettelseårsaktype.foreldernavn.far.${årsak}`, { foreldernavn })\n        : intlUtils(intl, `uttaksplan.utsettelseårsaktype.foreldernavn.mor.${årsak}`, { foreldernavn });\n};\n\nconst PeriodeInfo: FunctionComponent<Props> = ({ periode, navnPåForeldre }) => {\n    const intl = useIntl();\n\n    return (\n        <Normaltekst>\n            <strong>\n                <span>{formaterDatoKompakt(periode.tidsperiode.fom)}</span>\n                <span>&mdash;</span>\n                <span>{formaterDatoKompakt(periode.tidsperiode.tom)}:</span>\n            </strong>{' '}\n            {isUttakAnnenPart(periode)\n                ? getOppholdskontoNavn(\n                      intl,\n                      periode.årsak,\n                      getForelderNavn(periode.forelder, navnPåForeldre),\n                      periode.forelder === Forelder.mor\n                  )\n                : getUtsettelseTekst(\n                      intl,\n                      periode.årsak,\n                      getForelderNavn(periode.forelder, navnPåForeldre),\n                      periode.forelder === Forelder.mor\n                  )}\n        </Normaltekst>\n    );\n};\n\nexport default PeriodeInfo;\n","import { ActionLink, Block, intlUtils } from '@navikt/fp-common';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Periode, Periodetype } from 'uttaksplan/types/Periode';\n\ninterface Props {\n    periode: Periode;\n    handleUpdatePeriode: (periode: Periode, familiehendelsesdato: Date) => void;\n    familiehendelsesdato: Date;\n}\n\nconst PeriodeUtenUttak: FunctionComponent<Props> = ({ periode, handleUpdatePeriode, familiehendelsesdato }) => {\n    const intl = useIntl();\n\n    const onLeggTilNyPeriode = () => {\n        const { id, tidsperiode } = periode;\n\n        handleUpdatePeriode({ id, type: Periodetype.Uttak, tidsperiode } as Periode, familiehendelsesdato);\n    };\n\n    return (\n        <div>\n            <Block padBottom=\"l\">\n                <Normaltekst>\n                    <FormattedMessage id=\"uttaksplan.periodeUtenUttak.info.del1\" />\n                </Normaltekst>\n            </Block>\n            <Block padBottom=\"l\">\n                <Normaltekst>\n                    <FormattedMessage id=\"uttaksplan.periodeUtenUttak.info.del2\" />\n                </Normaltekst>\n            </Block>\n            <ActionLink onClick={onLeggTilNyPeriode}>{intlUtils(intl, 'uttaksplan.leggInnNyPeriode')}</ActionLink>\n        </div>\n    );\n};\n\nexport default PeriodeUtenUttak;\n","import { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\n\nexport enum PeriodeFørFødselFormField {\n    fom = 'fom',\n    tom = 'tom',\n    skalIkkeHaUttakFørTermin = 'skalIkkeHaUttakFørTermin',\n}\n\nexport interface PeriodeFørFødselFormData {\n    [PeriodeFørFødselFormField.fom]: Date | undefined;\n    [PeriodeFørFødselFormField.tom]: Date | undefined;\n    [PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin]: boolean;\n}\n\nexport const PeriodeFørFødselFormComponents = getTypedFormComponents<\n    PeriodeFørFødselFormField,\n    PeriodeFørFødselFormData,\n    string\n>();\n","import { hasValue } from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { PeriodeFørFødselFormData, PeriodeFørFødselFormField } from './periodeFørFødselFormConfig';\n\nconst PeriodeFørFødselFormConfig: QuestionConfig<PeriodeFørFødselFormData, PeriodeFørFødselFormField> = {\n    [PeriodeFørFødselFormField.fom]: {\n        isAnswered: ({ fom }) => hasValue(fom),\n        isIncluded: ({ skalIkkeHaUttakFørTermin }) => !skalIkkeHaUttakFørTermin,\n    },\n    [PeriodeFørFødselFormField.tom]: {\n        isAnswered: ({ tom }) => hasValue(tom),\n        isIncluded: ({ skalIkkeHaUttakFørTermin }) => !skalIkkeHaUttakFørTermin,\n    },\n    [PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin]: {\n        isAnswered: () => true,\n        isIncluded: () => true,\n        visibilityFilter: ({ fom, tom, skalIkkeHaUttakFørTermin }) =>\n            skalIkkeHaUttakFørTermin ? true : isValidTidsperiode({ fom, tom }),\n    },\n};\n\nexport const periodeFørFødselFormQuestionsConfig = Questions<PeriodeFørFødselFormData, PeriodeFørFødselFormField>(\n    PeriodeFørFødselFormConfig\n);\n","import uttaksConstants from 'app/constants';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport dayjs from 'dayjs';\nimport { ForeldrepengerFørFødselUttaksperiode, Periode, Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { PeriodeFørFødselFormData, PeriodeFørFødselFormField } from './periodeFørFødselFormConfig';\n\nexport const initialValues: PeriodeFørFødselFormData = {\n    [PeriodeFørFødselFormField.fom]: undefined,\n    [PeriodeFørFødselFormField.tom]: undefined,\n    [PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin]: false,\n};\n\nexport const getPeriodeFørFødselFormInitialValues = (\n    periode: ForeldrepengerFørFødselUttaksperiode,\n    familiehendelsesdato: Date\n): PeriodeFørFødselFormData => {\n    const sisteUttaksagFørFødsel = Uttaksdagen(dayjs(familiehendelsesdato).toDate()).forrige();\n    const førsteUttaksdag3UkerFørFødsel = Uttaksdagen(sisteUttaksagFørFødsel).trekkFra(\n        uttaksConstants.ANTALL_UKER_FORELDREPENGER_FØR_FØDSEL * 5 - 1\n    );\n    const fom = periode.tidsperiode.fom !== undefined ? periode.tidsperiode.fom : førsteUttaksdag3UkerFørFødsel;\n    const tom = periode.tidsperiode.tom !== undefined ? periode.tidsperiode.tom : sisteUttaksagFørFødsel;\n    return {\n        ...initialValues,\n        fom,\n        tom,\n        skalIkkeHaUttakFørTermin: periode.skalIkkeHaUttakFørTermin,\n    };\n};\n\nexport const mapPeriodeFørFødselFormToPeriode = (\n    values: Partial<PeriodeFørFødselFormData>,\n    periode: ForeldrepengerFørFødselUttaksperiode\n): Periode => {\n    return {\n        type: Periodetype.Uttak,\n        id: periode.id,\n        forelder: periode.forelder,\n        konto: StønadskontoType.ForeldrepengerFørFødsel,\n        tidsperiode: {\n            fom: values.fom!,\n            tom: values.tom!,\n        },\n        skalIkkeHaUttakFørTermin: !!values.skalIkkeHaUttakFørTermin,\n    };\n};\n","import { Block, intlUtils } from '@navikt/fp-common';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { ISOStringToDate } from 'app/utils/dateUtils';\nimport React, { FunctionComponent, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport TidsperiodeDisplay from 'uttaksplan/components/tidsperiode-display/TidsperiodeDisplay';\nimport UttakEndreTidsperiodeSpørsmål from 'uttaksplan/components/uttak-endre-tidsperiode-spørsmål/UttakEndreTidsperiodeSpørsmål';\nimport { ForeldrepengerFørFødselUttaksperiode, Periode, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { SubmitListener } from '../submit-listener/SubmitListener';\nimport TidsperiodeForm from '../tidsperiode-form/TidsperiodeForm';\nimport {\n    PeriodeFørFødselFormComponents,\n    PeriodeFørFødselFormData,\n    PeriodeFørFødselFormField,\n} from './periodeFørFødselFormConfig';\nimport { periodeFørFødselFormQuestionsConfig } from './periodeFørFødselFormQuestionsConfig';\nimport { getPeriodeFørFødselFormInitialValues, mapPeriodeFørFødselFormToPeriode } from './periodeFørFødselFormUtils';\n\ninterface Props {\n    periode: ForeldrepengerFørFødselUttaksperiode;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    familiehendelsesdato: Date;\n    erFarEllerMedmor: boolean;\n    morHarRett: boolean;\n    situasjon: Situasjon;\n    utsettelserIPlan: Utsettelsesperiode[];\n}\n\nconst PeriodeFørFødselForm: FunctionComponent<Props> = ({\n    periode,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    erFarEllerMedmor,\n    morHarRett,\n    situasjon,\n    utsettelserIPlan,\n}) => {\n    const { tidsperiode } = periode;\n    const [tidsperiodeIsOpen, setTidsperiodeIsOpen] = useState(false);\n    const intl = useIntl();\n\n    const toggleVisTidsperiode = () => {\n        setTidsperiodeIsOpen(!tidsperiodeIsOpen);\n    };\n\n    const handleCleanup = (\n        values: PeriodeFørFødselFormData,\n        _visibility: QuestionVisibility<PeriodeFørFødselFormField, undefined>\n    ): PeriodeFørFødselFormData => {\n        return values;\n    };\n\n    return (\n        <PeriodeFørFødselFormComponents.FormikWrapper\n            initialValues={getPeriodeFørFødselFormInitialValues(periode, familiehendelsesdato)}\n            onSubmit={(values) =>\n                handleUpdatePeriode(mapPeriodeFørFødselFormToPeriode(values, periode), familiehendelsesdato)\n            }\n            renderForm={({ setFieldValue, values }) => {\n                const visibility = periodeFørFødselFormQuestionsConfig.getVisbility(values);\n\n                return (\n                    <>\n                        <Block\n                            visible={\n                                !isValidTidsperiode(tidsperiode) && visibility.isVisible(PeriodeFørFødselFormField.fom)\n                            }\n                            padBottom=\"l\"\n                        >\n                            <TidsperiodeForm\n                                tidsperiode={tidsperiode}\n                                familiehendelsesdato={familiehendelsesdato}\n                                onBekreft={(values) => {\n                                    setFieldValue(PeriodeFørFødselFormField.fom, ISOStringToDate(values.fom));\n                                    setFieldValue(PeriodeFørFødselFormField.tom, ISOStringToDate(values.tom));\n                                }}\n                                ugyldigeTidsperioder={undefined}\n                                utsettelserIPlan={utsettelserIPlan}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                morHarRett={morHarRett}\n                                situasjon={situasjon}\n                                erFarMedmorOgHarAleneomsorg={false}\n                            />\n                        </Block>\n                        <PeriodeFørFødselFormComponents.Form includeButtons={false}>\n                            <SubmitListener cleanup={() => handleCleanup(values, visibility)} />\n\n                            <Block\n                                visible={\n                                    isValidTidsperiode(tidsperiode) &&\n                                    visibility.isVisible(PeriodeFørFødselFormField.fom)\n                                }\n                                padBottom=\"l\"\n                            >\n                                <TidsperiodeDisplay\n                                    tidsperiode={tidsperiode}\n                                    toggleVisTidsperiode={toggleVisTidsperiode}\n                                />\n                                <UttakEndreTidsperiodeSpørsmål\n                                    periode={periode}\n                                    familiehendelsesdato={familiehendelsesdato}\n                                    ugyldigeTidsperioder={undefined}\n                                    utsettelserIPlan={utsettelserIPlan}\n                                    onBekreft={(values) => {\n                                        toggleVisTidsperiode();\n                                        setFieldValue(PeriodeFørFødselFormField.fom, values.fom);\n                                        setFieldValue(PeriodeFørFødselFormField.tom, values.tom);\n                                    }}\n                                    changeTidsperiode={(values) => {\n                                        setFieldValue(PeriodeFørFødselFormField.fom, values.fom);\n                                        setFieldValue(PeriodeFørFødselFormField.tom, values.tom);\n                                    }}\n                                    tidsperiode={tidsperiode}\n                                    onAvbryt={() => toggleVisTidsperiode()}\n                                    visible={tidsperiodeIsOpen}\n                                    erFarEllerMedmor={erFarEllerMedmor}\n                                    morHarRett={morHarRett}\n                                    situasjon={situasjon}\n                                    erFarMedmorOgHarAleneomsorg={false}\n                                />\n                            </Block>\n\n                            <Block\n                                visible={visibility.isVisible(PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin)}\n                                padBottom=\"l\"\n                            >\n                                <PeriodeFørFødselFormComponents.Checkbox\n                                    name={PeriodeFørFødselFormField.skalIkkeHaUttakFørTermin}\n                                    label={intlUtils(intl, 'uttaksplan.periodeFørFødselForm.skalIkkeHaUttakFørTermin')}\n                                />\n                            </Block>\n                        </PeriodeFørFødselFormComponents.Form>\n                    </>\n                );\n            }}\n        />\n    );\n};\n\nexport default PeriodeFørFødselForm;\n","import { IntlShape } from 'react-intl';\nimport { bemUtils, Block } from '@navikt/fp-common';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport classNames from 'classnames';\nimport { EkspanderbartpanelBase } from 'nav-frontend-ekspanderbartpanel';\nimport React, { Dispatch, FunctionComponent, SetStateAction } from 'react';\nimport {\n    isAvslåttPeriode,\n    isForeldrepengerFørFødselUttaksperiode,\n    isInfoPeriode,\n    Periode,\n    Periodetype,\n    Utsettelsesperiode,\n} from 'uttaksplan/types/Periode';\nimport { VeilederMessage } from 'uttaksplan/validering/veilederInfo/types';\nimport VeilederMeldinger from 'uttaksplan/validering/veilederInfo/VeilederMeldinger';\nimport PeriodelisteItemHeader from '../periodeliste-item-header/PeriodelisteItemHeader';\nimport PeriodeHull from '../perioder/PeriodeHull';\nimport PeriodeInfo from '../perioder/PeriodeInfo';\nimport PeriodeUtenUttak from '../perioder/PeriodeUtenUttak';\nimport PeriodeFørFødselForm from '../uttaks-forms/periode-før-fødsel-form/PeriodeFørFødselForm';\nimport PeriodeUtsettelseForm from '../uttaks-forms/periode-utsettelse-form/PeriodeUtsettelseForm';\nimport PeriodeUttakForm from '../uttaks-forms/periode-uttak-form/PeriodeUttakForm';\n\nimport './periodelisteItem.less';\n\ninterface Props {\n    egenPeriode: boolean;\n    periode: Periode;\n    isOpen: boolean;\n    toggleIsOpen: (id: string) => void;\n    familiehendelsesdato: Date;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    handleDeletePeriode: (periodeId: string) => void;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    meldinger?: VeilederMessage[];\n    erMorUfør: boolean;\n    annenForelderSamtidigUttakPeriode: Periode | undefined;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    setPeriodeErGyldig: Dispatch<SetStateAction<boolean>>;\n    erEndringssøknad: boolean;\n    termindato: Date | undefined;\n    antallBarn: number;\n    utsettelserIPlan: Utsettelsesperiode[];\n    intl: IntlShape;\n}\n\nconst renderPeriodeListeInnhold = (\n    periode: Periode,\n    familiehendelsesdato: Date,\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void,\n    stønadskontoer: TilgjengeligStønadskonto[],\n    navnPåForeldre: NavnPåForeldre,\n    annenForelder: AnnenForelder,\n    toggleIsOpen: (id: string) => void,\n    arbeidsforhold: Arbeidsforhold[],\n    handleDeletePeriode: (periodeId: string) => void,\n    erFarEllerMedmor: boolean,\n    erFlerbarnssøknad: boolean,\n    erAleneOmOmsorg: boolean,\n    erDeltUttak: boolean,\n    situasjon: Situasjon,\n    erMorUfør: boolean,\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean,\n    setPeriodeErGyldig: Dispatch<SetStateAction<boolean>>,\n    erEndringssøknad: boolean,\n    termindato: Date | undefined,\n    antallBarn: number,\n    utsettelserIPlan: Utsettelsesperiode[],\n    intl: IntlShape\n) => {\n    switch (periode.type) {\n        case Periodetype.Uttak:\n        case Periodetype.Overføring:\n        case Periodetype.Opphold:\n            if (isForeldrepengerFørFødselUttaksperiode(periode)) {\n                return (\n                    <PeriodeFørFødselForm\n                        periode={periode}\n                        familiehendelsesdato={familiehendelsesdato}\n                        handleUpdatePeriode={handleUpdatePeriode}\n                        erFarEllerMedmor={erFarEllerMedmor}\n                        morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                        situasjon={situasjon}\n                        utsettelserIPlan={utsettelserIPlan}\n                    />\n                );\n            }\n\n            return (\n                <PeriodeUttakForm\n                    periode={periode}\n                    familiehendelsesdato={familiehendelsesdato}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                    stønadskontoer={stønadskontoer}\n                    navnPåForeldre={navnPåForeldre}\n                    annenForelder={annenForelder}\n                    toggleIsOpen={toggleIsOpen}\n                    arbeidsforhold={arbeidsforhold}\n                    handleDeletePeriode={handleDeletePeriode}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    erFlerbarnssøknad={erFlerbarnssøknad}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    erDeltUttak={erDeltUttak}\n                    situasjon={situasjon}\n                    erMorUfør={erMorUfør}\n                    erEndringssøknad={erEndringssøknad}\n                    setPeriodeErGyldig={setPeriodeErGyldig}\n                    termindato={termindato}\n                    morHarRett={!søkerErFarEllerMedmorOgKunDeHarRett}\n                    antallBarn={antallBarn}\n                    utsettelserIPlan={utsettelserIPlan}\n                    intl={intl}\n                />\n            );\n        case Periodetype.Utsettelse:\n            return (\n                <PeriodeUtsettelseForm\n                    periode={periode}\n                    familiehendelsesdato={familiehendelsesdato}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    handleDeletePeriode={handleDeletePeriode}\n                    toggleIsOpen={toggleIsOpen}\n                    navnPåForeldre={navnPåForeldre}\n                    erMorUfør={erMorUfør}\n                    søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                    arbeidsforhold={arbeidsforhold}\n                    situasjon={situasjon}\n                    utsettelserIPlan={utsettelserIPlan}\n                />\n            );\n        case Periodetype.Hull:\n            return (\n                <PeriodeHull\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    erDeltUttak={erDeltUttak}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    periode={periode}\n                    familiehendelsesdato={familiehendelsesdato}\n                    navnAnnenForelder={erFarEllerMedmor ? navnPåForeldre.mor : navnPåForeldre.farMedmor}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                />\n            );\n        case Periodetype.PeriodeUtenUttak:\n            return (\n                <PeriodeUtenUttak\n                    periode={periode}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                    familiehendelsesdato={familiehendelsesdato}\n                />\n            );\n        case Periodetype.Info:\n            return (\n                periode.visPeriodeIPlan &&\n                !isAvslåttPeriode(periode) && <PeriodeInfo periode={periode} navnPåForeldre={navnPåForeldre} />\n            );\n        default:\n            return <div>Ingen visning</div>;\n    }\n};\n\nconst PeriodelisteItem: FunctionComponent<Props> = ({\n    egenPeriode,\n    periode,\n    isOpen,\n    toggleIsOpen,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    stønadskontoer,\n    navnPåForeldre,\n    annenForelder,\n    arbeidsforhold,\n    handleDeletePeriode,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    meldinger = [],\n    erMorUfør,\n    annenForelderSamtidigUttakPeriode,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    erEndringssøknad,\n    setPeriodeErGyldig,\n    termindato,\n    antallBarn,\n    utsettelserIPlan,\n    intl,\n}) => {\n    const bem = bemUtils('periodelisteItem');\n    const melding = meldinger.length > 0 ? meldinger[0] : undefined;\n\n    if (isInfoPeriode(periode) && !periode.visPeriodeIPlan) {\n        return null;\n    }\n\n    const toggleFocusAndOpen = () => {\n        const headerButton = window.document.getElementById(periode.id);\n\n        if (headerButton) {\n            setTimeout(() => {\n                headerButton.focus();\n            }, 150);\n        }\n\n        toggleIsOpen(periode.id);\n    };\n\n    return (\n        <article className={bem.block}>\n            <EkspanderbartpanelBase\n                className={classNames(bem.element('header'), egenPeriode ? undefined : bem.modifier('transparent'))}\n                id={periode.id}\n                tittel={\n                    <PeriodelisteItemHeader\n                        egenPeriode={egenPeriode}\n                        periode={periode}\n                        navnPåForeldre={navnPåForeldre}\n                        melding={melding}\n                        annenForelderSamtidigUttakPeriode={annenForelderSamtidigUttakPeriode}\n                        familiehendelsesdato={familiehendelsesdato}\n                        termindato={termindato}\n                        situasjon={situasjon}\n                        erFarEllerMedmor={erFarEllerMedmor}\n                        erAleneOmOmsorg={erAleneOmOmsorg}\n                    />\n                }\n                apen={isOpen}\n                onClick={() => toggleIsOpen(periode.id)}\n            >\n                <Block visible={meldinger.length > 0}>\n                    <VeilederMeldinger meldinger={meldinger.filter((m) => m.avvikType !== 'skjema')} />\n                </Block>\n                {renderPeriodeListeInnhold(\n                    periode,\n                    familiehendelsesdato,\n                    handleUpdatePeriode,\n                    stønadskontoer,\n                    navnPåForeldre,\n                    annenForelder,\n                    toggleFocusAndOpen,\n                    arbeidsforhold,\n                    handleDeletePeriode,\n                    erFarEllerMedmor,\n                    erFlerbarnssøknad,\n                    erAleneOmOmsorg,\n                    erDeltUttak,\n                    situasjon,\n                    erMorUfør,\n                    søkerErFarEllerMedmorOgKunDeHarRett,\n                    setPeriodeErGyldig,\n                    erEndringssøknad,\n                    termindato,\n                    antallBarn,\n                    utsettelserIPlan,\n                    intl\n                )}\n            </EkspanderbartpanelBase>\n        </article>\n    );\n};\n\nexport default PeriodelisteItem;\n","import React from 'react';\nimport { UttaksplanIkonProps } from 'uttaksplan/components/uttaksplan-ikon/UttaksplanIkon';\n\ninterface OwnProps {\n    fylt?: boolean;\n}\n\nconst HjerteIkon = (props: UttaksplanIkonProps & OwnProps) => {\n    const { title, fylt, ...rest } = props;\n    return fylt ? (\n        <svg focusable=\"false\" role=\"img\" aria-hidden=\"true\" width={24} height={24} {...rest}>\n            <title>{title}</title>\n            <path\n                fill=\"#ba3a26\"\n                fillRule=\"evenodd\"\n                d=\"M23 7.173c0 .41-.028.823-.083 1.243-.418 3.173-2.345 6.521-5.291 9.882a43.405 43.405 0 0 1-4.856 4.717c-.22.181-.378.307-.464.374a.5.5 0 0 1-.582.021 16.293 16.293 0 0 1-.467-.325 35.073 35.073 0 0 1-4.87-4.255C3.027 15.28 1 11.544 1 7.765 1-.286 9.586-1.719 12.003 4.612 14.42-1.616 23-.464 23 7.173z\"\n            />\n        </svg>\n    ) : (\n        <svg focusable=\"false\" role=\"img\" aria-hidden=\"true\" width={24} height={24} viewBox=\"0 0 24 24\" {...rest}>\n            <title>{title}</title>\n            <path\n                fill=\"none\"\n                fillRule=\"evenodd\"\n                stroke=\"#3E3832\"\n                strokeLinejoin=\"round\"\n                d=\"M12 22.993s10.5-8.128 10.5-15.82-9.316-8.284-10.5-.59C10.816-1.112 1.5-.52 1.5 7.764S12 22.993 12 22.993z\"\n            />\n        </svg>\n    );\n};\nexport default HjerteIkon;\n","import { bemUtils } from '@navikt/fp-common';\nimport Barn, { isAdoptertBarn, isFødtBarn } from 'app/context/types/Barn';\nimport { formaterDatoUtenDag } from 'app/utils/dateUtils';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React, { FunctionComponent, ReactNode } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport HjerteIkon from 'uttaksplan/assets/HjerteIkon';\n\nimport './familiehendelsesdatoDisplay.less';\n\ninterface Props {\n    familiehendelsedato: Date;\n    barn: Barn;\n}\n\nconst getTekst = (barn: Barn, familiehendelsedato: Date, antallBarn: number): ReactNode => {\n    if (!isAdoptertBarn(barn)) {\n        if (isFødtBarn(barn)) {\n            return (\n                <FormattedMessage\n                    id=\"uttaksplan.familiehendelsesdato.født\"\n                    values={{ antallBarn, dato: formaterDatoUtenDag(familiehendelsedato) }}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id=\"uttaksplan.familiehendelsesdato.termin\"\n                values={{ dato: formaterDatoUtenDag(familiehendelsedato) }}\n            />\n        );\n    }\n\n    return (\n        <FormattedMessage\n            id=\"uttaksplan.familiehendelsesdato.adopsjon\"\n            values={{ antallBarn, dato: formaterDatoUtenDag(familiehendelsedato) }}\n        />\n    );\n};\n\nconst FamiliehendelsedatoDisplay: FunctionComponent<Props> = ({ familiehendelsedato, barn }) => {\n    const bem = bemUtils('familiehendelsesdatoDisplay');\n\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('hjerte')}>\n                <HjerteIkon fylt={true} title=\"Hjerte\" />\n            </div>\n            <Normaltekst>{getTekst(barn, familiehendelsedato, barn.antallBarn)}</Normaltekst>\n        </div>\n    );\n};\n\nexport default FamiliehendelsedatoDisplay;\n","import React, { Dispatch, FunctionComponent, SetStateAction, useState } from 'react';\nimport { bemUtils, Block, formatDate } from '@navikt/fp-common';\nimport PeriodelisteItem from './../periodeliste-item/PeriodelisteItem';\nimport { isInfoPeriode, Periode, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\n\nimport './periodeliste.less';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { VeiledermeldingerPerPeriode } from 'uttaksplan/validering/veilederInfo/types';\nimport { getAnnenForelderSamtidigUttakPeriode } from 'uttaksplan/utils/periodeUtils';\nimport dayjs from 'dayjs';\nimport FamiliehendelsedatoDisplay from '../familiehendelsedato-display/FamiliehendelsedatoDisplay';\nimport Barn, { BarnFraNesteSak } from 'app/context/types/Barn';\nimport AlertStripe from 'nav-frontend-alertstriper';\nimport { FormattedMessage, IntlShape } from 'react-intl';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\n\ninterface Props {\n    uttaksplan: Periode[];\n    familiehendelsesdato: Date;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    handleDeletePeriode: (periodeId: string) => void;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    meldingerPerPeriode: VeiledermeldingerPerPeriode;\n    erMorUfør: boolean;\n    søkerErFarEllerMedmorOgKunDeHarRett: boolean;\n    setPeriodeErGyldig: Dispatch<SetStateAction<boolean>>;\n    erEndringssøknad: boolean;\n    termindato: Date | undefined;\n    antallBarn: number;\n    utsettelserIPlan: Utsettelsesperiode[];\n    barn: Barn;\n    barnFraNesteSak: BarnFraNesteSak | undefined;\n    intl: IntlShape;\n}\n\nconst getIndexOfFørstePeriodeEtterFødsel = (uttaksplan: Periode[], familiehendelsesdato: Date) => {\n    return uttaksplan.findIndex(\n        (p) => isValidTidsperiode(p.tidsperiode) && dayjs(p.tidsperiode.fom).isSameOrAfter(familiehendelsesdato)\n    );\n};\n\nconst getIndexOfSistePeriodeFørDato = (uttaksplan: Periode[], dato: Date | undefined) => {\n    if (dato !== undefined) {\n        return Math.max(0, uttaksplan.filter((p) => dayjs(p.tidsperiode.tom).isBefore(dato, 'day')).length);\n    }\n    return undefined;\n};\n\nconst Periodeliste: FunctionComponent<Props> = ({\n    uttaksplan,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    stønadskontoer,\n    navnPåForeldre,\n    annenForelder,\n    arbeidsforhold,\n    handleDeletePeriode,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    meldingerPerPeriode,\n    erMorUfør,\n    søkerErFarEllerMedmorOgKunDeHarRett,\n    setPeriodeErGyldig,\n    erEndringssøknad,\n    termindato,\n    antallBarn,\n    utsettelserIPlan,\n    barn,\n    barnFraNesteSak,\n    intl,\n}) => {\n    const [openPeriodeId, setOpenPeriodeId] = useState<string>(null!);\n    const bem = bemUtils('periodeliste');\n\n    const toggleIsOpen = (id: string) => {\n        if (openPeriodeId === id) {\n            setOpenPeriodeId(null!);\n        } else {\n            setOpenPeriodeId(id);\n        }\n    };\n\n    const indexOfFørstePeriodeEtterFødsel = getIndexOfFørstePeriodeEtterFødsel(uttaksplan, familiehendelsesdato);\n    const erAllePerioderIPlanenFørFødsel = indexOfFørstePeriodeEtterFødsel === -1;\n    const indexOfSistePeriodeFørNyStøndasperiodeNyttBarn =\n        barnFraNesteSak !== undefined\n            ? getIndexOfSistePeriodeFørDato(uttaksplan, barnFraNesteSak.startdatoFørsteStønadsperiode)\n            : undefined;\n    return (\n        <div className={bem.block}>\n            {uttaksplan.map((p, index) => {\n                return (\n                    <>\n                        {indexOfFørstePeriodeEtterFødsel === index ? (\n                            <FamiliehendelsedatoDisplay barn={barn} familiehendelsedato={familiehendelsesdato} />\n                        ) : null}\n                        {barnFraNesteSak !== undefined &&\n                        indexOfSistePeriodeFørNyStøndasperiodeNyttBarn !== undefined &&\n                        indexOfSistePeriodeFørNyStøndasperiodeNyttBarn === index ? (\n                            <Block padBottom=\"s\">\n                                <AlertStripe className=\"nyStønadsperiodeNesteSak\" type=\"info\">\n                                    <FormattedMessage\n                                        id=\"uttaksplan.periodeliste.info.nyStønadsperiodeNesteSak\"\n                                        values={{\n                                            datoStønadsperiodeNyttBarn: formatDate(\n                                                barnFraNesteSak.startdatoFørsteStønadsperiode\n                                            ),\n                                        }}\n                                    />\n                                </AlertStripe>\n                            </Block>\n                        ) : null}\n                        <PeriodelisteItem\n                            key={p.id}\n                            egenPeriode={!isInfoPeriode(p)}\n                            periode={p}\n                            isOpen={openPeriodeId === p.id}\n                            toggleIsOpen={toggleIsOpen}\n                            familiehendelsesdato={familiehendelsesdato}\n                            handleUpdatePeriode={handleUpdatePeriode}\n                            stønadskontoer={stønadskontoer}\n                            navnPåForeldre={navnPåForeldre}\n                            annenForelder={annenForelder}\n                            arbeidsforhold={arbeidsforhold}\n                            handleDeletePeriode={handleDeletePeriode}\n                            erFarEllerMedmor={erFarEllerMedmor}\n                            erFlerbarnssøknad={erFlerbarnssøknad}\n                            erAleneOmOmsorg={erAleneOmOmsorg}\n                            erDeltUttak={erDeltUttak}\n                            situasjon={situasjon}\n                            meldinger={meldingerPerPeriode[p.id]}\n                            erMorUfør={erMorUfør}\n                            annenForelderSamtidigUttakPeriode={getAnnenForelderSamtidigUttakPeriode(p, uttaksplan)}\n                            søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                            setPeriodeErGyldig={setPeriodeErGyldig}\n                            erEndringssøknad={erEndringssøknad}\n                            termindato={termindato}\n                            antallBarn={antallBarn}\n                            utsettelserIPlan={utsettelserIPlan}\n                            intl={intl}\n                        />\n                        {erAllePerioderIPlanenFørFødsel && index === uttaksplan.length - 1 ? (\n                            <FamiliehendelsedatoDisplay barn={barn} familiehendelsedato={familiehendelsesdato} />\n                        ) : null}\n                        {barnFraNesteSak !== undefined &&\n                        index === uttaksplan.length - 1 &&\n                        indexOfSistePeriodeFørNyStøndasperiodeNyttBarn === uttaksplan.length ? (\n                            <Block padBottom=\"s\">\n                                <AlertStripe className=\"nyStønadsperiodeNesteSak\" type=\"info\">\n                                    <FormattedMessage\n                                        id=\"uttaksplan.periodeliste.info.nyStønadsperiodeNesteSak\"\n                                        values={{\n                                            datoStønadsperiodeNyttBarn: formatDate(\n                                                barnFraNesteSak.startdatoFørsteStønadsperiode\n                                            ),\n                                        }}\n                                    />\n                                </AlertStripe>\n                            </Block>\n                        ) : null}\n                    </>\n                );\n            })}\n        </div>\n    );\n};\n\nexport default Periodeliste;\n","import { bemUtils, InfoBlock, intlUtils, Block, ActionLink } from '@navikt/fp-common';\nimport AnnenForelder, { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport Barn, { BarnFraNesteSak } from 'app/context/types/Barn';\nimport { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { Knapp } from 'nav-frontend-knapper';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport React, { Dispatch, FunctionComponent, SetStateAction, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Periode, Utsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { VeiledermeldingerPerPeriode } from 'uttaksplan/validering/veilederInfo/types';\nimport NyPeriode from '../uttaks-forms/ny-periode/NyPeriode';\nimport Periodeliste from './../periodeliste/Periodeliste';\n\nimport './planlegger.less';\n\ninterface Props {\n    uttaksplan: Periode[];\n    familiehendelsesdato: Date;\n    handleUpdatePeriode: (periode: Periode, familiehendelsedato: Date) => void;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    handleDeletePeriode: (periodeId: string) => void;\n    handleAddPeriode: (nyPeriode: Periode, familiehendelsedato: Date) => void;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    erDeltUttak: boolean;\n    situasjon: Situasjon;\n    meldingerPerPeriode: VeiledermeldingerPerPeriode;\n    erMorUfør: boolean;\n    setPeriodeErGyldig: Dispatch<SetStateAction<boolean>>;\n    erEndringssøknad: boolean;\n    setSlettUttaksplanModalOpen: (isOpen: boolean) => void;\n    setResetUttaksplanModalOpen: (isOpen: boolean) => void;\n    termindato: Date | undefined;\n    barn: Barn;\n    utsettelserIPlan: Utsettelsesperiode[];\n    barnFraNesteSak: BarnFraNesteSak | undefined;\n}\n\nconst Planlegger: FunctionComponent<Props> = ({\n    uttaksplan,\n    familiehendelsesdato,\n    handleUpdatePeriode,\n    stønadskontoer,\n    navnPåForeldre,\n    annenForelder,\n    arbeidsforhold,\n    handleDeletePeriode,\n    handleAddPeriode,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    erDeltUttak,\n    situasjon,\n    meldingerPerPeriode,\n    erMorUfør,\n    setPeriodeErGyldig,\n    erEndringssøknad,\n    setSlettUttaksplanModalOpen,\n    setResetUttaksplanModalOpen,\n    termindato,\n    barn,\n    utsettelserIPlan,\n    barnFraNesteSak,\n}) => {\n    const intl = useIntl();\n    const bem = bemUtils('planlegger');\n    const [nyPeriodeFormIsVisible, setNyPeriodeFormIsVisible] = useState(false);\n    const [isUtsettelse, setIsUtsettelse] = useState(false);\n    const nesteLedigeUttaksdato = Periodene(uttaksplan).getFørsteUttaksdagEtterSistePeriode();\n    const annenForelderErOppgitMenHarIkkeRett =\n        isAnnenForelderOppgitt(annenForelder) &&\n        !annenForelder.harRettPåForeldrepengerINorge &&\n        !annenForelder.harRettPåForeldrepengerIEØS;\n    const søkerErFarEllerMedmorOgKunDeHarRett =\n        erFarEllerMedmor && !erAleneOmOmsorg && annenForelderErOppgitMenHarIkkeRett;\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <InfoBlock>\n                    <Block padBottom=\"xl\">\n                        <section>\n                            <div className={bem.element('tittel')}>\n                                <div className={bem.element('tittelLinkWrapper')}>\n                                    <Systemtittel>{intlUtils(intl, 'uttaksplan.dinPlan')}</Systemtittel>\n                                    {erEndringssøknad && (\n                                        <ActionLink\n                                            onClick={() => setResetUttaksplanModalOpen(true)}\n                                            className={bem.element('resetPlan')}\n                                        >\n                                            <FormattedMessage id=\"uttaksplan.resetPlan.tittel\" />\n                                        </ActionLink>\n                                    )}\n                                    <ActionLink\n                                        onClick={() => setSlettUttaksplanModalOpen(true)}\n                                        className={bem.element('slettPlan')}\n                                    >\n                                        <FormattedMessage id=\"uttaksplan.slettPlan.tittel\" />\n                                    </ActionLink>\n                                </div>\n                            </div>\n\n                            <Periodeliste\n                                uttaksplan={uttaksplan}\n                                familiehendelsesdato={familiehendelsesdato}\n                                handleUpdatePeriode={handleUpdatePeriode}\n                                stønadskontoer={stønadskontoer}\n                                navnPåForeldre={navnPåForeldre}\n                                annenForelder={annenForelder}\n                                arbeidsforhold={arbeidsforhold}\n                                handleDeletePeriode={handleDeletePeriode}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                erFlerbarnssøknad={erFlerbarnssøknad}\n                                erAleneOmOmsorg={erAleneOmOmsorg}\n                                erDeltUttak={erDeltUttak}\n                                situasjon={situasjon}\n                                meldingerPerPeriode={meldingerPerPeriode}\n                                erMorUfør={erMorUfør}\n                                søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                                setPeriodeErGyldig={setPeriodeErGyldig}\n                                erEndringssøknad={erEndringssøknad}\n                                termindato={termindato}\n                                antallBarn={barn.antallBarn}\n                                utsettelserIPlan={utsettelserIPlan}\n                                barn={barn}\n                                barnFraNesteSak={barnFraNesteSak}\n                                intl={intl}\n                            />\n                        </section>\n                    </Block>\n                    {nyPeriodeFormIsVisible && (\n                        <div style={{ backgroundColor: 'white', padding: '1rem' }}>\n                            <NyPeriode\n                                setNyPeriodeFormIsVisible={setNyPeriodeFormIsVisible}\n                                annenForelder={annenForelder}\n                                arbeidsforhold={arbeidsforhold}\n                                familiehendelsesdato={familiehendelsesdato}\n                                isUtsettelse={isUtsettelse}\n                                navnPåForeldre={navnPåForeldre}\n                                stønadskontoer={stønadskontoer}\n                                handleAddPeriode={handleAddPeriode}\n                                erFarEllerMedmor={erFarEllerMedmor}\n                                erFlerbarnssøknad={erFlerbarnssøknad}\n                                erAleneOmOmsorg={erAleneOmOmsorg}\n                                erDeltUttak={erDeltUttak}\n                                situasjon={situasjon}\n                                erMorUfør={erMorUfør}\n                                setPeriodeErGyldig={setPeriodeErGyldig}\n                                nesteLedigeUttaksdato={nesteLedigeUttaksdato}\n                                søkerErFarEllerMedmorOgKunDeHarRett={søkerErFarEllerMedmorOgKunDeHarRett}\n                                erEndringssøknad={erEndringssøknad}\n                                termindato={termindato}\n                                antallBarn={barn.antallBarn}\n                                utsettelserIPlan={utsettelserIPlan}\n                                intl={intl}\n                            />\n                        </div>\n                    )}\n                </InfoBlock>\n            </Block>\n            {!nyPeriodeFormIsVisible && (\n                <Block padBottom=\"l\">\n                    <div className={bem.element('knapperad')}>\n                        <Knapp\n                            onClick={() => {\n                                setNyPeriodeFormIsVisible(true);\n                                setIsUtsettelse(false);\n                            }}\n                        >\n                            Legg til ny periode\n                        </Knapp>\n                        <Knapp\n                            onClick={() => {\n                                setNyPeriodeFormIsVisible(true);\n                                setIsUtsettelse(true);\n                            }}\n                        >\n                            Legg til utsettelse\n                        </Knapp>\n                    </div>\n                </Block>\n            )}\n        </>\n    );\n};\n\nexport default Planlegger;\n","import { ForeldreparForelder } from 'app/types/ForeldreparSituasjonTypes';\nimport React from 'react';\nimport { getForeldreparIkon } from './foreldreparUtils';\n\ninterface Props {\n    forelder: ForeldreparForelder;\n    width?: number;\n}\n\nconst ForelderIkon: React.FunctionComponent<Props> = ({ forelder, width }) => {\n    const scale = width ? width / 31 : 1;\n    const scaledWidth = 31 * scale;\n    const scaledHeight = 45 * scale;\n\n    return getForeldreparIkon(forelder, 'forelderIkon', scaledWidth, scaledHeight);\n};\n\nexport default ForelderIkon;\n","import { Perioden } from 'app/steps/uttaksplan-info/utils/Perioden';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { getFloatFromString } from 'app/utils/numberUtils';\nimport {\n    AvslåttPeriode,\n    InfoPeriode,\n    isAvslåttPeriode,\n    isInfoPeriode,\n    isOppholdsperiode,\n    isOverføringsperiode,\n    isUttaksperiode,\n    Oppholdsperiode,\n    Overføringsperiode,\n    Periode,\n    Periodetype,\n    UttakAnnenPartInfoPeriode,\n    Uttaksperiode,\n} from 'uttaksplan/types/Periode';\nimport { PeriodeInfoType } from 'uttaksplan/types/PeriodeInfoType';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport { getStønadskontoFromOppholdsårsak } from './periodeUtils';\n\nexport const finnAntallDagerÅTrekke = (periode: Periode): number => {\n    const dager = Perioden(periode).getAntallUttaksdager();\n    if (isUttaksperiode(periode)) {\n        const periodeErGradert = periode.stillingsprosent !== undefined;\n        const periodeErSamtidigUttak = periode.samtidigUttakProsent !== undefined;\n\n        if (periodeErGradert && periodeErSamtidigUttak) {\n            const graderingsProsent = (100 - getFloatFromString(periode.stillingsprosent)!) / 100;\n\n            return dager * graderingsProsent;\n        } else if (periodeErSamtidigUttak) {\n            return dager * (getFloatFromString(periode.samtidigUttakProsent)! / 100);\n        } else if (periodeErGradert) {\n            const graderingsProsent = (100 - getFloatFromString(periode.stillingsprosent)!) / 100;\n\n            return dager * graderingsProsent;\n        } else {\n            return dager;\n        }\n    }\n    return dager;\n};\n\nexport const getAllePerioderMedUttaksinfoFraUttaksplan = (perioder: Periode[]): Uttaksperiode[] => {\n    return [\n        ...perioder.filter(isUttaksperiode),\n        ...getUttakFraOppholdsperioder(perioder.filter(isOppholdsperiode)),\n        ...getUttakFraOverføringsperioder(perioder.filter(isOverføringsperiode)),\n        ...getUttakFraInfoperioder(perioder.filter(isInfoPeriode)),\n        ...getUttakFraAvslåttePerioder(perioder.filter(isAvslåttPeriode)),\n    ];\n};\n\nexport const beregnGjenståendeUttaksdager = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    uttaksplan: Periode[],\n    beregnDagerBrukt: boolean\n): StønadskontoUttak[] => {\n    const alleUttakIUttaksplan = getAllePerioderMedUttaksinfoFraUttaksplan(uttaksplan);\n    return tilgjengeligeStønadskontoer.map((konto): StønadskontoUttak => {\n        let antallDager = beregnDagerBrukt ? 0 : konto.dager;\n        const uttaksplanPerioder = alleUttakIUttaksplan.filter((p) => p.konto === konto.konto);\n        if (uttaksplanPerioder) {\n            uttaksplanPerioder.forEach((p: Periode) => {\n                if (p.type === Periodetype.Uttak || p.type === Periodetype.Overføring || isAvslåttPeriode(p)) {\n                    antallDager = beregnDagerBrukt\n                        ? antallDager + finnAntallDagerÅTrekke(p)\n                        : antallDager - finnAntallDagerÅTrekke(p);\n                }\n            });\n\n            antallDager = beregnDagerBrukt ? Math.floor(antallDager) : Math.ceil(antallDager);\n        }\n\n        return {\n            konto: konto.konto,\n            dager: antallDager,\n        };\n    });\n};\n\nexport const beregnBrukteUttaksdager = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    uttaksplan: Periode[]\n): StønadskontoUttak[] => {\n    return beregnGjenståendeUttaksdager(tilgjengeligeStønadskontoer, uttaksplan, true);\n};\n\nconst getUttakFraOppholdsperioder = (oppholdsperioder: Oppholdsperiode[]): Uttaksperiode[] => {\n    if (oppholdsperioder.length === 0) {\n        return [];\n    }\n    return oppholdsperioder.map(\n        (opphold: Oppholdsperiode): Uttaksperiode => ({\n            id: opphold.id,\n            tidsperiode: opphold.tidsperiode,\n            type: Periodetype.Uttak,\n            konto: getStønadskontoFromOppholdsårsak(opphold.årsak)!,\n            forelder: opphold.forelder,\n        })\n    );\n};\nconst getUttakFraOverføringsperioder = (overføringer: Overføringsperiode[]): Uttaksperiode[] => {\n    if (overføringer.length === 0) {\n        return [];\n    }\n    return overføringer.map(\n        (overføring): Uttaksperiode => ({\n            id: overføring.id,\n            tidsperiode: overføring.tidsperiode,\n            type: Periodetype.Uttak,\n            konto: overføring.konto,\n            forelder: overføring.forelder,\n        })\n    );\n};\n\nconst getUttakFraInfoperioder = (perioder: InfoPeriode[]): Uttaksperiode[] => {\n    if (perioder.length === 0) {\n        return [];\n    }\n    const oppholdAnnenPart: UttakAnnenPartInfoPeriode[] = [];\n    perioder\n        .filter((periode) => isAvslåttPeriode(periode) === false)\n        .forEach((periode) => {\n            if (periode.infotype === PeriodeInfoType.uttakAnnenPart) {\n                oppholdAnnenPart.push(periode);\n            }\n        });\n    return oppholdAnnenPart.map((periode): Uttaksperiode => {\n        const { type, årsak, ...rest } = periode;\n        return {\n            type: Periodetype.Uttak,\n            konto: getStønadskontoFromOppholdsårsak(periode.årsak),\n            ...rest,\n        };\n    });\n};\n\nconst getUttakFraAvslåttePerioder = (perioder: AvslåttPeriode[]): Uttaksperiode[] => {\n    if (perioder.length === 0) {\n        return [];\n    }\n\n    return perioder\n        .filter((p) => p.avslåttPeriodeType === Periodetype.Uttak)\n        .map(\n            (periode): Uttaksperiode => ({\n                type: Periodetype.Uttak,\n                konto: periode.kontoType!,\n                tidsperiode: periode.tidsperiode,\n                id: periode.id,\n                forelder: periode.forelder,\n            })\n        );\n};\n","import { beregnBrukteUttaksdager, getAllePerioderMedUttaksinfoFraUttaksplan } from 'uttaksplan/utils/uttaksPlanStatus';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { isUttaksperiode, Periode, Uttaksperiode } from 'uttaksplan/types/Periode';\nimport { Forelder } from 'app/types/Forelder';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\n\ninterface ForeldersBrukteDager {\n    førTermin: StønadskontoUttak[];\n    etterTermin: StønadskontoUttak[];\n    alle: StønadskontoUttak[];\n    dagerTotalt: number;\n    dagerEgneKvoter: number;\n    dagerAnnenForeldersKvote: number;\n    dagerFellesperiode: number;\n}\n\nexport interface BrukteDager {\n    mor: ForeldersBrukteDager;\n    farMedmor: ForeldersBrukteDager;\n    alle: StønadskontoUttak[];\n}\n\nconst isMorsPeriode = (periode: Uttaksperiode): boolean => {\n    return periode.forelder === Forelder.mor;\n};\nconst isFarsPeriode = (periode: Uttaksperiode): boolean => {\n    return periode.forelder === Forelder.farMedmor;\n};\nconst isFellesperiodeKvote = (uttak: StønadskontoUttak): boolean => uttak.konto === StønadskontoType.Fellesperiode;\n\nconst isMorsKvote = (uttak: StønadskontoUttak): boolean => {\n    switch (uttak.konto) {\n        case StønadskontoType.ForeldrepengerFørFødsel:\n        case StønadskontoType.Mødrekvote:\n            return true;\n        default:\n            return false;\n    }\n};\n\nconst isFarMedmorsKvote = (uttak: StønadskontoUttak): boolean => {\n    return uttak.konto === StønadskontoType.Fedrekvote;\n};\n\nconst summerBrukteUttaksdager = (uttak: StønadskontoUttak[]) => {\n    return uttak.reduce((dager, u) => dager + u.dager, 0);\n};\n\nconst getBrukteDagerForForelder = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    perioder: Uttaksperiode[],\n    familiehendelsesdato: Date,\n    forelder: Forelder\n): ForeldersBrukteDager => {\n    const perioderFørTermin = Periodene(perioder)\n        .getPerioderFørFamiliehendelsesdato(familiehendelsesdato)\n        .filter(isUttaksperiode);\n    const perioderEtterTermin = Periodene(perioder)\n        .getPerioderEtterFamiliehendelsesdato(familiehendelsesdato)\n        .filter(isUttaksperiode);\n    const førTermin = beregnBrukteUttaksdager(tilgjengeligeStønadskontoer, perioderFørTermin);\n    const etterTermin = beregnBrukteUttaksdager(tilgjengeligeStønadskontoer, perioderEtterTermin);\n    const alle = beregnBrukteUttaksdager(tilgjengeligeStønadskontoer, perioder);\n    const dagerTotalt = summerBrukteUttaksdager(alle);\n\n    const isMor = forelder === Forelder.mor;\n    const dagerEgneKvoter = summerBrukteUttaksdager(alle.filter(isMor ? isMorsKvote : isFarMedmorsKvote));\n    const dagerOverført = summerBrukteUttaksdager(alle.filter(isMor ? isFarMedmorsKvote : isMorsKvote));\n    const dagerFellesperiode = summerBrukteUttaksdager(alle.filter(isFellesperiodeKvote));\n\n    return {\n        førTermin,\n        etterTermin,\n        alle,\n        dagerTotalt,\n        dagerEgneKvoter,\n        dagerFellesperiode,\n        dagerAnnenForeldersKvote: dagerOverført,\n    };\n};\n\nexport const getBrukteDager = (\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    perioder: Periode[],\n    familiehendelsesdato: Date\n): BrukteDager => {\n    const perioderMedUttak = getAllePerioderMedUttaksinfoFraUttaksplan(perioder);\n    return {\n        mor: getBrukteDagerForForelder(\n            tilgjengeligeStønadskontoer,\n            perioderMedUttak.filter(isMorsPeriode),\n            familiehendelsesdato,\n            Forelder.mor\n        ),\n        farMedmor: getBrukteDagerForForelder(\n            tilgjengeligeStønadskontoer,\n            perioderMedUttak.filter(isFarsPeriode),\n            familiehendelsesdato,\n            Forelder.farMedmor\n        ),\n        alle: beregnBrukteUttaksdager(tilgjengeligeStønadskontoer, perioder),\n    };\n};\n","import { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport { beregnGjenståendeUttaksdager } from './uttaksPlanStatus';\n\nexport interface Uttaksstatus {\n    gjelderDagerBrukt: boolean;\n    uttak: StønadskontoUttak[];\n}\n\nexport const getUttaksstatus = ({\n    erDeltUttak,\n    erEndringssøknad,\n    harKomplettUttaksplan,\n    erFarEllerMedmor,\n    tilgjengeligeStønadskontoer,\n    uttaksplan,\n}: UttaksstatusFuncParams): Uttaksstatus => {\n    const gjelderDagerBrukt =\n        (erEndringssøknad && harKomplettUttaksplan !== true) ||\n        (erDeltUttak && erFarEllerMedmor && harKomplettUttaksplan !== true);\n\n    const uttak: StønadskontoUttak[] = beregnGjenståendeUttaksdager(\n        tilgjengeligeStønadskontoer,\n        uttaksplan,\n        gjelderDagerBrukt\n    );\n    return {\n        gjelderDagerBrukt,\n        uttak: erFarEllerMedmor\n            ? uttak.filter((kontouttak) => kontouttak.konto !== StønadskontoType.ForeldrepengerFørFødsel)\n            : uttak,\n    };\n};\n\nexport interface UttaksstatusFuncParams {\n    erDeltUttak: boolean;\n    erEndringssøknad: boolean;\n    harKomplettUttaksplan: boolean;\n    erFarEllerMedmor: boolean;\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[];\n    uttaksplan: Periode[];\n}\n\nexport const getUttaksstatusFunc = ({\n    erDeltUttak,\n    erEndringssøknad,\n    harKomplettUttaksplan,\n    erFarEllerMedmor,\n    tilgjengeligeStønadskontoer,\n    uttaksplan,\n}: UttaksstatusFuncParams): (() => Uttaksstatus) => {\n    return () =>\n        getUttaksstatus({\n            erDeltUttak,\n            erEndringssøknad,\n            harKomplettUttaksplan,\n            erFarEllerMedmor,\n            tilgjengeligeStønadskontoer,\n            uttaksplan,\n        });\n};\n","import React, { FunctionComponent } from 'react';\nimport { injectIntl, IntlShape } from 'react-intl';\nimport { bemUtils } from '@navikt/fp-common';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { getVarighetString } from 'app/utils/dateUtils';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport { getStønadskontoNavn } from 'uttaksplan/utils/stønadskontoerUtils';\nimport StønadskontoIkon from 'uttaksplan/components/stønadskonto-ikon/StønadskontoIkon';\nimport './kontostatus.less';\nimport { Situasjon } from 'app/types/Situasjon';\n\nexport interface Props {\n    uttak: StønadskontoUttak;\n    navnPåForeldre: NavnPåForeldre;\n    erEndringssøknad: boolean;\n    intl: IntlShape;\n    erFarEllerMedmor: boolean;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n}\n\nconst bem = bemUtils('kontostatus');\n\nconst Kontostatus: FunctionComponent<Props> = ({\n    uttak,\n    navnPåForeldre,\n    erEndringssøknad,\n    intl,\n    erFarEllerMedmor,\n    situasjon,\n    erAleneOmOmsorg,\n}) => {\n    if (erEndringssøknad && uttak.konto === StønadskontoType.ForeldrepengerFørFødsel) {\n        uttak.dager = 0;\n    }\n\n    const varighetString = getVarighetString(uttak.dager, intl);\n    const kontoErOvertrukket = uttak.dager < 0;\n\n    return (\n        <Normaltekst className={bem.block} tag=\"div\">\n            <div className={bem.element('ikon')} aria-hidden={true} role=\"presentation\">\n                <StønadskontoIkon\n                    konto={uttak.konto}\n                    navnPåForeldre={navnPåForeldre}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    situasjon={situasjon}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                />\n            </div>\n            <div className={bem.element('content')}>\n                <div className={kontoErOvertrukket ? bem.element('kontoOvertrukket') : bem.element('konto')}>\n                    {getStønadskontoNavn(intl, uttak.konto, navnPåForeldre, erFarEllerMedmor, erAleneOmOmsorg)}\n                </div>\n                <strong\n                    className={kontoErOvertrukket ? bem.element('dagerOvertrukket') : bem.element('dager')}\n                    data-name={uttak.konto}\n                >\n                    {kontoErOvertrukket ? `- ${varighetString}` : varighetString}\n                </strong>\n            </div>\n        </Normaltekst>\n    );\n};\n\nexport default injectIntl(Kontostatus);\n","import * as React from 'react';\nimport { bemUtils } from '@navikt/fp-common';\nimport './tilesList.less';\n\nconst bem = bemUtils('tilesList');\n\nconst TilesList: React.FunctionComponent<{ columns?: 1 | 2 | 3 | 'flex'; children?: React.ReactNode }> = ({\n    columns = 3,\n    children,\n}) => (\n    <ol className={bem.classNames(bem.block, bem.modifier(`columns-${columns}`))}>\n        {React.Children.map(children, (child) => (\n            <li className={bem.element('tile')}>{child}</li>\n        ))}\n    </ol>\n);\n\nexport default TilesList;\n","import React, { FunctionComponent } from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { bemUtils, intlUtils } from '@navikt/fp-common';\nimport { Undertittel } from 'nav-frontend-typografi';\nimport Personkort from 'app/components/personkort/Personkort';\nimport ForelderIkon from 'app/components/foreldrepar/ForelderIkon';\nimport { getVarighetString } from 'app/utils/dateUtils';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { getNavnPåForeldre } from 'app/utils/personUtils';\nimport { getSituasjonForelderSvg } from 'app/utils/foreldreparSituasjonUtils';\nimport { ForeldreparSituasjon } from 'app/types/ForeldreparSituasjonTypes';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport { BrukteDager, getBrukteDager } from 'uttaksplan/utils/brukteDagerUtils';\nimport { getUttaksstatus, Uttaksstatus } from 'uttaksplan/utils/uttaksstatus';\nimport Kontostatus from './konto-status/Kontostatus';\nimport TilesList from './tilesList/TilesList';\nimport './oversiktKvoter.less';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport { capitalizeFirstLetter } from 'app/utils/stringUtils';\n\nconst bem = bemUtils('oversiktKvoter');\n\nconst filtrerBortAnnenPartsKonto = (\n    uttakskontoer: StønadskontoUttak[],\n    erFarEllerMedmor: boolean\n): StønadskontoUttak[] => {\n    return erFarEllerMedmor\n        ? uttakskontoer.filter((uttak) => uttak.konto !== StønadskontoType.Mødrekvote)\n        : uttakskontoer.filter((uttak) => uttak.konto !== StønadskontoType.Fedrekvote);\n};\ninterface PropsPerForelder {\n    brukteDagerPerForelder: BrukteDager;\n    erDeltUttakINorge: boolean;\n    foreldreparSituasjon: ForeldreparSituasjon;\n    navnPåForeldre: NavnPåForeldre;\n    søkerErFarEllerMedmor: boolean;\n}\n\nconst OversiktPerForelder: FunctionComponent<PropsPerForelder> = ({\n    brukteDagerPerForelder,\n    erDeltUttakINorge,\n    foreldreparSituasjon,\n    navnPåForeldre,\n    søkerErFarEllerMedmor,\n}) => {\n    const intl = useIntl();\n    const søkerErMor = !søkerErFarEllerMedmor;\n    const svgInfo = getSituasjonForelderSvg(foreldreparSituasjon);\n\n    return (\n        <div className={bem.block}>\n            <div className={bem.element('perForelder')}>\n                <Undertittel tag=\"h2\" className=\"blokk-xs\">\n                    {intlUtils(intl, 'uttaksplan.oversiktKvoter.tittel.foreldre')}\n                </Undertittel>\n                <TilesList columns={'flex'}>\n                    {(erDeltUttakINorge || søkerErMor) && (\n                        <Personkort ikon={<ForelderIkon forelder={svgInfo.mor} />} tittel={navnPåForeldre.mor}>\n                            <strong>{getVarighetString(brukteDagerPerForelder.mor.dagerTotalt, intl)}</strong>\n                        </Personkort>\n                    )}\n                    {(erDeltUttakINorge || søkerErFarEllerMedmor) && (\n                        <Personkort\n                            ikon={<ForelderIkon forelder={svgInfo.farMedmor} />}\n                            tittel={capitalizeFirstLetter(navnPåForeldre.farMedmor)}\n                        >\n                            <strong>{getVarighetString(brukteDagerPerForelder.farMedmor.dagerTotalt, intl)}</strong>\n                        </Personkort>\n                    )}\n                </TilesList>\n            </div>\n        </div>\n    );\n};\n\ninterface PropsPerKvote {\n    erDeltUttakINorge: boolean;\n    navnPåForeldre: NavnPåForeldre;\n    erEndringssøknad: boolean;\n    uttaksstatus: Uttaksstatus;\n    erFarEllerMedmor: boolean;\n    situasjon: Situasjon;\n    erAleneOmOmsorg: boolean;\n}\n\nconst OversiktPerKvote: FunctionComponent<PropsPerKvote> = ({\n    erDeltUttakINorge,\n    navnPåForeldre,\n    erEndringssøknad,\n    uttaksstatus,\n    erFarEllerMedmor,\n    situasjon,\n    erAleneOmOmsorg,\n}) => {\n    const uttakÅVise = erDeltUttakINorge\n        ? uttaksstatus.uttak\n        : filtrerBortAnnenPartsKonto(uttaksstatus.uttak, erFarEllerMedmor);\n    return (\n        <div className={bem.element('perKvote')}>\n            <Undertittel tag=\"h2\" className=\"blokk-xs\">\n                <FormattedMessage\n                    id={\n                        uttaksstatus.gjelderDagerBrukt\n                            ? 'uttaksplan.oversiktKvoter.tittel.kontoer.brukteDager'\n                            : 'uttaksplan.oversiktKvoter.tittel.kontoer.ikkeBrukteDager'\n                    }\n                    values={{ antall: erDeltUttakINorge ? 2 : 1 }}\n                />\n            </Undertittel>\n            <TilesList columns={2}>\n                {uttakÅVise.map((uttak, idx) => (\n                    <Kontostatus\n                        key={idx}\n                        uttak={uttak}\n                        navnPåForeldre={navnPåForeldre}\n                        erEndringssøknad={erEndringssøknad}\n                        erFarEllerMedmor={erFarEllerMedmor}\n                        situasjon={situasjon}\n                        erAleneOmOmsorg={erAleneOmOmsorg}\n                    />\n                ))}\n            </TilesList>\n        </div>\n    );\n};\n\ninterface Props {\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[];\n    uttaksplan: Periode[];\n    erDeltUttak: boolean;\n    foreldreparSituasjon: ForeldreparSituasjon;\n    familiehendelsesdato: Date;\n    annenForelderHarRettINorge: boolean;\n    toTetteReglerGjelder: boolean;\n    intl: IntlShape;\n}\n\nconst OversiktKvoter: FunctionComponent<Props> = ({\n    tilgjengeligeStønadskontoer,\n    uttaksplan,\n    erDeltUttak,\n    foreldreparSituasjon,\n    familiehendelsesdato,\n    annenForelderHarRettINorge,\n    intl,\n}) => {\n    const søker = useSøkerinfo();\n    const søknad = useSøknad();\n    const søkerErFarEllerMedmor = isFarEllerMedmor(søknad.søkersituasjon.rolle);\n    const navnPåForeldre = getNavnPåForeldre(søker.person, søknad.annenForelder, søkerErFarEllerMedmor, intl);\n    const uttaksstatus = getUttaksstatus({\n        erDeltUttak: erDeltUttak,\n        erEndringssøknad: søknad.erEndringssøknad,\n        harKomplettUttaksplan: true,\n        erFarEllerMedmor: søkerErFarEllerMedmor,\n        tilgjengeligeStønadskontoer: tilgjengeligeStønadskontoer,\n        uttaksplan,\n    });\n    const brukteDagerPerForelder = getBrukteDager(tilgjengeligeStønadskontoer, uttaksplan, familiehendelsesdato);\n    const erDeltUttakINorge = erDeltUttak && annenForelderHarRettINorge;\n    return (\n        <div className={bem.block}>\n            <OversiktPerForelder\n                brukteDagerPerForelder={brukteDagerPerForelder}\n                erDeltUttakINorge={erDeltUttakINorge}\n                foreldreparSituasjon={foreldreparSituasjon}\n                navnPåForeldre={navnPåForeldre}\n                søkerErFarEllerMedmor={søkerErFarEllerMedmor}\n            />\n            <OversiktPerKvote\n                erDeltUttakINorge={erDeltUttakINorge}\n                navnPåForeldre={navnPåForeldre}\n                erEndringssøknad={søknad.erEndringssøknad}\n                uttaksstatus={uttaksstatus}\n                erFarEllerMedmor={søkerErFarEllerMedmor}\n                situasjon={søknad.søkersituasjon.situasjon}\n                erAleneOmOmsorg={søknad.søker.erAleneOmOmsorg}\n            />\n        </div>\n    );\n};\n\nexport default OversiktKvoter;\n","import { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { isHull, isInfoPeriode, isPeriodeUtenUttak } from 'uttaksplan/types/Periode';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const inneholderUttaksplanPerioderTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    return {\n        passerer:\n            grunnlag.perioder\n                .filter((p) => !isInfoPeriode(p) && !isPeriodeUtenUttak(p) && !isHull(p))\n                .filter((periode) => isValidTidsperiode(periode.tidsperiode)).length > 0,\n    };\n};\n","import { getTidsperiode, Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { Forelder } from 'app/types/Forelder';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { isPeriodeUtenUttak, Periode, Periodetype, Utsettelsesperiode, Uttaksperiode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { uttaksdatoer } from 'uttaksplan/utils/uttaksdatoerUtils';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport { MorsAktivitet } from 'uttaksplan/types/MorsAktivitet';\nimport { OverføringÅrsakType } from 'uttaksplan/types/OverføringÅrsakType';\nimport { erPeriodeFørDato } from 'uttaksplan/utils/periodeUtils';\nimport AnnenForelder from 'app/context/types/AnnenForelder';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\n\nconst ANTALL_UTTAKSDAGER_SEKS_UKER = 30;\n\nexport interface InformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor {\n    antallUttaksdagerTapt: number;\n    førsteRegistrerteUttaksdag: Date;\n    sisteUttaksdagInnenforSeksUker: Date;\n}\n\nexport const getInformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor = (\n    uttaksplan: Periode[],\n    familiehendelsesdato: Date,\n    søkerErFarEllerMedmor: boolean,\n    bareFarMedmorHarRett: boolean,\n    morErUfør: boolean,\n    søkerErFarEllerMedmorOgAnnenForelderKanIkkeOppgis: boolean,\n    søkerErFarEllerMedmorOgErAleneOmOmsorgen: boolean\n): InformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor | undefined => {\n    if (søkerErFarEllerMedmor === false || bareFarMedmorHarRett === false || morErUfør === true) {\n        return undefined;\n    }\n\n    if (søkerErFarEllerMedmorOgAnnenForelderKanIkkeOppgis || søkerErFarEllerMedmorOgErAleneOmOmsorgen) {\n        return undefined;\n    }\n\n    const førstePeriode = Periodene(uttaksplan).getFørstePerioderEtterFamiliehendelsesdato(familiehendelsesdato);\n    if (førstePeriode === undefined) {\n        return undefined;\n    }\n\n    const førsteUttaksdag = Uttaksdagen(familiehendelsesdato).denneEllerNeste();\n    const førsteRegistrerteUttaksdag = førstePeriode.tidsperiode.fom;\n    const sisteUttaksdagInnenforSeksUker = getTidsperiode(førsteUttaksdag, 30).tom;\n    const antallUttaksdager =\n        Tidsperioden({\n            fom: førsteUttaksdag,\n            tom: førsteRegistrerteUttaksdag,\n        }).getAntallUttaksdager() - 1;\n\n    if (antallUttaksdager === undefined || antallUttaksdager <= ANTALL_UTTAKSDAGER_SEKS_UKER) {\n        return undefined;\n    }\n\n    return {\n        antallUttaksdagerTapt: antallUttaksdager - ANTALL_UTTAKSDAGER_SEKS_UKER,\n        førsteRegistrerteUttaksdag,\n        sisteUttaksdagInnenforSeksUker,\n    };\n};\n\nexport const getUgyldigUttakMor = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    situasjon: Situasjon,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined,\n    flerbarnsFødsel?: boolean,\n    value?: string\n): Periode[] => {\n    if (situasjon == 'adopsjon') {\n        return [];\n    }\n\n    const førsteUttaksdag = uttaksdatoer(\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        termindato\n    ).førsteUttaksdagPåEllerEtterFødsel;\n    const førsteUttaksdagEtterSeksUker = Uttaksdagen(førsteUttaksdag).leggTil(30);\n    const førsteUttaksdagEtterÅtteUker = Uttaksdagen(førsteUttaksdag).leggTil(40);\n\n    let ugyldigUttakRegelFørsteDato: Date;\n    let ugyldigUttakRegelSisteDato: Date;\n\n    if (value === 'førsteSeksUkerForMor') {\n        ugyldigUttakRegelFørsteDato = førsteUttaksdag;\n        ugyldigUttakRegelSisteDato = førsteUttaksdagEtterSeksUker;\n    } else if (value === 'mellomSyvOgÅtteUkerForMor') {\n        ugyldigUttakRegelFørsteDato = førsteUttaksdagEtterSeksUker;\n        ugyldigUttakRegelSisteDato = førsteUttaksdagEtterÅtteUker;\n    }\n\n    const ugyldigPeriode = Periodene(perioder)\n        .getPerioderEtterFamiliehendelsesdato(ugyldigUttakRegelFørsteDato!)\n        .filter((p) => erPeriodeFørDato(p, ugyldigUttakRegelSisteDato));\n\n    let ugyldigeUtsettelser: Utsettelsesperiode[] = [];\n\n    if (value === 'mellomSyvOgÅtteUkerForMor') {\n        ugyldigeUtsettelser = Periodene(ugyldigPeriode)\n            .getUtsettelser()\n            .filter(\n                (p) =>\n                    p.forelder === Forelder.mor &&\n                    (p.årsak === UtsettelseÅrsakType.Ferie || p.årsak === UtsettelseÅrsakType.Arbeid)\n            );\n    } else if (value === 'førsteSeksUkerForMor') {\n        ugyldigeUtsettelser = Periodene(ugyldigPeriode)\n            .getUtsettelser()\n            .filter(\n                (p) =>\n                    p.forelder === Forelder.mor &&\n                    p.årsak !== UtsettelseÅrsakType.InstitusjonSøker &&\n                    p.årsak !== UtsettelseÅrsakType.InstitusjonBarnet &&\n                    p.årsak !== UtsettelseÅrsakType.Sykdom\n            );\n    }\n    const gradertePerioder = Periodene(ugyldigPeriode)\n        .getUttak()\n        .filter((p) => p.forelder === Forelder.mor && p.gradert === true);\n\n    const flernbarnsPerioder = Periodene(ugyldigPeriode)\n        .getUttak()\n        .filter((p) => p.forelder === Forelder.mor && p.ønskerFlerbarnsdager === true);\n\n    const fellesPerioder = Periodene(ugyldigPeriode)\n        .getUttak()\n        .filter((p) => p.forelder === Forelder.mor && p.konto === StønadskontoType.Fellesperiode);\n\n    let samtidigUttaksperioder: Uttaksperiode[] = [];\n\n    if (!flerbarnsFødsel && flerbarnsFødsel !== undefined && !andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n        samtidigUttaksperioder = Periodene(ugyldigPeriode)\n            .getUttak()\n            .filter((p) => p.forelder === Forelder.mor && p.ønskerSamtidigUttak);\n    }\n\n    return [\n        ...flernbarnsPerioder,\n        ...gradertePerioder,\n        ...ugyldigeUtsettelser,\n        ...fellesPerioder,\n        ...samtidigUttaksperioder,\n    ];\n};\n\nexport const unntakFarFørsteSeksUker = (periode: Uttaksperiode, harMidlertidigOmsorg: boolean) => ({\n    erMorForSykDeFørsteSeksUker: (): boolean => {\n        if (harMidlertidigOmsorg) {\n            return true;\n        }\n\n        if (periode.konto === StønadskontoType.Fellesperiode || periode.konto === StønadskontoType.Foreldrepenger) {\n            return (\n                periode.morsAktivitetIPerioden === MorsAktivitet.Innlagt ||\n                periode.morsAktivitetIPerioden === MorsAktivitet.TrengerHjelp ||\n                periode.erMorForSyk === true\n            );\n        }\n\n        if (periode.konto === StønadskontoType.Fedrekvote || periode.konto === StønadskontoType.AktivitetsfriKvote) {\n            return periode.erMorForSyk === true;\n        }\n\n        return false;\n    },\n    erFlerbarnsukerOgUttakAvFlerbarnsdagerEllerFedrekvote: (antallBarn: number): boolean => {\n        return antallBarn > 1 && periode.ønskerFlerbarnsdager === true;\n    },\n});\n\nconst erFarsUttakFørsteSeksUkerGyldig = (\n    periode: Uttaksperiode,\n    antallBarn: number,\n    harMidlertidigOmsorg: boolean\n): boolean => {\n    const unntak = unntakFarFørsteSeksUker(periode, harMidlertidigOmsorg);\n    return (\n        unntak.erMorForSykDeFørsteSeksUker() || unntak.erFlerbarnsukerOgUttakAvFlerbarnsdagerEllerFedrekvote(antallBarn)\n    );\n};\n\nexport const getUgyldigUttakFørsteSeksUkerForFarMedmor = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    antallBarn: number,\n    situasjon: Situasjon,\n    annenForelder: AnnenForelder,\n    erAleneOmOmsorg: boolean,\n    harMidlertidigOmsorg: boolean,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): Periode[] => {\n    if (situasjon === 'adopsjon' || annenForelder.kanIkkeOppgis || erAleneOmOmsorg) {\n        return [];\n    }\n\n    const førsteUttaksdag = uttaksdatoer(\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        termindato\n    ).førsteUttaksdagPåEllerEtterFødsel;\n    const førsteUttaksdagEtterSeksUker = Uttaksdagen(førsteUttaksdag).leggTil(30);\n\n    const farsPerioderInnenforSeksFørsteUker = Periodene(perioder)\n        .getPerioderEtterFamiliehendelsesdato(familiehendelsesdato)\n        .filter((p) => erPeriodeFørDato(p, førsteUttaksdagEtterSeksUker))\n        .filter((p) => p.type !== Periodetype.Hull && !isPeriodeUtenUttak(p) && p.forelder === Forelder.farMedmor);\n\n    const ugyldigeUttak = Periodene(farsPerioderInnenforSeksFørsteUker)\n        .getUttak()\n        .filter((p) => erFarsUttakFørsteSeksUkerGyldig(p, antallBarn, harMidlertidigOmsorg) === false);\n\n    const ugyldigeOverføringer = Periodene(farsPerioderInnenforSeksFørsteUker)\n        .getOverføringer()\n        .filter(\n            (p) =>\n                p.årsak !== OverføringÅrsakType.institusjonsoppholdAnnenForelder &&\n                p.årsak !== OverføringÅrsakType.sykdomAnnenForelder\n        );\n\n    const ugyldigeUtsettelser = Periodene(farsPerioderInnenforSeksFørsteUker)\n        .getUtsettelser()\n        .filter((utsettelse) => utsettelse.årsak !== UtsettelseÅrsakType.InstitusjonBarnet);\n\n    return [...ugyldigeUttak, ...ugyldigeOverføringer, ...ugyldigeUtsettelser];\n};\n","import { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { getUgyldigUttakMor } from '../utils/uttakValideringUtils';\n\nexport const harMorSøktUgyldigUttakFørsteSeksUkerTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const søkerErMor = !grunnlag.søkerErFarEllerMedmor;\n    if (søkerErMor) {\n        const ugyldigePerioder = getUgyldigUttakMor(\n            grunnlag.perioder,\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkersituasjon.situasjon,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.termindato,\n            grunnlag.erFlerbarnssøknad,\n            'førsteSeksUkerForMor'\n        );\n        const passerer = ugyldigePerioder.length === 0;\n        return {\n            passerer,\n            info: ugyldigePerioder.map((periode) => ({\n                intlKey: andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato)\n                    ? 'uttaksplan.validering.feil.morHarSøktUgyldigUttakFørsteSeksUker.etterWLB'\n                    : 'uttaksplan.validering.feil.morHarSøktUgyldigUttakFørsteSeksUker.førWLB',\n                periodeId: periode.id,\n            })),\n        };\n    }\n\n    return { passerer: true };\n};\n","import { IntlShape } from 'react-intl';\nimport { getUttaksstatus } from '../../utils/uttaksstatus';\nimport { getStønadskontoNavn } from '../../utils/stønadskontoerUtils';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat, RegelTestresultatInfo } from '../utils/types/regelTypes';\nimport { getVarighetString } from '../../../app/utils/dateUtils';\n\nexport const stønadskontoInneholderForMyeUttakKunSøkerTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const {\n        navnPåForeldre,\n        perioder,\n        stønadskontoer,\n        erDeltUttak,\n        erEndringssøknad,\n        harKomplettUttaksplan,\n        søkerErFarEllerMedmor,\n        søkerErAleneOmOmsorg,\n    } = grunnlag;\n    const stønadskontoerMedForMyeUttak = getUttaksstatus({\n        erDeltUttak,\n        erEndringssøknad,\n        harKomplettUttaksplan,\n        erFarEllerMedmor: søkerErFarEllerMedmor,\n        tilgjengeligeStønadskontoer: stønadskontoer,\n        uttaksplan: perioder,\n    }).uttak.filter((u) => u.dager < 0);\n    return {\n        passerer: stønadskontoerMedForMyeUttak.length === 0,\n        info: stønadskontoerMedForMyeUttak.map(\n            (uttak): RegelTestresultatInfo => ({\n                intlKey: 'uttaksplan.validering.feil.forMyeUttak',\n                values: {\n                    dager: (intl: IntlShape) => getVarighetString(Math.abs(uttak.dager), intl),\n                    konto: (intl: IntlShape) =>\n                        getStønadskontoNavn(\n                            intl,\n                            uttak.konto,\n                            navnPåForeldre,\n                            søkerErFarEllerMedmor,\n                            søkerErAleneOmOmsorg\n                        ),\n                },\n            })\n        ),\n    };\n};\n","import { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport { erPeriodeInnvilget } from 'uttaksplan/utils/periodeUtils';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { getUgyldigUttakFørsteSeksUkerForFarMedmor } from '../utils/uttakValideringUtils';\n\nexport const harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    const wlbReglerGjelder = andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato);\n    if (grunnlag.søkerErFarEllerMedmor && !wlbReglerGjelder) {\n        const ugyldigePerioder = getUgyldigUttakFørsteSeksUkerForFarMedmor(\n            grunnlag.perioder.filter((p) => !erPeriodeInnvilget(p)),\n            grunnlag.familiehendelsesdato,\n            grunnlag.antallBarn,\n            grunnlag.søkersituasjon.situasjon,\n            grunnlag.annenForelder,\n            grunnlag.søkerErAleneOmOmsorg,\n            grunnlag.søkerHarMidlertidigOmsorg,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.termindato\n        );\n        const passerer = ugyldigePerioder.length === 0;\n        return {\n            passerer,\n            info: ugyldigePerioder.map((periode) => ({\n                periodeId: periode.id,\n            })),\n        };\n    }\n\n    return { passerer: true };\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { uttaksplanErBareOpphold } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const erUttaksplanBareOppholdTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    return { passerer: uttaksplanErBareOpphold(grunnlag.perioder) === false };\n};\n","import { RegelTestresultat, RegelTest } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { uttaksplanSlutterMedOpphold } from 'app/steps/uttaksplan-info/utils/Periodene';\n\nexport const slutterUttaksplanMedOppholdTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    return { passerer: uttaksplanSlutterMedOpphold(grunnlag.perioder) === false };\n};\n","import { uttaksplanStarterMedOpphold } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const starterUttaksplanMedOppholdTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    if (grunnlag.erEndringssøknad) {\n        return { passerer: true };\n    }\n\n    return { passerer: uttaksplanStarterMedOpphold(grunnlag.perioder) === false };\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { isUttaksperiode, Periode } from 'uttaksplan/types/Periode';\nimport { getFloatFromString } from 'app/utils/numberUtils';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nconst uttaksplanGraderingStørreEnnSamtidigUttak = (uttaksplan: Periode[]) => {\n    const result = uttaksplan\n        .slice()\n        .filter(\n            (periode) => isUttaksperiode(periode) && periode.ønskerSamtidigUttak === true && periode.gradert === true\n        )\n        .filter(\n            (periode) =>\n                isUttaksperiode(periode) &&\n                getFloatFromString(periode.stillingsprosent)! + getFloatFromString(periode.samtidigUttakProsent)! >\n                    100.0\n        );\n\n    return result.length > 0;\n};\n\nexport const erUttaksplanGraderingStørreEnnSamtidigUttakTest: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    return { passerer: uttaksplanGraderingStørreEnnSamtidigUttak(grunnlag.perioder) === false };\n};\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const tilleggsopplysningerMaxLength = 1000;\n\nexport const maxLengthIsGreaterThanOrEqualToStringLength = (maxLength: number, value: string) => {\n    return value.length <= maxLength;\n};\n\nexport const tilleggsopplysningerErGyldig = (begrunnelse?: string) =>\n    maxLengthIsGreaterThanOrEqualToStringLength(tilleggsopplysningerMaxLength, begrunnelse || '');\n\nexport function erTilleggsopplysningerGyldigTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const { begrunnelseForSenEndring } = grunnlag.tilleggsopplysninger;\n    const begrunnelseTekst = begrunnelseForSenEndring ? begrunnelseForSenEndring.tekst : '';\n    return tilleggsopplysningerErGyldig(begrunnelseTekst)\n        ? { passerer: true }\n        : {\n              passerer: false,\n              info: {\n                  intlKey: 'uttaksplan.veileder.fritekst.kanIkkeVæreLengreEnn',\n                  values: { maxLength: tilleggsopplysningerMaxLength },\n              },\n          };\n}\n","import { getIllegalChars, validateTextHasLegalChars } from 'app/utils/validationUtil';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport function harTilleggsopplysningerGyldigeCharsTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const { begrunnelseForSenEndring } = grunnlag.tilleggsopplysninger;\n    const tekst = begrunnelseForSenEndring ? begrunnelseForSenEndring.tekst : '';\n    return validateTextHasLegalChars(tekst)\n        ? { passerer: true }\n        : {\n              passerer: false,\n              info: {\n                  intlKey: 'valideringsfeil.begrunnelseForSenEnding.kanIkkeInneholdeTegn',\n                  values: {\n                      ugyldigeTegn: getIllegalChars(tekst),\n                  },\n              },\n          };\n}\n","import { uttaksplanHarForMangeFlerbarnsdager } from 'app/steps/uttaksplan-info/utils/uttaksplanHarForMangeFlerbarnsuker';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const harUttaksplanForMangeFlerbarnsdagerTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const { perioder, dekningsgrad, antallBarn } = grunnlag;\n    return {\n        passerer:\n            dekningsgrad !== undefined &&\n            uttaksplanHarForMangeFlerbarnsdager(perioder, dekningsgrad, antallBarn) === false,\n    };\n};\n","import { RegelTest, RegelTestresultat, RegelTestresultatInfo } from '../utils/types/regelTypes';\nimport { isInfoPeriode } from 'uttaksplan/types/Periode';\nimport { erUttaksdag } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const inneholderUttaksplanDatoSomIkkeErUttaksdag: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const ugyldigePerioder = grunnlag.perioder\n        .filter((p) => !isInfoPeriode(p))\n        .filter(({ tidsperiode: { fom, tom } }) => erUttaksdag(fom) === false || erUttaksdag(tom) === false);\n\n    return {\n        passerer: ugyldigePerioder.length === 0,\n        info: ugyldigePerioder.map((periode): RegelTestresultatInfo => {\n            return {\n                intlKey: `uttaksplan.validering.feil.${\n                    erUttaksdag(periode.tidsperiode.fom)\n                        ? 'periodeSlutterPåDatoSomIkkeErUttaksdag'\n                        : 'periodeStarterPåDatoSomIkkeErUttaksdag'\n                }`,\n                periodeId: periode.id,\n            };\n        }),\n    };\n};\n","import { sorterPerioder } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { MissingAttachment } from 'app/types/MissingAttachment';\nimport { findMissingAttachmentsForPerioder } from 'app/utils/manglendeVedleggUtils';\nimport dayjs from 'dayjs';\nimport { isInfoPeriode } from 'uttaksplan/types/Periode';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const harPerioderManglendeVedleggTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const manglendeVedlegg: MissingAttachment[] = findMissingAttachmentsForPerioder(grunnlag);\n\n    const førsteUttaksEllerUttsettelsesPeriode = grunnlag.perioder\n        .filter((p) => p.tidsperiode.fom !== undefined && !isInfoPeriode(p))\n        .sort(sorterPerioder)\n        .shift();\n    const erLikEllerMindreEnnFireUkerTilUttaketStarter =\n        førsteUttaksEllerUttsettelsesPeriode !== undefined &&\n        dayjs(førsteUttaksEllerUttsettelsesPeriode.tidsperiode.fom).isSameOrBefore(dayjs().add(4, 'weeks'), 'day');\n    const regelTekst = erLikEllerMindreEnnFireUkerTilUttaketStarter\n        ? 'uttaksplan.validering.info.manglendeVedlegg'\n        : 'uttaksplan.validering.advarsel.forTidligUtenDokumentasjon';\n\n    const passerer = manglendeVedlegg.length === 0;\n    const x: RegelTestresultat = {\n        passerer,\n        info: passerer\n            ? undefined\n            : manglendeVedlegg\n                  .filter((vedlegg) => !!vedlegg.periodeId)\n                  .map((vedlegg) => ({\n                      periodeId: vedlegg.periodeId,\n                      intlKey: regelTekst,\n                  })),\n    };\n    return x;\n};\n","import { Periodetype } from 'uttaksplan/types/Periode';\nimport { erPeriodeInnvilget, erSenUtsettelsePgaFerieEllerArbeid } from 'uttaksplan/utils/periodeUtils';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\n\nexport function inneholderSenUtsettelsePgaFerieTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const seneUtsettelsePgaFerie = grunnlag.perioder\n        .filter((p) => !erPeriodeInnvilget(p, grunnlag.eksisterendeSak))\n        .filter(erSenUtsettelsePgaFerieEllerArbeid)\n        .filter((p) => p.type === Periodetype.Utsettelse && p.årsak === UtsettelseÅrsakType.Ferie);\n\n    const passerer = seneUtsettelsePgaFerie.length === 0;\n    return {\n        passerer,\n        info: seneUtsettelsePgaFerie.map((periode) => ({\n            intlKey: 'uttaksplan.validering.advarsel.planenAdvarerOmUtsettelser.ferie',\n            periodeId: periode.id,\n        })),\n    };\n}\n","import { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { isUttaksperiode, Periodetype } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { getInformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor } from '../utils/uttakValideringUtils';\n\nexport function inneholderTapteDagerTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const { perioder, søkerErFarEllerMedmor } = grunnlag;\n    const infoOmTaptUttakVedUttakEtterSeksUkerFarMedmor = getInformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor(\n        perioder,\n        grunnlag.familiehendelsesdato,\n        søkerErFarEllerMedmor,\n        grunnlag.morHarRett === false,\n        grunnlag.morErUfør,\n        !!(søkerErFarEllerMedmor && grunnlag.annenForelder.kanIkkeOppgis),\n        !!(søkerErFarEllerMedmor && grunnlag.søkerErAleneOmOmsorg)\n    );\n\n    const planInneholderTapteDager =\n        Periodene(perioder).getHull().length > 0 || infoOmTaptUttakVedUttakEtterSeksUkerFarMedmor !== undefined;\n\n    const planInneholderAnnetEnnAktivitetsfriKvote = perioder\n        .filter((p) => p.type !== Periodetype.Hull)\n        .some((p) => (isUttaksperiode(p) && p.konto !== StønadskontoType.AktivitetsfriKvote) || !isUttaksperiode(p));\n\n    const passerer = (planInneholderTapteDager && planInneholderAnnetEnnAktivitetsfriKvote) === false;\n\n    return {\n        passerer,\n        info: {\n            intlKey: 'uttaksplan.validering.info.planenInneholderHull',\n        },\n    };\n}\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { isUtsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { formaterDato } from 'app/utils/dateUtils';\n\nexport function inneholderBareUtsettelserTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const bareUtsettelser = !grunnlag.perioder.some((p) => !isUtsettelsesperiode(p)) && grunnlag.perioder.length > 0;\n    const passerer = bareUtsettelser === false;\n    const intlKey = grunnlag.erEndringssøknad\n        ? 'uttaksplan.veileder.planenInneholderKunUtsettelser.endringssøknad'\n        : 'uttaksplan.veileder.planenInneholderKunUtsettelser';\n\n    return {\n        passerer,\n        info: {\n            intlKey,\n            values: {\n                sisteDag: formaterDato(\n                    Uttaksdagen(Periodene(grunnlag.perioder).getFørsteUttaksdagEtterSistePeriode()!).forrige(),\n                    'D. MMMM YYYY'\n                ),\n            },\n        },\n    };\n}\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { erPeriodeInnvilget, erSenUtsettelsePgaFerieEllerArbeid } from 'uttaksplan/utils/periodeUtils';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\n\nexport function inneholderSenUtsettelsePgaArbeidTest(grunnlag: Søknadsinfo): RegelTestresultat {\n    const seneUtsettelserPgaArbeid = grunnlag.perioder\n        .filter((p) => !erPeriodeInnvilget(p, grunnlag.eksisterendeSak))\n        .filter(erSenUtsettelsePgaFerieEllerArbeid)\n        .filter((p) => p.type === Periodetype.Utsettelse && p.årsak === UtsettelseÅrsakType.Arbeid);\n\n    const passerer = seneUtsettelserPgaArbeid.length === 0;\n    return {\n        passerer,\n        info: seneUtsettelserPgaArbeid.map((periode) => ({\n            intlKey: 'uttaksplan.validering.advarsel.planenAdvarerOmUtsettelser.arbeid',\n            periodeId: periode.id,\n        })),\n    };\n}\n","import { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { IntlShape } from 'react-intl';\nimport { isAvslåttPeriode, isInfoPeriode, isUttaksperiode, Periode } from 'uttaksplan/types/Periode';\nimport { getPeriodeTittel } from 'uttaksplan/utils/periodeUtils';\nimport { getNavnGenitivEierform } from 'uttaksplan/utils/stønadskontoerUtils';\nimport { RegelTest, RegelTestresultat, RegelTestresultatInfo } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const overskriverEndringerAnnenPartsPerioder: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const eksisterendeUttaksplan =\n        grunnlag.eksisterendeSak !== undefined\n            ? grunnlag.eksisterendeSak.uttaksplan.filter((p) => !isAvslåttPeriode(p))\n            : undefined;\n    const fornavnAnnenForelder = grunnlag.søkerErFarEllerMedmor\n        ? grunnlag.navnPåForeldre.mor\n        : grunnlag.navnPåForeldre.farMedmor;\n    if (eksisterendeUttaksplan) {\n        const perioderSomOverlapper: Periode[] = [];\n        const perioderForSjekk = grunnlag.erEndringssøknad\n            ? grunnlag.perioderSomSkalSendesInn\n            : grunnlag.perioder.filter((p) => !isInfoPeriode(p));\n\n        perioderForSjekk.forEach((periode) => {\n            const overlapp = Periodene(eksisterendeUttaksplan.filter(isInfoPeriode)).finnOverlappendePerioder(periode);\n            if (overlapp.length > 0) {\n                perioderSomOverlapper.push(periode);\n            }\n        });\n\n        const perioderSomOverlapperUtenSamtidigUttak = perioderSomOverlapper.filter(\n            (p) => !(isUttaksperiode(p) && p.ønskerSamtidigUttak)\n        );\n\n        const passerer = perioderSomOverlapperUtenSamtidigUttak.length === 0;\n        return {\n            passerer,\n            info: perioderSomOverlapperUtenSamtidigUttak.map((periode) => {\n                const regelInfo: RegelTestresultatInfo = {\n                    periodeId: periode.id,\n                    intlKey: 'uttaksplan.validering.advarsel.periodeOverskriverAnnenPartsPeriode',\n                    renderAsHtml: true,\n                    values: {\n                        periode: (intl: IntlShape) =>\n                            getPeriodeTittel(\n                                intl,\n                                periode,\n                                grunnlag.navnPåForeldre,\n                                grunnlag.familiehendelsesdato,\n                                grunnlag.termindato,\n                                grunnlag.søkersituasjon.situasjon\n                            ),\n                        tidsperiode: (intl: IntlShape) => Tidsperioden(periode.tidsperiode).formaterStringKort(intl),\n                        forelder: fornavnAnnenForelder,\n                        forelders: (intl: IntlShape) => getNavnGenitivEierform(fornavnAnnenForelder, intl.locale),\n                        //strong: (_intl: IntlShape) => (msg: any) => <strong>{msg}</strong>, //TODO: strong does not work.\n                        strong: (_intl: IntlShape) => (msg: any) => msg,\n                    },\n                };\n                return regelInfo;\n            }),\n        };\n    }\n\n    return { passerer: true };\n};\n","import { Dictionary } from 'lodash';\nimport { IntlShape } from 'react-intl';\n\ntype FeilIntlMessage = (intl: IntlShape) => string;\n\nexport enum RegelAlvorlighet {\n    FEIL = 'feil',\n    ADVARSEL = 'advarsel',\n    INFO = 'info',\n}\n\nexport interface UttaksplanRegelTestresultat {\n    resultat: RegelStatus[];\n    avvikPerPeriode: Dictionary<RegelAvvik[]>;\n    avvik: RegelAvvik[];\n    harFeil: boolean;\n}\n\nexport type RegelKategori = 'fordeling' | undefined;\n\nexport interface Regel {\n    key: string;\n    test: RegelTest;\n    alvorlighet: RegelAlvorlighet;\n    overstyresAvRegel?: string;\n    overstyrerRegler?: string[];\n    slåsSammenVedOppsummering?: boolean;\n    skjulesIOppsummering?: boolean;\n    skjulesIPeriode?: boolean;\n    avvikType?: AvvikType;\n    kategori?: RegelKategori;\n}\n\nexport type RegelTest = (grunnlag: any) => RegelTestresultat;\n\nexport interface RegelTestresultat {\n    passerer: boolean;\n    info?: RegelTestresultatInfoObject;\n    periodeId?: string;\n}\n\nexport type RegelTestresultatInfoObject = RegelTestresultatInfo | RegelTestresultatInfo[];\n\nexport interface RegelStatus {\n    key: string;\n    passerer: boolean;\n    regelAvvik?: RegelAvvik[];\n}\n\nexport type AvvikType = 'forretning' | 'skjema';\n\nexport interface RegelAvvik {\n    id: string;\n    regel: Regel;\n    periodeId?: string;\n    info: RegelAvvikInfo;\n}\n\ntype avikValueFunk = (intl: IntlShape) => string;\ntype intlHTMLFragmentFunc = (msg: any) => any;\n\ninterface AvvikInfo {\n    periodeId?: string;\n    values?: {\n        [key: string]: string | number | Date | FeilIntlMessage | avikValueFunk | undefined | intlHTMLFragmentFunc;\n    };\n    renderAsHtml?: boolean;\n}\n\nexport interface RegelAvvikInfo extends AvvikInfo {\n    intlKey: string;\n}\n\nexport interface RegelTestresultatInfo extends AvvikInfo {\n    intlKey?: string;\n}\n","import { IntlShape } from 'react-intl';\nimport { RegelTest, RegelTestresultat, RegelTestresultatInfo } from '../utils/types/regelTypes';\nimport { isUttakAnnenPart } from 'uttaksplan/types/Periode';\nimport { Periodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { Tidsperioden } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { getPeriodeForelderNavn, getPeriodeTittel } from 'uttaksplan/utils/periodeUtils';\nimport { getNavnGenitivEierform } from 'app/utils/personUtils';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const overlapperPeriodeAndrePerioder: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const { perioder, navnPåForeldre } = grunnlag;\n    const perioderUtenUttakAnnenPart = perioder.filter((p) => !isUttakAnnenPart(p));\n    const perioderSomHarOverlapp = perioderUtenUttakAnnenPart.filter(\n        (periode) => Periodene(perioderUtenUttakAnnenPart).finnOverlappendePerioder(periode).length > 0\n    );\n\n    const passerer = perioderSomHarOverlapp.length === 0;\n    return {\n        passerer,\n        info: perioderSomHarOverlapp.map((periode) => {\n            const info: RegelTestresultatInfo = {\n                periodeId: periode.id,\n                intlKey: 'uttaksplan.validering.feil.periodeoverlapp.oppsummering',\n                renderAsHtml: true,\n                values: {\n                    periode: (intl: IntlShape) =>\n                        getPeriodeTittel(\n                            intl,\n                            periode,\n                            navnPåForeldre,\n                            grunnlag.familiehendelsesdato,\n                            grunnlag.termindato,\n                            grunnlag.søkersituasjon.situasjon\n                        ),\n                    tidsperiode: (intl: IntlShape) => Tidsperioden(periode.tidsperiode).formaterStringKort(intl),\n                    forelder: (intl: IntlShape) =>\n                        getNavnGenitivEierform(getPeriodeForelderNavn(periode, navnPåForeldre), intl.locale),\n                },\n            };\n            return info;\n        }),\n    };\n};\n","import { IntlShape } from 'react-intl';\nimport { guid } from 'nav-frontend-js-utils';\nimport { flatten, isArray, uniqBy } from 'lodash';\nimport {\n    UttaksplanRegelTestresultat,\n    RegelAvvik,\n    Regel,\n    RegelTestresultatInfo,\n    RegelStatus,\n    RegelTestresultatInfoObject,\n    RegelAvvikInfo,\n    RegelAlvorlighet,\n} from './types/regelTypes';\nimport { Validator } from './types/validatorTypes';\n\nconst getRegelIntlKey = (regel: Regel, intlRegelPrefix: string): string =>\n    `${intlRegelPrefix}.${regel.alvorlighet}.${regel.key}`;\n\nconst alvorlighetSortOrder = {\n    [RegelAlvorlighet.FEIL]: 0,\n    [RegelAlvorlighet.ADVARSEL]: 1,\n    [RegelAlvorlighet.INFO]: 2,\n};\n\nconst sorterAvvik = (a1: RegelAvvik, a2: RegelAvvik): number => {\n    if (a1.regel.alvorlighet === a2.regel.alvorlighet) {\n        return 0;\n    }\n    return alvorlighetSortOrder[a1.regel.alvorlighet] < alvorlighetSortOrder[a2.regel.alvorlighet] ? -1 : 1;\n};\n\nconst ensureRegelAvvikIntlKey = (\n    regel: Regel,\n    intlRegelPrefix: string,\n    info?: Partial<RegelTestresultatInfo>\n): RegelAvvikInfo => ({\n    ...info,\n    intlKey: info ? info.intlKey || getRegelIntlKey(regel, intlRegelPrefix) : getRegelIntlKey(regel, intlRegelPrefix),\n});\n\nconst overstyresAvFilter = (avvik: RegelAvvik, _idx: number, alleAvvik: RegelAvvik[]): boolean => {\n    return (\n        avvik.regel.overstyresAvRegel === undefined &&\n        alleAvvik.some((b2) => b2.regel.key === avvik.regel.overstyresAvRegel) === false\n    );\n};\n\nconst overstyrerAndreFilter = (avvik: RegelAvvik, _idx: number, alleAvvik: RegelAvvik[]): boolean => {\n    const overstyresAvAndre = alleAvvik.some((rb) =>\n        rb.regel.overstyrerRegler\n            ? rb.regel.overstyrerRegler.some((rbo) => {\n                  return rbo === avvik.regel.key;\n              })\n            : false\n    );\n    return overstyresAvAndre === false;\n};\n\nexport const regelHarAvvik = (\n    regel: Regel,\n    intlRegelPrefix: string,\n    info?: RegelTestresultatInfoObject,\n    periodeId?: string\n): RegelStatus => {\n    const mapInfoToRegelAvvik = (i?: Partial<RegelTestresultatInfo>): RegelAvvik => ({\n        id: guid(),\n        regel,\n        info: ensureRegelAvvikIntlKey(regel, intlRegelPrefix, i),\n        periodeId: i ? i.periodeId : periodeId,\n    });\n    const regelAvvik: RegelAvvik[] = [];\n    if (isArray(info)) {\n        info.forEach((i) => regelAvvik.push(mapInfoToRegelAvvik(i)));\n    } else {\n        regelAvvik.push(mapInfoToRegelAvvik(info));\n    }\n    return {\n        key: regel.key,\n        passerer: false,\n        regelAvvik,\n    };\n};\n\nexport const regelPasserer = (regel: Regel): RegelStatus => ({\n    key: regel.key,\n    passerer: true,\n});\n\nexport const getRegelAvvikForPeriode = (resultat: UttaksplanRegelTestresultat, periodeId: string): RegelAvvik[] => {\n    return resultat && resultat.avvikPerPeriode[periodeId] ? resultat.avvikPerPeriode[periodeId] : [];\n};\n\nexport const getRegelAvvik = (resultat: RegelStatus[]): RegelAvvik[] => {\n    if (resultat) {\n        return flatten(\n            resultat.filter((r) => r.passerer === false && r.regelAvvik !== undefined).map((r) => r.regelAvvik!)\n        ).sort(sorterAvvik);\n    }\n    return [];\n};\n\nexport const isRegelFeil = (regelAvvik: RegelAvvik): boolean => regelAvvik.regel.alvorlighet === RegelAlvorlighet.FEIL;\n\nexport const hasRegelFeil = (avvik: RegelAvvik[] = []) => avvik.some((a) => isRegelFeil(a));\n\nexport const trimRelaterteRegelAvvik = (avvik: RegelAvvik[], grupperAvvik: boolean): RegelAvvik[] => {\n    return grupperAvvik\n        ? uniqBy(avvik.filter(overstyresAvFilter).filter(overstyrerAndreFilter), (a) => {\n              return a.regel.slåsSammenVedOppsummering ? a.regel.key : guid();\n          })\n        : avvik.filter(overstyresAvFilter).filter(overstyrerAndreFilter);\n};\n\nexport const getRegelIntlValues = (\n    intl: IntlShape,\n    info: RegelTestresultatInfo\n): { [key: string]: string } | undefined => {\n    const { values } = info;\n    if (values === undefined) {\n        return undefined;\n    }\n    const newValues: { [key: string]: string } = {};\n    Object.keys(values).forEach((key) => {\n        const valueOrFunc = values[key];\n        if (valueOrFunc) {\n            newValues[key] = typeof valueOrFunc === 'function' ? valueOrFunc(intl) : `${valueOrFunc}`;\n        }\n    });\n    return newValues;\n};\n\nexport const hasValueRule = (v: any, failText: string): Validator => ({\n    test: () => v !== undefined && v !== '',\n    failText,\n});\n","import { harUttaksperiodeGyldigGradering } from './harUttaksperiodeGyldigGradering';\nimport { harPeriodeGyldigTidsperiode } from './harPeriodeGyldigTidsperiode';\nimport { harUttaksperiodeStønadskonto } from './harUttaksperiodeStønadskonto';\nimport { erSamtidigUttakGyldig } from './erSamtidigUttakGyldig';\nimport { erUtsettelseEtterFamiliehendelsesdato } from './erUtsettelseEtterFamiliehendelsesdato';\n// import { erAllePeriodeSkjemaspørsmålBesvart } from './erAllePeriodeSkjemaspørsmålBesvart';\nimport { Regel, RegelAlvorlighet } from '../../utils/types/regelTypes';\nimport { starterUttaksperiodeRundtFødselEtter2UkerFørFødsel } from './starterUttaksperiodeRundtFødselEtter2UkerFørFødsel';\nimport { slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel } from './slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel';\nimport { periodeDeFørsteSeksUkeneHarUlovligUttakBFHR } from './periodeDeFørsteSeksUkeneHarUlovligUttakBFHR';\nimport { harBekreftet100ProsentArbeidIUtsettelsePgaArbeid } from './harBekreftet100ProsentArbeidIUtsettelsePgaArbeid';\nimport { forSenUttakVedPåfølgendeBarn } from './forSenUttakVedPåfølgendeBarn';\n\nexport enum PeriodeValiderRegelKey {\n    'uttaksperiodeHarGyldigGradering' = 'uttaksperiodeHarGyldigGradering',\n    'periodeHarGyldigTidsperiode' = 'periodeHarGyldigTidsperiode',\n    'uttaksperiodeHarStønadskonto' = 'uttaksperiodeHarStønadskonto',\n    'erSamtidigUttakGyldig' = 'erSamtidigUttakGyldig',\n    'erUtsettelseEtterFamiliehendelsesdato' = 'erUtsettelseEtterFamiliehendelsesdato',\n    // 'erAllePeriodeSkjemaspørsmålBesvart' = 'erAllePeriodeSkjemaspørsmålBesvart',\n    'starterUttaksperiodeRundtFødselEtter2UkerFørFødsel' = 'starterUttaksperiodeRundtFødselEtter2UkerFørFødsel',\n    'slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel' = 'slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel',\n    'periodeDeFørsteSeksUkeneHarUlovligUttakBFHR' = 'periodeDeFørsteSeksUkeneHarUlovligUttakBFHR',\n    'harBekreftet100ProsentArbeidIUtsettelsePgaArbeid' = 'harBekreftet100ProsentArbeidIUtsettelsePgaArbeid',\n    'forSenUttakVedPåfølgendeBarn' = 'forSenUttakVedPåfølgendeBarn',\n}\n\n/** Meldingene skal default kun vises inne i skjema */\n\nconst skjulIOppsummering = true;\n\nconst periodevalideringsregler: Regel[] = [\n    {\n        key: PeriodeValiderRegelKey.uttaksperiodeHarGyldigGradering,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harUttaksperiodeGyldigGradering,\n        skjulesIOppsummering: skjulIOppsummering,\n        avvikType: 'skjema',\n    },\n    {\n        key: PeriodeValiderRegelKey.periodeHarGyldigTidsperiode,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harPeriodeGyldigTidsperiode,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.starterUttaksperiodeRundtFødselEtter2UkerFørFødsel,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: starterUttaksperiodeRundtFødselEtter2UkerFørFødsel,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.uttaksperiodeHarStønadskonto,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harUttaksperiodeStønadskonto,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.periodeDeFørsteSeksUkeneHarUlovligUttakBFHR,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: periodeDeFørsteSeksUkeneHarUlovligUttakBFHR,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.erSamtidigUttakGyldig,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erSamtidigUttakGyldig,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.erUtsettelseEtterFamiliehendelsesdato,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erUtsettelseEtterFamiliehendelsesdato,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.harBekreftet100ProsentArbeidIUtsettelsePgaArbeid,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harBekreftet100ProsentArbeidIUtsettelsePgaArbeid,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    {\n        key: PeriodeValiderRegelKey.forSenUttakVedPåfølgendeBarn,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: forSenUttakVedPåfølgendeBarn,\n        skjulesIOppsummering: skjulIOppsummering,\n    },\n    //TODO: visibility.areAllQuestionsAnswered() burde sendes oppover fra periodeUttakFormQuestionsConfig/Legg til periode formen.\n    // {\n    //     key: PeriodeValiderRegelKey.erAllePeriodeSkjemaspørsmålBesvart,\n    //     alvorlighet: RegelAlvorlighet.FEIL,\n    //     test: erAllePeriodeSkjemaspørsmålBesvart,\n    //     skjulesIOppsummering: skjulIOppsummering,\n    //     avvikType: 'skjema',\n    // },\n];\n\nexport default periodevalideringsregler;\n","import { intlUtils } from '@navikt/fp-common';\nimport { getFloatFromString } from 'app/utils/numberUtils';\nimport { IntlShape } from 'react-intl';\nimport {\n    samtidigUttakProsentIsMax100,\n    stillingsprosentIsLessThan100,\n    stillingsprosentIsMoreThan0,\n} from 'uttaksplan/utils/periodeUtils';\nimport { hasValueRule } from './regelUtils';\nimport { Validator } from './types/validatorTypes';\n\nexport const getStillingsprosentRegler = (\n    erSamtidigUttak: boolean,\n    stillingsprosent: string,\n    intl?: IntlShape\n): Validator[] => {\n    const intlKey = 'valideringsfeil.stillingsprosent';\n    return [\n        hasValueRule(stillingsprosent, intl ? intlUtils(intl, `${intlKey}.required`) : ''),\n        {\n            test: () => getFloatFromString(stillingsprosent) !== undefined,\n            failText: intl ? intlUtils(intl, `${intlKey}.ugyldigTall`) : '',\n        },\n        {\n            test: () => stillingsprosentIsMoreThan0(stillingsprosent),\n            failText: intl ? intlUtils(intl, `${intlKey}.under1`) : '',\n        },\n        {\n            test: () =>\n                erSamtidigUttak\n                    ? samtidigUttakProsentIsMax100(stillingsprosent)\n                    : stillingsprosentIsLessThan100(stillingsprosent),\n            failText: intl ? intlUtils(intl, `${intlKey}.over100prosent`) : '',\n        },\n    ];\n};\n","import { Periode, Periodetype } from 'uttaksplan/types/Periode';\nimport { getStillingsprosentRegler } from './stillingsprosentValideringUtils';\n\nexport const gradertUttaksperiodeErUgyldig = (periode: Periode) => {\n    if (periode.type === Periodetype.Uttak) {\n        const { gradert, stillingsprosent } = periode;\n        if (gradert === true) {\n            const regler = getStillingsprosentRegler(false, stillingsprosent || '');\n            const results = regler.map((regel) => regel.test() === true);\n            return results.some((erGyldig) => erGyldig === false);\n        }\n    }\n    return false;\n};\n\nexport const samtidigUttaksperiodeErUgyldig = (periode: Periode, søkerErFarEllerMedmor: boolean) => {\n    if (periode.type === Periodetype.Uttak) {\n        const { ønskerSamtidigUttak, samtidigUttakProsent } = periode;\n        if (ønskerSamtidigUttak === true && søkerErFarEllerMedmor) {\n            const regler = getStillingsprosentRegler(true, samtidigUttakProsent || '');\n            const results = regler.map((regel) => regel.test() === true);\n            return results.some((erGyldig) => erGyldig === false);\n        }\n    }\n    return false;\n};\n","import { ValidationResult, ValidationTestVerdict, Validator } from './types/validatorTypes';\n\nexport const runValidators = (validators: Validator[] | undefined, inputName: string): ValidationResult => {\n    if (validators === undefined) {\n        return {\n            name: inputName,\n            tests: [],\n            valid: true,\n        };\n    }\n    const results: Validator[] = validators.filter((validator) => {\n        return validator.test() === false;\n    });\n\n    const valid = results.length === 0;\n    const tests: ValidationTestVerdict[] = valid === false ? [{ verdict: false, failText: results[0].failText }] : [];\n\n    return {\n        name: inputName,\n        tests,\n        valid,\n    };\n};\n\nexport const allValidatorsPass = (validators: Validator[] | undefined): boolean =>\n    validators === undefined ? true : runValidators(validators, 'group').valid;\n","import { TidsperiodeDate } from '@navikt/fp-common';\nimport { isValidTidsperiode } from 'app/steps/uttaksplan-info/utils/Tidsperioden';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport dayjs from 'dayjs';\nimport { isForeldrepengerFørFødselUttaksperiode, Periode, UtsettelseFormPeriodeType } from 'uttaksplan/types/Periode';\nimport { uttaksdatoer } from 'uttaksplan/utils/uttaksdatoerUtils';\nimport { DatoValidatorer, Validator } from './types/validatorTypes';\nimport { allValidatorsPass } from './validatorUtils';\n\ntype DateValue = Date | undefined;\n\nconst erUtfyltTest = (dato: DateValue): Validator => ({\n    test: () => dato !== undefined,\n    failText: { intlKey: `uttaksplan.validering.feil.påkrevd` },\n});\n\nconst erUttaksdagTest = (dato: DateValue) => ({\n    test: () => dato !== undefined && Uttaksdagen(dato).erUttaksdag(),\n    failText: { intlKey: `uttaksplan.validering.feil.datoErIkkeUttaksdag` },\n});\n\nconst slutterInnenforGyldigPermisjonsperiode = (\n    dato: DateValue,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n) => ({\n    test: () =>\n        dato !== undefined &&\n        dayjs(dato).isSameOrBefore(\n            uttaksdatoer(familiehendelsesdato, erFarEllerMedmor, termindato).sisteMuligeUttaksdagEtterTermin,\n            'day'\n        ),\n    failText: { intlKey: 'uttaksplan.validering.feil.etterSistePermisjonsdag' },\n});\n\nconst starterInnenforGyldigAntallUkerFørTermin = (\n    dato: DateValue,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n) => ({\n    test: () =>\n        dato !== undefined &&\n        dayjs(dato).isSameOrAfter(\n            uttaksdatoer(familiehendelsesdato, erFarEllerMedmor, termindato).førsteMuligeUttaksdagFørTermin,\n            'day'\n        ),\n    failText: { intlKey: 'uttaksplan.validering.feil.før12UkerFørTermin' },\n});\n\nexport const getUttakTidsperiodeValidatorer = (\n    skalIkkeHaUttak: boolean,\n    tidsperiode: Partial<TidsperiodeDate>,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): DatoValidatorer | undefined => {\n    if (skalIkkeHaUttak) {\n        return undefined;\n    }\n\n    const { fom, tom } = tidsperiode;\n\n    return {\n        fra: [\n            erUtfyltTest(fom),\n            erUttaksdagTest(fom),\n            starterInnenforGyldigAntallUkerFørTermin(fom, familiehendelsesdato, erFarEllerMedmor, termindato),\n        ],\n        til: [\n            erUtfyltTest(tom),\n            erUttaksdagTest(tom),\n            slutterInnenforGyldigPermisjonsperiode(tom, familiehendelsesdato, erFarEllerMedmor, termindato),\n        ],\n    };\n};\n\nexport const uttakTidsperiodeErGyldig = (\n    uttaksperiode: Periode,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): boolean => {\n    const { tidsperiode } = uttaksperiode;\n    if (!tidsperiode) {\n        return false;\n    }\n    const skalIkkeHaUttak = isForeldrepengerFørFødselUttaksperiode(uttaksperiode)\n        ? uttaksperiode.skalIkkeHaUttakFørTermin\n        : false;\n\n    if (isValidTidsperiode(tidsperiode) === false && !skalIkkeHaUttak) {\n        return false;\n    }\n    const validators = getUttakTidsperiodeValidatorer(\n        skalIkkeHaUttak,\n        tidsperiode,\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        termindato\n    );\n    if (validators === undefined) {\n        return true;\n    }\n    const fraDatoErGyldig = allValidatorsPass(validators.fra);\n    const tilDatoErGyldig = allValidatorsPass(validators.til);\n\n    return fraDatoErGyldig && tilDatoErGyldig;\n};\n\nconst getUtsettelseTidsperiodeValidatorer = (\n    tidsperiode: Partial<TidsperiodeDate>,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): DatoValidatorer | undefined => {\n    return {\n        fra: [erUtfyltTest(tidsperiode.fom), erUttaksdagTest(tidsperiode.fom)],\n        til: [\n            erUtfyltTest(tidsperiode.tom),\n            erUttaksdagTest(tidsperiode.tom),\n            slutterInnenforGyldigPermisjonsperiode(tidsperiode.tom, familiehendelsesdato, erFarEllerMedmor, termindato),\n        ],\n    };\n};\n\nexport const utsettelseTidsperiodeErGyldig = (\n    utsettelesperiode: UtsettelseFormPeriodeType,\n    familiehendelsesdato: Date,\n    erFarEllerMedmor: boolean,\n    termindato: Date | undefined\n): boolean => {\n    const { tidsperiode } = utsettelesperiode;\n\n    if (isValidTidsperiode(tidsperiode) === false) {\n        return false;\n    }\n    const validators = getUtsettelseTidsperiodeValidatorer(\n        tidsperiode,\n        familiehendelsesdato,\n        erFarEllerMedmor,\n        termindato\n    );\n    if (validators === undefined) {\n        return true;\n    }\n    const fraDatoErGyldig = allValidatorsPass(validators.fra);\n    const tilDatoErGyldig = allValidatorsPass(validators.til);\n\n    return fraDatoErGyldig && tilDatoErGyldig;\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport dayjs from 'dayjs';\nimport { isUttakAnnenPart, Periode, Periodetype } from 'uttaksplan/types/Periode';\nimport { formatDate } from '@navikt/fp-common';\n\nexport const laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn = (\n    periode: Periode,\n    førsteUttaksdagForPåfølgendeBarn: Date | undefined\n) => {\n    if (\n        førsteUttaksdagForPåfølgendeBarn !== undefined &&\n        (periode.type === Periodetype.Uttak ||\n            periode.type === Periodetype.Overføring ||\n            periode.type === Periodetype.Utsettelse ||\n            periode.type === Periodetype.Opphold ||\n            isUttakAnnenPart(periode))\n    ) {\n        return (\n            dayjs(periode.tidsperiode.fom).isSameOrAfter(førsteUttaksdagForPåfølgendeBarn, 'd') ||\n            dayjs(periode.tidsperiode.tom).isSameOrAfter(førsteUttaksdagForPåfølgendeBarn, 'd')\n        );\n    }\n    return false;\n};\n\nexport const forSenUttakVedPåfølgendeBarn: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    if (\n        grunnlag.familiehendelsesdatoNesteSak === undefined ||\n        grunnlag.førsteUttaksdagNesteBarnsSak === undefined ||\n        (grunnlag.minsterettUkerToTette && grunnlag.minsterettUkerToTette > 0)\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderMedUgyldigTidsperiode = grunnlag.perioder.filter((periode) =>\n        laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn(periode, grunnlag.førsteUttaksdagNesteBarnsSak)\n    );\n    const sisteMuligeUttaksdag = Uttaksdagen(grunnlag.førsteUttaksdagNesteBarnsSak).trekkFra(1);\n    return {\n        passerer: perioderMedUgyldigTidsperiode.length === 0,\n        info: perioderMedUgyldigTidsperiode.map((periode) => ({\n            intlKey: 'uttaksplan.validering.info.forSenUttakVedPåfølgendeBarn',\n            values: {\n                fom: formatDate(periode.tidsperiode.fom),\n                tom: formatDate(periode.tidsperiode.tom),\n                sisteMuligeUttaksdag: formatDate(sisteMuligeUttaksdag),\n            },\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport { gradertUttaksperiodeErUgyldig } from '../../utils/periodeValideringUtils';\n\nexport const harUttaksperiodeGyldigGradering: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const ugyldigePerioder = grunnlag.perioder.filter(gradertUttaksperiodeErUgyldig);\n    return {\n        passerer: ugyldigePerioder.length === 0,\n        info: ugyldigePerioder.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { Periodetype } from 'uttaksplan/types/Periode';\nimport { utsettelseTidsperiodeErGyldig, uttakTidsperiodeErGyldig } from '../../utils/tidsperiodeValideringUtils';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\n\nexport const harPeriodeGyldigTidsperiode: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const perioderMedUgyldigTidsperiode = grunnlag.perioder.filter((periode) => {\n        switch (periode.type) {\n            case Periodetype.Overføring:\n            case Periodetype.Uttak:\n            case Periodetype.Opphold:\n                return (\n                    uttakTidsperiodeErGyldig(\n                        periode,\n                        grunnlag.familiehendelsesdato,\n                        grunnlag.søkerErFarEllerMedmor,\n                        grunnlag.termindato\n                    ) === false\n                );\n            case Periodetype.Utsettelse:\n                return (\n                    utsettelseTidsperiodeErGyldig(\n                        periode,\n                        grunnlag.familiehendelsesdato,\n                        grunnlag.søkerErFarEllerMedmor,\n                        grunnlag.termindato\n                    ) === false\n                );\n        }\n        return false;\n    });\n    return {\n        passerer: perioderMedUgyldigTidsperiode.length === 0,\n        info: perioderMedUgyldigTidsperiode.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport {\n    getFørsteUttaksdag2UkerFørFødsel,\n    gjelderWLBReglerFarMedmorRundtFødsel,\n    isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel,\n    starterTidsperiodeEtter2UkerFørFødsel,\n} from 'app/utils/wlbUtils';\nimport { formaterDatoKompakt } from 'app/utils/dateUtils';\n\nexport const starterUttaksperiodeRundtFødselEtter2UkerFørFødsel: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    if (\n        !gjelderWLBReglerFarMedmorRundtFødsel(\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.morHarRett,\n            grunnlag.søkersituasjon.situasjon\n        )\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n\n    const perioderFarMedmorSomStarterFør2UkerFørFødsel = grunnlag.perioder\n        .filter((p) => isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel(p))\n        .filter(\n            (p) =>\n                !starterTidsperiodeEtter2UkerFørFødsel(\n                    p.tidsperiode,\n                    grunnlag.familiehendelsesdato,\n                    grunnlag.termindato\n                )\n        );\n\n    const førsteUttaksdagToUkerFørFødsel = formaterDatoKompakt(\n        getFørsteUttaksdag2UkerFørFødsel(grunnlag.familiehendelsesdato, grunnlag.termindato)\n    );\n    return {\n        passerer: perioderFarMedmorSomStarterFør2UkerFørFødsel.length === 0,\n        info: perioderFarMedmorSomStarterFør2UkerFørFødsel.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.starterUttaksperiodeRundtFødselEtter2UkerFørFødsel',\n            values: { dato: førsteUttaksdagToUkerFørFødsel },\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport {\n    getSisteUttaksdag6UkerEtterFødsel,\n    gjelderWLBReglerFarMedmorRundtFødsel,\n    isUttaksperiodeFarMedmorPgaFødsel,\n    slutterTidsperiodeInnen6UkerEtterFødsel,\n} from 'app/utils/wlbUtils';\nimport { formaterDatoKompakt } from 'app/utils/dateUtils';\n\nexport const slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    if (\n        !gjelderWLBReglerFarMedmorRundtFødsel(\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.morHarRett,\n            grunnlag.søkersituasjon.situasjon\n        )\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n\n    const perioderFarMedmorSomIkkeSlutterFør6UkerEtterFødsel = grunnlag.perioder\n        .filter((p) => isUttaksperiodeFarMedmorPgaFødsel(p, grunnlag.familiehendelsesdato, grunnlag.termindato))\n        .filter((p) => !slutterTidsperiodeInnen6UkerEtterFødsel(p.tidsperiode, grunnlag.familiehendelsesdato));\n\n    const sisteUttaksdagSeksUkerEtterFødsel = formaterDatoKompakt(\n        getSisteUttaksdag6UkerEtterFødsel(grunnlag.familiehendelsesdato)\n    );\n    return {\n        passerer: perioderFarMedmorSomIkkeSlutterFør6UkerEtterFødsel.length === 0,\n        info: perioderFarMedmorSomIkkeSlutterFør6UkerEtterFødsel.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.slutterUttaksperiodeRundtFødselEtter6UkerEtterFødsel',\n            values: { dato: sisteUttaksdagSeksUkerEtterFødsel },\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport { isUttaksperiode } from 'uttaksplan/types/Periode';\nimport { Søknadsinfo } from 'uttaksplan/validering/utils/types/Søknadsinfo';\n\nexport const harUttaksperiodeStønadskonto: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const uttaksperioderUtenStønadskonto = grunnlag.perioder.filter(\n        (periode) => isUttaksperiode(periode) && periode.konto === undefined\n    );\n    return {\n        passerer: uttaksperioderUtenStønadskonto.length === 0,\n        info: uttaksperioderUtenStønadskonto.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport { starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel } from 'app/utils/wlbUtils';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport { isUttaksperiode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\n\nexport const periodeDeFørsteSeksUkeneHarUlovligUttakBFHR: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    if (\n        !andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato) ||\n        !grunnlag.søkerErFarEllerMedmor ||\n        grunnlag.morHarRett ||\n        grunnlag.søkersituasjon.situasjon !== 'fødsel'\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n\n    const perioderDeFørsteSeksUkeneMedUlovligUttakBFHR = grunnlag.perioder.filter(\n        (periode) =>\n            isUttaksperiode(periode) &&\n            starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel(\n                periode.tidsperiode,\n                grunnlag.familiehendelsesdato,\n                grunnlag.termindato\n            ) &&\n            periode.konto === StønadskontoType.Foreldrepenger &&\n            periode.erMorForSyk === false\n    );\n\n    return {\n        passerer: perioderDeFørsteSeksUkeneMedUlovligUttakBFHR.length === 0,\n        info: perioderDeFørsteSeksUkeneMedUlovligUttakBFHR.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.perioderDeFørsteSeksUkeneMedUlovligUttakBFHR',\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { samtidigUttaksperiodeErUgyldig } from '../../utils/periodeValideringUtils';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\n\nexport const erSamtidigUttakGyldig: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const perioderMedUgyldigTidsperiode = grunnlag.perioder.filter((periode) =>\n        samtidigUttaksperiodeErUgyldig(periode, grunnlag.søkerErFarEllerMedmor)\n    );\n    return {\n        passerer: perioderMedUgyldigTidsperiode.length === 0,\n        info: perioderMedUgyldigTidsperiode.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import dayjs from 'dayjs';\nimport { isUtsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport { Søknadsinfo } from '../../utils/types/Søknadsinfo';\n\nexport const erUtsettelseEtterFamiliehendelsesdato: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const ugyldigeUtsettelser = grunnlag.perioder\n        .filter(isUtsettelsesperiode)\n        .filter((utsettelse) => dayjs(utsettelse.tidsperiode.fom).isBefore(grunnlag.familiehendelsesdato, 'day'));\n    return {\n        passerer: ugyldigeUtsettelser.length === 0,\n        info: ugyldigeUtsettelser.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../../utils/types/Søknadsinfo';\nimport { isUtsettelsePgaArbeid } from 'uttaksplan/types/Periode';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\n\nexport const harBekreftet100ProsentArbeidIUtsettelsePgaArbeid: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    const utsettelserPgaArbeidUtenBekreftelse = grunnlag.perioder\n        .filter(isUtsettelsePgaArbeid)\n        .filter((periode) => periode.bekrefterArbeidIPerioden === false);\n\n    return {\n        passerer: utsettelserPgaArbeidUtenBekreftelse.length === 0,\n        info: utsettelserPgaArbeidUtenBekreftelse.map((periode) => ({\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { isUtsettelsePgaFerie } from 'uttaksplan/types/Periode';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const harSøktOmFerieUtenArbeidsforhold: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const harArbeidsforhold = grunnlag.arbeidsforhold.length > 0;\n    return {\n        passerer: harArbeidsforhold ? true : grunnlag.perioder.some(isUtsettelsePgaFerie) === false,\n    };\n};\n","import uttaksConstants from 'app/constants';\nimport { IntlShape } from 'react-intl';\nimport { Perioden } from 'app/steps/uttaksplan-info/utils/Perioden';\nimport { isUtsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { UtsettelseÅrsakType } from 'uttaksplan/types/UtsettelseÅrsakType';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { getVarighetString } from 'app/utils/dateUtils';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nexport const inneholderForMyeFerie: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const ferieUtsettelser = grunnlag.perioder.filter(\n        (p) => isUtsettelsesperiode(p) && p.årsak === UtsettelseÅrsakType.Ferie\n    );\n    const ferieDager = ferieUtsettelser.reduce(\n        (sumFerieDager, periode) => sumFerieDager + Perioden(periode).getAntallUttaksdager(),\n        0\n    );\n\n    return {\n        passerer: ferieDager <= uttaksConstants.MAKS_FERIEDAGER_MED_OVERFØRING,\n        info: ferieUtsettelser.map((periode) => ({\n            periodeId: periode.id,\n            values: {\n                ukerOgDager: (intl: IntlShape) => getVarighetString(ferieDager, intl),\n            },\n        })),\n    };\n};\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport { beregnGjenståendeUttaksdager } from 'uttaksplan/utils/uttaksPlanStatus';\nimport { isUtsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\n// Denne regelen sparker inn dersom forelders kvote + fellesperiode er tømt\n// Dersom noe er igjen av andre forelders kvote er det OK\nexport function kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme(grunnlag: Søknadsinfo): RegelTestresultat {\n    const { perioder, søkerErFarEllerMedmor, stønadskontoer } = grunnlag;\n    const gjenståendeDager = beregnGjenståendeUttaksdager(stønadskontoer, perioder, false);\n    const sistePeriodeErIkkeUtsettelse =\n        perioder.length > 0 ? !isUtsettelsesperiode(perioder[perioder.length - 1]) : false;\n\n    const resterendeFellesperiode = gjenståendeDager.find((konto) => konto.konto === StønadskontoType.Fellesperiode);\n    const resterendeMødrekvote = gjenståendeDager.find((konto) => konto.konto === StønadskontoType.Mødrekvote);\n    const resterendeFedrekvote = gjenståendeDager.find((konto) => konto.konto === StønadskontoType.Fedrekvote);\n    const resterendeForeldrepenger = gjenståendeDager.find((konto) => konto.konto === StønadskontoType.Foreldrepenger);\n\n    if (sistePeriodeErIkkeUtsettelse || perioder.length === 0) {\n        return {\n            passerer: true,\n        };\n    }\n\n    if (søkerErFarEllerMedmor) {\n        if (resterendeFedrekvote !== undefined && resterendeFellesperiode !== undefined) {\n            if (resterendeFedrekvote.dager > 0 || resterendeFellesperiode.dager > 0) {\n                return {\n                    passerer: true,\n                };\n            }\n        }\n\n        if (resterendeForeldrepenger !== undefined) {\n            if (resterendeForeldrepenger.dager > 0) {\n                return {\n                    passerer: true,\n                };\n            }\n        }\n\n        return {\n            passerer: false,\n            info: {\n                intlKey: 'uttaksplan.validering.feil.sluttMedUtsettelse',\n            },\n        };\n    } else {\n        if (resterendeMødrekvote !== undefined && resterendeFellesperiode !== undefined) {\n            if (resterendeMødrekvote.dager > 0 || resterendeFellesperiode.dager > 0) {\n                return {\n                    passerer: true,\n                };\n            }\n        }\n\n        if (resterendeForeldrepenger !== undefined) {\n            if (resterendeForeldrepenger.dager > 0) {\n                return {\n                    passerer: true,\n                };\n            }\n        }\n\n        return {\n            passerer: false,\n            info: {\n                intlKey: 'uttaksplan.validering.feil.sluttMedUtsettelse',\n            },\n        };\n    }\n}\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { StønadskontoUttak } from 'uttaksplan/types/StønadskontoUttak';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { beregnGjenståendeUttaksdager } from 'uttaksplan/utils/uttaksPlanStatus';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\n\nconst erUttaksmengdeForFarMedmorForHøy = (\n    uttaksplan: Periode[],\n    tilgjengeligeStønadskontoer: TilgjengeligStønadskonto[],\n    farEllerMedmor: boolean\n): boolean => {\n    if (farEllerMedmor === true) {\n        const kontoUttak = beregnGjenståendeUttaksdager(tilgjengeligeStønadskontoer, uttaksplan, false);\n        return kontoUttak.some((konto: StønadskontoUttak) => konto.dager < 0);\n    } else {\n        return false;\n    }\n};\n\nexport const erUttaksmengdeForFarMedmorForHøyTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    return {\n        passerer:\n            erUttaksmengdeForFarMedmorForHøy(\n                grunnlag.perioder,\n                grunnlag.stønadskontoer,\n                grunnlag.søkerErFarEllerMedmor\n            ) === false,\n    };\n};\n","import React from 'react';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { IntlShape } from 'react-intl';\nimport {\n    isInfoPeriode,\n    isPeriodeUtenUttak,\n    isUtsettelsePgaArbeid,\n    isUttaksperiode,\n    Periode,\n} from 'uttaksplan/types/Periode';\nimport links from 'app/links/links';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nconst vekslendeArbeidOgUttakTest = (kunSøkersPerioder: Periode[]): boolean => {\n    const firstArbeidsperiodeIndex = kunSøkersPerioder.findIndex((p) => isUtsettelsePgaArbeid(p));\n\n    if (firstArbeidsperiodeIndex > -1) {\n        const antallPerioderEtterFørsteUtsettelseGrunnetArbeid =\n            kunSøkersPerioder.length - 1 - firstArbeidsperiodeIndex;\n\n        if (antallPerioderEtterFørsteUtsettelseGrunnetArbeid >= 5) {\n            // Hvis vi har en serie perioder av formatet:\n            // Arbeid -> Uttak -> Arbeid -> Uttak -> Arbeid -> Uttak => foreslå gradering\n            if (\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 1]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex + 2]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 3]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex + 4]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 5])\n            ) {\n                return false;\n            }\n        }\n        if (antallPerioderEtterFørsteUtsettelseGrunnetArbeid === 4 && firstArbeidsperiodeIndex > 0) {\n            // Hvis vi har en serie perioder av formatet:\n            // Uttak -> Arbeid -> Uttak -> Arbeid -> Uttak -> Arbeid => foreslå gradering\n            if (\n                firstArbeidsperiodeIndex > 0 &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex - 1]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 1]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex + 2]) &&\n                isUttaksperiode(kunSøkersPerioder[firstArbeidsperiodeIndex + 3]) &&\n                isUtsettelsePgaArbeid(kunSøkersPerioder[firstArbeidsperiodeIndex + 4])\n            ) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n};\n\nconst vekslendePeriodeUtenUttakOgUttakTest = (kunSøkersPerioder: Periode[]): boolean => {\n    const firstPeriodeUtenUttakIndex = kunSøkersPerioder.findIndex((p) => isPeriodeUtenUttak(p));\n\n    if (firstPeriodeUtenUttakIndex > -1) {\n        const antallPerioderEtterFørstePeriodeUtenUttak = kunSøkersPerioder.length - 1 - firstPeriodeUtenUttakIndex;\n\n        if (antallPerioderEtterFørstePeriodeUtenUttak >= 5) {\n            // Hvis vi har en serie perioder av formatet:\n            // Uten Uttak -> Uttak ->  Uten Uttak -> Uttak ->  Uten Uttak -> Uttak => foreslå gradering\n            if (\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 1]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 2]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 3]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 4]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 5])\n            ) {\n                return false;\n            }\n        }\n        if (antallPerioderEtterFørstePeriodeUtenUttak === 4 && firstPeriodeUtenUttakIndex > 0) {\n            // Hvis vi har en serie perioder av formatet:\n            // Uttak ->  Uten Uttak -> Uttak ->  Uten Uttak -> Uttak ->  Uten Uttak => foreslå gradering\n            if (\n                firstPeriodeUtenUttakIndex > 0 &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex - 1]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 1]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 2]) &&\n                isUttaksperiode(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 3]) &&\n                isPeriodeUtenUttak(kunSøkersPerioder[firstPeriodeUtenUttakIndex + 4])\n            ) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n};\n\nexport const burdeKanskjeSøkeGraderingTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const { perioder } = grunnlag;\n    const kunSøkersPerioder = perioder.filter((p: Periode) => !isInfoPeriode(p));\n\n    if (kunSøkersPerioder.length >= 6) {\n        const vekslerArbeidOgUttakTest = vekslendeArbeidOgUttakTest(kunSøkersPerioder);\n        const veklserPerioderUtenUttakOgUttaktest = vekslendePeriodeUtenUttakOgUttakTest(kunSøkersPerioder);\n        const passerer = vekslerArbeidOgUttakTest && veklserPerioderUtenUttakOgUttaktest;\n        let infoTekstKey = undefined;\n        if (!vekslerArbeidOgUttakTest) {\n            infoTekstKey =\n                'uttaksplan.validering.info.burdeKanskjeSøkeGradering.PgaVekslendeUtsettelserPgaArbeidOgUttak';\n        }\n\n        if (!veklserPerioderUtenUttakOgUttaktest) {\n            infoTekstKey = 'uttaksplan.validering.info.burdeKanskjeSøkeGradering.PgaVekslendePerioderUtenUttakOgUttak';\n        }\n\n        return {\n            passerer: passerer,\n            info: {\n                intlKey: infoTekstKey,\n                renderAsHtml: true,\n                values: {\n                    a: (_intl: IntlShape) => (msg: any) =>\n                        (\n                            <a href={links.graderingInfo} className=\"lenke\" rel=\"noreferrer\" target=\"_blank\">\n                                {msg}\n                            </a>\n                        ),\n                },\n            },\n        };\n    }\n\n    return {\n        passerer: true,\n    };\n};\n","import { formatDate } from '@navikt/fp-common';\nimport { isUfødtBarn } from 'app/context/types/Barn';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { getUgyldigUttakMor } from '../utils/uttakValideringUtils';\n\nexport const ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    const søkerErMor = !grunnlag.søkerErFarEllerMedmor;\n    if (søkerErMor && isUfødtBarn(grunnlag.barn)) {\n        const ugyldigePerioder = getUgyldigUttakMor(\n            grunnlag.perioder,\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkersituasjon.situasjon,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.termindato,\n            grunnlag.erFlerbarnssøknad,\n            'mellomSyvOgÅtteUkerForMor'\n        );\n\n        const passerer = ugyldigePerioder.length === 0;\n        return {\n            passerer,\n            info: ugyldigePerioder.map((periode) => ({\n                intlKey: 'uttaksplan.validering.advarsel.ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato',\n                values: {\n                    fraDato: formatDate(periode.tidsperiode.fom),\n                    tilDato: formatDate(periode.tidsperiode.tom),\n                },\n                periodeId: periode.id,\n            })),\n        };\n    }\n\n    return { passerer: true };\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\nimport { isUttaksperiode } from 'uttaksplan/types/Periode';\nimport { hasValue } from '@navikt/fp-common';\nimport { farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk } from 'uttaksplan/utils/uttaksskjema/aktivitetskravMorSkalBesvares';\n\nexport const inneholderPerioderUtenAktivitetskrav = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const {\n        perioder,\n        søkerErFarEllerMedmor,\n        søkerErAleneOmOmsorg,\n        søkerHarMidlertidigOmsorg,\n        familiehendelsesdato,\n        søkersituasjon,\n    } = grunnlag;\n\n    if (!søkerErFarEllerMedmor || søkerErAleneOmOmsorg || søkerHarMidlertidigOmsorg) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderUtenAktivitetskrav = perioder.filter(\n        (p) =>\n            isUttaksperiode(p) &&\n            !hasValue(p.morsAktivitetIPerioden) &&\n            !p.erMorForSyk &&\n            !p.ønskerSamtidigUttak &&\n            !p.ønskerFlerbarnsdager &&\n            !farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk(\n                familiehendelsesdato,\n                søkerErFarEllerMedmor,\n                p.konto,\n                p.erMorForSyk,\n                p.tidsperiode,\n                søkersituasjon.situasjon\n            ) &&\n            (p.konto === StønadskontoType.Fellesperiode || p.konto === StønadskontoType.Foreldrepenger)\n    );\n\n    return {\n        passerer: perioderUtenAktivitetskrav.length === 0,\n        info: perioderUtenAktivitetskrav.map((p) => ({\n            intlKey: 'uttaksplan.validering.feil.inneholderPerioderUtenAktivitetskrav',\n            periodeId: p.id,\n        })),\n    };\n};\n","import { hasValue } from '@navikt/fp-common';\nimport { isUtsettelsesperiode } from 'uttaksplan/types/Periode';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\n\nexport const inneholderUtsettelserUtenÅrsak = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const utsettelserUtenÅrsak = grunnlag.perioder.filter((p) => isUtsettelsesperiode(p) && !hasValue(p.årsak));\n\n    const passerer = utsettelserUtenÅrsak.length === 0;\n\n    return {\n        passerer,\n        info: utsettelserUtenÅrsak.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.inneholderUtsettelserUtenÅrsak',\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { formaterDatoKompakt } from 'app/utils/dateUtils';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport {\n    getFarMedmorUttakRundtFødsel,\n    getFørsteUttaksdag2UkerFørFødsel,\n    getSisteUttaksdag6UkerEtterFødsel,\n    gjelderWLBReglerFarMedmorRundtFødsel,\n    slutterTidsperiodeInnen6UkerEtterFødsel,\n} from 'app/utils/wlbUtils';\nimport { getSumUttaksdagerÅTrekkeIPeriodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL } from 'app/utils/wlbUtils';\nimport dayjs from 'dayjs';\n\nconst overskridelseUttakRundtFødselAntallDager = (\n    perioderRundtFødsel: Periode[],\n    familiehendelsesdato: Date\n): number => {\n    const sisteUttak6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(familiehendelsesdato);\n    const perioderAvkortetTilÅSlutte6UkerEtterFødsel = perioderRundtFødsel.map((p) =>\n        dayjs(p.tidsperiode.tom).isAfter(dayjs(sisteUttak6UkerEtterFødsel), 'day')\n            ? { ...p, tidsperiode: { fom: p.tidsperiode.fom, tom: sisteUttak6UkerEtterFødsel } }\n            : p\n    );\n    const antallDager = getSumUttaksdagerÅTrekkeIPeriodene(perioderAvkortetTilÅSlutte6UkerEtterFødsel);\n    return ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL - antallDager;\n};\n\nexport const farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    if (\n        gjelderWLBReglerFarMedmorRundtFødsel(\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.morHarRett,\n            grunnlag.søkersituasjon.situasjon\n        )\n    ) {\n        const perioderUttakRundtFødsel = getFarMedmorUttakRundtFødsel(\n            grunnlag.perioder,\n            grunnlag.familiehendelsesdato,\n            grunnlag.termindato\n        );\n        const antallDagerForMye = overskridelseUttakRundtFødselAntallDager(\n            perioderUttakRundtFødsel,\n            grunnlag.familiehendelsesdato\n        );\n\n        const slutterEnAvPeriodeneForSent = perioderUttakRundtFødsel.some(\n            (p) => !slutterTidsperiodeInnen6UkerEtterFødsel(p.tidsperiode, grunnlag.familiehendelsesdato)\n        );\n        let info;\n        const fraDato = formaterDatoKompakt(\n            getFørsteUttaksdag2UkerFørFødsel(grunnlag.familiehendelsesdato, grunnlag.termindato)\n        );\n        const tilDato = formaterDatoKompakt(getSisteUttaksdag6UkerEtterFødsel(grunnlag.familiehendelsesdato));\n        if (slutterEnAvPeriodeneForSent) {\n            info = {\n                intlKey:\n                    'uttaksplan.validering.feil.farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel.periodeSlutterForSent',\n                values: {\n                    fraDato: fraDato,\n                    tilDato: tilDato,\n                },\n            };\n        } else {\n            info = {\n                intlKey: 'uttaksplan.validering.feil.farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel',\n                values: {\n                    fraDato: fraDato,\n                    tilDato: tilDato,\n                    dagerForMye: Math.abs(antallDagerForMye),\n                },\n            };\n        }\n        return {\n            passerer: antallDagerForMye >= 0,\n            info: info,\n        };\n    }\n\n    return {\n        passerer: true,\n    };\n};\n","import { inneholderUttaksplanPerioderTest } from './tester/inneholderUttaksplanPerioderTest';\nimport { harMorSøktUgyldigUttakFørsteSeksUkerTest } from './tester/harMorSøktUgyldigUttakFørsteSeksUkerTest';\nimport { stønadskontoInneholderForMyeUttakKunSøkerTest } from './tester/stønadskontoInneholderForMyeUttakKunSøkerTest';\nimport { harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest } from './tester/harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest';\nimport { erUttaksplanBareOppholdTest } from './tester/erUttaksplanBareOppholdTest';\nimport { slutterUttaksplanMedOppholdTest } from './tester/slutterUttaksplanMedOppholdTest';\nimport { starterUttaksplanMedOppholdTest } from './tester/starterUttaksplanMedOppholdTest';\nimport { erUttaksplanGraderingStørreEnnSamtidigUttakTest } from './tester/erUttaksplanGraderingStørreEnnSamtidigUttakTest';\nimport { erTilleggsopplysningerGyldigTest } from './tester/erTilleggsopplysningerGyldigTest';\nimport { harTilleggsopplysningerGyldigeCharsTest } from './tester/harTilleggsopplysningerGyldigeCharsTest';\nimport { harUttaksplanForMangeFlerbarnsdagerTest } from './tester/harUttaksplanForMangeFlerbarnsdagerTest';\nimport { inneholderUttaksplanDatoSomIkkeErUttaksdag } from './tester/inneholderUttaksplanDatoSomIkkeErUttaksdagTest';\nimport { harPerioderManglendeVedleggTest } from './tester/harPerioderManglendeVedleggTest';\nimport { inneholderSenUtsettelsePgaFerieTest } from './tester/inneholderSenUtsettelsePgaFerieTest';\nimport { inneholderTapteDagerTest } from './tester/inneholderTapteDagerTest';\nimport { inneholderBareUtsettelserTest } from './tester/inneholderBareUtsettelserTest';\nimport { inneholderSenUtsettelsePgaArbeidTest } from './tester/inneholderSenUtsettelsePgaArbeidTest';\nimport { overskriverEndringerAnnenPartsPerioder } from './tester/overskriverEndringerAnnenPartsPerioder';\nimport { overlapperPeriodeAndrePerioder } from './tester/overlapperPeriodeAndrePerioderTest';\nimport periodevalideringsregler, { PeriodeValiderRegelKey } from './tester/periodevalideringstester';\nimport { harSøktOmFerieUtenArbeidsforhold } from './tester/harSøktOmFerieUtenArbeidsforholdTest';\nimport { inneholderForMyeFerie } from './tester/inneholderForMyeFerie';\nimport { kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme } from './tester/kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme';\nimport { erUttaksmengdeForFarMedmorForHøyTest } from './tester/erUttaksmengdeForFarMedmorForHøyTest';\nimport { burdeKanskjeSøkeGraderingTest } from './tester/burdeKanskjeSøkeGraderingTest';\nimport { ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest } from './tester/ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest';\nimport { Regel, RegelAlvorlighet } from './utils/types/regelTypes';\nimport { førsteOktober2021ReglerGjelder } from 'app/utils/dateUtils';\nimport { inneholderPerioderUtenAktivitetskrav } from './tester/inneholderPerioderUtenAktivitetskrav';\nimport { inneholderUtsettelserUtenÅrsak } from './tester/inneholderUtsettelserUtenÅrsak';\nimport { farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest } from './tester/farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest';\nimport { harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest } from './tester/harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest';\nimport { farMedMorHarRettPåUttakRundtFødselTest } from './tester/farMedMorHarRettPåUttakRundtFødselTest';\nimport { farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest } from './tester/farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest';\nimport { inneholderUttaksperioderMedUbesvartGradering } from './tester/inneholderUttaksperioderMedUbesvartGradering';\nimport { inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest } from './tester/inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest';\nimport { farMedmorHarRettPåFlerbarnsdagerTest } from './tester/farMedmorHarRettPåFlerbarnsdagerTest';\nimport { overstigerMinsterettVedToTette } from './tester/overstigerMinsterettVedToTette';\nimport { harPerioderEtterFørsteStønadsdagNesteBarnDerToTette } from './tester/harPerioderEtterFørsteStønadsdagNesteBarnDerToTette';\n\nexport enum UttaksplanRegelKey {\n    'planenInneholderIngenPerioder' = 'planenInneholderIngenPerioder',\n    'morHarSøktUgyldigUttakFørsteSeksUker' = 'morHarSøktUgyldigUttakFørsteSeksUker',\n    'farMedmorHarSøktUgyldigUttakEllerUtsettelseFørsteSeksUker' = 'farMedmorHarSøktUgyldigUttakEllerUtsettelseFørsteSeksUker',\n    'farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel' = 'farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel',\n    'harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker' = 'harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker',\n    'farMedmorHarSøktUttakRundtFødselUtenforGyldigPeriode' = 'farMedmorHarSøktUttakRundtFødselUtenforGyldigPeriode',\n    'stønadskontoInneholderForMyeUttakKunSøker' = 'stønadskontoInneholderForMyeUttakKunSøker',\n    'uttaksplanErBareOpphold' = 'uttaksplanErBareOpphold',\n    'uttaksplanStarterMedOpphold' = 'uttaksplanStarterMedOpphold',\n    'uttaksplanSlutterMedOpphold' = 'uttaksplanSlutterMedOpphold',\n    'uttaksplanGraderingStørreEnnSamtidigUttak' = 'uttaksplanGraderingStørreEnnSamtidigUttak',\n    'begrunnelseVedForSenEndringErUgyldig' = 'begrunnelseVedForSenEndringErUgyldig',\n    'begrunnelseVedForSenEndringHarUgyldigeChars' = 'begrunnelseVedForSenEndringHarUgyldigeChars',\n    'uttaksplanHarForMangeFlerbarnsdager' = 'uttaksplanHarForMangeFlerbarnsdager',\n    'uttaksplanInneholderDatoSomIkkeErUttaksdag' = 'uttaksplanInneholderDatoSomIkkeErUttaksdag',\n    'perioderManglerVedlegg' = 'manglendeVedlegg',\n    'inneholderSenUtsettelsePgaFerie' = 'inneholderSenUtsettelsePgaFerieTest',\n    'inneholderSenUtsettelsePgaArbeid' = 'inneholderSenUtsettelsePgaArbeidTest',\n    'inneholderTapteDager' = 'inneholderTapteDager',\n    'inneholderBareUtsettelser' = 'inneholderBareUtsettelser',\n    'inneholderForMyeFerie' = 'inneholderForMyeFerie',\n    'endringerOverskriverAnnenPartsPerioder' = 'endringerOverskriverAnnenPartsPerioder',\n    'periodeOverlapperAndrePerioder' = 'periodeOverlapperAndrePerioder',\n    'harSøktOmFerieUtenArbeidsforhold' = 'harSøktOmFerieUtenArbeidsforhold',\n    'kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme' = 'kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme',\n    'uttaksmengdeForFarMedmorErForHøy' = 'uttaksmengdeForFarMedmorErForHøy',\n    'burdeKanskjeSøkeGradering' = 'burdeKanskjeSøkeGradering',\n    'ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato' = 'ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato',\n    'inneholderPerioderUtenAktivitetskrav' = 'inneholderPerioderUtenAktivitetskrav',\n    'inneholderUtsettelserUtenÅrsak' = 'inneholderUtsettelserUtenÅrsak',\n    'farMedMorHarRettPåUttakRundtFødsel' = 'farMedMorHarRettPåUttakRundtFødsel',\n    'farMedmorHarRettPåForeldrepengerUtenAktivitetskrav' = 'farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest',\n    'farMedmorHarRettPåFlerbarnsdager' = 'farMedmorHarRettPåFlerbarnsdagerTest',\n    'inneholderUttaksperioderMedUbesvartGradering' = 'inneholderUttaksperioderMedUbesvartGradering',\n    'inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest' = 'inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest',\n    'overstigerMinsterettVedToTette' = 'overstigerMinsterettVedToTette',\n    'harPerioderEtterFørsteStønadsdagNesteBarnDerToTette' = 'harPerioderEtterFørsteStønadsdagNesteBarnDerToTette',\n}\n\nexport type RegelKey = UttaksplanRegelKey | PeriodeValiderRegelKey;\n\nconst uttaksplanValideringRegler = (familiehendelsesdato: Date): Regel[] => [\n    {\n        key: UttaksplanRegelKey.planenInneholderIngenPerioder,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUttaksplanPerioderTest,\n    },\n    {\n        key: UttaksplanRegelKey.stønadskontoInneholderForMyeUttakKunSøker,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: stønadskontoInneholderForMyeUttakKunSøkerTest,\n    },\n    {\n        key: UttaksplanRegelKey.morHarSøktUgyldigUttakFørsteSeksUker,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harMorSøktUgyldigUttakFørsteSeksUkerTest,\n    },\n    {\n        key: UttaksplanRegelKey.farMedmorHarSøktUgyldigUttakEllerUtsettelseFørsteSeksUker,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest,\n    },\n    {\n        key: UttaksplanRegelKey.farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest,\n    },\n    {\n        key: UttaksplanRegelKey.harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksmengdeForFarMedmorErForHøy,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erUttaksmengdeForFarMedmorForHøyTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanErBareOpphold,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erUttaksplanBareOppholdTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanStarterMedOpphold,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: starterUttaksplanMedOppholdTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanSlutterMedOpphold,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: slutterUttaksplanMedOppholdTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanGraderingStørreEnnSamtidigUttak,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erUttaksplanGraderingStørreEnnSamtidigUttakTest,\n    },\n    {\n        key: UttaksplanRegelKey.begrunnelseVedForSenEndringErUgyldig,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: erTilleggsopplysningerGyldigTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanHarForMangeFlerbarnsdager,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harUttaksplanForMangeFlerbarnsdagerTest,\n    },\n    {\n        key: UttaksplanRegelKey.begrunnelseVedForSenEndringHarUgyldigeChars,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harTilleggsopplysningerGyldigeCharsTest,\n    },\n    {\n        key: UttaksplanRegelKey.uttaksplanInneholderDatoSomIkkeErUttaksdag,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUttaksplanDatoSomIkkeErUttaksdag,\n    },\n    {\n        key: UttaksplanRegelKey.perioderManglerVedlegg,\n        alvorlighet: RegelAlvorlighet.ADVARSEL,\n        test: harPerioderManglendeVedleggTest,\n        slåsSammenVedOppsummering: true,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderSenUtsettelsePgaFerie,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: inneholderSenUtsettelsePgaFerieTest,\n        slåsSammenVedOppsummering: true,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderSenUtsettelsePgaArbeid,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: inneholderSenUtsettelsePgaArbeidTest,\n        slåsSammenVedOppsummering: true,\n    },\n    {\n        key: UttaksplanRegelKey.farMedMorHarRettPåUttakRundtFødsel,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: farMedMorHarRettPåUttakRundtFødselTest,\n        skjulesIPeriode: true,\n    },\n    {\n        key: UttaksplanRegelKey.farMedmorHarRettPåForeldrepengerUtenAktivitetskrav,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest,\n        skjulesIPeriode: true,\n    },\n    {\n        key: UttaksplanRegelKey.farMedmorHarRettPåFlerbarnsdager,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: farMedmorHarRettPåFlerbarnsdagerTest,\n        skjulesIPeriode: true,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderTapteDager,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: inneholderTapteDagerTest,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderBareUtsettelser,\n        alvorlighet: førsteOktober2021ReglerGjelder(familiehendelsesdato)\n            ? RegelAlvorlighet.FEIL\n            : RegelAlvorlighet.INFO,\n        test: inneholderBareUtsettelserTest,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderForMyeFerie,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderForMyeFerie,\n    },\n    {\n        key: UttaksplanRegelKey.endringerOverskriverAnnenPartsPerioder,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: overskriverEndringerAnnenPartsPerioder,\n        slåsSammenVedOppsummering: false,\n    },\n    {\n        key: UttaksplanRegelKey.periodeOverlapperAndrePerioder,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: overlapperPeriodeAndrePerioder,\n        slåsSammenVedOppsummering: false,\n        skjulesIOppsummering: true,\n    },\n    {\n        key: UttaksplanRegelKey.harSøktOmFerieUtenArbeidsforhold,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: harSøktOmFerieUtenArbeidsforhold,\n    },\n    {\n        key: UttaksplanRegelKey.kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme,\n    },\n    {\n        key: UttaksplanRegelKey.burdeKanskjeSøkeGradering,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: burdeKanskjeSøkeGraderingTest,\n    },\n    {\n        key: UttaksplanRegelKey.ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato,\n        alvorlighet: RegelAlvorlighet.ADVARSEL,\n        test: ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderPerioderUtenAktivitetskrav,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderPerioderUtenAktivitetskrav,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderUttaksperioderMedUbesvartGradering,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUttaksperioderMedUbesvartGradering,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest,\n    },\n    {\n        key: UttaksplanRegelKey.inneholderUtsettelserUtenÅrsak,\n        alvorlighet: RegelAlvorlighet.FEIL,\n        test: inneholderUtsettelserUtenÅrsak,\n    },\n    {\n        key: UttaksplanRegelKey.overstigerMinsterettVedToTette,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: overstigerMinsterettVedToTette,\n    },\n    {\n        key: UttaksplanRegelKey.harPerioderEtterFørsteStønadsdagNesteBarnDerToTette,\n        alvorlighet: RegelAlvorlighet.INFO,\n        test: harPerioderEtterFørsteStønadsdagNesteBarnDerToTette,\n    },\n];\n\nconst uttaksplanRegler = (familiehendelsesDato: Date) => [\n    ...uttaksplanValideringRegler(familiehendelsesDato),\n    ...periodevalideringsregler,\n];\n\nexport default uttaksplanRegler;\n","import { getSisteUttaksdag6UkerEtterFødsel } from 'app/utils/wlbUtils';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport dayjs from 'dayjs';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { isUttaksperiode } from 'uttaksplan/types/Periode';\n\nexport const harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    const søkerErMor = !grunnlag.søkerErFarEllerMedmor;\n    if (søkerErMor && grunnlag.søkersituasjon.situasjon === 'fødsel') {\n        const sisteUttaksdagEtterSeksUker = getSisteUttaksdag6UkerEtterFødsel(grunnlag.familiehendelsesdato);\n        const perioderMedSamtidigUttakUnder100ProsentInnenFørsteSeksUker = grunnlag.perioder.filter(\n            (p) =>\n                isUttaksperiode(p) &&\n                dayjs(p.tidsperiode.fom).isSameOrBefore(sisteUttaksdagEtterSeksUker, 'day') &&\n                p.ønskerSamtidigUttak === true &&\n                p.samtidigUttakProsent !== undefined &&\n                parseInt(p.samtidigUttakProsent, 10) < 100\n        );\n\n        return {\n            passerer: perioderMedSamtidigUttakUnder100ProsentInnenFørsteSeksUker.length <= 0,\n            info: {\n                intlKey: 'uttaksplan.validering.feil.morHarSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker',\n            },\n        };\n    }\n    return { passerer: true };\n};\n","import {\n    ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL,\n    getFarMedmorUttakRundtFødsel,\n    getFørsteUttaksdag2UkerFørFødsel,\n    getSisteUttaksdag6UkerEtterFødsel,\n    gjelderWLBReglerFarMedmorRundtFødsel,\n} from 'app/utils/wlbUtils';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { formaterDatoKompakt } from 'app/utils/dateUtils';\nimport { getSumUttaksdagerÅTrekkeIPeriodene } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { erUttaksmengdeForFarMedmorForHøyTest } from './erUttaksmengdeForFarMedmorForHøyTest';\nimport dayjs from 'dayjs';\n\nexport const farMedMorHarRettPåUttakRundtFødselTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const tattUtForMangeDagerIPlanen = erUttaksmengdeForFarMedmorForHøyTest(grunnlag).passerer === false;\n    if (\n        !gjelderWLBReglerFarMedmorRundtFødsel(\n            grunnlag.familiehendelsesdato,\n            grunnlag.søkerErFarEllerMedmor,\n            grunnlag.morHarRett,\n            grunnlag.søkersituasjon.situasjon\n        ) ||\n        tattUtForMangeDagerIPlanen\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderRundtFødsel = getFarMedmorUttakRundtFødsel(\n        grunnlag.perioder,\n        grunnlag.familiehendelsesdato,\n        grunnlag.termindato\n    );\n\n    let dagerIgjenRundtFødsel;\n    const førsteUttaksdag2UkerFørFødsel = getFørsteUttaksdag2UkerFørFødsel(\n        grunnlag.familiehendelsesdato,\n        grunnlag.termindato\n    );\n    const sisteUttak6UkerEtterFødsel = getSisteUttaksdag6UkerEtterFødsel(grunnlag.familiehendelsesdato);\n\n    if (perioderRundtFødsel.length > 0) {\n        const antallUttaksdagerRundtFødsel = getSumUttaksdagerÅTrekkeIPeriodene(perioderRundtFødsel);\n        dagerIgjenRundtFødsel = ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL - antallUttaksdagerRundtFødsel;\n    } else {\n        dagerIgjenRundtFødsel = ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL;\n    }\n    const erMerEnn3månederSidenFamiliehendelse = dayjs(new Date())\n        .subtract(3, 'month')\n        .isSameOrAfter(grunnlag.familiehendelsesdato, 'day');\n\n    return {\n        passerer: dagerIgjenRundtFødsel <= 0 || erMerEnn3månederSidenFamiliehendelse,\n        info: {\n            intlKey: 'uttaksplan.validering.info.rettTilUttakRundtFødsel',\n            values: {\n                fraDato: formaterDatoKompakt(førsteUttaksdag2UkerFørFødsel),\n                tilDato: formaterDatoKompakt(sisteUttak6UkerEtterFødsel),\n                antallDager: Math.round(dagerIgjenRundtFødsel * 10) / 10,\n            },\n        },\n    };\n};\n","import uttaksConstants from 'app/constants';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport { andreAugust2022ReglerGjelder } from './dateUtils';\n\nexport const getBareFarHarRettKontoUtenAktivitetskravUker = (\n    antallBarn: number,\n    morErUfør: boolean,\n    familiehendelsesdato: Date,\n    dekningsgrad: Dekningsgrad,\n    bareFarHarRett: boolean\n): number => {\n    if (!bareFarHarRett) {\n        return 0;\n    }\n\n    if (andreAugust2022ReglerGjelder(familiehendelsesdato) && antallBarn === 1 && !morErUfør) {\n        return 8;\n    }\n    let morUførUker = 0;\n    let flerbarnsukerSomDelAvMinsterett = 0;\n\n    if (morErUfør) {\n        morUførUker = dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? 15 : 19;\n    }\n\n    if (andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n        if (antallBarn === 2) {\n            flerbarnsukerSomDelAvMinsterett = dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? 17 : 21;\n        } else if (antallBarn > 2) {\n            flerbarnsukerSomDelAvMinsterett = dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? 46 : 56;\n        }\n    }\n\n    return flerbarnsukerSomDelAvMinsterett + morUførUker;\n};\n\nexport const getBareFarHarRettFlerbarnsdagerUker = (\n    antallBarn: number,\n    familiehendelsesdato: Date,\n    dekningsgrad: Dekningsgrad,\n    bareFarHarRett: boolean\n): number => {\n    if (!bareFarHarRett || antallBarn === 1) {\n        return 0;\n    }\n\n    //Flerbarnsdager regnes som en del av minsteretten når WLB Regler gjelder, og blir med i kontoen uten aktivitetskrav\n    if (andreAugust2022ReglerGjelder(familiehendelsesdato)) {\n        return 0;\n    }\n\n    let flerbarnsUker = 0;\n\n    if (antallBarn === 2) {\n        flerbarnsUker =\n            dekningsgrad === Dekningsgrad.HUNDRE_PROSENT\n                ? uttaksConstants.ANTALL_UKER_2_BARN_100_PROSENT_UTTAK\n                : uttaksConstants.ANTALL_UKER_2_BARN_80_PROSENT_UTTAK;\n    } else if (antallBarn > 2) {\n        flerbarnsUker =\n            dekningsgrad === Dekningsgrad.HUNDRE_PROSENT\n                ? uttaksConstants.ANTALL_UKER_3_ELLER_FLERE_BARN_100_PROSENT_UTTAK\n                : uttaksConstants.ANTALL_UKER_3_ELLER_FLERE_BARN_80_PROSENT_UTTAK;\n    }\n\n    return flerbarnsUker;\n};\n\nexport const getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB = (\n    antallBarn: number,\n    familiehendelsesdato: Date,\n    dekningsgrad: Dekningsgrad,\n    bareFarHarRett: boolean\n) => {\n    if (!bareFarHarRett) {\n        return 0;\n    }\n    const antallUkerEtterFødselMor = uttaksConstants.ANTALL_UKER_MØDREKVOTE_ETTER_FØDSEL;\n    const antallUkerForeldrepengerFar =\n        dekningsgrad === Dekningsgrad.HUNDRE_PROSENT\n            ? uttaksConstants.ANTALL_UKER_FORELDREPENGER_BARE_FAR_HAR_RETT_100_PROSENT\n            : uttaksConstants.ANTALL_UKER_FORELDREPENGER_BARE_FAR_HAR_RETT_80_PROSENT;\n    const flerbarnsUker = getBareFarHarRettFlerbarnsdagerUker(\n        antallBarn,\n        familiehendelsesdato,\n        dekningsgrad,\n        bareFarHarRett\n    );\n\n    return antallUkerEtterFødselMor + antallUkerForeldrepengerFar + flerbarnsUker;\n};\n","import React from 'react';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { erUttaksmengdeForFarMedmorForHøyTest } from './erUttaksmengdeForFarMedmorForHøyTest';\nimport links from 'app/links/links';\nimport { IntlShape } from 'react-intl';\nimport {\n    getBareFarHarRettKontoUtenAktivitetskravUker,\n    getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB,\n} from 'app/utils/minsterettUtils';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\n\nexport const farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    const tattUtForMangeDagerIPlanen = erUttaksmengdeForFarMedmorForHøyTest(grunnlag).passerer === false;\n    if (\n        !grunnlag.søkerErFarEllerMedmor ||\n        grunnlag.morHarRett ||\n        tattUtForMangeDagerIPlanen ||\n        (grunnlag.søkerErFarEllerMedmor && grunnlag.søkerErAleneOmOmsorg)\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const kontoUtenAktivitetskravUker = getBareFarHarRettKontoUtenAktivitetskravUker(\n        grunnlag.antallBarn,\n        grunnlag.morErUfør,\n        grunnlag.familiehendelsesdato,\n        grunnlag.dekningsgrad,\n        !grunnlag.morHarRett\n    );\n\n    const testPasserer = kontoUtenAktivitetskravUker === 0;\n    const renderAsHtml = true;\n    const link = (_intl: IntlShape) => (msg: any) =>\n        (\n            <a href={links.aktivitetsfriUttakInfo} className=\"lenke\" rel=\"noreferrer\" target=\"_blank\">\n                {msg}\n            </a>\n        );\n\n    if (andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato)) {\n        return {\n            passerer: testPasserer,\n            info: {\n                intlKey: 'uttaksplan.validering.info.rettTilAktivitetsfriUttak.etterWLB',\n                renderAsHtml: renderAsHtml,\n                values: {\n                    antallUker: kontoUtenAktivitetskravUker,\n                    a: link,\n                },\n            },\n        };\n    } else {\n        const bareFarHarRett = grunnlag.søkerErFarEllerMedmor && !grunnlag.morHarRett;\n        const antallUkerPåÅTaUtDager = getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB(\n            grunnlag.antallBarn,\n            grunnlag.familiehendelsesdato,\n            grunnlag.dekningsgrad,\n            bareFarHarRett\n        );\n        return {\n            passerer: testPasserer,\n            info: {\n                intlKey: 'uttaksplan.validering.info.rettTilAktivitetsfriUttak.førWLB',\n                renderAsHtml: renderAsHtml,\n                values: {\n                    antallUker: kontoUtenAktivitetskravUker,\n                    antallUkerÅTaUtDagerUtenAktivitet: antallUkerPåÅTaUtDager,\n                    a: link,\n                },\n            },\n        };\n    }\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { isUttaksperiode, Periode, Uttaksperiode } from 'uttaksplan/types/Periode';\nimport { graderingSkalBesvares } from 'uttaksplan/utils/uttaksskjema/graderingSkalBesvares';\nimport dayjs from 'dayjs';\n\nexport const inneholderUttaksperioderMedUbesvartGradering = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const uttaksperioder = grunnlag.perioder.filter((p: Periode) => isUttaksperiode(p)) as Uttaksperiode[];\n    const perioderMedUbesvartGradering = uttaksperioder\n        .filter((p) =>\n            graderingSkalBesvares(\n                p.type,\n                p.konto,\n                grunnlag.familiehendelsesdato,\n                grunnlag.søkerErFarEllerMedmor,\n                p.erMorForSyk,\n                p.tidsperiode\n            )\n        )\n        //Feilmeldingen skal ikke komme hvis spm om flerbarnsdager skal besvares først (kun for perioder etter fødsel).\n        .filter((p) =>\n            grunnlag.erFlerbarnssøknad\n                ? (dayjs(p.tidsperiode.fom).isSameOrAfter(grunnlag.familiehendelsesdato, 'd') &&\n                      p.ønskerFlerbarnsdager !== undefined) ||\n                  dayjs(p.tidsperiode.fom).isBefore(grunnlag.familiehendelsesdato, 'd')\n                : p\n        )\n        .filter((p) => p.gradert === undefined);\n\n    return {\n        passerer: perioderMedUbesvartGradering.length === 0,\n        info: perioderMedUbesvartGradering.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.inneholderUttaksperioderMedUbesvartGradering',\n            periodeId: periode.id,\n        })),\n    };\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTestresultat } from '../utils/types/regelTypes';\nimport { isUttaksperiode, Periode, Uttaksperiode } from 'uttaksplan/types/Periode';\nimport { ønskerFlerbarnsdagerSkalBesvares } from 'uttaksplan/utils/uttaksskjema/ønskerFlerbarnsdagerSkalBesvares';\nimport { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport { UttakRundtFødselÅrsak } from 'app/types/UttakRundtFødselÅrsak';\n\nexport const inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    const uttaksperioder = grunnlag.perioder.filter((p: Periode) => isUttaksperiode(p)) as Uttaksperiode[];\n    const erFlerbarnssøknad = grunnlag.antallBarn > 1;\n    const bareFarMedmorHarRett = grunnlag.søkerErFarEllerMedmor && !grunnlag.erDeltUttak;\n    const erDeltUttakINorge =\n        grunnlag.erDeltUttak &&\n        isAnnenForelderOppgitt(grunnlag.annenForelder) &&\n        grunnlag.annenForelder.harRettPåForeldrepengerINorge;\n    const perioderMedUbesvartSpmOmFlerbarnsdager = uttaksperioder\n        .filter((p) =>\n            ønskerFlerbarnsdagerSkalBesvares(\n                p.type,\n                erFlerbarnssøknad,\n                grunnlag.søkerErFarEllerMedmor,\n                grunnlag.familiehendelsesdato,\n                p.tidsperiode,\n                p.konto,\n                bareFarMedmorHarRett,\n                grunnlag.antallBarn,\n                grunnlag.søkerErAleneOmOmsorg,\n                !!erDeltUttakINorge,\n                p.erMorForSyk ? UttakRundtFødselÅrsak.morErForSyk : undefined\n            )\n        )\n        .filter((p) => p.gradert === undefined);\n\n    return {\n        passerer: perioderMedUbesvartSpmOmFlerbarnsdager.length === 0,\n        info: perioderMedUbesvartSpmOmFlerbarnsdager.map((periode) => ({\n            intlKey: 'uttaksplan.validering.feil.inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdager',\n            periodeId: periode.id,\n        })),\n    };\n};\n","import React from 'react';\nimport { RegelTest, RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { erUttaksmengdeForFarMedmorForHøyTest } from './erUttaksmengdeForFarMedmorForHøyTest';\nimport links from 'app/links/links';\nimport { IntlShape } from 'react-intl';\nimport {\n    getBareFarHarRettFlerbarnsdagerUker,\n    getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB,\n} from 'app/utils/minsterettUtils';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\n\nexport const farMedmorHarRettPåFlerbarnsdagerTest: RegelTest = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const tattUtForMangeDagerIPlanen = erUttaksmengdeForFarMedmorForHøyTest(grunnlag).passerer === false;\n    if (\n        !grunnlag.søkerErFarEllerMedmor ||\n        grunnlag.morHarRett ||\n        tattUtForMangeDagerIPlanen ||\n        (grunnlag.søkerErFarEllerMedmor && grunnlag.søkerErAleneOmOmsorg) ||\n        andreAugust2022ReglerGjelder(grunnlag.familiehendelsesdato)\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const flerbarnsUker = getBareFarHarRettFlerbarnsdagerUker(\n        grunnlag.antallBarn,\n        grunnlag.familiehendelsesdato,\n        grunnlag.dekningsgrad,\n        !grunnlag.morHarRett\n    );\n    const bareFarHarRett = grunnlag.søkerErFarEllerMedmor && !grunnlag.morHarRett;\n    const antallUkerPåÅTaUtDager = getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB(\n        grunnlag.antallBarn,\n        grunnlag.familiehendelsesdato,\n        grunnlag.dekningsgrad,\n        bareFarHarRett\n    );\n\n    return {\n        passerer: flerbarnsUker === 0,\n        info: {\n            intlKey: 'uttaksplan.validering.info.flerbarnsdagerKanBrukes',\n            renderAsHtml: true,\n            values: {\n                antallUker: flerbarnsUker,\n                antallUkerÅTaUtFlerbarnsdager: antallUkerPåÅTaUtDager,\n                a: (_intl: IntlShape) => (msg: any) =>\n                    (\n                        <a href={links.aktivitetsfriUttakInfo} className=\"lenke\" rel=\"noreferrer\" target=\"_blank\">\n                            {msg}\n                        </a>\n                    ),\n            },\n        },\n    };\n};\n","import { RegelTestresultat } from '../utils/types/regelTypes';\nimport { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { getBrukteDager } from 'uttaksplan/utils/brukteDagerUtils';\nimport { laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn } from './periodevalideringstester/forSenUttakVedPåfølgendeBarn';\n\nexport const overstigerMinsterettVedToTette = (grunnlag: Søknadsinfo): RegelTestresultat => {\n    const { familiehendelsesdato, perioder, stønadskontoer, søkerErFarEllerMedmor, minsterettUkerToTette } = grunnlag;\n    const perioderEtterFørsteStønadsperiodeNyttBarn = perioder.filter((periode) =>\n        laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn(periode, grunnlag.førsteUttaksdagNesteBarnsSak)\n    );\n    if (\n        minsterettUkerToTette === undefined ||\n        minsterettUkerToTette === 0 ||\n        perioderEtterFørsteStønadsperiodeNyttBarn.length === 0\n    ) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderFørFørsteStønadsperiodeNyttBarn = perioder.filter(\n        (periode) => !laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn(periode, grunnlag.førsteUttaksdagNesteBarnsSak)\n    );\n    const minsterettMaxAntallUker = minsterettUkerToTette;\n    const minsterettMaxAntallDager = minsterettMaxAntallUker * 5;\n\n    const brukteDagerPerForelderFørFørsteStønadsdagNyttBarn = getBrukteDager(\n        stønadskontoer,\n        perioderFørFørsteStønadsperiodeNyttBarn,\n        familiehendelsesdato\n    );\n    const uttaksdagerFremTilNyttBarnStønadsdag = søkerErFarEllerMedmor\n        ? brukteDagerPerForelderFørFørsteStønadsdagNyttBarn.farMedmor.dagerEgneKvoter +\n          brukteDagerPerForelderFørFørsteStønadsdagNyttBarn.farMedmor.dagerFellesperiode\n        : brukteDagerPerForelderFørFørsteStønadsdagNyttBarn.mor.dagerEgneKvoter +\n          brukteDagerPerForelderFørFørsteStønadsdagNyttBarn.mor.dagerFellesperiode;\n\n    const dagerIgjenÅBrukePåMinsteretten = minsterettMaxAntallDager - uttaksdagerFremTilNyttBarnStønadsdag;\n\n    const brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn = getBrukteDager(\n        stønadskontoer,\n        perioderEtterFørsteStønadsperiodeNyttBarn,\n        familiehendelsesdato\n    );\n    const uttaksdagerEtterNyttBarnStønadsdag = søkerErFarEllerMedmor\n        ? brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn.farMedmor.dagerEgneKvoter +\n          brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn.farMedmor.dagerFellesperiode\n        : brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn.mor.dagerEgneKvoter +\n          brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn.mor.dagerFellesperiode;\n\n    const dagerIgjenAvMinsterett = dagerIgjenÅBrukePåMinsteretten - uttaksdagerEtterNyttBarnStønadsdag;\n\n    return {\n        passerer: dagerIgjenAvMinsterett >= 0,\n        info: {\n            intlKey: 'uttaksplan.validering.info.overstigerMinsterettVedToTette',\n            values: {\n                uker: minsterettMaxAntallUker,\n                forMyeUttak: Math.abs(dagerIgjenAvMinsterett),\n            },\n        },\n    };\n};\n","import { Søknadsinfo } from '../utils/types/Søknadsinfo';\nimport { RegelTest, RegelTestresultat } from 'uttaksplan/validering/utils/types/regelTypes';\nimport { laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn } from './periodevalideringstester/forSenUttakVedPåfølgendeBarn';\n\nexport const harPerioderEtterFørsteStønadsdagNesteBarnDerToTette: RegelTest = (\n    grunnlag: Søknadsinfo\n): RegelTestresultat => {\n    if (grunnlag.minsterettUkerToTette === undefined || grunnlag.minsterettUkerToTette === 0) {\n        return {\n            passerer: true,\n        };\n    }\n    const perioderEtterFørsteStønadsperiodeNyttBarn = grunnlag.perioder.filter((periode) =>\n        laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn(periode, grunnlag.førsteUttaksdagNesteBarnsSak)\n    );\n\n    const tekstKey = grunnlag.søkerErFarEllerMedmor\n        ? 'uttaksplan.validering.info.harPerioderEtterFørsteStønadsdagNesteBarnDerToTette.far'\n        : 'uttaksplan.validering.info.harPerioderEtterFørsteStønadsdagNesteBarnDerToTette.mor';\n    return {\n        passerer: perioderEtterFørsteStønadsperiodeNyttBarn.length === 0,\n        info: {\n            intlKey: tekstKey,\n        },\n    };\n};\n","import { groupBy } from 'lodash';\nimport uttaksplanRegler from '.';\nimport { getRegelAvvik, hasRegelFeil, regelHarAvvik, regelPasserer } from './utils/regelUtils';\nimport { Søknadsinfo } from './utils/types/Søknadsinfo';\nimport { RegelStatus, UttaksplanRegelTestresultat } from './utils/types/regelTypes';\n\nconst REGEL_INTL_PREFIX = 'uttaksplan.validering';\n\nexport const sjekkUttaksplanOppMotRegler = (valideringsgrunnlag: Søknadsinfo): RegelStatus[] => {\n    return uttaksplanRegler(valideringsgrunnlag.familiehendelsesdato).map((regel) => {\n        const resultat = regel.test(valideringsgrunnlag);\n        return resultat.passerer\n            ? regelPasserer(regel)\n            : regelHarAvvik(regel, REGEL_INTL_PREFIX, resultat.info, resultat.periodeId);\n    });\n};\n\nexport const validerUttaksplan = (søknadsinfo: Søknadsinfo): UttaksplanRegelTestresultat => {\n    const resultat = sjekkUttaksplanOppMotRegler(søknadsinfo);\n\n    const avvik = getRegelAvvik(resultat);\n    const avvikPerPeriode = groupBy(\n        avvik.filter((a) => a.periodeId !== undefined),\n        (r) => r.periodeId\n    );\n\n    const harFeil = hasRegelFeil(avvik);\n    return {\n        resultat,\n        avvik,\n        avvikPerPeriode,\n        harFeil,\n    };\n};\n","import * as React from 'react';\nimport Veileder, { VeilederAnsiktstype, VeilederStil } from '../../../app/components/veileder/Veileder';\nimport Veilederpanel from 'nav-frontend-veilederpanel';\nimport { FormattedMessage } from 'react-intl';\nimport { VeilederMessage } from './types';\nimport VeilederMeldinger from './VeilederMeldinger';\nimport AriaText from 'uttaksplan/components/aria-text/AriaText';\n\ninterface Props {\n    messages: VeilederMessage[];\n    paneltype?: 'normal' | 'plakat';\n    kompakt?: boolean;\n    veilederStil?: VeilederStil;\n    ariaTittel?: string;\n    skjulMeldingIkon?: boolean;\n}\n\nconst VeilederInfo: React.FunctionComponent<Props> = ({\n    messages,\n    kompakt = true,\n    paneltype = 'normal',\n    veilederStil = 'kompakt',\n    skjulMeldingIkon = false,\n    ariaTittel,\n}) => {\n    const harFeil = messages.some((m) => m.type === 'feil');\n    const harAdvarsler = messages.some((m) => m.type === 'advarsel');\n\n    let ansikt: VeilederAnsiktstype;\n    if (harFeil) {\n        ansikt = 'skeptisk';\n    } else if (harAdvarsler) {\n        ansikt = 'undrende';\n    } else {\n        ansikt = 'glad';\n    }\n\n    return (\n        <Veilederpanel\n            type={paneltype}\n            kompakt={kompakt}\n            svg={<Veileder stil={veilederStil} ansikt={ansikt} farge=\"transparent\" />}\n            fargetema={harFeil ? 'feilmelding' : 'normal'}\n        >\n            {ariaTittel && (\n                <AriaText tag=\"h2\">\n                    <FormattedMessage id=\"uttaksplan.regelAvvik.ariaTittel\" />\n                </AriaText>\n            )}\n            <VeilederMeldinger meldinger={messages} stil=\"transparent\" skjulMeldingIkon={skjulMeldingIkon} />\n        </Veilederpanel>\n    );\n};\n\nexport default VeilederInfo;\n","import { IntlShape } from 'react-intl';\n\nexport const intlHasKey = (intl: IntlShape, key: string) => {\n    return intl.messages[key] !== undefined;\n};\n","import { VeiledermeldingerPerPeriode, VeilederMessage } from './types';\nimport { IntlShape } from 'react-intl';\nimport { RegelAvvik } from '../utils/types/regelTypes';\nimport { intlHasKey } from 'app/intl/utils';\nimport { getRegelIntlValues, trimRelaterteRegelAvvik } from '../utils/regelUtils';\nimport { UttaksplanAvvikType } from '../utils/types/UttaksplanAvvikType';\nimport { groupBy } from 'lodash';\n\nexport const veilederMessageAvsnitt = (\n    førsteTekst: VeilederMessage[],\n    andreTekst: VeilederMessage[],\n    visInfoOmPrematuruker: boolean\n): VeilederMessage[] => {\n    return visInfoOmPrematuruker === false ? førsteTekst : førsteTekst.concat(andreTekst);\n};\n\nconst mapAvvikTilMessage = (avvik: RegelAvvik, intl: IntlShape): VeilederMessage => {\n    const { info } = avvik;\n    const tittelIntlKey = `${info.intlKey}.tittel`;\n    const harTittel = intlHasKey(intl, tittelIntlKey);\n    return {\n        type: avvik.regel.alvorlighet,\n        contentIntlKey: info.intlKey,\n        titleIntlKey: harTittel ? tittelIntlKey : undefined,\n        formatContentAsHTML: info.renderAsHtml,\n        values: getRegelIntlValues(intl, info),\n        periodeId: avvik.regel.skjulesIPeriode !== true ? avvik.periodeId : undefined,\n        skjulesIOppsummering: avvik.regel.skjulesIOppsummering,\n        avvikType: avvik.regel.avvikType as UttaksplanAvvikType,\n    };\n};\n\nexport const getUttaksplanVeilederinfo = (\n    avvik: RegelAvvik[],\n    intl: IntlShape,\n    grupperAvvik: boolean\n): VeilederMessage[] => {\n    return trimRelaterteRegelAvvik(avvik, grupperAvvik).map((a) => mapAvvikTilMessage(a, intl));\n};\n\nexport const getPeriodelisteMeldinger = (veilederinfo: VeilederMessage[]): VeiledermeldingerPerPeriode => {\n    const meldinger = veilederinfo.filter((info) => info.periodeId !== undefined);\n    return groupBy(meldinger, (info) => info.periodeId);\n};\n","import React from 'react';\n\nimport throttle from 'lodash.throttle';\nimport { Element, Normaltekst } from 'nav-frontend-typografi';\nimport { injectIntl, IntlShape } from 'react-intl';\nimport { Block, intlUtils, UtvidetInformasjon } from '@navikt/fp-common';\nimport { tilleggsopplysningerMaxLength } from 'uttaksplan/validering/tester/erTilleggsopplysningerGyldigTest';\nimport { Textarea } from 'nav-frontend-skjema';\nimport { Attachment } from 'app/types/Attachment';\n\ninterface OwnProps {\n    begrunnelse?: string;\n    vedlegg?: Attachment[];\n    onBegrunnelseTekstChange: (begrunnelse: string) => void;\n    //onVedleggChange: (vedlegg: AttachmentType[]) => void;\n    intl: IntlShape;\n}\n\ntype Props = OwnProps;\n\ninterface State {\n    begrunnelse: string;\n}\n\nconst getLabel = (intl: IntlShape) => {\n    return (\n        <>\n            <Element>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.label')}</Element>\n            <UtvidetInformasjon apneLabel={intlUtils(intl, 'uttaksplan.tilleggsopplysninger.apneLabel')}>\n                <div style={{ backgroundColor: '#f1f1f1', padding: '1.5rem' }}>\n                    <Block margin=\"s\">\n                        <Element>\n                            {intlUtils(intl, 'uttaksplan.tilleggsopplysninger.sykdomTilbakeITid.overskrift')}\n                        </Element>\n                        <Normaltekst>\n                            {intlUtils(intl, 'uttaksplan.tilleggsopplysninger.sykdomTilbakeITid')}\n                        </Normaltekst>\n                    </Block>\n                    <Block margin=\"s\">\n                        <Element>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.uttak.overskrift')}</Element>\n                        <Normaltekst>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.uttak')}</Normaltekst>\n                    </Block>\n                    <Block margin=\"s\">\n                        <Element>\n                            {intlUtils(\n                                intl,\n                                'uttaksplan.tilleggsopplysninger.utsettelsearbeidellergradering.overskrift'\n                            )}\n                        </Element>\n                        <Normaltekst>\n                            {intlUtils(intl, 'uttaksplan.tilleggsopplysninger.utsettelsearbeidellergradering')}\n                        </Normaltekst>\n                    </Block>\n                    <Element>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.sykdom.overskrift')}</Element>\n                    <Normaltekst>{intlUtils(intl, 'uttaksplan.tilleggsopplysninger.sykdom')}</Normaltekst>\n                </div>\n            </UtvidetInformasjon>\n        </>\n    );\n};\n\nexport type TextareaChangeEvent = React.ChangeEvent<HTMLTextAreaElement>;\n\nclass OppgiTilleggsopplysninger extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            begrunnelse: this.props.begrunnelse || '',\n        };\n\n        this.throttledOnChange = throttle(this.throttledOnChange, 2000);\n    }\n\n    throttledOnChange = () => {\n        this.props.onBegrunnelseTekstChange(this.state.begrunnelse);\n    };\n\n    handleBegrunnelseChange = (e: TextareaChangeEvent) => {\n        this.setState(\n            {\n                begrunnelse: e.target.value,\n            },\n            this.throttledOnChange\n        );\n    };\n\n    render() {\n        const { intl } = this.props;\n\n        return (\n            <div className=\"blokk-m\">\n                <Block margin=\"l\">\n                    <Textarea\n                        value={this.state.begrunnelse}\n                        maxLength={tilleggsopplysningerMaxLength}\n                        name=\"begrunnelseForSenEndring\"\n                        label={getLabel(intl)}\n                        onChange={this.handleBegrunnelseChange}\n                    />\n                </Block>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(OppgiTilleggsopplysninger);\n","import React, { FunctionComponent } from 'react';\nimport Modal from 'nav-frontend-modal';\nimport { Normaltekst, Undertittel } from 'nav-frontend-typografi';\nimport { Hovedknapp, Knapp } from 'nav-frontend-knapper';\nimport { bemUtils, Block } from '@navikt/fp-common';\n\nimport './slettUttaksplanModal.less';\nimport { FormattedMessage } from 'react-intl';\n\ninterface Props {\n    isOpen: boolean;\n    erEndringssøknad: boolean;\n    onClose: () => void;\n    handleSlettUttaksplanModalBekreft: () => void;\n}\n\nconst SlettUttaksplanModal: FunctionComponent<Props> = ({\n    isOpen,\n    erEndringssøknad,\n    onClose,\n    handleSlettUttaksplanModalBekreft,\n}) => {\n    const bem = bemUtils('slettUttaksplanModal');\n\n    let innhold1Id = 'uttaksplan.slettPlan.innhold1.førstegangssøknad';\n    let innhold2Id = 'uttaksplan.slettPlan.innhold2.førstegangssøknad';\n    if (erEndringssøknad) {\n        innhold1Id = 'uttaksplan.slettPlan.innhold1.endringssøknad';\n        innhold2Id = 'uttaksplan.slettPlan.innhold2.endringssøknad';\n    }\n\n    return (\n        <Modal\n            className={bem.block}\n            isOpen={isOpen}\n            closeButton={true}\n            onRequestClose={onClose}\n            contentLabel=\"Slett uttaksplanen din\"\n        >\n            <div className={bem.element('content')}>\n                <Block padBottom=\"l\">\n                    <Undertittel>\n                        <FormattedMessage id=\"uttaksplan.slettPlan.modal.tittel\" />\n                    </Undertittel>\n                    <Normaltekst>\n                        <FormattedMessage id={innhold1Id} />\n                    </Normaltekst>\n                    <br />\n                    <Normaltekst>\n                        <FormattedMessage id={innhold2Id} />\n                    </Normaltekst>\n                </Block>\n                <div className={bem.element('knappWrapper')}>\n                    <Hovedknapp htmlType=\"button\" onClick={handleSlettUttaksplanModalBekreft}>\n                        <FormattedMessage id=\"uttaksplan.slettPlan.slett\" />\n                    </Hovedknapp>\n                    <Knapp onClick={onClose}>\n                        <FormattedMessage id=\"uttaksplan.slettPlan.avbryt\" />\n                    </Knapp>\n                </div>\n            </div>\n        </Modal>\n    );\n};\n\nexport default SlettUttaksplanModal;\n","import { Periode } from 'uttaksplan/types/Periode';\nimport { getPeriodeHullEllerPeriodeUtenUttak } from './uttaksplanbuilderUtils';\n\ninterface SlettPeriodeParams {\n    perioder: Periode[];\n    slettetPeriode: Periode;\n    familiehendelsesdato: Date;\n    harAktivitetskravIPeriodeUtenUttak: boolean;\n    erAdopsjon: boolean;\n    bareFarHarRett: boolean;\n    erFarEllerMedmor: boolean;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n}\n\nexport const slettPeriode = ({\n    perioder,\n    slettetPeriode,\n    familiehendelsesdato,\n    harAktivitetskravIPeriodeUtenUttak,\n    erAdopsjon,\n    bareFarHarRett,\n    erFarEllerMedmor,\n    førsteUttaksdagNesteBarnsSak,\n}: SlettPeriodeParams): Periode[] => {\n    const result: Periode[] = perioder.reduce((res, periode, index) => {\n        if (index === 0 && periode.id === slettetPeriode.id) {\n            return res;\n        }\n\n        if (periode.id === slettetPeriode.id) {\n            res.push(\n                ...getPeriodeHullEllerPeriodeUtenUttak(\n                    slettetPeriode.tidsperiode,\n                    harAktivitetskravIPeriodeUtenUttak,\n                    familiehendelsesdato,\n                    erAdopsjon,\n                    bareFarHarRett,\n                    erFarEllerMedmor,\n                    førsteUttaksdagNesteBarnsSak\n                )\n            );\n            return res;\n        }\n\n        res.push(periode);\n        return res;\n    }, [] as Periode[]);\n\n    return result;\n};\n","import { starterUttaksperiodeFørFødsel } from 'app/utils/wlbUtils';\nimport {\n    isForeldrepengerFørFødselUttaksperiode,\n    isInfoPeriode,\n    isUtsettelsesperiode,\n    Periode,\n} from 'uttaksplan/types/Periode';\nimport { leggTilPeriode } from './leggTilPeriode';\nimport { oppdaterPeriode } from './oppdaterPeriode';\nimport { slettPeriode } from './slettPeriode';\nimport {\n    finnOgSettInnHull,\n    fjernUnødvendigeHull,\n    settInnAnnenPartsUttak,\n    slåSammenLikePerioder,\n} from './uttaksplanbuilderUtils';\n\nconst leggTilPeriodeOgBuild = (\n    bevegeligePerioder: Periode[],\n    fastePerioder: Periode[],\n    nyPeriode: Periode,\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    annenPartsUttak: Periode[] | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n) => {\n    let nyePerioder = slåSammenLikePerioder(\n        leggTilPeriode({\n            perioder: bevegeligePerioder,\n            nyPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        }),\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak\n    );\n\n    fastePerioder.forEach((fastPeriode) => {\n        nyePerioder = leggTilPeriode({\n            perioder: nyePerioder,\n            nyPeriode: fastPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        });\n    });\n\n    if (annenPartsUttak) {\n        nyePerioder = finnOgSettInnHull(\n            settInnAnnenPartsUttak(nyePerioder, annenPartsUttak, familiehendelsesdato, førsteUttaksdagNesteBarnsSak),\n            harAktivitetskravIPeriodeUtenUttak,\n            familiehendelsesdato,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak\n        );\n    }\n\n    return nyePerioder;\n};\n\nconst oppdaterPeriodeOgBuild = (\n    endretPeriode: Periode,\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    annenPartsUttak: Periode[] | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n) => {\n    const originalPeriode = perioder.find((p) => p.id === endretPeriode.id)!;\n\n    let oppdatertePerioder = fjernUnødvendigeHull(\n        oppdaterPeriode({\n            perioder,\n            endretPeriode,\n            originalPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            annenPartsUttak,\n            førsteUttaksdagNesteBarnsSak,\n        })\n    );\n\n    if (annenPartsUttak) {\n        oppdatertePerioder = finnOgSettInnHull(\n            oppdatertePerioder,\n            harAktivitetskravIPeriodeUtenUttak,\n            familiehendelsesdato,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak\n        );\n        oppdatertePerioder = settInnAnnenPartsUttak(\n            oppdatertePerioder,\n            annenPartsUttak,\n            familiehendelsesdato,\n            førsteUttaksdagNesteBarnsSak\n        );\n    }\n\n    return finnOgSettInnHull(\n        oppdatertePerioder,\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak\n    );\n};\n\nconst slettPeriodeOgBuild = (\n    perioder: Periode[],\n    slettetPeriode: Periode,\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    annenPartsUttak: Periode[] | undefined,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n) => {\n    let nyePerioder = fjernUnødvendigeHull(\n        slåSammenLikePerioder(\n            slettPeriode({\n                perioder,\n                slettetPeriode,\n                familiehendelsesdato,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                førsteUttaksdagNesteBarnsSak,\n            }),\n            familiehendelsesdato,\n            førsteUttaksdagNesteBarnsSak\n        )\n    );\n\n    if (annenPartsUttak) {\n        nyePerioder = finnOgSettInnHull(\n            nyePerioder,\n            harAktivitetskravIPeriodeUtenUttak,\n            familiehendelsesdato,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak\n        );\n        nyePerioder = settInnAnnenPartsUttak(\n            nyePerioder,\n            annenPartsUttak,\n            familiehendelsesdato,\n            førsteUttaksdagNesteBarnsSak\n        );\n    }\n\n    return finnOgSettInnHull(\n        nyePerioder,\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak\n    );\n};\n\nconst getFastePerioder = (perioder: Periode[], familiehendelsesdato: Date): Periode[] => {\n    return perioder.filter(\n        (p) =>\n            isUtsettelsesperiode(p) ||\n            isForeldrepengerFørFødselUttaksperiode(p) ||\n            starterUttaksperiodeFørFødsel(p, familiehendelsesdato)\n    );\n};\n\nconst getBevegeligePerioder = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined\n): Periode[] => {\n    return finnOgSettInnHull(\n        perioder.filter(\n            (p) =>\n                !isUtsettelsesperiode(p) &&\n                !isForeldrepengerFørFødselUttaksperiode(p) &&\n                !starterUttaksperiodeFørFødsel(p, familiehendelsesdato) &&\n                !isInfoPeriode(p)\n        ),\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak\n    );\n};\n\nconst getAnnenPartsUttak = (perioder: Periode[]): Periode[] => {\n    return perioder.filter((p) => isInfoPeriode(p));\n};\n\nconst Uttaksplanbuilder = (\n    perioder: Periode[],\n    familiehendelsesdato: Date,\n    harAktivitetskravIPeriodeUtenUttak: boolean,\n    erAdopsjon: boolean,\n    bareFarHarRett: boolean,\n    erFarEllerMedmor: boolean,\n    førsteUttaksdagNesteBarnsSak: Date | undefined,\n    opprinneligPlan?: Periode[]\n) => {\n    const perioderUtenAnnenPart = finnOgSettInnHull(\n        perioder.filter((p) => !isInfoPeriode(p)),\n        harAktivitetskravIPeriodeUtenUttak,\n        familiehendelsesdato,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak\n    );\n    const fastePerioder = getFastePerioder(perioderUtenAnnenPart, familiehendelsesdato);\n    const bevegeligePerioder = getBevegeligePerioder(\n        perioderUtenAnnenPart,\n        familiehendelsesdato,\n        harAktivitetskravIPeriodeUtenUttak,\n        erAdopsjon,\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak\n    );\n    let annenPartsUttak: Periode[] | undefined = undefined;\n\n    if (opprinneligPlan) {\n        annenPartsUttak = getAnnenPartsUttak(opprinneligPlan);\n    }\n\n    return {\n        leggTilPeriode: (nyPeriode: Periode) =>\n            leggTilPeriodeOgBuild(\n                bevegeligePerioder,\n                fastePerioder,\n                nyPeriode,\n                familiehendelsesdato,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                annenPartsUttak,\n                førsteUttaksdagNesteBarnsSak\n            ),\n        leggTilPerioder: (nyePerioder: Periode[]) => {\n            let resultat: Periode[] = [];\n            nyePerioder.forEach((periode, index) => {\n                if (index === 0) {\n                    resultat = leggTilPeriodeOgBuild(\n                        bevegeligePerioder,\n                        fastePerioder,\n                        periode,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        annenPartsUttak,\n                        førsteUttaksdagNesteBarnsSak\n                    );\n                } else {\n                    const nyAnnenPartsUttak = getAnnenPartsUttak(resultat);\n                    const nyFastePerioder = getFastePerioder(resultat, familiehendelsesdato);\n                    const nyBevegeligePerioder = getBevegeligePerioder(\n                        resultat,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        førsteUttaksdagNesteBarnsSak\n                    );\n                    resultat = leggTilPeriodeOgBuild(\n                        nyBevegeligePerioder,\n                        nyFastePerioder,\n                        periode,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        nyAnnenPartsUttak,\n                        førsteUttaksdagNesteBarnsSak\n                    );\n                }\n            });\n            return resultat;\n        },\n        oppdaterPeriode: (endretPeriode: Periode) =>\n            oppdaterPeriodeOgBuild(\n                endretPeriode,\n                perioderUtenAnnenPart,\n                familiehendelsesdato,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                annenPartsUttak,\n                førsteUttaksdagNesteBarnsSak\n            ),\n        oppdaterPerioder: (oppdatertePerioder: Periode[]) => {\n            let resultat: Periode[] = [];\n            oppdatertePerioder.forEach((endretPeriode, index) => {\n                if (index === 0) {\n                    resultat = oppdaterPeriodeOgBuild(\n                        endretPeriode,\n                        perioderUtenAnnenPart,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        annenPartsUttak,\n                        førsteUttaksdagNesteBarnsSak\n                    );\n                } else {\n                    const nyAnnenPartsUttak = getAnnenPartsUttak(resultat);\n                    const nyFastePerioder = getFastePerioder(resultat, familiehendelsesdato);\n                    const nyBevegeligePerioder = getBevegeligePerioder(\n                        resultat,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        førsteUttaksdagNesteBarnsSak\n                    );\n                    resultat = leggTilPeriodeOgBuild(\n                        nyBevegeligePerioder,\n                        nyFastePerioder,\n                        endretPeriode,\n                        familiehendelsesdato,\n                        harAktivitetskravIPeriodeUtenUttak,\n                        erAdopsjon,\n                        bareFarHarRett,\n                        erFarEllerMedmor,\n                        nyAnnenPartsUttak,\n                        førsteUttaksdagNesteBarnsSak\n                    );\n                }\n            });\n            return resultat;\n        },\n        slettPeriode: (slettetPeriode: Periode) =>\n            slettPeriodeOgBuild(\n                perioderUtenAnnenPart,\n                slettetPeriode,\n                familiehendelsesdato,\n                harAktivitetskravIPeriodeUtenUttak,\n                erAdopsjon,\n                bareFarHarRett,\n                erFarEllerMedmor,\n                annenPartsUttak,\n                førsteUttaksdagNesteBarnsSak\n            ),\n    };\n};\n\nexport default Uttaksplanbuilder;\n","import { Periode } from 'uttaksplan/types/Periode';\nimport { leggTilPeriode } from './leggTilPeriode';\nimport { slettPeriode } from './slettPeriode';\nimport { slåSammenLikePerioder } from './uttaksplanbuilderUtils';\n\ninterface OppdaterPeriodeParams {\n    perioder: Periode[];\n    endretPeriode: Periode;\n    originalPeriode: Periode;\n    familiehendelsesdato: Date;\n    harAktivitetskravIPeriodeUtenUttak: boolean;\n    erAdopsjon: boolean;\n    bareFarHarRett: boolean;\n    erFarEllerMedmor: boolean;\n    annenPartsUttak: Periode[] | undefined;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n}\n\nexport const oppdaterPeriode = ({\n    perioder,\n    endretPeriode,\n    originalPeriode,\n    familiehendelsesdato,\n    harAktivitetskravIPeriodeUtenUttak,\n    erAdopsjon,\n    bareFarHarRett,\n    erFarEllerMedmor,\n    annenPartsUttak,\n    førsteUttaksdagNesteBarnsSak,\n}: OppdaterPeriodeParams): Periode[] => {\n    const perioderSlettetEndretPeriode = slåSammenLikePerioder(\n        slettPeriode({\n            perioder,\n            slettetPeriode: originalPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        }),\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak,\n        annenPartsUttak\n    );\n\n    return slåSammenLikePerioder(\n        leggTilPeriode({\n            perioder: perioderSlettetEndretPeriode,\n            nyPeriode: endretPeriode,\n            familiehendelsesdato,\n            harAktivitetskravIPeriodeUtenUttak,\n            erAdopsjon,\n            bareFarHarRett,\n            erFarEllerMedmor,\n            førsteUttaksdagNesteBarnsSak,\n        }),\n        familiehendelsesdato,\n        førsteUttaksdagNesteBarnsSak,\n        annenPartsUttak\n    );\n};\n","import { getTypedFormComponents, YesOrNo } from '@navikt/sif-common-formik/lib';\n\nexport enum UttaksplanFormField {\n    ønskerAutomatiskJustering = 'ønskerAutomatiskJustering',\n}\n\nexport interface UttaksplanFormData {\n    [UttaksplanFormField.ønskerAutomatiskJustering]: YesOrNo;\n}\n\nexport const UttaksplanFormComponents = getTypedFormComponents<UttaksplanFormField, UttaksplanFormData, string>();\n","import { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { convertBooleanOrUndefinedToYesOrNo, convertYesOrNoOrUndefinedToBoolean } from 'app/utils/formUtils';\nimport { UttaksplanFormData, UttaksplanFormField } from './UttaksplanFormConfig';\n\nexport const cleanUttaksplanFormData = (\n    values: UttaksplanFormData,\n    visibility: QuestionVisibility<UttaksplanFormField, undefined>\n): UttaksplanFormData => {\n    const cleanedData: UttaksplanFormData = {\n        ønskerAutomatiskJustering: visibility.isVisible(UttaksplanFormField.ønskerAutomatiskJustering)\n            ? values.ønskerAutomatiskJustering\n            : YesOrNo.UNANSWERED,\n    };\n\n    return cleanedData;\n};\n\nexport const mapUttaksplanFormToState = (values: Partial<UttaksplanFormData>): boolean | undefined => {\n    return convertYesOrNoOrUndefinedToBoolean(values.ønskerAutomatiskJustering);\n};\n\nexport const mapUttaksplanFormValueToState = (value: YesOrNo): boolean | undefined => {\n    return convertYesOrNoOrUndefinedToBoolean(value);\n};\n\nexport const getUttaksplanFormInitialValues = (ønskerAutomatiskJustering: boolean | undefined): UttaksplanFormData => {\n    return {\n        ønskerAutomatiskJustering:\n            ønskerAutomatiskJustering !== undefined\n                ? convertBooleanOrUndefinedToYesOrNo(ønskerAutomatiskJustering)\n                : YesOrNo.UNANSWERED,\n    };\n};\n","import { Block, intlUtils } from '@navikt/fp-common';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport actionCreator from 'app/context/action/actionCreator';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { UttaksplanFormComponents, UttaksplanFormField } from 'app/steps/uttaksplan/UttaksplanFormConfig';\nimport { mapUttaksplanFormValueToState } from 'app/steps/uttaksplan/UttaksplanFormUtils';\nimport dayjs from 'dayjs';\nimport AlertStripe from 'nav-frontend-alertstriper';\nimport React, { FunctionComponent } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { isOverføringsperiode, isUttaksperiode, Periode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\n\ninterface Props {\n    termindato: Date;\n    perioderMedUttakRundtFødsel: Periode[];\n    antallBarn: number;\n    visibility: QuestionVisibility<UttaksplanFormField, undefined>;\n}\nconst AutomatiskJusteringForm: FunctionComponent<Props> = ({\n    termindato,\n    perioderMedUttakRundtFødsel,\n    antallBarn,\n    visibility,\n}) => {\n    const intl = useIntl();\n    const uttaksdagPåEllerEtterTermin = Uttaksdagen(termindato).denneEllerNeste();\n    const { dispatch, state } = useForeldrepengesøknadContext();\n    const svarteJaMenFlerePerioderInnen6Uker =\n        state.brukerSvarteJaPåAutoJustering && perioderMedUttakRundtFødsel.length > 1;\n    const svarteJaMenStarterIkkeLengerPåTermin =\n        state.brukerSvarteJaPåAutoJustering &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        !dayjs(perioderMedUttakRundtFødsel[0].tidsperiode.fom).isSame(uttaksdagPåEllerEtterTermin, 'day');\n    const svarteJaMenEndretPeriodenPåTermin =\n        state.brukerSvarteJaPåAutoJustering &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        dayjs(perioderMedUttakRundtFødsel[0].tidsperiode.fom).isSame(uttaksdagPåEllerEtterTermin, 'day') &&\n        ((isUttaksperiode(perioderMedUttakRundtFødsel[0]) &&\n            (perioderMedUttakRundtFødsel[0].konto !== StønadskontoType.Fedrekvote ||\n                !perioderMedUttakRundtFødsel[0].ønskerSamtidigUttak)) ||\n            isOverføringsperiode(perioderMedUttakRundtFødsel[0]));\n    const svarteJaMenEndretPeriodenTilØnskerFlerbarnsdager =\n        state.brukerSvarteJaPåAutoJustering &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        dayjs(perioderMedUttakRundtFødsel[0].tidsperiode.fom).isSame(uttaksdagPåEllerEtterTermin, 'day') &&\n        isUttaksperiode(perioderMedUttakRundtFødsel[0]) &&\n        perioderMedUttakRundtFødsel[0].konto === StønadskontoType.Fedrekvote &&\n        perioderMedUttakRundtFødsel[0].ønskerFlerbarnsdager === true;\n    let infoTekstId = '';\n    if (svarteJaMenFlerePerioderInnen6Uker) {\n        infoTekstId = 'uttaksplan.automatiskJustering.info.hvisFlerePerioder';\n    }\n    if (svarteJaMenStarterIkkeLengerPåTermin) {\n        infoTekstId = 'uttaksplan.automatiskJustering.info.hvisIkkeLengerStarterPåTermin';\n    }\n\n    if (svarteJaMenEndretPeriodenPåTermin) {\n        infoTekstId = 'uttaksplan.automatiskJustering.info.hvisEndretPeriodePåTermin';\n    }\n    if (svarteJaMenEndretPeriodenTilØnskerFlerbarnsdager) {\n        infoTekstId = 'uttaksplan.automatiskJustering.info.hvisEndretPeriodeTilØnskerFlerbarnsdager';\n    }\n\n    const handleOnChange = (value: string) => {\n        const ønskerJustertUttakVedFødsel = mapUttaksplanFormValueToState(value as YesOrNo);\n        dispatch(actionCreator.setØnskerJustertUttakVedFødsel(ønskerJustertUttakVedFødsel));\n        dispatch(actionCreator.setBrukerSvarteJaPåAutoJustering(ønskerJustertUttakVedFødsel));\n    };\n\n    return (\n        <UttaksplanFormComponents.Form includeButtons={false}>\n            <div style={{ paddingTop: '1rem', paddingBottom: '1rem' }}>\n                {infoTekstId !== '' && (\n                    <Block padBottom=\"l\">\n                        <AlertStripe type=\"info\">\n                            <FormattedMessage id={infoTekstId} />\n                        </AlertStripe>\n                    </Block>\n                )}\n                <Block visible={visibility.isVisible(UttaksplanFormField.ønskerAutomatiskJustering)} padBottom=\"l\">\n                    <UttaksplanFormComponents.YesOrNoQuestion\n                        name={UttaksplanFormField.ønskerAutomatiskJustering}\n                        legend={intlUtils(intl, 'uttaksplan.automatiskJustering.spørsmål', {\n                            antallBarn,\n                        })}\n                        validate={(value: YesOrNo) => {\n                            if (value === YesOrNo.UNANSWERED) {\n                                return intlUtils(intl, 'uttaksplan.automatiskJustering.svar.påkrevd');\n                            }\n                        }}\n                        afterOnChange={(value) => handleOnChange(value)}\n                    />\n                </Block>\n            </div>\n        </UttaksplanFormComponents.Form>\n    );\n};\n\nexport default AutomatiskJusteringForm;\n","import React, { FunctionComponent } from 'react';\nimport Modal from 'nav-frontend-modal';\nimport { Normaltekst, Undertittel } from 'nav-frontend-typografi';\nimport { Hovedknapp, Knapp } from 'nav-frontend-knapper';\nimport { bemUtils, Block } from '@navikt/fp-common';\nimport { FormattedMessage } from 'react-intl';\n\nimport './resetUttaksplanModal.less';\n\ninterface Props {\n    isOpen: boolean;\n    onClose: () => void;\n    handleResetUttaksplanModalBekreft: () => void;\n}\n\nconst ResetUttaksplanModal: FunctionComponent<Props> = ({ isOpen, onClose, handleResetUttaksplanModalBekreft }) => {\n    const bem = bemUtils('resetUttaksplanModal');\n\n    return (\n        <Modal\n            className={bem.block}\n            isOpen={isOpen}\n            closeButton={true}\n            onRequestClose={onClose}\n            contentLabel=\"Tilbakestill uttaksplanen din\"\n        >\n            <div className={bem.element('content')}>\n                <Block padBottom=\"l\">\n                    <Undertittel>\n                        <FormattedMessage id=\"uttaksplan.resetPlan.innhold1\" />\n                    </Undertittel>\n                    <Normaltekst>\n                        <FormattedMessage id=\"uttaksplan.resetPlan.innhold2\" />\n                    </Normaltekst>\n                </Block>\n                <div className={bem.element('knappWrapper')}>\n                    <Hovedknapp htmlType=\"button\" onClick={handleResetUttaksplanModalBekreft}>\n                        <FormattedMessage id=\"uttaksplan.resetPlan.slett\" />\n                    </Hovedknapp>\n                    <Knapp onClick={onClose}>\n                        <FormattedMessage id=\"uttaksplan.resetPlan.avbryt\" />\n                    </Knapp>\n                </div>\n            </div>\n        </Modal>\n    );\n};\n\nexport default ResetUttaksplanModal;\n","import React, { FunctionComponent, useEffect, useState } from 'react';\nimport { Block, intlUtils } from '@navikt/fp-common';\nimport Planlegger from './components/planlegger/Planlegger';\nimport { ForeldreparSituasjon } from 'app/types/ForeldreparSituasjonTypes';\nimport { Forelder } from 'app/types/Forelder';\nimport { isInfoPeriode, isUtsettelsesperiode, Periode, Utsettelsesperiode, Uttaksperiode } from './types/Periode';\nimport { TilgjengeligStønadskonto } from 'app/types/TilgjengeligStønadskonto';\nimport { NavnPåForeldre } from 'app/types/NavnPåForeldre';\nimport AnnenForelder, { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport Arbeidsforhold from 'app/types/Arbeidsforhold';\nimport { Situasjon } from 'app/types/Situasjon';\nimport OversiktKvoter from './components/oversikt-kvoter/OversiktKvoter';\nimport { getToTetteReglerGjelder, ISOStringToDate, tidperiodeOverlapperDato } from 'app/utils/dateUtils';\nimport { validerUttaksplan } from './validering/validerUttaksplan';\nimport Søkersituasjon from 'app/context/types/Søkersituasjon';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport VeilederInfo from './validering/veilederInfo/VeilederInfo';\nimport { useIntl } from 'react-intl';\nimport { getPeriodelisteMeldinger, getUttaksplanVeilederinfo } from './validering/veilederInfo/utils';\nimport OppgiTilleggsopplysninger from './components/oppgi-tilleggsopplysninger/OppgiTilleggsopplysninger';\nimport { Tilleggsopplysninger } from 'app/context/types/Tilleggsopplysninger';\nimport { SenEndringÅrsak } from './types/SenEndringÅrsak';\nimport { getSeneEndringerSomKreverBegrunnelse } from 'app/steps/uttaksplan-info/utils/Periodene';\nimport { EksisterendeSak } from 'app/types/EksisterendeSak';\nimport InfoOmSøknaden from 'app/components/info-eksisterende-sak/InfoOmSøknaden';\nimport SlettUttaksplanModal from './components/slett-uttaksplan-modal/SlettUttaksplanModal';\nimport Uttaksplanbuilder from './builder/Uttaksplanbuilder';\nimport Barn, { BarnFraNesteSak } from 'app/context/types/Barn';\nimport { farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato } from 'app/utils/wlbUtils';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from 'app/utils/uttaksplan/uttaksplanUtils';\nimport AutomatiskJusteringForm from './components/automatisk-justering-form/AutomatiskJusteringForm';\nimport { QuestionVisibility } from '@navikt/sif-common-question-config/lib';\nimport { UttaksplanFormField } from 'app/steps/uttaksplan/UttaksplanFormConfig';\nimport ResetUttaksplanModal from './components/reset-uttaksplan-modal/ResetUttaksplanModal';\nimport { splittPeriodePåDato, splittUttaksperiodePåFamiliehendelsesdato } from './builder/leggTilPeriode';\n\ninterface Props {\n    foreldreSituasjon: ForeldreparSituasjon;\n    forelderVedAleneomsorg: Forelder | undefined;\n    erDeltUttak: boolean;\n    uttaksplan: Periode[];\n    familiehendelsesdato: string;\n    handleOnPlanChange: (nyPlan: Periode[]) => void;\n    stønadskontoer: TilgjengeligStønadskonto[];\n    navnPåForeldre: NavnPåForeldre;\n    annenForelder: AnnenForelder;\n    arbeidsforhold: Arbeidsforhold[];\n    erEndringssøknad: boolean;\n    erFarEllerMedmor: boolean;\n    erFlerbarnssøknad: boolean;\n    erAleneOmOmsorg: boolean;\n    harMidlertidigOmsorg: boolean;\n    situasjon: Situasjon;\n    erMorUfør: boolean;\n    morHarRett: boolean;\n    søkersituasjon: Søkersituasjon;\n    dekningsgrad: Dekningsgrad;\n    antallBarn: number;\n    tilleggsopplysninger: Tilleggsopplysninger;\n    eksisterendeSak: EksisterendeSak | undefined;\n    perioderSomSkalSendesInn: Periode[];\n    morsSisteDag: Date | undefined;\n    harKomplettUttaksplan: boolean;\n    opprinneligPlan: Periode[] | undefined;\n    termindato: Date | undefined;\n    barn: Barn;\n    setUttaksplanErGyldig: (planErGyldig: boolean) => void;\n    handleBegrunnelseChange: (årsak: SenEndringÅrsak, begrunnelse: string) => void;\n    handleSlettUttaksplan: () => void;\n    handleResetUttaksplan: () => void;\n    visibility: QuestionVisibility<UttaksplanFormField, undefined>;\n    visAutomatiskJusteringForm: boolean;\n    perioderMedUttakRundtFødsel: Uttaksperiode[];\n    barnFraNesteSak: BarnFraNesteSak | undefined;\n    familiehendelsesdatoNesteSak: Date | undefined;\n    førsteUttaksdagNesteBarnsSak: Date | undefined;\n    minsterettUkerToTette: number | undefined;\n}\n\nconst Uttaksplan: FunctionComponent<Props> = ({\n    foreldreSituasjon,\n    erDeltUttak,\n    uttaksplan,\n    familiehendelsesdato,\n    stønadskontoer,\n    handleOnPlanChange,\n    navnPåForeldre,\n    annenForelder,\n    arbeidsforhold,\n    erEndringssøknad,\n    erFarEllerMedmor,\n    erFlerbarnssøknad,\n    erAleneOmOmsorg,\n    harMidlertidigOmsorg,\n    situasjon,\n    erMorUfør,\n    morHarRett,\n    søkersituasjon,\n    dekningsgrad,\n    antallBarn,\n    tilleggsopplysninger,\n    eksisterendeSak,\n    perioderSomSkalSendesInn,\n    harKomplettUttaksplan,\n    termindato,\n    opprinneligPlan,\n    setUttaksplanErGyldig,\n    handleBegrunnelseChange,\n    handleSlettUttaksplan,\n    handleResetUttaksplan,\n    barn,\n    visibility,\n    visAutomatiskJusteringForm,\n    perioderMedUttakRundtFødsel,\n    barnFraNesteSak,\n    familiehendelsesdatoNesteSak,\n    førsteUttaksdagNesteBarnsSak,\n    minsterettUkerToTette,\n}) => {\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato)!;\n    const intl = useIntl();\n    const [periodeErGyldig, setPeriodeErGyldig] = useState(true);\n    const [slettUttaksplanModalOpen, setSlettUttaksplanModalOpen] = useState(false);\n    const [resetUttaksplanModalOpen, setResetUttaksplanModalOpen] = useState(false);\n    const harAktivitetskravIPeriodeUtenUttak = getHarAktivitetskravIPeriodeUtenUttak({\n        erDeltUttak,\n        morHarRett,\n        søkerErAleneOmOmsorg: erAleneOmOmsorg,\n    });\n    const uttaksplanUtenAnnenPartsSamtidigUttak = uttaksplan.filter((p) => !(isInfoPeriode(p) && !p.visPeriodeIPlan));\n    const bareFarHarRett = !morHarRett;\n    const annenForelderHarRettINorge =\n        isAnnenForelderOppgitt(annenForelder) && annenForelder.harRettPåForeldrepengerINorge!;\n    const toTetteReglerGjelder = getToTetteReglerGjelder(familiehendelsesdatoDate, familiehendelsesdatoNesteSak);\n\n    const builder = Uttaksplanbuilder(\n        uttaksplanUtenAnnenPartsSamtidigUttak,\n        familiehendelsesdatoDate,\n        harAktivitetskravIPeriodeUtenUttak,\n        situasjon === 'adopsjon',\n        bareFarHarRett,\n        erFarEllerMedmor,\n        førsteUttaksdagNesteBarnsSak,\n        opprinneligPlan\n    );\n\n    const handleDeletePeriode = (periodeId: string) => {\n        const slettetPeriode = uttaksplan.find((p) => p.id === periodeId)!;\n        const result = builder.slettPeriode(slettetPeriode);\n\n        handleOnPlanChange(result);\n    };\n\n    const handleUpdatePeriode = (oppdatertPeriode: Periode, familiehendelsesdato: Date) => {\n        let resultat: Periode[] = [];\n        if (\n            farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato(\n                oppdatertPeriode,\n                familiehendelsesdato,\n                morHarRett,\n                termindato\n            )\n        ) {\n            const perioder = splittUttaksperiodePåFamiliehendelsesdato(\n                oppdatertPeriode as Uttaksperiode,\n                familiehendelsesdato\n            );\n\n            resultat = builder.oppdaterPerioder(perioder);\n\n            handleOnPlanChange(resultat);\n        } else if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(oppdatertPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const perioder = splittPeriodePåDato(oppdatertPeriode, førsteUttaksdagNesteBarnsSak);\n            resultat = builder.oppdaterPerioder(perioder);\n            handleOnPlanChange(resultat);\n        } else {\n            const result = builder.oppdaterPeriode(oppdatertPeriode);\n\n            handleOnPlanChange(result);\n        }\n    };\n\n    const handleAddPeriode = (nyPeriode: Periode, familiehendelsesdato: Date) => {\n        let resultat: Periode[] = [];\n        if (\n            farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato(\n                nyPeriode,\n                familiehendelsesdato,\n                morHarRett,\n                termindato\n            )\n        ) {\n            const perioder = splittUttaksperiodePåFamiliehendelsesdato(\n                nyPeriode as Uttaksperiode,\n                familiehendelsesdato\n            );\n\n            resultat = builder.leggTilPerioder(perioder);\n\n            handleOnPlanChange(resultat);\n        } else if (\n            førsteUttaksdagNesteBarnsSak !== undefined &&\n            tidperiodeOverlapperDato(nyPeriode.tidsperiode, førsteUttaksdagNesteBarnsSak)\n        ) {\n            const perioder = splittPeriodePåDato(nyPeriode, førsteUttaksdagNesteBarnsSak);\n            resultat = builder.leggTilPerioder(perioder);\n            handleOnPlanChange(resultat);\n        } else {\n            resultat = builder.leggTilPeriode(nyPeriode);\n            handleOnPlanChange(resultat);\n        }\n    };\n\n    const vedleggForSenEndring = []!; //TODO: handleBegrunnelseVedleggChange\n\n    const årsakTilSenEndring = getSeneEndringerSomKreverBegrunnelse(perioderSomSkalSendesInn);\n\n    const handleBegrunnelseTekstChange = (begrunnelse: string) => {\n        handleBegrunnelseChange(årsakTilSenEndring, begrunnelse);\n    };\n\n    const uttaksplanValidering = validerUttaksplan({\n        søkersituasjon: søkersituasjon,\n        arbeidsforhold: arbeidsforhold,\n        dekningsgrad: dekningsgrad,\n        erEndringssøknad: erEndringssøknad,\n        antallBarn: antallBarn,\n        annenForelder: annenForelder,\n        navnPåForeldre: navnPåForeldre,\n        søkerErFarEllerMedmor: erFarEllerMedmor,\n        søkerErAleneOmOmsorg: erAleneOmOmsorg,\n        søkerHarMidlertidigOmsorg: harMidlertidigOmsorg,\n        erDeltUttak: erDeltUttak,\n        morErUfør: erMorUfør,\n        morHarRett: morHarRett,\n        erFlerbarnssøknad: erFlerbarnssøknad,\n        familiehendelsesdato: familiehendelsesdatoDate,\n        termindato: termindato,\n        stønadskontoer: stønadskontoer,\n        perioder: uttaksplan,\n        harKomplettUttaksplan,\n        tilleggsopplysninger: tilleggsopplysninger,\n        eksisterendeSak: eksisterendeSak,\n        perioderSomSkalSendesInn: perioderSomSkalSendesInn,\n        barn: barn,\n        familiehendelsesdatoNesteSak,\n        førsteUttaksdagNesteBarnsSak,\n        minsterettUkerToTette,\n    });\n\n    useEffect(() => {\n        if (!periodeErGyldig || uttaksplanValidering.harFeil) {\n            setUttaksplanErGyldig(false);\n        } else {\n            setUttaksplanErGyldig(true);\n        }\n    });\n\n    const handleSlettUttaksplanModalClose = () => {\n        setSlettUttaksplanModalOpen(false);\n    };\n\n    const handleSlettUttaksplanModalBekreft = () => {\n        setSlettUttaksplanModalOpen(false);\n        handleSlettUttaksplan();\n    };\n\n    const handleResetUttaksplanModalClose = () => {\n        setResetUttaksplanModalOpen(false);\n    };\n\n    const handleResetUttaksplanModalBekreft = () => {\n        setResetUttaksplanModalOpen(false);\n        handleResetUttaksplan();\n    };\n\n    const uttaksplanVeilederInfo = getUttaksplanVeilederinfo(uttaksplanValidering.avvik, intl, false);\n    const meldingerPerPeriode = getPeriodelisteMeldinger(uttaksplanVeilederInfo);\n\n    const utsettelserIPlan = uttaksplan.filter((p) => isUtsettelsesperiode(p)) as Utsettelsesperiode[];\n\n    return (\n        <>\n            <Block padBottom=\"l\">\n                <InfoOmSøknaden\n                    eksisterendeSak={eksisterendeSak}\n                    erIUttaksplanenSteg={true}\n                    tilgjengeligeStønadskontoer={stønadskontoer}\n                    minsterettUkerToTette={minsterettUkerToTette}\n                />\n            </Block>\n            <Block padBottom=\"l\">\n                <Planlegger\n                    uttaksplan={uttaksplan}\n                    familiehendelsesdato={familiehendelsesdatoDate}\n                    handleUpdatePeriode={handleUpdatePeriode}\n                    stønadskontoer={stønadskontoer}\n                    navnPåForeldre={navnPåForeldre}\n                    annenForelder={annenForelder}\n                    arbeidsforhold={arbeidsforhold}\n                    handleDeletePeriode={handleDeletePeriode}\n                    handleAddPeriode={handleAddPeriode}\n                    erFarEllerMedmor={erFarEllerMedmor}\n                    erFlerbarnssøknad={erFlerbarnssøknad}\n                    erDeltUttak={erDeltUttak}\n                    erAleneOmOmsorg={erAleneOmOmsorg}\n                    situasjon={situasjon}\n                    meldingerPerPeriode={meldingerPerPeriode}\n                    erMorUfør={erMorUfør}\n                    setPeriodeErGyldig={setPeriodeErGyldig}\n                    erEndringssøknad={erEndringssøknad}\n                    setSlettUttaksplanModalOpen={setSlettUttaksplanModalOpen}\n                    setResetUttaksplanModalOpen={setResetUttaksplanModalOpen}\n                    termindato={termindato}\n                    barn={barn}\n                    utsettelserIPlan={utsettelserIPlan}\n                    barnFraNesteSak={barnFraNesteSak}\n                />\n            </Block>\n            {visAutomatiskJusteringForm && (\n                <Block padBottom=\"l\">\n                    <AutomatiskJusteringForm\n                        termindato={termindato!}\n                        perioderMedUttakRundtFødsel={perioderMedUttakRundtFødsel}\n                        antallBarn={barn.antallBarn}\n                        visibility={visibility}\n                    />\n                </Block>\n            )}\n            <Block padBottom=\"l\">\n                <OversiktKvoter\n                    tilgjengeligeStønadskontoer={stønadskontoer}\n                    uttaksplan={uttaksplan}\n                    erDeltUttak={erDeltUttak}\n                    foreldreparSituasjon={foreldreSituasjon}\n                    familiehendelsesdato={familiehendelsesdatoDate}\n                    annenForelderHarRettINorge={annenForelderHarRettINorge}\n                    toTetteReglerGjelder={toTetteReglerGjelder}\n                    intl={intl}\n                />\n            </Block>\n            <Block visible={uttaksplanVeilederInfo.length > 0} padBottom=\"l\">\n                <VeilederInfo\n                    messages={uttaksplanVeilederInfo}\n                    paneltype=\"plakat\"\n                    kompakt={true}\n                    veilederStil={'normal'}\n                    ariaTittel={intlUtils(intl, 'uttaksplan.regelAvvik.ariaTittel')}\n                />\n            </Block>\n            {årsakTilSenEndring && årsakTilSenEndring !== SenEndringÅrsak.Ingen && (\n                <OppgiTilleggsopplysninger\n                    begrunnelse={\n                        tilleggsopplysninger.begrunnelseForSenEndring\n                            ? tilleggsopplysninger.begrunnelseForSenEndring.tekst\n                            : ''\n                    }\n                    vedlegg={vedleggForSenEndring}\n                    onBegrunnelseTekstChange={handleBegrunnelseTekstChange}\n                    //onVedleggChange={handleBegrunnelseVedleggChange}\n                />\n            )}\n            <SlettUttaksplanModal\n                isOpen={slettUttaksplanModalOpen}\n                erEndringssøknad={erEndringssøknad}\n                onClose={handleSlettUttaksplanModalClose}\n                handleSlettUttaksplanModalBekreft={handleSlettUttaksplanModalBekreft}\n            />\n            <ResetUttaksplanModal\n                isOpen={resetUttaksplanModalOpen}\n                onClose={handleResetUttaksplanModalClose}\n                handleResetUttaksplanModalBekreft={handleResetUttaksplanModalBekreft}\n            />\n        </>\n    );\n};\n\nexport default Uttaksplan;\n","import { useState, useEffect } from 'react';\n\nconst useDebounce = (value: any, delay: number) => {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setDebouncedValue(value);\n        }, delay);\n\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [value, delay]);\n\n    return debouncedValue;\n};\n\nexport default useDebounce;\n","import { bemUtils, Block, intlUtils } from '@navikt/fp-common';\nimport SøknadRoutes from 'app/routes/routes';\nimport { Hovedknapp, Knapp } from 'nav-frontend-knapper';\nimport ModalWrapper from 'nav-frontend-modal';\nimport { Normaltekst, Undertittel } from 'nav-frontend-typografi';\nimport React, { Dispatch, FunctionComponent, SetStateAction } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useNavigate } from 'react-router-dom';\n\nimport './vilDuGåTilbakeModal.less';\n\ninterface Props {\n    isOpen: boolean;\n    setIsOpen: Dispatch<SetStateAction<boolean>>;\n}\n\nconst VilDuGåTilbakeModal: FunctionComponent<Props> = ({ isOpen, setIsOpen }) => {\n    const intl = useIntl();\n    const bem = bemUtils('vilDuGåTilbakeModal');\n    const navigate = useNavigate();\n\n    return (\n        <ModalWrapper\n            className={bem.block}\n            contentLabel={'Tittel'}\n            closeButton={false}\n            isOpen={isOpen}\n            onRequestClose={() => setIsOpen(false)}\n        >\n            <Block padBottom=\"l\">\n                <Undertittel tag=\"h1\">{intlUtils(intl, 'uttaksplan.vilDuGåTilbakeModal.tittel')}</Undertittel>\n            </Block>\n            <Block padBottom=\"l\">\n                <Normaltekst>{intlUtils(intl, 'uttaksplan.vilDuGåTilbakeModal.intro')}</Normaltekst>\n            </Block>\n            <Block padBottom=\"l\">\n                <Normaltekst>{intlUtils(intl, 'uttaksplan.vilDuGåTilbakeModal.spørsmål')}</Normaltekst>\n            </Block>\n            <div className={bem.element('knapperad')}>\n                <Hovedknapp\n                    onClick={() => {\n                        setIsOpen(false);\n                        navigate(SøknadRoutes.UTTAKSPLAN_INFO);\n                    }}\n                >\n                    <FormattedMessage id=\"uttaksplan.vilDuGåTilbakeModal.okLabel\" />\n                </Hovedknapp>\n                <Knapp onClick={() => setIsOpen(false)}>\n                    <FormattedMessage id=\"uttaksplan.vilDuGåTilbakeModal.avbrytLabel\" />\n                </Knapp>\n            </div>\n        </ModalWrapper>\n    );\n};\n\nexport default VilDuGåTilbakeModal;\n","import Barn, { BarnType, isUfødtBarn } from 'app/context/types/Barn';\nimport { Uttaksdagen } from 'app/steps/uttaksplan-info/utils/Uttaksdagen';\nimport { Forelder } from 'app/types/Forelder';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { andreAugust2022ReglerGjelder } from 'app/utils/dateUtils';\nimport dayjs from 'dayjs';\nimport { isUttaksperiode, Periode } from 'uttaksplan/types/Periode';\nimport { StønadskontoType } from 'uttaksplan/types/StønadskontoType';\n\nexport const getKanPeriodenRundtFødselJusteres = (\n    periodeRundtFødsel: Periode,\n    termindato: Date | undefined\n): boolean => {\n    return (\n        termindato !== undefined &&\n        isUttaksperiode(periodeRundtFødsel) &&\n        dayjs(periodeRundtFødsel.tidsperiode.fom).isSame(Uttaksdagen(termindato).denneEllerNeste(), 'day') &&\n        periodeRundtFødsel.forelder === Forelder.farMedmor &&\n        periodeRundtFødsel.konto === StønadskontoType.Fedrekvote &&\n        periodeRundtFødsel.ønskerSamtidigUttak === true &&\n        periodeRundtFødsel.ønskerFlerbarnsdager !== true\n    );\n};\n\nexport const getKanJustereAutomatiskVedFødsel = (\n    perioderMedUttakRundtFødsel: Periode[],\n    termindato: Date | undefined,\n    erFarEllerMedmor: boolean,\n    barn: Barn\n): boolean => {\n    return (\n        barn.type === BarnType.UFØDT &&\n        erFarEllerMedmor &&\n        perioderMedUttakRundtFødsel.length === 1 &&\n        getKanPeriodenRundtFødselJusteres(perioderMedUttakRundtFødsel[0], termindato)\n    );\n};\n\nexport const getVisAutomatiskJusteringForm = (\n    erFarEllerMedmor: boolean,\n    familiehendelsesdato: Date,\n    situasjon: Situasjon,\n    perioderMedUttakRundtFødsel: Periode[],\n    barn: Barn,\n    termindato: Date | undefined,\n    bareFarHarRett: boolean\n): boolean => {\n    return (\n        erFarEllerMedmor &&\n        andreAugust2022ReglerGjelder(familiehendelsesdato) &&\n        situasjon === 'fødsel' &&\n        perioderMedUttakRundtFødsel.length !== 0 &&\n        isUfødtBarn(barn) &&\n        termindato !== undefined &&\n        !bareFarHarRett\n    );\n};\n","import { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { getKanPeriodenRundtFødselJusteres } from 'uttaksplan/components/automatisk-justering-form/automatiskJusteringUtils';\nimport { Periode } from 'uttaksplan/types/Periode';\nimport { UttaksplanFormData, UttaksplanFormField } from './UttaksplanFormConfig';\n\nexport interface UttaksplanQuestionPayload extends UttaksplanFormData {\n    termindato: Date | undefined;\n    perioderMedUttakRundtFødsel: Periode[];\n}\nconst includeAutomatiskJusteringSpørsmål = (\n    perioderMedUttakRundtFødsel: Periode[],\n    termindato: Date | undefined\n): boolean => {\n    if (perioderMedUttakRundtFødsel.length !== 1 || termindato === undefined) {\n        return false;\n    }\n\n    return getKanPeriodenRundtFødselJusteres(perioderMedUttakRundtFødsel[0], termindato);\n};\n\nconst UttaksplanFormConfig: QuestionConfig<UttaksplanQuestionPayload, UttaksplanFormField> = {\n    [UttaksplanFormField.ønskerAutomatiskJustering]: {\n        isIncluded: ({ perioderMedUttakRundtFødsel, termindato }) =>\n            includeAutomatiskJusteringSpørsmål(perioderMedUttakRundtFødsel, termindato),\n        isAnswered: ({ ønskerAutomatiskJustering }) => ønskerAutomatiskJustering !== YesOrNo.UNANSWERED,\n    },\n};\n\nconst uttaksplanQuestionsConfig = Questions<UttaksplanQuestionPayload, UttaksplanFormField>(UttaksplanFormConfig);\n\nexport default uttaksplanQuestionsConfig;\n","import { Block, intlUtils, Step } from '@navikt/fp-common';\nimport SøknadRoutes from 'app/routes/routes';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport useAvbrytSøknad from 'app/utils/hooks/useAvbrytSøknad';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport AlertStripe from 'nav-frontend-alertstriper';\nimport stepConfig, { getPreviousStepHref } from '../stepsConfig';\nimport Uttaksplan from 'uttaksplan/Uttaksplan';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport {\n    getFarMedmorErAleneOmOmsorg,\n    getKjønnFromFnr,\n    getMorErAleneOmOmsorg,\n    getMorHarRettPåForeldrepengerINorgeEllerEØS,\n    getNavnPåForeldre,\n} from 'app/utils/personUtils';\nimport { isAnnenForelderOppgitt } from 'app/context/types/AnnenForelder';\nimport isFarEllerMedmor from 'app/utils/isFarEllerMedmor';\nimport { getForeldreparSituasjon } from 'app/utils/foreldreparSituasjonUtils';\nimport { Forelder } from 'app/types/Forelder';\nimport { isUttakAnnenPart, isUttakAvForeldrepengerFørFødsel, isUttaksperiode, Periode } from 'uttaksplan/types/Periode';\nimport { getFamiliehendelsedato, getTermindato } from 'app/utils/barnUtils';\nimport actionCreator from 'app/context/action/actionCreator';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport Api from 'app/api/api';\nimport { Dekningsgrad } from 'app/types/Dekningsgrad';\nimport getStønadskontoParams, {\n    getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter,\n    getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter,\n} from 'app/api/getStønadskontoParams';\nimport NavFrontendSpinner from 'nav-frontend-spinner';\nimport { getValgtStønadskontoFor80Og100Prosent } from 'app/utils/stønadskontoUtils';\nimport { getErMorUfør } from 'app/utils/annenForelderUtils';\nimport useDebounce from 'app/utils/hooks/useDebounce';\nimport { getPerioderSomSkalSendesInn, storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport { SenEndringÅrsak } from 'uttaksplan/types/SenEndringÅrsak';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport { getEndringstidspunkt, getMorsSisteDag, ISOStringToDate } from 'app/utils/dateUtils';\nimport { cleanupInvisibleCharsFromTilleggsopplysninger } from 'app/utils/tilleggsopplysningerUtils';\nimport VilDuGåTilbakeModal from './components/vil-du-gå-tilbake-modal/VilDuGåTilbakeModal';\nimport { getAktiveArbeidsforhold } from 'app/utils/arbeidsforholdUtils';\nimport { UttaksplanFormComponents } from 'app/steps/uttaksplan/UttaksplanFormConfig';\n\nimport { getPerioderMedUttakRundtFødsel } from 'app/utils/wlbUtils';\nimport uttaksplanQuestionsConfig from './uttaksplanQuestionConfig';\nimport { getUttaksplanFormInitialValues } from './UttaksplanFormUtils';\n\nimport {\n    getVisAutomatiskJusteringForm,\n    getKanJustereAutomatiskVedFødsel,\n} from 'uttaksplan/components/automatisk-justering-form/automatiskJusteringUtils';\nimport { FormikValues } from 'formik';\nimport {\n    getStartdatoFørstePeriodeAnnenPart,\n    mapAnnenPartsEksisterendeSakFromDTO,\n} from 'app/utils/eksisterendeSakUtils';\nimport { getHarAktivitetskravIPeriodeUtenUttak } from 'app/utils/uttaksplan/uttaksplanUtils';\nimport { RequestStatus } from 'app/types/RequestState';\nimport { Periodene } from '../uttaksplan-info/utils/Periodene';\nimport { finnOgSettInnHull, settInnAnnenPartsUttak } from 'uttaksplan/builder/uttaksplanbuilderUtils';\nimport { isUfødtBarn } from 'app/context/types/Barn';\nimport { dateToISOString } from '@navikt/sif-common-formik/lib';\nimport dayjs from 'dayjs';\nimport { getAntallUkerMinsterett } from '../uttaksplan-info/utils/stønadskontoer';\nimport { sendErrorMessageToSentry } from 'app/api/apiUtils';\nimport useSaveLoadedRoute from 'app/utils/hooks/useSaveLoadedRoute';\n\nconst UttaksplanStep = () => {\n    const intl = useIntl();\n    const søkerinfo = useSøkerinfo();\n    const søknad = useSøknad();\n    const [gåTilbakeIsOpen, setGåTilbakeIsOpen] = useState(false);\n    const [uttaksplanErGyldig, setUttaksplanErGyldig] = useState(true);\n    const [submitIsClicked, setSubmitIsClicked] = useState(false);\n    const { dispatch, state } = useForeldrepengesøknadContext();\n    const [endringstidspunkt, setEndringstidspunkt] = useState(state.endringstidspunkt);\n    const [perioderSomSkalSendesInn, setPerioderSomSkalSendesInn] = useState(state.perioderSomSkalSendesInn);\n    const nextRoute = søknad.erEndringssøknad ? SøknadRoutes.OPPSUMMERING : SøknadRoutes.UTENLANDSOPPHOLD;\n    const { uttaksplanInfo, eksisterendeSak, harUttaksplanBlittSlettet, annenPartsUttakErLagtTilIPlan } = state;\n    const { person, arbeidsforhold } = søkerinfo;\n    const { annenForelder, søker, barn, søkersituasjon, dekningsgrad, erEndringssøknad, tilleggsopplysninger } = søknad;\n    const { erAleneOmOmsorg } = søker;\n    const { situasjon } = søkersituasjon;\n    const { rolle } = søkersituasjon;\n    const { barnFraNesteSak } = state;\n    const debouncedState = useDebounce(state, 3000);\n    const annenForelderKjønn = getKjønnFromFnr(annenForelder);\n    const erDeltUttak = isAnnenForelderOppgitt(annenForelder)\n        ? !!annenForelder.harRettPåForeldrepengerINorge || !!annenForelder.harRettPåForeldrepengerIEØS\n        : false;\n    const erFarEllerMedmor = isFarEllerMedmor(søknad.søkersituasjon.rolle);\n    const morErAleneOmOmsorg = getMorErAleneOmOmsorg(!erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const farMedmorErAleneOmOmsorg = getFarMedmorErAleneOmOmsorg(erFarEllerMedmor, erAleneOmOmsorg, annenForelder);\n    const søkerErAleneOmOmsorg = morErAleneOmOmsorg || farMedmorErAleneOmOmsorg;\n    const forelderVedAleneomsorg = erDeltUttak ? undefined : erFarEllerMedmor ? Forelder.farMedmor : Forelder.mor;\n    const familiehendelsesdato = getFamiliehendelsedato(barn);\n    const familiehendelsesdatoDate = ISOStringToDate(familiehendelsesdato);\n    const erMorUfør = getErMorUfør(annenForelder, erFarEllerMedmor);\n    const navnPåForeldre = getNavnPåForeldre(person, annenForelder, erFarEllerMedmor, intl);\n    const antallBarn = barn.antallBarn;\n    const erFlerbarnssøknad = antallBarn > 1;\n    const morHarRett = getMorHarRettPåForeldrepengerINorgeEllerEØS(rolle, erFarEllerMedmor, annenForelder);\n    const opprinneligPlan = eksisterendeSak?.uttaksplan;\n    const harKomplettUttaksplan = eksisterendeSak ? eksisterendeSak.uttaksplan !== undefined : false;\n    const harMidlertidigOmsorg = false; //TODO søkerHarMidlertidigOmsorg\n    const morsSisteDag = getMorsSisteDag(uttaksplanInfo);\n    const termindato = getTermindato(barn);\n    const annenForelderFnr =\n        isAnnenForelderOppgitt(annenForelder) && !!annenForelder.utenlandskFnr === false\n            ? annenForelder.fnr\n            : undefined;\n    const erAdopsjon = situasjon === 'adopsjon';\n    const annenForelderFnrNesteSak = barnFraNesteSak !== undefined ? barnFraNesteSak.annenForelderFnr : undefined;\n    const førsteBarnFraNesteSakFnr =\n        barnFraNesteSak !== undefined && barnFraNesteSak.fnr !== undefined && barnFraNesteSak.fnr.length > 0\n            ? barnFraNesteSak.fnr[0]\n            : undefined;\n    const familieHendelseDatoNesteSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.familiehendelsesdato : undefined;\n    const førsteUttaksdagNesteBarnsSak =\n        barnFraNesteSak !== undefined ? barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n    const bareFarMedmorHarRett = !getMorHarRettPåForeldrepengerINorgeEllerEØS(\n        søkersituasjon.rolle,\n        erFarEllerMedmor,\n        annenForelder\n    );\n\n    const barnFnr = !isUfødtBarn(barn) && barn.fnr !== undefined && barn.fnr.length > 0 ? barn.fnr[0] : undefined;\n    const eksisterendeSakAnnenPartRequestIsSuspended =\n        !søkerErAleneOmOmsorg &&\n        annenForelderFnr !== undefined &&\n        annenForelderFnr !== '' &&\n        (barnFnr !== undefined || familiehendelsesdato !== undefined)\n            ? false\n            : true;\n\n    useSaveLoadedRoute(SøknadRoutes.UTTAKSPLAN);\n\n    const { eksisterendeSakAnnenPartData, eksisterendeSakAnnenPartError, eksisterendeSakAnnenPartRequestStatus } =\n        Api.useGetAnnenPartsVedtak(\n            annenForelderFnr,\n            barnFnr,\n            familiehendelsesdato,\n            eksisterendeSakAnnenPartRequestIsSuspended\n        );\n\n    const eksisterendeVedtakAnnenPart = useMemo(\n        () =>\n            mapAnnenPartsEksisterendeSakFromDTO(\n                eksisterendeSakAnnenPartData,\n                barn,\n                erFarEllerMedmor,\n                familiehendelsesdato,\n                førsteUttaksdagNesteBarnsSak\n            ),\n        [eksisterendeSakAnnenPartData, barn, erFarEllerMedmor, familiehendelsesdato, førsteUttaksdagNesteBarnsSak]\n    );\n\n    const saksgrunnlagsTermindato = getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter(\n        eksisterendeSak?.grunnlag.termindato,\n        eksisterendeVedtakAnnenPart?.grunnlag.termindato\n    );\n    const saksgrunnlagsAntallBarn = getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter(\n        erFarEllerMedmor,\n        barn.antallBarn,\n        eksisterendeVedtakAnnenPart?.grunnlag.antallBarn\n    );\n    useEffect(() => {\n        if (erFarEllerMedmor && søknad.barn.antallBarn !== saksgrunnlagsAntallBarn) {\n            const søknadMedOppdatertAntallBarn = {\n                ...søknad,\n                barn: { ...søknad.barn, antallBarn: saksgrunnlagsAntallBarn },\n            };\n            dispatch(actionCreator.setSøknad(søknadMedOppdatertAntallBarn));\n        }\n    }, [erFarEllerMedmor, saksgrunnlagsAntallBarn, dispatch, søknad]);\n\n    const nesteBarnsSakAnnenPartRequestIsSuspended =\n        annenForelderFnrNesteSak !== undefined &&\n        annenForelderFnrNesteSak !== '' &&\n        (førsteBarnFraNesteSakFnr !== undefined || familieHendelseDatoNesteSak !== undefined) &&\n        (eksisterendeSakAnnenPartRequestIsSuspended || eksisterendeSakAnnenPartRequestStatus === RequestStatus.FINISHED)\n            ? false\n            : true;\n\n    const {\n        eksisterendeSakAnnenPartData: nesteSakAnnenPartData,\n        eksisterendeSakAnnenPartError: nesteSakAnnenPartError,\n        eksisterendeSakAnnenPartRequestStatus: nesteSakAnnenPartRequestStatus,\n    } = Api.useGetAnnenPartsVedtak(\n        annenForelderFnrNesteSak,\n        førsteBarnFraNesteSakFnr,\n        dateToISOString(familieHendelseDatoNesteSak),\n        nesteBarnsSakAnnenPartRequestIsSuspended\n    );\n\n    const førsteUttaksdagAnnenPart = getStartdatoFørstePeriodeAnnenPart(nesteSakAnnenPartData);\n\n    useEffect(() => {\n        if (\n            førsteUttaksdagAnnenPart !== undefined &&\n            state.barnFraNesteSak !== undefined &&\n            (dayjs(førsteUttaksdagAnnenPart).isBefore(state.barnFraNesteSak.startdatoFørsteStønadsperiode, 'd') ||\n                state.barnFraNesteSak.startdatoFørsteStønadsperiode === undefined)\n        ) {\n            const oppdatertBarnNesteSak = {\n                ...state.barnFraNesteSak,\n                startdatoFørsteStønadsperiode: førsteUttaksdagAnnenPart,\n            };\n            dispatch(actionCreator.setBarnFraNesteSak(oppdatertBarnNesteSak));\n        }\n    }, [førsteUttaksdagNesteBarnsSak, førsteUttaksdagAnnenPart, barnFraNesteSak, dispatch, state.barnFraNesteSak]);\n\n    const harAktivitetskravIPeriodeUtenUttak = getHarAktivitetskravIPeriodeUtenUttak({\n        erDeltUttak,\n        morHarRett,\n        søkerErAleneOmOmsorg,\n    });\n\n    //Legg til annen parts perioder i planen til bruker\n    useEffect(() => {\n        if (\n            eksisterendeSak !== undefined &&\n            opprinneligPlan !== undefined &&\n            eksisterendeVedtakAnnenPart !== undefined &&\n            !annenPartsUttakErLagtTilIPlan\n        ) {\n            //Sett samtidigUttak på søkerens perioder hvis de overlapper med annen parts samtidig uttak:\n            opprinneligPlan.forEach((p) => {\n                if (isUttaksperiode(p)) {\n                    const overlappendePerioderAnnenPart = Periodene(\n                        eksisterendeVedtakAnnenPart.uttaksplan\n                    ).finnOverlappendePerioder(p);\n\n                    if (\n                        overlappendePerioderAnnenPart.length !== 0 &&\n                        overlappendePerioderAnnenPart.find(\n                            (periode) => isUttakAnnenPart(periode) && periode.ønskerSamtidigUttak === true\n                        )\n                    ) {\n                        if (!p.ønskerSamtidigUttak) {\n                            p.ønskerSamtidigUttak = true;\n                            p.samtidigUttakProsent = '100';\n                        }\n                    }\n                }\n            });\n\n            const uttaksplanMedAnnenPart = finnOgSettInnHull(\n                settInnAnnenPartsUttak(\n                    opprinneligPlan,\n                    eksisterendeVedtakAnnenPart.uttaksplan,\n                    familiehendelsesdatoDate!,\n                    førsteUttaksdagNesteBarnsSak,\n                    true\n                ),\n                harAktivitetskravIPeriodeUtenUttak,\n                familiehendelsesdatoDate!,\n                erAdopsjon,\n                bareFarMedmorHarRett,\n                erFarEllerMedmor,\n                førsteUttaksdagNesteBarnsSak\n            );\n            const eksisterendeSakMedAnnenPartsPlan = {\n                ...eksisterendeSak,\n                uttaksplan: uttaksplanMedAnnenPart,\n            };\n            dispatch(actionCreator.setUttaksplan(uttaksplanMedAnnenPart));\n            dispatch(actionCreator.setEksisterendeSak(eksisterendeSakMedAnnenPartsPlan));\n            dispatch(actionCreator.setAnnenPartsUttakErLagtTilIPlan(true));\n        }\n    }, [\n        eksisterendeVedtakAnnenPart,\n        opprinneligPlan,\n        familiehendelsesdatoDate,\n        harAktivitetskravIPeriodeUtenUttak,\n        erAdopsjon,\n        bareFarMedmorHarRett,\n        erFarEllerMedmor,\n        dispatch,\n        førsteUttaksdagNesteBarnsSak,\n        eksisterendeSak,\n        annenPartsUttakErLagtTilIPlan,\n    ]);\n\n    const onValidSubmitHandler = () => {\n        setSubmitIsClicked(true);\n        const cleanedTilleggsopplysninger = cleanupInvisibleCharsFromTilleggsopplysninger(tilleggsopplysninger);\n        return [\n            actionCreator.setTilleggsopplysninger(cleanedTilleggsopplysninger),\n            actionCreator.setEndringstidspunkt(endringstidspunkt),\n            actionCreator.setPerioderSomSkalSendesInn(perioderSomSkalSendesInn),\n        ];\n    };\n\n    const handleBegrunnelseChange = (årsak: SenEndringÅrsak, begrunnelse: string) => {\n        const ekstraInformasjon = årsak !== SenEndringÅrsak.Ingen ? årsak : undefined;\n        const opplysninger = {\n            ...tilleggsopplysninger,\n            begrunnelseForSenEndring: {\n                ...tilleggsopplysninger.begrunnelseForSenEndring,\n                tekst: begrunnelse,\n                ekstraInformasjon: ekstraInformasjon,\n            },\n        };\n        dispatch(actionCreator.setTilleggsopplysninger(opplysninger));\n    };\n    useEffect(() => {\n        const periodeAngittAvAnnenPart = opprinneligPlan?.find((p) => isUttaksperiode(p) && p.angittAvAnnenPart);\n\n        if (periodeAngittAvAnnenPart && endringstidspunkt === undefined) {\n            const tidspunktForEndring = periodeAngittAvAnnenPart.tidsperiode.fom;\n            dispatch(actionCreator.setEndringstidspunkt(tidspunktForEndring));\n\n            const perioderForÅSendeInn = getPerioderSomSkalSendesInn(\n                søknad.uttaksplan,\n                erEndringssøknad,\n                erFarEllerMedmor,\n                opprinneligPlan,\n                tidspunktForEndring\n            );\n            setPerioderSomSkalSendesInn(perioderForÅSendeInn);\n            dispatch(actionCreator.setPerioderSomSkalSendesInn(perioderForÅSendeInn));\n        }\n    }, [opprinneligPlan, dispatch, endringstidspunkt, erFarEllerMedmor, søknad.uttaksplan, erEndringssøknad]);\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        nextRoute,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state)\n    );\n\n    const perioderMedUttakRundtFødsel = getPerioderMedUttakRundtFødsel(\n        søknad.uttaksplan,\n        familiehendelsesdatoDate!,\n        termindato\n    );\n\n    const visAutomatiskJusteringForm = getVisAutomatiskJusteringForm(\n        erFarEllerMedmor,\n        familiehendelsesdatoDate!,\n        situasjon,\n        perioderMedUttakRundtFødsel,\n        barn,\n        termindato,\n        bareFarMedmorHarRett\n    );\n\n    const kanJustereAutomatiskVedFødsel = getKanJustereAutomatiskVedFødsel(\n        perioderMedUttakRundtFødsel,\n        termindato,\n        erFarEllerMedmor,\n        barn\n    );\n\n    const setØnskerJustertUttakVedFødselTilUndefinedHvisUgyldig = () => {\n        if ((visAutomatiskJusteringForm || erEndringssøknad) && !kanJustereAutomatiskVedFødsel) {\n            dispatch(actionCreator.setØnskerJustertUttakVedFødsel(undefined));\n        }\n    };\n\n    const ønskerJustertUttakVedFødselErBesvart = (ønskerAutomatiskJusteringSvar: boolean | undefined) => {\n        return (\n            visAutomatiskJusteringForm && kanJustereAutomatiskVedFødsel && ønskerAutomatiskJusteringSvar !== undefined\n        );\n    };\n\n    const ref = useRef<FormikValues>(null);\n    const clickHandler = (values: any) => {\n        setSubmitIsClicked(true);\n        if (uttaksplanErGyldig && !erTomEndringssøknad) {\n            if (ref.current) {\n                ref.current.handleSubmit();\n            }\n\n            setØnskerJustertUttakVedFødselTilUndefinedHvisUgyldig();\n\n            if (ønskerJustertUttakVedFødselErBesvart(values.ønskerAutomatiskJustering)) {\n                handleSubmit(values);\n            }\n        }\n    };\n\n    const onAvbrytSøknad = useAvbrytSøknad();\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n\n    useEffect(() => {\n        Api.storeAppState(debouncedState, person.fnr);\n    }, [person.fnr, debouncedState]);\n\n    const foreldreSituasjon = getForeldreparSituasjon(\n        person.kjønn,\n        annenForelderKjønn,\n        erDeltUttak,\n        morErAleneOmOmsorg,\n        farMedmorErAleneOmOmsorg,\n        rolle\n    );\n    const kontoRequestIsSuspended =\n        (eksisterendeSakAnnenPartRequestIsSuspended\n            ? false\n            : eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED) ||\n        (nesteBarnsSakAnnenPartRequestIsSuspended ? false : nesteSakAnnenPartRequestStatus !== RequestStatus.FINISHED);\n\n    const { tilgjengeligeStønadskontoerData: stønadskontoer100, tilgjengeligeStønadskontoerError } =\n        Api.useGetUttakskontoer(\n            getStønadskontoParams(\n                Dekningsgrad.HUNDRE_PROSENT,\n                barn,\n                annenForelder,\n                søkersituasjon,\n                farMedmorErAleneOmOmsorg,\n                morErAleneOmOmsorg,\n                dateToISOString(familieHendelseDatoNesteSak),\n                saksgrunnlagsAntallBarn,\n                saksgrunnlagsTermindato\n            ),\n            kontoRequestIsSuspended\n        );\n    const { tilgjengeligeStønadskontoerData: stønadskontoer80 } = Api.useGetUttakskontoer(\n        getStønadskontoParams(\n            Dekningsgrad.ÅTTI_PROSENT,\n            barn,\n            annenForelder,\n            søkersituasjon,\n            farMedmorErAleneOmOmsorg,\n            morErAleneOmOmsorg,\n            dateToISOString(familieHendelseDatoNesteSak),\n            saksgrunnlagsAntallBarn,\n            saksgrunnlagsTermindato\n        ),\n        kontoRequestIsSuspended\n    );\n\n    const handleOnPlanChange = (nyPlan: Periode[]) => {\n        setSubmitIsClicked(false);\n        dispatch(actionCreator.setUttaksplan(nyPlan));\n        const tidspunktForEndring = getEndringstidspunkt(opprinneligPlan, nyPlan, erEndringssøknad);\n        setEndringstidspunkt(tidspunktForEndring);\n\n        const perioderForÅSendeInn = getPerioderSomSkalSendesInn(\n            nyPlan,\n            erEndringssøknad,\n            erFarEllerMedmor,\n            opprinneligPlan,\n            tidspunktForEndring\n        );\n        setPerioderSomSkalSendesInn(perioderForÅSendeInn);\n        dispatch(actionCreator.setPerioderSomSkalSendesInn(perioderForÅSendeInn));\n    };\n\n    useEffect(() => {\n        if (tilgjengeligeStønadskontoerError) {\n            sendErrorMessageToSentry(tilgjengeligeStønadskontoerError);\n            throw new Error(\n                `Vi klarte ikke å hente opp stønadskontoer. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`\n            );\n        }\n        if (eksisterendeSakAnnenPartError) {\n            sendErrorMessageToSentry(eksisterendeSakAnnenPartError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om saken til annen forelder. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`\n            );\n        }\n\n        if (nesteSakAnnenPartError) {\n            sendErrorMessageToSentry(nesteSakAnnenPartError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om saken til annen forelder for neste barn. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`\n            );\n        }\n    }, [tilgjengeligeStønadskontoerError, eksisterendeSakAnnenPartError, nesteSakAnnenPartError]);\n\n    if (\n        !stønadskontoer100 ||\n        !stønadskontoer80 ||\n        (eksisterendeSakAnnenPartRequestStatus !== RequestStatus.FINISHED &&\n            !eksisterendeSakAnnenPartRequestIsSuspended) ||\n        (nesteSakAnnenPartRequestStatus !== RequestStatus.FINISHED && !nesteBarnsSakAnnenPartRequestIsSuspended)\n    ) {\n        return (\n            <div style={{ textAlign: 'center', padding: '12rem 0' }}>\n                <NavFrontendSpinner type=\"XXL\" />\n            </div>\n        );\n    }\n\n    const stønadskontoer = getValgtStønadskontoFor80Og100Prosent(stønadskontoer80, stønadskontoer100);\n    const minsterettUkerToTette = getAntallUkerMinsterett(stønadskontoer100.minsteretter.toTette);\n\n    const valgteStønadskontoer =\n        dekningsgrad === Dekningsgrad.HUNDRE_PROSENT ? stønadskontoer[100] : stønadskontoer[80];\n\n    const erTomEndringssøknad =\n        erEndringssøknad && (perioderSomSkalSendesInn === undefined || perioderSomSkalSendesInn.length === 0);\n\n    const handleSlettUttaksplan = () => {\n        const slettetPlanUtenomFpFørFødsel = søknad.uttaksplan.filter((periode) =>\n            isUttakAvForeldrepengerFørFødsel(periode)\n        );\n        dispatch(actionCreator.slettUttaksplan(slettetPlanUtenomFpFørFødsel));\n        dispatch(actionCreator.setUttaksplanSlettet(true));\n    };\n\n    const handleResetUttaksplan = () => {\n        if (state.eksisterendeSak) {\n            dispatch(actionCreator.setUttaksplan(state.eksisterendeSak.uttaksplan));\n            dispatch(actionCreator.setPerioderSomSkalSendesInn([]));\n            setPerioderSomSkalSendesInn([]);\n        }\n    };\n\n    return (\n        <UttaksplanFormComponents.FormikWrapper\n            initialValues={getUttaksplanFormInitialValues(state.søknad.ønskerJustertUttakVedFødsel)}\n            onSubmit={handleSubmit}\n            innerRef={ref}\n            renderForm={({ values: formValues }) => {\n                const visibility = uttaksplanQuestionsConfig.getVisbility({\n                    ...formValues,\n                    termindato,\n                    perioderMedUttakRundtFødsel,\n                });\n\n                return (\n                    <Step\n                        bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n                        backLinkHref={erEndringssøknad ? undefined : getPreviousStepHref('uttaksplan')}\n                        backLinkOnClick={\n                            erEndringssøknad\n                                ? undefined\n                                : (_href, event) => {\n                                      event.preventDefault();\n                                      setGåTilbakeIsOpen(true);\n                                  }\n                        }\n                        activeStepId=\"uttaksplan\"\n                        pageTitle={intlUtils(intl, 'søknad.uttaksplan')}\n                        stepTitle={intlUtils(intl, 'søknad.uttaksplan')}\n                        onCancel={onAvbrytSøknad}\n                        onContinueLater={onFortsettSøknadSenere}\n                        steps={stepConfig(intl)}\n                        kompakt={true}\n                    >\n                        <Uttaksplan\n                            foreldreSituasjon={foreldreSituasjon}\n                            forelderVedAleneomsorg={forelderVedAleneomsorg}\n                            erDeltUttak={erDeltUttak}\n                            uttaksplan={søknad.uttaksplan}\n                            familiehendelsesdato={familiehendelsesdato}\n                            handleOnPlanChange={handleOnPlanChange}\n                            stønadskontoer={valgteStønadskontoer}\n                            navnPåForeldre={navnPåForeldre}\n                            annenForelder={annenForelder}\n                            arbeidsforhold={getAktiveArbeidsforhold(\n                                arbeidsforhold,\n                                ISOStringToDate(familiehendelsesdato)\n                            )}\n                            erEndringssøknad={erEndringssøknad}\n                            erFarEllerMedmor={erFarEllerMedmor}\n                            erFlerbarnssøknad={erFlerbarnssøknad}\n                            erAleneOmOmsorg={søkerErAleneOmOmsorg}\n                            harMidlertidigOmsorg={harMidlertidigOmsorg}\n                            situasjon={situasjon}\n                            erMorUfør={erMorUfør}\n                            morHarRett={morHarRett}\n                            søkersituasjon={søkersituasjon}\n                            dekningsgrad={dekningsgrad}\n                            antallBarn={antallBarn}\n                            tilleggsopplysninger={tilleggsopplysninger}\n                            setUttaksplanErGyldig={setUttaksplanErGyldig}\n                            handleBegrunnelseChange={handleBegrunnelseChange}\n                            eksisterendeSak={eksisterendeSak}\n                            perioderSomSkalSendesInn={perioderSomSkalSendesInn}\n                            morsSisteDag={morsSisteDag}\n                            harKomplettUttaksplan={harKomplettUttaksplan}\n                            opprinneligPlan={harUttaksplanBlittSlettet ? undefined : opprinneligPlan}\n                            handleSlettUttaksplan={handleSlettUttaksplan}\n                            handleResetUttaksplan={handleResetUttaksplan}\n                            termindato={termindato}\n                            barn={barn}\n                            visibility={visibility}\n                            visAutomatiskJusteringForm={visAutomatiskJusteringForm}\n                            perioderMedUttakRundtFødsel={perioderMedUttakRundtFødsel}\n                            barnFraNesteSak={barnFraNesteSak}\n                            familiehendelsesdatoNesteSak={familieHendelseDatoNesteSak}\n                            førsteUttaksdagNesteBarnsSak={førsteUttaksdagNesteBarnsSak}\n                            minsterettUkerToTette={minsterettUkerToTette}\n                        />\n                        <VilDuGåTilbakeModal isOpen={gåTilbakeIsOpen} setIsOpen={setGåTilbakeIsOpen} />\n                        {!uttaksplanErGyldig && submitIsClicked && (\n                            <Block textAlignCenter={true} padBottom=\"l\">\n                                <AlertStripe type=\"feil\">\n                                    <FormattedMessage id=\"uttaksplan.validering.kanIkkeGåVidere\" />\n                                </AlertStripe>\n                            </Block>\n                        )}\n                        {erTomEndringssøknad && submitIsClicked && (\n                            <Block textAlignCenter={true} padBottom=\"l\">\n                                <AlertStripe type=\"feil\">\n                                    <FormattedMessage id=\"uttaksplan.validering.kanIkkeGåVidereEndringssøknad\" />\n                                </AlertStripe>\n                            </Block>\n                        )}\n                        <Block textAlignCenter={true} padBottom=\"l\">\n                            <Hovedknapp onClick={clickHandler} disabled={isSubmitting} spinner={isSubmitting}>\n                                {intlUtils(intl, 'søknad.gåVidere')}\n                            </Hovedknapp>\n                        </Block>\n                    </Step>\n                );\n            }}\n        />\n    );\n};\nexport default UttaksplanStep;\n","import { Søknad } from 'app/context/types/Søknad';\nimport { uttaksplanInneholderPerioderUtenKonto } from 'app/utils/uttaksplan/uttaksplanUtils';\nimport SøknadRoutes from './routes';\n\nconst isAvailable = (route: SøknadRoutes, søknad: Søknad): boolean => {\n    switch (route) {\n        case SøknadRoutes.SØKERSITUASJON:\n            return søknad.harGodkjentVilkår === true;\n        case SøknadRoutes.OPPSUMMERING:\n            return uttaksplanInneholderPerioderUtenKonto(søknad.uttaksplan) === false && søknad.uttaksplan.length > 0;\n        default:\n            return true;\n    }\n};\n\nexport default isAvailable;\n","import { Locale } from '@navikt/fp-common';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport IkkeMyndig from 'app/pages/ikkeMyndig/IkkeMyndig';\nimport Velkommen from 'app/pages/velkommen/Velkommen';\nimport AnnenForelder from 'app/steps/annen-forelder/AnnenForelder';\nimport Inntektsinformasjon from 'app/steps/inntektsinformasjon/Inntektsinformasjon';\nimport OmBarnet from 'app/steps/om-barnet/OmBarnet';\nimport Oppsummering from 'app/steps/oppsummering/Oppsummering';\nimport Søkersituasjon from 'app/steps/søkersituasjon/Søkersituasjon';\nimport Utenlandsopphold from 'app/steps/utenlandsopphold/Utenlandsopphold';\nimport UttaksplanInfo from 'app/steps/uttaksplan-info/UttaksplanInfo';\nimport UttaksplanStep from 'app/steps/uttaksplan/UttaksplanStep';\nimport React, { FunctionComponent, useEffect, useState } from 'react';\nimport { Route, useNavigate, Navigate, Routes, useLocation } from 'react-router-dom';\nimport SøknadSendt from '../pages/søknadSendt/SøknadSendt';\nimport isAvailable from './isAvailable';\nimport SøknadRoutes from './routes';\n\ninterface Props {\n    fornavn: string;\n    locale: Locale;\n    onChangeLocale: (locale: Locale) => void;\n    currentRoute: SøknadRoutes;\n}\n\nconst renderSøknadRoutes = (harGodkjentVilkår: boolean, erEndringssøknad: boolean, søkerErMyndig: boolean) => {\n    if (!harGodkjentVilkår) {\n        return <Route path=\"*\" element={<Navigate to={SøknadRoutes.VELKOMMEN} />} />;\n    }\n\n    if (!søkerErMyndig) {\n        return <Route path=\"*\" element={<Navigate to={SøknadRoutes.IKKE_MYNDIG} />} />;\n    }\n\n    if (erEndringssøknad) {\n        return (\n            <>\n                <Route path={SøknadRoutes.UTTAKSPLAN} element={<UttaksplanStep />} />\n                <Route path={SøknadRoutes.OPPSUMMERING} element={<Oppsummering />} />\n                <Route path={SøknadRoutes.SØKNAD_SENDT} element={<SøknadSendt />} />\n            </>\n        );\n    }\n\n    return (\n        <>\n            <Route path={SøknadRoutes.SØKERSITUASJON} element={<Søkersituasjon />} />\n            <Route path={SøknadRoutes.OM_BARNET} element={<OmBarnet />} />\n            <Route path={SøknadRoutes.ANNEN_FORELDER} element={<AnnenForelder />} />\n            <Route path={SøknadRoutes.UTTAKSPLAN_INFO} element={<UttaksplanInfo />} />\n            <Route path={SøknadRoutes.UTTAKSPLAN} element={<UttaksplanStep />} />\n            <Route path={SøknadRoutes.UTENLANDSOPPHOLD} element={<Utenlandsopphold />} />\n            <Route path={SøknadRoutes.INNTEKTSINFORMASJON} element={<Inntektsinformasjon />} />\n            <Route path={SøknadRoutes.OPPSUMMERING} element={<Oppsummering />} />\n            <Route path={SøknadRoutes.SØKNAD_SENDT} element={<SøknadSendt />} />\n        </>\n    );\n};\n\nconst ForeldrepengesøknadRoutes: FunctionComponent<Props> = ({ fornavn, locale, onChangeLocale, currentRoute }) => {\n    const { state } = useForeldrepengesøknadContext();\n    const navigate = useNavigate();\n    const location = useLocation();\n    const harGodkjentVilkår = state.søknad.harGodkjentVilkår;\n    const erMyndig = state.søkerinfo.person.erMyndig;\n    const [isFirstTimeLoadingApp, setIsFirstTimeLoadingApp] = useState(true);\n\n    useEffect(() => {\n        if (currentRoute && erMyndig && harGodkjentVilkår && isFirstTimeLoadingApp) {\n            setIsFirstTimeLoadingApp(false);\n            if (isAvailable(currentRoute, state.søknad)) {\n                navigate(currentRoute);\n            } else {\n                if (location.pathname === SøknadRoutes.OPPSUMMERING) {\n                    navigate(SøknadRoutes.UTTAKSPLAN);\n                }\n            }\n        }\n    }, [currentRoute, erMyndig, harGodkjentVilkår, navigate, isFirstTimeLoadingApp, state.søknad, location.pathname]);\n\n    return (\n        <Routes>\n            <Route\n                path={SøknadRoutes.VELKOMMEN}\n                element={\n                    <Velkommen\n                        fornavn={fornavn}\n                        locale={locale}\n                        saker={state.saker}\n                        onChangeLocale={onChangeLocale}\n                        fnr={state.søkerinfo.person.fnr}\n                    />\n                }\n            />\n            <Route path={SøknadRoutes.IKKE_MYNDIG} element={<IkkeMyndig fornavn={state.søkerinfo.person.fornavn} />} />\n\n            {renderSøknadRoutes(harGodkjentVilkår, state.søknad.erEndringssøknad, erMyndig)}\n        </Routes>\n    );\n};\n\nexport default ForeldrepengesøknadRoutes;\n","import { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport SøknadRoutes from 'app/routes/routes';\n\nconst isEndringssøknadRoute = (route: SøknadRoutes): boolean => {\n    switch (route) {\n        case SøknadRoutes.UTTAKSPLAN:\n        case SøknadRoutes.OPPSUMMERING:\n        case SøknadRoutes.SØKNAD_SENDT:\n            return true;\n        default:\n            return false;\n    }\n};\n\nexport const shouldApplyStorage = (storedState: ForeldrepengesøknadContextState): boolean => {\n    if (storedState.søknad && storedState.søknad.erEndringssøknad) {\n        if (!isEndringssøknadRoute(storedState.currentRoute)) {\n            return false;\n        }\n    }\n\n    return storedState.version === 5;\n};\n","import { Locale } from '@navikt/fp-common';\nimport NavFrontendSpinner from 'nav-frontend-spinner';\nimport React, { useEffect } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport Api from './api/api';\nimport { sendErrorMessageToSentry } from './api/apiUtils';\nimport actionCreator from './context/action/actionCreator';\nimport { useForeldrepengesøknadContext } from './context/hooks/useForeldrepengesøknadContext';\nimport ForeldrepengesøknadRoutes from './routes/ForeldrepengesøknadRoutes';\nimport SøknadRoutes from './routes/routes';\nimport mapSøkerinfoDTOToSøkerinfo from './utils/mapSøkerinfoDTO';\nimport { shouldApplyStorage } from './utils/mellomlagringUtils';\n\ninterface Props {\n    locale: Locale;\n    onChangeLocale: any;\n}\n\nconst renderSpinner = () => (\n    <div style={{ textAlign: 'center', padding: '12rem 0' }}>\n        <NavFrontendSpinner type=\"XXL\" />\n    </div>\n);\n\nconst Foreldrepengesøknad: React.FunctionComponent<Props> = ({ locale, onChangeLocale }) => {\n    const { søkerinfoData, søkerinfoError } = Api.useSøkerinfo();\n    const { sakerData, sakerError } = Api.useGetSaker();\n    const { storageData } = Api.useStoredAppState();\n    const { dispatch, state } = useForeldrepengesøknadContext();\n\n    useEffect(() => {\n        if (storageData) {\n            if (shouldApplyStorage(storageData)) {\n                dispatch(actionCreator.applyStoredState(storageData));\n            }\n        }\n        if (søkerinfoData) {\n            dispatch(actionCreator.setSøkerinfo(mapSøkerinfoDTOToSøkerinfo(søkerinfoData)));\n        }\n\n        if (sakerData) {\n            dispatch(actionCreator.setSaker(sakerData.foreldrepenger));\n        }\n    }, [dispatch, storageData, søkerinfoData, sakerData]);\n\n    useEffect(() => {\n        if (søkerinfoError) {\n            sendErrorMessageToSentry(søkerinfoError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om deg. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`\n            );\n        }\n        if (sakerError) {\n            sendErrorMessageToSentry(sakerError);\n            throw new Error(\n                `Vi klarte ikke å hente informasjon om sakene dine. Prøv igjen om noen minutter og hvis problemet vedvarer kontakt brukerstøtte.`\n            );\n        }\n    }, [søkerinfoError, sakerError]);\n\n    if (!state.søkerinfo || !sakerData) {\n        return renderSpinner();\n    }\n\n    return (\n        <BrowserRouter>\n            <ForeldrepengesøknadRoutes\n                fornavn={state.søkerinfo.person.fornavn}\n                locale={locale}\n                onChangeLocale={onChangeLocale}\n                currentRoute={storageData ? storageData.currentRoute : SøknadRoutes.VELKOMMEN}\n            />\n        </BrowserRouter>\n    );\n};\n\nexport default Foreldrepengesøknad;\n","import React from 'react';\nimport * as Sentry from '@sentry/browser';\nimport Feilside from 'app/pages/feilside/Feilside';\nimport links from 'app/links/links';\nimport { FOR_MANGE_VEDLEGG_ERROR } from 'app/api/apiUtils';\n\ninterface State {\n    hasError: boolean;\n    error: Error | null;\n}\n\nclass ErrorBoundary extends React.Component<any, State> {\n    constructor(props: unknown) {\n        super(props);\n        this.state = { hasError: false, error: null };\n    }\n\n    componentDidCatch(error: Error | null, errorInfo: any): void {\n        if (error && error.message !== 'window.hasFocus is not a function') {\n            this.setState({ ...this.state, hasError: true, error });\n\n            Sentry.withScope((scope) => {\n                scope.setExtras(errorInfo);\n                Sentry.captureException(error);\n            });\n        }\n    }\n\n    render() {\n        if (this.state.hasError) {\n            const feilPgaForMangeVedlegg =\n                !!this.state.error &&\n                !!this.state.error.message &&\n                this.state.error.message === FOR_MANGE_VEDLEGG_ERROR;\n            const feilsideTittel = feilPgaForMangeVedlegg ? 'Feil: for mange vedlegg' : 'Informasjon om feilen';\n            return (\n                <Feilside\n                    dokumenttittel=\"NAV Foreldrepengesøknad\"\n                    ingress={`${this.state.error?.message}`}\n                    tittel={feilsideTittel}\n                    illustrasjon={{\n                        tittel: 'Hei!',\n                        tekst: 'Noe har gått galt med søknaden.',\n                        veileder: {\n                            ansikt: 'skeptisk',\n                        },\n                        lenke: { tekst: 'Her finner du en lenke til brukerstøtte', url: links.brukerstøtte },\n                    }}\n                    skalKunneGåTilbakeTilSøknad={feilPgaForMangeVedlegg}\n                />\n            );\n        }\n\n        return this.props.children;\n    }\n}\nexport default ErrorBoundary;\n","import React, { useState } from 'react';\nimport dayjs from 'dayjs';\nimport { getLocaleFromSessionStorage, Locale, setLocaleInSessionStorage } from '@navikt/fp-common';\nimport IntlProvider from './intl/IntlProvider';\nimport ForeldrepengesøknadContextProvider from './context/ForeldrepengesøknadContext';\nimport Foreldrepengesøknad from './Foreldrepengesøknad';\nimport ByttBrowserModal from 'app/pages/byttBrowserModal/ByttBrowserModal';\nimport ErrorBoundary from './errorBoundary/ErrorBoundary';\n\nconst localeFromSessionStorage = getLocaleFromSessionStorage();\n\ndayjs.locale(localeFromSessionStorage);\n\nconst AppContainer = () => {\n    const [locale, setLocale] = useState<Locale>(localeFromSessionStorage);\n\n    return (\n        <ForeldrepengesøknadContextProvider>\n            <ErrorBoundary>\n                <IntlProvider locale={locale}>\n                    <ByttBrowserModal />\n                    <Foreldrepengesøknad\n                        locale={locale}\n                        onChangeLocale={(activeLocale: Locale) => {\n                            setLocaleInSessionStorage(activeLocale);\n                            setLocale(activeLocale);\n                        }}\n                    />\n                </IntlProvider>\n            </ErrorBoundary>\n        </ForeldrepengesøknadContextProvider>\n    );\n};\n\nexport default AppContainer;\n","import React from 'react';\nimport { Story } from '@storybook/react';\nimport MockAdapter from 'axios-mock-adapter';\n\nimport søkerinfo from '../../mock_data/sokerinfo.json';\nimport annenPartVedtak from '../../mock_data/annenPartVedtak.json';\nimport saker from '../../mock_data/saker.json';\nimport storageKvittering from '../../mock_data/storage_kvittering.json';\nimport stønadskontoer from '../../mock_data/stønadskontoer.json';\n\nimport AppContainer from './AppContainer';\nimport { AxiosInstance } from './api/apiInterceptor';\n\nimport '@navikt/ds-css';\nimport './styles/app.less';\n\nexport default {\n  title: 'AppContainer',\n  component: AppContainer,\n};\n\nconst Template: Story<any> = () => {\n  const apiMock = new MockAdapter(AxiosInstance);\n  apiMock.onGet('/sokerinfo').reply(200, søkerinfo);\n  apiMock.onGet('/innsyn/v2/saker').reply(200, saker);\n  apiMock.onGet('innsyn/v2/annenPartVedtak').reply(200, annenPartVedtak);\n  apiMock.onGet('/uttak-url/konto').reply(200, stønadskontoer);\n  apiMock.onGet('/storage/kvittering/foreldrepenger').reply(200, storageKvittering);\n\n  apiMock.onPost('/storage').reply(200, {});\n  apiMock.onPost('/soknad').reply(200, {});\n  apiMock.onPost('/sendSøknadUrl').reply(200, {});\n\n  apiMock.onDelete('/storage').reply(200, {});\n\n  return (\n    <AppContainer />\n  )\n  };\n\nexport const VisApp = Template.bind({});\n","import { bemUtils, intlUtils, UtvidetInformasjon } from '@navikt/fp-common';\nimport links from 'app/links/links';\nimport Lenke from 'nav-frontend-lenker';\nimport { Normaltekst } from 'nav-frontend-typografi';\nimport React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport './dinePlikter.less';\n\nconst DinePlikter = () => {\n    const intl = useIntl();\n    const bem = bemUtils('dinePlikter');\n\n    return (\n        <UtvidetInformasjon apneLabel=\"Les om dine plikter\">\n            <article className=\"velkommenDinePlikter\">\n                <ul className={bem.block}>\n                    <li>\n                        <Normaltekst>{intlUtils(intl, 'velkommen.dinePlikter.listeElement.1')}</Normaltekst>\n                    </li>\n                    <li>\n                        <Normaltekst>\n                            <FormattedMessage\n                                id=\"velkommen.dinePlikter.listeElement.2\"\n                                values={{\n                                    link: (\n                                        <Lenke href={links.rettOgPlikt} target=\"_blank\">\n                                            <FormattedMessage id=\"velkommen.dinePlikter.listeElement.2.link\" />\n                                        </Lenke>\n                                    ),\n                                }}\n                            />\n                        </Normaltekst>\n                    </li>\n                </ul>\n            </article>\n        </UtvidetInformasjon>\n    );\n};\n\nexport default DinePlikter;\n","import { detect } from 'detect-browser';\n\nexport const shouldChangeBrowser = () => {\n    const browserInfo = detect();\n    return browserInfo ? browserInfo.name === 'ie' : false;\n};\n","import * as React from 'react';\nimport Modal from 'nav-frontend-modal';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Systemtittel, Normaltekst } from 'nav-frontend-typografi';\nimport { AdvarselIkon, bemUtils, intlUtils } from '@navikt/fp-common';\nimport { shouldChangeBrowser } from 'app/utils/browserUtils';\n\nimport './byttBrowserModal.less';\n\ninterface Props {\n    skalEndreNettleser: boolean;\n}\n\nexport const ByttBrowserModalImpl: React.FunctionComponent<Props> = ({ skalEndreNettleser }) => {\n    const [isOpen, toggleIsOpen] = React.useState(skalEndreNettleser);\n    const intl = useIntl();\n    const cls = bemUtils('bytt-browser-modal');\n    return (\n        <Modal\n            className={cls.block}\n            contentLabel={intlUtils(intl, 'sesjonUtløpt.tittel')}\n            closeButton={false}\n            isOpen={isOpen}\n            onRequestClose={() => undefined}\n        >\n            <AdvarselIkon />\n            <Systemtittel className=\"blokk-m\">{<FormattedMessage id=\"byttBrowser.tittel\" />}</Systemtittel>\n            <Normaltekst className=\"blokk-m\">{<FormattedMessage id=\"byttBrowser.ingress\" />}</Normaltekst>\n            <div className={cls.element('ok-knapp')}>\n                <Hovedknapp className={cls.element('ok-knapp')} onClick={() => toggleIsOpen(false)}>\n                    {<FormattedMessage id=\"ok\" />}\n                </Hovedknapp>\n            </div>\n        </Modal>\n    );\n};\n\nconst ByttBrowserModal = () => <ByttBrowserModalImpl skalEndreNettleser={shouldChangeBrowser()} />;\n\nexport default ByttBrowserModal;\n","import * as React from 'react';\nimport Modal from 'nav-frontend-modal';\nimport { Ingress, Normaltekst, Systemtittel } from 'nav-frontend-typografi';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { bemUtils, Block, intlUtils } from '@navikt/fp-common';\n\nimport './dinePersonopplysningerModal.less';\n\ninterface DineRettigheterModalProps {\n    isOpen: boolean;\n    onRequestClose: () => void;\n}\n\ntype Props = DineRettigheterModalProps;\n\nconst DinePersonopplysningerModal = (props: Props) => {\n    const intl = useIntl();\n    const bem = bemUtils('dinePersonopplysningerModal');\n\n    return (\n        <Modal\n            isOpen={props.isOpen}\n            onRequestClose={() => props.onRequestClose()}\n            closeButton={true}\n            className={bem.block}\n            contentLabel={intlUtils(intl, 'velkommen.dinePersonopplysninger.sectionheading')}\n        >\n            <article className=\"velkommenModalContent velkommenModalContent--50\">\n                <Block padBottom=\"s\">\n                    <Systemtittel tag=\"h1\" className=\"velkommenModalContent__header\">\n                        {intlUtils(intl, 'velkommen.dinePersonopplysninger.sectionheading')}\n                    </Systemtittel>\n                </Block>\n                <Block padBottom=\"s\">\n                    <Normaltekst>\n                        <FormattedMessage\n                            id=\"velkommen.dinePersonopplysninger.behandling.html\"\n                            values={{\n                                a: (msg: any) => (\n                                    <a\n                                        href=\"https://www.nav.no/foreldrepenger\"\n                                        className=\"lenke\"\n                                        rel=\"noreferrer\"\n                                        target=\"_blank\"\n                                    >\n                                        {msg}\n                                    </a>\n                                ),\n                            }}\n                        />\n                    </Normaltekst>\n                </Block>\n                <Block padBottom=\"s\">\n                    <Ingress>\n                        <FormattedMessage id=\"velkommen.dinePersonopplysninger.avsnitt.innhenting.tittel\" />\n                    </Ingress>\n                    <Normaltekst>\n                        <FormattedMessage id=\"velkommen.dinePersonopplysninger.avsnitt.innhenting.del1\" />\n                    </Normaltekst>\n                    <ul>\n                        <li>\n                            <Normaltekst>\n                                <FormattedMessage id=\"velkommen.dinePersonopplysninger.avsnitt.innhenting.punkt1\" />\n                            </Normaltekst>\n                        </li>\n                        <li>\n                            <Normaltekst>\n                                <FormattedMessage id=\"velkommen.dinePersonopplysninger.avsnitt.innhenting.punkt2\" />\n                            </Normaltekst>\n                        </li>\n                        <li>\n                            <Normaltekst>\n                                <FormattedMessage id=\"velkommen.dinePersonopplysninger.avsnitt.innhenting.punkt3\" />\n                            </Normaltekst>\n                        </li>\n                        <li>\n                            <Normaltekst>\n                                <FormattedMessage id=\"velkommen.dinePersonopplysninger.avsnitt.innhenting.punkt4\" />\n                            </Normaltekst>\n                        </li>\n                    </ul>\n                    <Normaltekst>\n                        <FormattedMessage id=\"velkommen.dinePersonopplysninger.avsnitt.innhenting.del2\" />\n                    </Normaltekst>\n                </Block>\n                <Block padBottom=\"s\">\n                    <Ingress>\n                        <FormattedMessage id=\"velkommen.dinePersonopplysninger.avsnitt.automatiskBehandling.tittel\" />\n                    </Ingress>\n                    <Normaltekst>\n                        <FormattedMessage id=\"velkommen.dinePersonopplysninger.avsnitt.automatiskBehandling.del1\" />\n                    </Normaltekst>\n                    <ul>\n                        <li>\n                            <Normaltekst>\n                                <FormattedMessage id=\"velkommen.dinePersonopplysninger.avsnitt.automatiskBehandling.punkt1\" />\n                            </Normaltekst>\n                        </li>\n                        <li>\n                            <Normaltekst>\n                                <FormattedMessage id=\"velkommen.dinePersonopplysninger.avsnitt.automatiskBehandling.punkt2\" />\n                            </Normaltekst>\n                        </li>\n                        <li>\n                            <Normaltekst>\n                                <FormattedMessage id=\"velkommen.dinePersonopplysninger.avsnitt.automatiskBehandling.punkt3\" />\n                            </Normaltekst>\n                        </li>\n                        <li>\n                            <Normaltekst>\n                                <FormattedMessage id=\"velkommen.dinePersonopplysninger.avsnitt.automatiskBehandling.punkt4\" />\n                            </Normaltekst>\n                        </li>\n                        <li>\n                            <Normaltekst>\n                                <FormattedMessage id=\"velkommen.dinePersonopplysninger.avsnitt.automatiskBehandling.punkt5\" />\n                            </Normaltekst>\n                        </li>\n                    </ul>\n                </Block>\n                <Block padBottom=\"s\">\n                    <Ingress>\n                        <FormattedMessage id=\"velkommen.dinePersonopplysninger.avsnitt.svarPaSoknaden.tittel\" />\n                    </Ingress>\n                    <Normaltekst>\n                        <FormattedMessage id=\"velkommen.dinePersonopplysninger.avsnitt.svarPaSoknaden.del1\" />\n                    </Normaltekst>\n                    <ul>\n                        <li>\n                            <Normaltekst>\n                                <FormattedMessage id=\"velkommen.dinePersonopplysninger.avsnitt.svarPaSoknaden.punkt1\" />\n                            </Normaltekst>\n                        </li>\n                        <li>\n                            <Normaltekst>\n                                <FormattedMessage id=\"velkommen.dinePersonopplysninger.avsnitt.svarPaSoknaden.punkt2\" />\n                            </Normaltekst>\n                        </li>\n                        <li>\n                            <Normaltekst>\n                                <FormattedMessage id=\"velkommen.dinePersonopplysninger.avsnitt.svarPaSoknaden.punkt3\" />\n                            </Normaltekst>\n                        </li>\n                    </ul>\n                </Block>\n                <Block padBottom=\"s\">\n                    <Ingress tag=\"h2\">\n                        <FormattedMessage id=\"velkommen.dinePersonopplysninger.avsnitt.personvernerklaringen.tittel\" />\n                    </Ingress>\n                    <Normaltekst>\n                        <FormattedMessage\n                            id=\"velkommen.dinePersonopplysninger.avsnitt.personvernerklaringen.html\"\n                            values={{\n                                a: (msg: any) => (\n                                    <a\n                                        className=\"lenke\"\n                                        target=\"_blank\"\n                                        rel=\"noreferrer\"\n                                        href=\"https://www.nav.no/no/NAV+og+samfunn/Om+NAV/personvern-i-arbeids-og-velferdsetaten/personvernerkl%C3%A6ring-for-arbeids-og-velferdsetaten\"\n                                    >\n                                        {msg}\n                                    </a>\n                                ),\n                            }}\n                        />\n                    </Normaltekst>\n                </Block>\n            </article>\n        </Modal>\n    );\n};\n\nexport default DinePersonopplysningerModal;\n","import { bemUtils, Block, intlUtils, LanguageToggle, Locale, Sidebanner } from '@navikt/fp-common';\nimport actionCreator, { ForeldrepengesøknadContextAction } from 'app/context/action/actionCreator';\nimport React, { useEffect, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport {\n    getInitialVelkommenValues,\n    VelkommenFormComponents,\n    VelkommenFormData,\n    VelkommenFormField,\n    velkommenFormQuestions,\n} from './velkommenFormConfig';\nimport DinePlikter from 'app/components/dine-plikter/DinePlikter';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport { Innholdstittel, Normaltekst } from 'nav-frontend-typografi';\nimport DinePersonopplysningerModal from '../modaler/DinePersonopplysningerModal';\n\nimport './velkommen.less';\nimport { validateHarForståttRettigheterOgPlikter } from './validation/velkommenValidation';\nimport SøknadRoutes from 'app/routes/routes';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport {\n    mapSøkerensEksisterendeSakFromDTO,\n    opprettSøknadFraEksisterendeSak,\n    opprettSøknadFraValgteBarn,\n    opprettSøknadFraValgteBarnMedSak,\n} from 'app/utils/eksisterendeSakUtils';\nimport { useForeldrepengesøknadContext } from 'app/context/hooks/useForeldrepengesøknadContext';\nimport { Søknad } from 'app/context/types/Søknad';\n\nimport BarnVelger, { SelectableBarnOptions } from './components/barnVelger/BarnVelger';\nimport { getBarnFraNesteSak, getSelectableBarnOptions, sorterSelectableBarnEtterYngst } from './velkommenUtils';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport useSaveLoadedRoute from 'app/utils/hooks/useSaveLoadedRoute';\nimport { Sak } from 'app/types/Sak';\n\ninterface Props {\n    fornavn: string;\n    onChangeLocale: (locale: Locale) => void;\n    locale: Locale;\n    saker: Sak[];\n    fnr: string;\n}\n\nconst Velkommen: React.FunctionComponent<Props> = ({ fornavn, locale, saker, onChangeLocale }) => {\n    const intl = useIntl();\n    const søknad = useSøknad();\n    const { dispatch, state } = useForeldrepengesøknadContext();\n    const [isDinePersonopplysningerModalOpen, setDinePersonopplysningerModalOpen] = useState(false);\n    const bem = bemUtils('velkommen');\n    const søkerinfo = useSøkerinfo();\n    const { registrerteBarn } = søkerinfo;\n    const selectableBarn = getSelectableBarnOptions(saker, registrerteBarn);\n    const sortedSelectableBarn = selectableBarn.sort(sorterSelectableBarnEtterYngst);\n\n    useSaveLoadedRoute(SøknadRoutes.VELKOMMEN);\n\n    useEffect(() => {\n        if (state.søknad.søker.språkkode !== locale) {\n            dispatch(actionCreator.setSpråkkode(locale));\n        }\n    }, [dispatch, locale, state.søknad.søker.språkkode]);\n\n    const onValidSubmitHandler = (values: Partial<VelkommenFormData>) => {\n        const valgteBarn =\n            values.valgteBarn === SelectableBarnOptions.SØKNAD_GJELDER_NYTT_BARN\n                ? undefined\n                : selectableBarn.find((sb) => sb.id === values.valgteBarn);\n        const vilSøkeOmEndring = valgteBarn !== undefined && !!valgteBarn.kanSøkeOmEndring;\n        const valgtEksisterendeSak =\n            vilSøkeOmEndring && valgteBarn.sak !== undefined\n                ? saker.find((sak) => sak.saksnummer === valgteBarn.sak?.saksnummer)\n                : undefined;\n\n        const actionsToDispatch: ForeldrepengesøknadContextAction[] = [\n            actionCreator.setVelkommen(values.harForståttRettigheterOgPlikter!),\n            actionCreator.setErEndringssøknad(vilSøkeOmEndring),\n        ];\n        let barnFraNesteSak = undefined;\n        if (valgteBarn !== undefined) {\n            barnFraNesteSak = getBarnFraNesteSak(valgteBarn, sortedSelectableBarn);\n            actionsToDispatch.push(actionCreator.setBarnFraNesteSak(barnFraNesteSak));\n        }\n        const førsteUttaksdagNesteBarnsSak =\n            barnFraNesteSak !== undefined ? barnFraNesteSak.startdatoFørsteStønadsperiode : undefined;\n\n        const endringssøknad = vilSøkeOmEndring && valgtEksisterendeSak;\n        const nySøknadPåAlleredeSøktBarn =\n            valgteBarn !== undefined && valgteBarn.sak !== undefined && valgteBarn.kanSøkeOmEndring === false;\n        const nySøknadPåValgteRegistrerteBarn =\n            !endringssøknad && !nySøknadPåAlleredeSøktBarn && valgteBarn !== undefined;\n\n        if (endringssøknad) {\n            const eksisterendeSak = mapSøkerensEksisterendeSakFromDTO(\n                valgtEksisterendeSak,\n                førsteUttaksdagNesteBarnsSak\n            );\n\n            const søknad = opprettSøknadFraEksisterendeSak(\n                state.søkerinfo,\n                eksisterendeSak!,\n                intl,\n                valgtEksisterendeSak.annenPart,\n                valgteBarn.fnr\n            ) as Søknad;\n\n            actionsToDispatch.push(actionCreator.updateCurrentRoute(SøknadRoutes.UTTAKSPLAN));\n            actionsToDispatch.push(actionCreator.setSøknad(søknad));\n            actionsToDispatch.push(actionCreator.setEksisterendeSak(eksisterendeSak));\n            actionsToDispatch.push(\n                actionCreator.setBrukerSvarteJaPåAutoJustering(eksisterendeSak?.grunnlag.ønskerJustertUttakVedFødsel)\n            );\n            actionsToDispatch.push(actionCreator.setSøknadGjelderEtNyttBarn(false));\n        } else if (nySøknadPåAlleredeSøktBarn) {\n            const søknad = opprettSøknadFraValgteBarnMedSak(valgteBarn, intl, søkerinfo) as Søknad;\n            actionsToDispatch.push(actionCreator.setSøknad(søknad));\n            actionsToDispatch.push(actionCreator.setSøknadGjelderEtNyttBarn(false));\n        } else if (nySøknadPåValgteRegistrerteBarn) {\n            const søknad = opprettSøknadFraValgteBarn(valgteBarn) as Søknad;\n            actionsToDispatch.push(actionCreator.setSøknad(søknad));\n            actionsToDispatch.push(actionCreator.setSøknadGjelderEtNyttBarn(false));\n        } else {\n            actionsToDispatch.push(actionCreator.setSøknadGjelderEtNyttBarn(true));\n        }\n\n        return actionsToDispatch;\n    };\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.SØKERSITUASJON,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state)\n    );\n\n    return (\n        <VelkommenFormComponents.FormikWrapper\n            initialValues={getInitialVelkommenValues(søknad.harGodkjentVilkår)}\n            onSubmit={handleSubmit}\n            renderForm={({ values, setFieldValue }) => {\n                const visibility = velkommenFormQuestions.getVisbility({\n                    ...values,\n                    selectableBarn,\n                });\n                const valgtBarnId = values.valgteBarn;\n                const valgtBarn =\n                    valgtBarnId === SelectableBarnOptions.SØKNAD_GJELDER_NYTT_BARN\n                        ? undefined\n                        : selectableBarn.find((barn) => barn.id === valgtBarnId);\n                const knapptekst =\n                    valgtBarn !== undefined && valgtBarn.kanSøkeOmEndring === true\n                        ? intlUtils(intl, 'velkommen.endreSøknad')\n                        : intlUtils(intl, 'velkommen.begynnMedSøknad');\n                return (\n                    <VelkommenFormComponents.Form includeButtons={false}>\n                        <LanguageToggle\n                            locale={locale}\n                            availableLocales={['nb', 'nn']}\n                            toggle={(l: Locale) => onChangeLocale(l)}\n                        />\n                        <Sidebanner\n                            dialog={{\n                                title: intlUtils(intl, 'velkommen.bobletittel', { name: fornavn }),\n                                text: (\n                                    <>\n                                        <Block padBottom=\"m\">\n                                            <FormattedMessage id={'velkommen.bobletekst'} />\n                                        </Block>\n                                    </>\n                                ),\n                            }}\n                        />\n\n                        <div className={bem.block}>\n                            <Innholdstittel className={`${bem.element('tittel')} blokk-s`}>\n                                {intlUtils(intl, 'velkommen.tittel')}\n                            </Innholdstittel>\n                            <Block padBottom=\"l\" visible={visibility.isVisible(VelkommenFormField.valgteBarn)}>\n                                <BarnVelger\n                                    selectableBarn={sortedSelectableBarn}\n                                    visibility={visibility}\n                                    formValues={values}\n                                    setFieldValue={setFieldValue}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(VelkommenFormField.harForståttRettigheterOgPlikter)}\n                            >\n                                <VelkommenFormComponents.ConfirmationCheckbox\n                                    name={VelkommenFormField.harForståttRettigheterOgPlikter}\n                                    label={intlUtils(intl, 'velkommen.samtykke')}\n                                    validate={validateHarForståttRettigheterOgPlikter(intl)}\n                                >\n                                    <>\n                                        <Block padBottom=\"l\">\n                                            <FormattedMessage id=\"velkommen.samtykkeIntro.del1\" />\n                                        </Block>\n                                        <Block padBottom=\"m\">\n                                            <DinePlikter />\n                                        </Block>\n                                        <Block padBottom=\"l\">\n                                            <FormattedMessage id=\"velkommen.samtykkeIntro.del2\" />\n                                        </Block>\n                                        <Block padBottom=\"l\">\n                                            <FormattedMessage id=\"velkommen.samtykkeIntro.del3\" />\n                                        </Block>\n                                    </>\n                                </VelkommenFormComponents.ConfirmationCheckbox>\n                            </Block>\n                            <Block padBottom=\"l\">\n                                <div style={{ textAlign: 'center' }}>\n                                    <Hovedknapp disabled={isSubmitting} spinner={isSubmitting}>\n                                        {knapptekst}\n                                    </Hovedknapp>\n                                </div>\n                            </Block>\n                            <Normaltekst className={bem.element('personopplysningerLink')}>\n                                <a\n                                    className=\"lenke\"\n                                    href=\"#\"\n                                    onClick={(e) => {\n                                        e.preventDefault();\n                                        setDinePersonopplysningerModalOpen(true);\n                                    }}\n                                >\n                                    <FormattedMessage id=\"velkommen.lesMerOmPersonopplysninger\" />\n                                </a>\n                            </Normaltekst>\n                            <DinePersonopplysningerModal\n                                isOpen={isDinePersonopplysningerModalOpen}\n                                onRequestClose={() => setDinePersonopplysningerModalOpen(false)}\n                            />\n                        </div>\n                    </VelkommenFormComponents.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default Velkommen;\n","import { hasValue } from '@navikt/fp-common';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport Søkersituasjon from 'app/context/types/Søkersituasjon';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { Søkerrolle } from 'app/types/Søkerrolle';\n\nexport enum SøkersituasjonFormField {\n    situasjon = 'situasjon',\n    rolle = 'rolle',\n}\n\nexport interface SøkersituasjonFormData {\n    [SøkersituasjonFormField.situasjon]: Situasjon | '';\n    [SøkersituasjonFormField.rolle]: Søkerrolle | '';\n}\n\nconst initialSøkersituasjonValues: SøkersituasjonFormData = {\n    [SøkersituasjonFormField.situasjon]: '',\n    [SøkersituasjonFormField.rolle]: '',\n};\n\nexport const getInitialSøkerSituasjonValues = (stateValues: Søkersituasjon): SøkersituasjonFormData => {\n    if (stateValues) {\n        return {\n            rolle: hasValue(stateValues.rolle) ? stateValues.rolle : initialSøkersituasjonValues.rolle,\n            situasjon: hasValue(stateValues.situasjon) ? stateValues.situasjon : initialSøkersituasjonValues.situasjon,\n        };\n    }\n    return initialSøkersituasjonValues;\n};\n\nexport const SøkersituasjonFormComponents = getTypedFormComponents<\n    SøkersituasjonFormField,\n    SøkersituasjonFormData,\n    string\n>();\n","import React, { FunctionComponent } from 'react';\nimport { Block, intlUtils, Kjønn } from '@navikt/fp-common';\nimport { SøkersituasjonFormComponents, SøkersituasjonFormField } from '../søkersituasjonFormConfig';\nimport { useIntl } from 'react-intl';\n\ninterface Props {\n    kjønn: Kjønn;\n}\n\nconst VelgRolle: FunctionComponent<Props> = ({ kjønn }) => {\n    const intl = useIntl();\n\n    if (kjønn === 'M') {\n        return null;\n    }\n\n    return (\n        <Block margin=\"xl\">\n            <SøkersituasjonFormComponents.RadioPanelGroup\n                name={SøkersituasjonFormField.rolle}\n                radios={[\n                    {\n                        label: intlUtils(intl, 'søkersituasjon.radioButton.mor'),\n                        value: 'mor',\n                    },\n                    {\n                        label: intlUtils(intl, 'søkersituasjon.radioButton.medmor'),\n                        value: 'medmor',\n                    },\n                ]}\n                useTwoColumns={true}\n                legend={intlUtils(intl, 'søkersituasjon.text.rolle')}\n            />\n        </Block>\n    );\n};\n\nexport default VelgRolle;\n","import { hasValue, Kjønn } from '@navikt/fp-common';\nimport { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { SøkersituasjonFormData, SøkersituasjonFormField } from './søkersituasjonFormConfig';\n\ninterface SøkersituasjonQuestionsPayload extends SøkersituasjonFormData {\n    søkerKjønn: Kjønn;\n}\n\nconst SøkersituasjonFormConfig: QuestionConfig<SøkersituasjonQuestionsPayload, SøkersituasjonFormField> = {\n    [SøkersituasjonFormField.situasjon]: {\n        isIncluded: () => true,\n        isAnswered: ({ situasjon }) => hasValue(situasjon),\n    },\n    [SøkersituasjonFormField.rolle]: {\n        isIncluded: ({ søkerKjønn }) => søkerKjønn === 'K',\n        isAnswered: ({ rolle }) => hasValue(rolle),\n        visibilityFilter: ({ situasjon }) => hasValue(situasjon),\n    },\n};\n\nconst søkersituasjonQuestionsConfig = Questions<SøkersituasjonQuestionsPayload, SøkersituasjonFormField>(\n    SøkersituasjonFormConfig\n);\n\nexport default søkersituasjonQuestionsConfig;\n","import { hasValue } from '@navikt/fp-common';\nimport Søkersituasjon from 'app/context/types/Søkersituasjon';\nimport { Situasjon } from 'app/types/Situasjon';\nimport { Søkerrolle } from 'app/types/Søkerrolle';\nimport { SøkersituasjonFormData } from './søkersituasjonFormConfig';\n\nexport const mapSøkersituasjonFormDataToState = (formData: Partial<SøkersituasjonFormData>): Søkersituasjon => {\n    return {\n        situasjon: formData.situasjon as Situasjon,\n        rolle: hasValue(formData.rolle) ? (formData.rolle as Søkerrolle) : 'far',\n    };\n};\n","import { Block, intlUtils, Step } from '@navikt/fp-common';\nimport actionCreator from 'app/context/action/actionCreator';\nimport SøknadRoutes from 'app/routes/routes';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport React from 'react';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport useAvbrytSøknad from 'app/utils/hooks/useAvbrytSøknad';\nimport { useIntl } from 'react-intl';\nimport stepConfig from '../stepsConfig';\nimport VelgRolle from './components/VelgRolle';\nimport {\n    getInitialSøkerSituasjonValues,\n    SøkersituasjonFormComponents,\n    SøkersituasjonFormData,\n    SøkersituasjonFormField,\n} from './søkersituasjonFormConfig';\nimport søkersituasjonQuestionsConfig from './søkersituasjonQuestionsConfig';\nimport { mapSøkersituasjonFormDataToState } from './søkersituasjonUtils';\nimport useSøkerinfo from 'app/utils/hooks/useSøkerinfo';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport useSaveLoadedRoute from 'app/utils/hooks/useSaveLoadedRoute';\n\nconst Søkersituasjon = () => {\n    const intl = useIntl();\n    const søknad = useSøknad();\n    const søkerinfo = useSøkerinfo();\n    const { kjønn } = søkerinfo.person;\n\n    const onValidSubmitHandler = (values: Partial<SøkersituasjonFormData>) => {\n        const søkersituasjon = mapSøkersituasjonFormDataToState(values);\n        return [actionCreator.setSøkersituasjon(søkersituasjon)];\n    };\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.OM_BARNET,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state)\n    );\n    const onAvbrytSøknad = useAvbrytSøknad();\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n    useSaveLoadedRoute(SøknadRoutes.SØKERSITUASJON);\n\n    return (\n        <SøkersituasjonFormComponents.FormikWrapper\n            initialValues={getInitialSøkerSituasjonValues(søknad.søkersituasjon)}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues }) => {\n                const visibility = søkersituasjonQuestionsConfig.getVisbility({\n                    ...formValues,\n                    søkerKjønn: kjønn,\n                });\n                const allQuestionsAnswered = visibility.areAllQuestionsAnswered();\n                return (\n                    <Step\n                        bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n                        activeStepId=\"søkersituasjon\"\n                        pageTitle={intlUtils(intl, 'søknad.søkersituasjon')}\n                        stepTitle={intlUtils(intl, 'søknad.søkersituasjon')}\n                        onCancel={onAvbrytSøknad}\n                        onContinueLater={onFortsettSøknadSenere}\n                        steps={stepConfig(intl)}\n                        kompakt={true}\n                    >\n                        <SøkersituasjonFormComponents.Form includeButtons={false}>\n                            <div>\n                                <Block>\n                                    <SøkersituasjonFormComponents.RadioPanelGroup\n                                        name={SøkersituasjonFormField.situasjon}\n                                        radios={[\n                                            {\n                                                label: intlUtils(intl, 'søkersituasjon.radioButton.fødsel'),\n                                                value: 'fødsel',\n                                            },\n                                            {\n                                                label: intlUtils(intl, 'søkersituasjon.radioButton.adopsjon'),\n                                                value: 'adopsjon',\n                                            },\n                                        ]}\n                                        useTwoColumns={true}\n                                        legend={intlUtils(intl, 'søkersituasjon.text.situasjon')}\n                                    />\n                                </Block>\n                                <Block visible={visibility.isVisible(SøkersituasjonFormField.rolle)}>\n                                    <VelgRolle kjønn={kjønn} />\n                                </Block>\n                                {allQuestionsAnswered && (\n                                    <Block textAlignCenter={true} margin=\"l\">\n                                        <Hovedknapp disabled={isSubmitting} spinner={isSubmitting}>\n                                            {intlUtils(intl, 'søknad.gåVidere')}\n                                        </Hovedknapp>\n                                    </Block>\n                                )}\n                            </div>\n                        </SøkersituasjonFormComponents.Form>\n                    </Step>\n                );\n            }}\n        />\n    );\n};\n\nexport default Søkersituasjon;\n","import { BostedUtland } from './bostedUtlandListAndDialog/types';\nimport { YesOrNo, getTypedFormComponents } from '@navikt/sif-common-formik/lib';\n\nexport enum UtenlandsoppholdFieldNames {\n    harBoddINorgeSiste12Mnd = 'harBoddINorgeSiste12Mnd',\n    utenlandsoppholdSiste12Mnd = 'utenlandsoppholdSiste12Mnd',\n    skalBoINorgeNeste12Mnd = 'skalBoINorgeNeste12Mnd',\n    utenlandsoppholdNeste12Mnd = 'utenlandsoppholdNeste12Mnd',\n}\n\nexport interface UtenlandsoppholdFormData {\n    [UtenlandsoppholdFieldNames.harBoddINorgeSiste12Mnd]: YesOrNo;\n    [UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd]: BostedUtland[];\n    [UtenlandsoppholdFieldNames.skalBoINorgeNeste12Mnd]: YesOrNo;\n    [UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd]: BostedUtland[];\n}\n\nexport const initialUtenlandsoppholdFormData: UtenlandsoppholdFormData = {\n    [UtenlandsoppholdFieldNames.harBoddINorgeSiste12Mnd]: YesOrNo.UNANSWERED,\n    [UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd]: [],\n    [UtenlandsoppholdFieldNames.skalBoINorgeNeste12Mnd]: YesOrNo.UNANSWERED,\n    [UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd]: [],\n};\n\nexport const UtenlandsoppholdFormComponents = getTypedFormComponents<\n    UtenlandsoppholdFieldNames,\n    UtenlandsoppholdFormData,\n    string\n>();\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport { UtenlandsoppholdFormData, UtenlandsoppholdFieldNames } from './utenlandsoppholdFormTypes';\n\nconst UtenlandsoppholdFormConfig: QuestionConfig<UtenlandsoppholdFormData, UtenlandsoppholdFieldNames> = {\n    [UtenlandsoppholdFieldNames.harBoddINorgeSiste12Mnd]: {\n        isAnswered: ({ harBoddINorgeSiste12Mnd }) => harBoddINorgeSiste12Mnd !== YesOrNo.UNANSWERED,\n        isIncluded: () => true,\n        visibilityFilter: ({ skalBoINorgeNeste12Mnd }) => skalBoINorgeNeste12Mnd !== YesOrNo.UNANSWERED,\n    },\n    [UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd]: {\n        isAnswered: ({ utenlandsoppholdSiste12Mnd }) => utenlandsoppholdSiste12Mnd.length > 0,\n        isOptional: () => true,\n        isIncluded: ({ harBoddINorgeSiste12Mnd }) => harBoddINorgeSiste12Mnd === YesOrNo.NO,\n    },\n    [UtenlandsoppholdFieldNames.skalBoINorgeNeste12Mnd]: {\n        isAnswered: ({ skalBoINorgeNeste12Mnd }) => skalBoINorgeNeste12Mnd !== YesOrNo.UNANSWERED,\n        isIncluded: () => true,\n    },\n    [UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd]: {\n        isAnswered: ({ utenlandsoppholdNeste12Mnd }) => utenlandsoppholdNeste12Mnd.length > 0,\n        isOptional: () => true,\n        isIncluded: ({ skalBoINorgeNeste12Mnd }) => skalBoINorgeNeste12Mnd === YesOrNo.NO,\n    },\n};\n\nexport const utenlandsoppholdFormQuestions = Questions<UtenlandsoppholdFormData, UtenlandsoppholdFieldNames>(\n    UtenlandsoppholdFormConfig\n);\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { getTypedFormComponents } from '@navikt/sif-common-formik/lib';\nimport { Systemtittel } from 'nav-frontend-typografi';\nimport { BostedUtland, isValidBostedUtland } from './types';\nimport { Block, intlUtils, validateRequiredField } from '@navikt/fp-common';\nimport { dateRangeValidation, ISOStringToDate } from 'app/utils/dateUtils';\nimport dayjs from 'dayjs';\n\nexport interface BostedUtlandFormLabels {\n    tittel: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    bosted?: BostedUtland;\n    onSubmit: (values: BostedUtland) => void;\n    onCancel: () => void;\n    erFremtidigOpphold: boolean;\n}\n\nenum BostedUtlandFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n}\n\ntype FormValues = Partial<{\n    [BostedUtlandFormFields.fom]: string;\n    [BostedUtlandFormFields.tom]: string;\n    [BostedUtlandFormFields.landkode]: string;\n}>;\n\nconst Form = getTypedFormComponents<BostedUtlandFormFields, FormValues, string>();\n\nconst mapBostedToFormValues = (bosted: BostedUtland): FormValues => {\n    return {\n        fom: bosted.fom,\n        tom: bosted.tom,\n        landkode: bosted.landkode,\n    };\n};\n\nconst BostedUtlandForm: React.FunctionComponent<Props> = ({\n    maxDate,\n    minDate,\n    bosted,\n    onSubmit,\n    onCancel,\n    erFremtidigOpphold,\n}) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        const updatedBosted: Partial<BostedUtland> = {\n            ...bosted,\n            fom: formValues.fom,\n            tom: formValues.tom,\n            landkode: formValues.landkode,\n        };\n        if (isValidBostedUtland(updatedBosted)) {\n            onSubmit(updatedBosted);\n        } else {\n            throw new Error('BostedUtlandForm: Formvalues is not a valid BostedUtland on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={bosted ? mapBostedToFormValues(bosted) : {}}\n            onSubmit={onFormikSubmit}\n            renderForm={({ values }) => {\n                return (\n                    <Form.Form onCancel={onCancel}>\n                        <Systemtittel tag=\"h1\">\n                            <FormattedMessage id={'utenlandsopphold.leggTilUtenlandsopphold.tittel'} />\n                        </Systemtittel>\n                        <Block>\n                            <Form.DateIntervalPicker\n                                legend={intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.tidsrom')}\n                                fromDatepickerProps={{\n                                    name: BostedUtlandFormFields.fom,\n                                    label: intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.fraogmed'),\n                                    fullscreenOverlay: true,\n                                    placeholder: 'dd.mm.åååå',\n                                    minDate,\n                                    maxDate: ISOStringToDate(values.tom) || maxDate,\n                                    validate: (value) => {\n                                        if (values.tom && values.fom && dayjs(values.tom).isSame(values.fom)) {\n                                            return 'Fra og med dato kan ikke være samme som til og med dato';\n                                        }\n\n                                        return dateRangeValidation.validateFromDateInRange({\n                                            intl,\n                                            date: ISOStringToDate(value),\n                                            minDate,\n                                            maxDate,\n                                            errorKey: 'valideringsfeil.fraOgMedDato.førTilDato',\n                                            toDate: ISOStringToDate(values.tom),\n                                            disableWeekend: false,\n                                        });\n                                    },\n                                }}\n                                toDatepickerProps={{\n                                    name: BostedUtlandFormFields.tom,\n                                    label: intlUtils(intl, 'utenlandsopphold.leggTilUtenlandsopphold.tilogmed'),\n                                    fullscreenOverlay: true,\n                                    placeholder: 'dd.mm.åååå',\n                                    minDate: ISOStringToDate(values.fom) || minDate,\n                                    maxDate,\n                                    validate: (value) => {\n                                        if (values.tom && values.fom && dayjs(values.tom).isSame(values.fom)) {\n                                            return 'Til og med dato kan ikke være samme som fra og med dato';\n                                        }\n\n                                        return dateRangeValidation.validateToDateInRange({\n                                            intl,\n                                            date: ISOStringToDate(value),\n                                            minDate,\n                                            maxDate,\n                                            errorKey: 'valideringsfeil.tilOgMedDato.etterFraDato',\n                                            fromDate: ISOStringToDate(values.fom),\n                                            disableWeekend: false,\n                                        });\n                                    },\n                                }}\n                            />\n                        </Block>\n                        <Block margin=\"xl\">\n                            <Form.CountrySelect\n                                name={BostedUtlandFormFields.landkode}\n                                label={\n                                    erFremtidigOpphold\n                                        ? intlUtils(\n                                              intl,\n                                              'utenlandsopphold.leggTilUtenlandsopphold.spørsmål.hvilketLandSkalDuBoI'\n                                          )\n                                        : intlUtils(\n                                              intl,\n                                              'utenlandsopphold.leggTilUtenlandsopphold.spørsmål.hvilketLandHarDuBoddI'\n                                          )\n                                }\n                                validate={(country) =>\n                                    validateRequiredField(\n                                        country,\n                                        intlUtils(\n                                            intl,\n                                            erFremtidigOpphold\n                                                ? 'valideringsfeil.utenlandsopphold.landDuSkalBoIPåkrevd'\n                                                : 'valideringsfeil.utenlandsopphold.landDuHarBoddIPåkrevd'\n                                        )\n                                    )\n                                }\n                                useAlpha3Code={false}\n                            />\n                        </Block>\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default BostedUtlandForm;\n","export interface BostedUtland {\n    id?: string;\n    fom: string;\n    tom: string;\n    landkode: string;\n}\n\nexport const isValidBostedUtland = (bosted: Partial<BostedUtland>): bosted is BostedUtland => {\n    const { fom, landkode, tom } = bosted;\n    return fom !== undefined && landkode !== undefined && tom !== undefined;\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { getCountryName } from '@navikt/sif-common-formik';\nimport { BostedUtland } from './types';\nimport { ActionLink, bemUtils, formatDateExtended, ItemList } from '@navikt/fp-common';\n\nimport dayjs from 'dayjs';\n\nimport './bostedUtlandList.less';\n\ninterface Props {\n    bosteder: BostedUtland[];\n    onEdit?: (opphold: BostedUtland) => void;\n    onDelete?: (opphold: BostedUtland) => void;\n}\n\nconst bem = bemUtils('bostedUtlandList');\n\nconst BostedUtlandList: React.FunctionComponent<Props> = ({ bosteder, onDelete, onEdit }) => {\n    const intl = useIntl();\n    const renderBostedUtlandLabel = (opphold: BostedUtland): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {formatDateExtended(dayjs(opphold.fom).toDate())} -{' '}\n                    {formatDateExtended(dayjs(opphold.tom).toDate())}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<BostedUtland>\n            getItemId={(opphold: BostedUtland) => opphold.id}\n            getItemTitle={(opphold: BostedUtland) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderBostedUtlandLabel}\n            items={bosteder}\n        />\n    );\n};\n\nexport default BostedUtlandList;\n","import React from 'react';\nimport { FormikModalFormAndList, ModalFormAndListLabels } from '@navikt/sif-common-formik';\nimport BostedUtlandForm from './BostedUtlandForm';\nimport BostedUtlandListe from './BostedUtlandList';\nimport { BostedUtland } from './types';\nimport { sortItemsByFom } from '@navikt/fp-common';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: any;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n    erFremtidigOpphold: boolean;\n}\n\nfunction BostedUtlandListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    labels,\n    erFremtidigOpphold,\n}: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, BostedUtland, string>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item }) => (\n                <BostedUtlandForm\n                    bosted={item}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                    erFremtidigOpphold={erFremtidigOpphold}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <BostedUtlandListe bosteder={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n        />\n    );\n}\n\nexport default BostedUtlandListAndDialog;\n","import { initialUtenlandsoppholdFormData, UtenlandsoppholdFormData } from './utenlandsoppholdFormTypes';\nimport { YesOrNo } from '@navikt/sif-common-formik/lib';\nimport InformasjonOmUtenlandsopphold, { Utenlandsopphold } from 'app/context/types/InformasjonOmUtenlandsopphold';\nimport { convertBooleanOrUndefinedToYesOrNo, convertYesOrNoOrUndefinedToBoolean } from 'app/utils/formUtils';\nimport { BostedUtland } from './bostedUtlandListAndDialog/types';\n\nconst mapUtenlandsoppholdTilBostedUtland = (opphold: Utenlandsopphold): BostedUtland => ({\n    fom: opphold.tidsperiode.fom,\n    tom: opphold.tidsperiode.tom!,\n    landkode: opphold.land,\n});\n\nexport const getInitialUtenlandsoppholdValuesFromState = (\n    init: InformasjonOmUtenlandsopphold\n): UtenlandsoppholdFormData => {\n    return {\n        ...initialUtenlandsoppholdFormData,\n        harBoddINorgeSiste12Mnd: convertBooleanOrUndefinedToYesOrNo(init.iNorgeSiste12Mnd),\n        skalBoINorgeNeste12Mnd: convertBooleanOrUndefinedToYesOrNo(init.iNorgeNeste12Mnd),\n        utenlandsoppholdNeste12Mnd: init.senereOpphold.map(mapUtenlandsoppholdTilBostedUtland),\n        utenlandsoppholdSiste12Mnd: init.tidligereOpphold.map(mapUtenlandsoppholdTilBostedUtland),\n    };\n};\n\nconst mapBostedUtlandToUtenlandsopphold = (bostedUtland: BostedUtland[]): Utenlandsopphold[] => {\n    return bostedUtland.map((bosted) => ({\n        land: bosted.landkode,\n        tidsperiode: {\n            fom: bosted.fom,\n            tom: bosted.tom,\n        },\n    }));\n};\n\nexport const mapUtenlandsoppholdFormDataToState = (\n    formValues: Partial<UtenlandsoppholdFormData>\n): InformasjonOmUtenlandsopphold => {\n    const { harBoddINorgeSiste12Mnd, skalBoINorgeNeste12Mnd, utenlandsoppholdNeste12Mnd, utenlandsoppholdSiste12Mnd } =\n        formValues;\n\n    return {\n        iNorgeSiste12Mnd: convertYesOrNoOrUndefinedToBoolean(harBoddINorgeSiste12Mnd)!,\n        iNorgeNeste12Mnd: convertYesOrNoOrUndefinedToBoolean(skalBoINorgeNeste12Mnd)!,\n        senereOpphold:\n            skalBoINorgeNeste12Mnd === YesOrNo.NO ? mapBostedUtlandToUtenlandsopphold(utenlandsoppholdNeste12Mnd!) : [],\n        tidligereOpphold:\n            harBoddINorgeSiste12Mnd === YesOrNo.NO\n                ? mapBostedUtlandToUtenlandsopphold(utenlandsoppholdSiste12Mnd!)\n                : [],\n    };\n};\n","import {\n    date1YearAgo,\n    date1YearFromNow,\n    dateRangesCollide,\n    dateRangesExceedsRange,\n    intlUtils,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { BostedUtland } from './bostedUtlandListAndDialog/types';\nimport { IntlShape } from 'react-intl';\nimport { SkjemaelementFeil } from 'app/types/SkjemaelementFeil';\n\nexport const validateUtenlandsoppholdNeste12Mnd =\n    (intl: IntlShape) =>\n    (utenlandsopphold: BostedUtland[]): SkjemaelementFeil => {\n        if (utenlandsopphold.length === 0) {\n            return intlUtils(intl, 'valideringsfeil.utenlandsopphold.neste12Måneder.ikkeRegistrert');\n        }\n\n        const dateRanges = utenlandsopphold.map((u) => ({ from: dayjs(u.fom).toDate(), to: dayjs(u.tom).toDate() }));\n\n        if (dateRangesCollide(dateRanges)) {\n            return intlUtils(intl, 'valideringsfeil.utenlandsopphold.overlapp');\n        }\n\n        if (dateRangesExceedsRange(dateRanges, { from: new Date(), to: date1YearFromNow })) {\n            return intlUtils(intl, 'valideringsfeil.utenlandsoppholdUtenforPeriode');\n        }\n\n        return undefined;\n    };\n\nexport const validateUtenlandsoppholdSiste12Mnd =\n    (intl: IntlShape) =>\n    (utenlandsopphold: BostedUtland[]): SkjemaelementFeil => {\n        if (utenlandsopphold.length === 0) {\n            return intlUtils(intl, 'valideringsfeil.utenlandsopphold.siste12Måneder.ikkeRegistrert');\n        }\n\n        const dateRanges = utenlandsopphold.map((u) => ({ from: dayjs(u.fom).toDate(), to: dayjs(u.tom).toDate() }));\n\n        if (dateRangesCollide(dateRanges)) {\n            return intlUtils(intl, 'valideringsfeil.utenlandsopphold.overlapp');\n        }\n\n        if (dateRangesExceedsRange(dateRanges, { from: date1YearAgo, to: new Date() })) {\n            return intlUtils(intl, 'valideringsfeil.utenlandsoppholdUtenforPeriode');\n        }\n\n        return undefined;\n    };\n","import React from 'react';\nimport {\n    Block,\n    date1YearAgo,\n    date1YearFromNow,\n    dateToday,\n    intlUtils,\n    Step,\n    UtvidetInformasjon,\n    validateYesOrNoIsAnswered,\n} from '@navikt/fp-common';\nimport {\n    UtenlandsoppholdFieldNames,\n    UtenlandsoppholdFormComponents,\n    UtenlandsoppholdFormData,\n} from './utenlandsoppholdFormTypes';\nimport { useIntl } from 'react-intl';\nimport actionCreator from 'app/context/action/actionCreator';\nimport useOnValidSubmit from 'app/utils/hooks/useOnValidSubmit';\nimport useSøknad from 'app/utils/hooks/useSøknad';\nimport useAvbrytSøknad from 'app/utils/hooks/useAvbrytSøknad';\nimport { utenlandsoppholdFormQuestions } from './utenlandsoppholdFormQuestions';\nimport BostedUtlandListAndDialog from './bostedUtlandListAndDialog/BostedUtlandListAndDialog';\nimport stepConfig, { getPreviousStepHref } from '../stepsConfig';\nimport { Hovedknapp } from 'nav-frontend-knapper';\nimport {\n    getInitialUtenlandsoppholdValuesFromState,\n    mapUtenlandsoppholdFormDataToState,\n} from './utenlandsoppholdFormUtils';\nimport SøknadRoutes from 'app/routes/routes';\nimport { validateUtenlandsoppholdNeste12Mnd, validateUtenlandsoppholdSiste12Mnd } from './utenlandsoppholdValidering';\nimport { storeAppState } from 'app/utils/submitUtils';\nimport { ForeldrepengesøknadContextState } from 'app/context/ForeldrepengesøknadContextConfig';\nimport useFortsettSøknadSenere from 'app/utils/hooks/useFortsettSøknadSenere';\nimport useSaveLoadedRoute from 'app/utils/hooks/useSaveLoadedRoute';\n\nconst Utenlandsopphold: React.FunctionComponent = () => {\n    const intl = useIntl();\n    const { informasjonOmUtenlandsopphold } = useSøknad();\n\n    const onValidSubmitHandler = (values: Partial<UtenlandsoppholdFormData>) => {\n        const utenlandsopphold = mapUtenlandsoppholdFormDataToState(values);\n        return [actionCreator.setInformasjonOmUtenlandsopphold(utenlandsopphold)];\n    };\n\n    const { handleSubmit, isSubmitting } = useOnValidSubmit(\n        onValidSubmitHandler,\n        SøknadRoutes.INNTEKTSINFORMASJON,\n        (state: ForeldrepengesøknadContextState) => storeAppState(state)\n    );\n    const onAvbrytSøknad = useAvbrytSøknad();\n    const onFortsettSøknadSenere = useFortsettSøknadSenere();\n    useSaveLoadedRoute(SøknadRoutes.UTENLANDSOPPHOLD);\n\n    return (\n        <UtenlandsoppholdFormComponents.FormikWrapper\n            initialValues={getInitialUtenlandsoppholdValuesFromState(informasjonOmUtenlandsopphold)}\n            onSubmit={handleSubmit}\n            renderForm={({ values: formValues }) => {\n                const visibility = utenlandsoppholdFormQuestions.getVisbility(formValues);\n\n                return (\n                    <Step\n                        bannerTitle={intlUtils(intl, 'søknad.pageheading')}\n                        activeStepId=\"utenlandsopphold\"\n                        pageTitle={intlUtils(intl, 'søknad.utenlandsopphold')}\n                        stepTitle={intlUtils(intl, 'søknad.utenlandsopphold')}\n                        backLinkHref={getPreviousStepHref('utenlandsopphold')}\n                        onCancel={onAvbrytSøknad}\n                        onContinueLater={onFortsettSøknadSenere}\n                        steps={stepConfig(intl)}\n                        kompakt={true}\n                    >\n                        <UtenlandsoppholdFormComponents.Form includeButtons={false} includeValidationSummary={true}>\n                            <Block\n                                visible={visibility.isVisible(UtenlandsoppholdFieldNames.skalBoINorgeNeste12Mnd)}\n                                padBottom=\"l\"\n                            >\n                                <UtenlandsoppholdFormComponents.YesOrNoQuestion\n                                    legend={intlUtils(intl, 'utenlandsopphold.neste12Måneder.spørsmål')}\n                                    name={UtenlandsoppholdFieldNames.skalBoINorgeNeste12Mnd}\n                                    description={\n                                        <UtvidetInformasjon\n                                            apneLabel={intlUtils(\n                                                intl,\n                                                'utenlandsopphold.neste12MånederInfotekst.apneLabel'\n                                            )}\n                                        >\n                                            {intlUtils(intl, 'utenlandsopphold.neste12MånederInfotekst')}\n                                        </UtvidetInformasjon>\n                                    }\n                                    labels={{\n                                        yes: intlUtils(\n                                            intl,\n                                            'utenlandsopphold.neste12MånederInfotekst.radiobutton.boddINorge'\n                                        ),\n                                        no: intlUtils(\n                                            intl,\n                                            'utenlandsopphold.neste12MånederInfotekst.radiobutton.boddIUtlandet'\n                                        ),\n                                    }}\n                                    validate={(skalBoINorgeNeste12Mnd) =>\n                                        validateYesOrNoIsAnswered(\n                                            skalBoINorgeNeste12Mnd,\n                                            'valideringsfeil.utenlandsopphold.skalBoINorgePåkrevd'\n                                        )\n                                    }\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd)}\n                            >\n                                <BostedUtlandListAndDialog<UtenlandsoppholdFieldNames>\n                                    name={UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd}\n                                    minDate={dateToday}\n                                    maxDate={date1YearFromNow}\n                                    labels={{\n                                        addLabel: intlUtils(intl, 'utenlandsopphold.knapp.leggTilLand'),\n                                        modalTitle: 'Utenlandsopphold neste 12 måneder',\n                                    }}\n                                    erFremtidigOpphold={true}\n                                    validate={validateUtenlandsoppholdNeste12Mnd(intl)}\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(UtenlandsoppholdFieldNames.harBoddINorgeSiste12Mnd)}\n                            >\n                                <UtenlandsoppholdFormComponents.YesOrNoQuestion\n                                    legend={intlUtils(intl, 'utenlandsopphold.siste12Måneder.spørsmål')}\n                                    name={UtenlandsoppholdFieldNames.harBoddINorgeSiste12Mnd}\n                                    description={\n                                        <UtvidetInformasjon\n                                            apneLabel={intlUtils(\n                                                intl,\n                                                'utenlandsopphold.siste12MånederInfotekst.apneLabel'\n                                            )}\n                                        >\n                                            {intlUtils(intl, 'utenlandsopphold.siste12MånederInfotekst')}\n                                        </UtvidetInformasjon>\n                                    }\n                                    labels={{\n                                        yes: intlUtils(\n                                            intl,\n                                            'utenlandsopphold.siste12MånederInfotekst.radiobutton.boddINorge'\n                                        ),\n                                        no: intlUtils(\n                                            intl,\n                                            'utenlandsopphold.siste12MånederInfotekst.radiobutton.boddIUtlandet'\n                                        ),\n                                    }}\n                                    validate={(harBoddINorgeSiste12Mnd) =>\n                                        validateYesOrNoIsAnswered(\n                                            harBoddINorgeSiste12Mnd,\n                                            'valideringsfeil.utenlandsopphold.harBoddINorgePåkrevd'\n                                        )\n                                    }\n                                />\n                            </Block>\n                            <Block\n                                padBottom=\"l\"\n                                visible={visibility.isVisible(UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd)}\n                            >\n                                <BostedUtlandListAndDialog<UtenlandsoppholdFieldNames>\n                                    minDate={date1YearAgo}\n                                    maxDate={dateToday}\n                                    name={UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd}\n                                    labels={{\n                                        addLabel: intlUtils(intl, 'utenlandsopphold.knapp.leggTilLand'),\n                                        modalTitle: 'Utenlandsopphold siste 12 måneder',\n                                    }}\n                                    erFremtidigOpphold={false}\n                                    validate={validateUtenlandsoppholdSiste12Mnd(intl)}\n                                />\n                            </Block>\n                            <Block visible={visibility.areAllQuestionsAnswered()} textAlignCenter={true}>\n                                <Hovedknapp disabled={isSubmitting} spinner={isSubmitting}>\n                                    {intlUtils(intl, 'søknad.gåVidere')}\n                                </Hovedknapp>\n                            </Block>\n                        </UtenlandsoppholdFormComponents.Form>\n                    </Step>\n                );\n            }}\n        />\n    );\n};\n\nexport default Utenlandsopphold;\n"],"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","_typeof","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","undefined","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","_catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","Feilside","_ref","containerId","dokumenttittel","illustrasjon","tittel","ingress","skalKunneGåTilbakeTilSøknad","språkkode","setLanguage","bem","bemUtils","_useForeldrepengesøkn","useForeldrepengesøknadContext","dispatch","søkerinfo","avbrytSøknadHandler","useCallback","_callee","_callee$","_context","logAmplitudeEvent","app","team","hendelse","actionCreator","Api","person","fnr","window","location","href","gåTilbakeTilSøknadenHandler","reload","useDocumentTitle","React","LanguageToggle","locale","availableLocales","toggle","Sidebanner","veileder","dialog","title","text","Block","padBottom","tekst","lenke","Lenke","url","id","className","block","Innholdstittel","Normaltekst","element","Hovedknapp","onClick","IkkeMyndig","fornavn","intl","useIntl","intlUtils","navn","toLowerCase","ansikt","links","LinkButton","color","rest","_objectWithoutProperties","_excluded","_extends","classNames","concat","formaterTidsperiodeDato","dato","formatDate","TidsperiodeDisplay","tidsperiode","toggleVisTidsperiode","Element","renderTidsperiode","fom","tom","e","preventDefault","stopPropagation","uttaksdatoer","familiehendelsesdato","erFarEllerMedmor","termindato","førsteUttaksdagForeldrepengerFørFødsel","getFørsteUttaksdagForeldrepengerFørFødsel","førsteUttaksdagPåEllerEtterFødsel","Uttaksdagen","denneEllerNeste","førsteMuligeUttaksdagFørTermin","getFørsteMuligeUttaksdag","sisteMuligeUttaksdagEtterTermin","getSisteMuligeUttaksdag","getFørsteUttaksdagPåEllerEtterFødsel","trekkFra","uttaksConstants","andreAugust2022ReglerGjelder","getFørsteUttaksdag2UkerFørFødsel","dayjs","add","subtract","toDate","TidsperiodeFormFields","getDatoavgrensningerForPeriodeUtenKonto","ugyldigeTidsperioder","minDato","fra","maksDato","helgedagerIkkeTillatt","til","standardAvgrensningerForUttakEtterFødsel","getDatoavgrensningerForForeldrepengerFørFødsel","avgrensninger","_objectSpread","uttaksplanDatoavgrensninger","dateToISOString","weekendsNotSelectable","ISOStringToDate","minDate","maxDate","getDatoavgrensningerForEkstrauttakFørTermin","Form","getTypedFormComponents","getDatoAvgrensninger","periode","morHarRett","situasjon","erFarMedmorOgHarAleneomsorg","isUtsettelsesperiode","isUttaksperiodeFarMedmorPgaFødsel","getDatoavgrensningerForFarMedmorPeriodeRundtFødselWLB","getSisteUttaksdag6UkerEtterFødsel","isUttaksperiodeBareFarMedmorHarRett","getDatoavgrensningerForBareFarMedmorHarRettWLB","getDatoavgrensningerForStønadskonto","konto","StønadskontoType","isValidTidsperiode","Tidsperioden","erFørDato","standardAvgrensninger","isUttaksperiode","mapTidsperiodeStringToTidsperiode","førsteMuligeUttaksdag","TidsperiodeForm","utsettelserIPlan","initialMonth","onBekreft","onCancel","FormikWrapper","initialValues","onSubmit","enableReinitialize","renderForm","_ref2","datoAvgrensninger","includeButtons","DateIntervalPicker","legend","fromDatepickerProps","disableWeekend","label","fullscreenOverlay","placeholder","validate","dateRangeValidation","date","errorKey","periodeId","dayPickerProps","toDatepickerProps","fromDate","Knapp","FormattedMessage","RangeIcon","_React$Component","_inherits","_super","_createSuper","_classCallCheck","_createClass","renderPlusIcon","d","fill","renderMinusIcon","render","icon","this","props","focusable","role","width","height","viewBox","stroke","strokeWidth","fillRule","AriaText","children","tagName","tag","delay","minZoomTouchDelta","lastTapAt","lastClientX","lastClientY","preventDoubleTapZoom","event","touches","tapAt","Date","getTime","timeDiff","_event$touches$","clientX","clientY","xDiff","Math","abs","yDiff","target","click","Sirkelknapp","_onClick","ariaLabel","ikon","disabled","_ref$stil","stil","_ref$size","size","posisjoneringFraHøyre","labelId","guid","style","left","onTouchStart","classnames","pressed","StepperKnapp","direction","NumberStepper","min","max","_ref$stepSize","stepSize","legendId","_onChange","onChange","increaseAriaLabel","decreaseAriaLabel","canDecrease","canIncrease","evt","parseInt","UkerDagerTeller","feil","ukeStepper","dagStepper","ukeLegend","dagLegend","ukeLegendId","dagLegendId","SkjemaGruppe","Fieldset","UttakEndreTidsperiodeSpørsmål","onAvbryt","changeTidsperiode","visible","isForeldrepengerFørFødselUttaksperiode","varighetIDager","isSameOrBefore","getAntallUttaksdager","getUkerOgDagerFromDager","uker","dager","getDagValue","Modal","isOpen","closeButton","onRequestClose","contentLabel","handleOnSubmit","nyUker","getTidsperiode","nyDager","ekstraUke","PeriodeUttakFormField","PeriodeUttakFormComponents","MorErForSykDokumentasjonOpplastning","navnMor","vedlegg","Veilederpanel","fargetema","svg","VeilederNormal","transparentBackground","FormikFileUploader","erMorForSykDokumentasjon","attachmentType","AttachmentType","skjemanummer","Skjemanummer","attachments","ErMorForSykSpørsmål","fieldName","erMorForSyk","YesOrNoQuestion","YesOrNo","FlerbarnsdagerSpørsmål","HvemSkalHaUttakSpørsmål","navnPåForeldre","RadioPanelGroup","radios","capitalizeFirstLetter","farMedmor","mor","Forelder","useTwoColumns","hasValue","HvilkenKontoSpørsmål","velgbareStønadskontoer","erOppholdsperiode","navnAnnenForelder","erAleneOmOmsorg","getSpørsmålsTekst","map","getStønadskontoNavn","UttakRundtFødselÅrsak","UttakRundtFødselÅrsakSpørsmål","uttakRundtFødselÅrsak","samtidigUttak","morErForSyk","OverføringsårsakSpørsmål","erEndringssøknad","valgtOverføringsårsak","OverføringÅrsakType","beOmDokumentasjon","getNavnGenitivEierform","prosentValideringSamtidigUttak","samtidigUttakProsent","getFloatFromString","prosentValideringGradering","stillingsprosent","trim","SamtidigUttakSpørsmål","samtidigUttakInfoTekst","erFlerbarnssøknad","navnPåAnnenForelder","samtidigUttakProsentVisible","link","navnFar","NumberInput","maxLength","getArbeidsOptions","arbeidsforhold","aktiveArbeidsforholdIPerioden","getKunArbeidsforholdForValgtTidsperiode","defaultOptions","Arbeidsform","eksisterendeArbeidsforhold","arb","arbeidsgiverNavn","arbeidsgiverId","SkalHaGraderingSpørsmål","graderingsprosentVisible","skalHaGradering","description","UtvidetInformasjon","apneLabel","arbeidsformer","jsonSort","json","sort","o","Array","isArray","isObject","v","toString","reduce","a","k","SubmitListener","cleanup","formik","useFormikContext","isSubmitting","isValidating","submitForm","setValues","cleanedValues","ref","useRef","useEffect","currentValuesJSONString","JSON","stringify","current","valuesEqualLastValues","setTimeout","hvemSkalTaUttakSkalBesvares","erDeltUttakINorge","erSamtidigUttakFarMedmorFørFørsteSeksUkerWLB","erMorForForSykSkalBesvares","periodetype","søkerErFarEllerMedmor","annenForelderKanIkkeOppgis","ønskerFlerbarnsdager","søkerHarMidlertidigOmsorg","bareFarMedmorHarRett","årsakTilUttakRundtFødselSkalBesvares","uttakRundtFødselÅrsakSpørsmålSkalBesvares","isBefore","Periodetype","erInnenFørsteSeksUkerFødselFarMedmor","førsteUttaksdagEtterSeksUker","etterFødsel","graderingSkalBesvares","erFarMedmor","farMedmorSøkerDeFørsteSeksUkeneFørWLBOgMorErIkkeSyk","sisteUttaksdagInnenSeksUkerEtterFødsel","bareFarHarRettSøkerAktivitetsKravKontoDeFørsteSeksUkeneOgMorErIkkeSyk","samtidigUttakSkalBesvares","erUttakInnenFørsteSeksUkerFødselFarMedmor","erUttakFørFødsel","erAleneOmsorg","annenforelderKanIkkeOppgis","erUttakEgenKvoteFarMedmorFørsteSeksUkerUtenFlerbarnsdager","ønskerFlerbarnsdagerSkalBesvares","stønadskontoType","bareFarHarRett","antallBarn","overføringsårsakSkalBesvares","kontoValue","annenForelder","annenForelderHarRettIEØS","harAnnenForelderRettIEØS","getUttakSkjemaregler","formValues","regelProps","stønadskontoer","getUttaksdatoer","førsteUttaksdag","sisteUttaksdagFørFødsel","forrige","sisteMuligeUttaksdag","sisteUttaksdagInnenforSeksUker","førFødsel","neste","aktivitetskravMorSkalBesvares","_aktivitetskravMorSkalBesvares","convertYesOrNoOrUndefinedToBoolean","kanIkkeOppgis","erMorForSykSkalBesvares","_samtidigUttakSkalBesvares","erInnenforFørsteSeksUker","kontoSkalBesvares","_kontoSkalBesvares","_ønskerFlerbarnsdagerSkalBesvares","_hvemSkalTaUttakSkalBesvares","_graderingSkalBesvares","graderingSkalBesvaresPgaWLBUttakRundtFødsel","tidperiode","erFarMedmorSinWLBTidsperiodeRundtFødsel","_graderingSkalBesvaresPgaWLBUttakRundtFødsel","_overføringsårsakSkalBesvares","_uttakRundtFødselÅrsakSpørsmålSkalBesvares","erSamtidigUttakFarMedmorFørFødselWLB","erDeltUttak","sisteUttaksdag6UkerEtterFødsel","skalViseWLBInfoOmSamtidigUttakRundtFødsel","skalViseAktivitetskrav","regler","PeriodeUttakFormConfig","_defineProperty","_PeriodeUttakFormConf","isAnswered","isIncluded","hvemSkalTaUttak","_ref3","_ref4","visibilityFilter","_ref5","_ref6","_ref7","_ref8","skalViseKonto","_ref9","_ref10","_ref11","skalViseFlerbarnsdager","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","skalViseSamtidigUttak","_ref21","_ref22","_ref23","_ref24","_ref25","_ref26","skalViseGradering","overføringsårsak","isSameOrAfter","aktivitetskravMor","_ref27","_ref28","_ref29","_ref30","_ref31","_ref32","_ref33","_ref34","_ref35","_ref36","overføringsdokumentasjon","_ref37","_ref38","_ref39","_ref40","_ref41","aktivitetskravMorDokumentasjon","_ref42","_ref43","_ref44","periodeUttakFormQuestionsConfig","Questions","getInitialValues","forelder","erMorUfør","startdatoPeriode","periodenStarterFørFamdato","getHvemSkalTaUttak","getInitialKonto","getInitialÅrsakForUttakRundtFødsel","ønskerSamtidigUttak","getPeriodeUttakFormInitialValues","morsAktivitetIPerioden","convertBooleanOrUndefinedToYesOrNo","getFrilansSNEllerOrgnr","orgnumre","gradert","isOverføringsperiode","årsak","isOppholdsperiode","getStønadskontoFromOppholdsårsak","includes","getArbeidsform","getOrgnummer","getErArbeidstaker","skalVedleggPåkreves","mapPeriodeUttakFormToPeriode","lagSendSenereDokumentNårIngenAndreFinnes","getOppholdsÅrsakFromStønadskonto","samtidigWLBUttakFørFødselFarMedmor","samtidigWLBUttakFørFørsteSeksUkerFarMedmor","getMorsAktivitetSkjemanummer","relevantVedlegg","velgVedleggSomSkalBrukes","erSamtidigUttak","samtidigUttakProsentInputVerdi","trimNumberValue","samtidigUttakProsentVerdi","getSamtidigUttaksProsentWLB","ønskerGradering","dekningsgrad","parseFloat","forelderVerdi","kontoVerdi","getKontoVerdi","startDato","inputKonto","getMorsAktivitet","erArbeidstaker","harIkkeAktivitetskrav","morsAktivitet","MorsAktivitet","AktivitetskravSpørsmål","vedleggFieldName","aktivitetskravMorValue","aktivitetskravVedlegg","FormComponents","Select","renderOptions","filter","aktivitetsid","getVeilederTekst","listData","listItem","index","_listData","msg","rel","erUttakAvAnnenForeldersKvote","getPeriodeType","periodenGjelder","familiehendelsedato","starterTidsperiodeInnenforToUkerFørFødselTilSeksUkerEtterFødsel","periodenGjelderAnnenForelder","PeriodeUttakForm","handleUpdatePeriode","toggleIsOpen","handleDeletePeriode","setNyPeriodeFormIsVisible","handleAddPeriode","_ref$isNyPeriode","isNyPeriode","setPeriodeErGyldig","_useState2","_slicedToArray","useState","tidsperiodeIsOpen","setTidsperiodeIsOpen","isAnnenForelderOppgitt","harRettPåForeldrepengerIEØS","handleCleanup","visibility","cleanPeriodeUttakFormData","isVisible","getVelgbareStønadskontotyper","startDatoPeriodeRundtFødselFarMedmor","sluttDatoPeriodeRundtFødselFarMedmor","setFieldValue","isValid","getVisbility","fomDato","formaterDatoKompakt","tomDato","htmlType","getSlettPeriodeTekst","areAllQuestionsAnswered","UtsettelseEndreTidsperiodeSpørsmål","PeriodeUtsettelseFormField","PeriodeUtsettelseFormComponents","_initialValues","morsAktivitetIPeriodenDokumentasjon","bekrefterArbeidIPerioden","getFormStateFraVedlegg","gjelderMorsAktivitet","getPeriodeUtsettelseFormInitialValues","isUtsettelsePgaArbeid","getVedleggFraFormState","_toConsumableArray","mapPeriodeUtsettelseFormToPeriode","PeriodeUtsettelseFormConfig","_PeriodeUtsettelseFor","UtsettelseÅrsakType","søkerErFarEllerMedmorOgKunDeHarRett","periodeUtsettelseFormQuestionsConfig","getUtsettelseårsakSkjemanummer","showAttachmentUploader","getAttachmentUploaderLabel","getAttachmentUploaderType","UtsettelseÅrsakSpørsmål","periodenErKunHelligdager","skalViseGamleUtsettelseÅrsaker","tidsperiodenErInnenforFørsteSeksUker","utsettelseårsak","årsakOptions","getUtsettelseÅrsakOptions","option","PeriodeUtsettelseForm","getAntallFridager","førsteOktober2021ReglerGjelder","cleanupPeriodeUtsettelseFormData","Checkbox","textAlign","position","NyPeriode","isUtsettelse","nesteLedigeUttaksdato","setPeriode","Undertittel","ArbeidIkon","xmlnsXlink","rx","FerieIkon","strokeLinecap","strokeLinejoin","SykdomIkon","transform","xlinkHref","mask","TerminIkon","UttakIkon","cx","cy","r","UttaksplanIkonKeys","UttaksplanIkon","Ikon","kind","getAlertStripeTypeFromMessageType","message","getIkonForVeilederMelding","melding","advarsel","VeilederMelding","_ref$skjulMeldingIkon","skjulMeldingIkon","modifier","renderAlert","content","titleIntlKey","contentIntlKey","AlertStripe","VeilederMeldinger","meldinger","UttaksplanColor","getForelderFarge","getStønadskontoFarge","forIkon","harMidlertidigOmsorg","getUtsettelseFarge","IconBox","stripes","StønadskontoIkon","uttak","getIkonForKonto","ferie","arbeid","sykdom","UtsettelseIkon","UttaksplanAdvarselIkon","farge","getVarighetString","antallDager","format","_getUkerOgDagerFromDa","dagerStr","formatMessage","ukerStr","renderDagMnd","visÅr","get","måned3bokstaver","måned","år","PeriodelisteItemHeader","_classNames","varighetString","annenForelderIsMor","annenForelderNavn","beskrivelseSamtidigUttak","egenPeriode","annenForelderSamtidigUttakPeriode","erFpFørTerminUtenUttak","skalIkkeHaUttakFørTermin","isUttakAnnenPart","getForelderNavn","getValidTidsperiode","getPeriodeIkon","isUtsettelseAnnenPart","getPeriodeTittel","PeriodeHull","antallHelligdager","kunHelligdager","kunUttaksdager","nyeRegler","ActionLink","onLeggInnNyPeriode","leggInnNyUtsettelse","PeriodeInfo","getOppholdskontoNavn","getUtsettelseTekst","foreldernavn","erMor","PeriodeUtenUttak","onLeggTilNyPeriode","PeriodeFørFødselFormField","PeriodeFørFødselFormComponents","PeriodeFørFødselFormConfig","_PeriodeFørFødselForm","periodeFørFødselFormQuestionsConfig","getPeriodeFørFødselFormInitialValues","sisteUttaksagFørFødsel","førsteUttaksdag3UkerFørFødsel","PeriodeFørFødselForm","mapPeriodeFørFødselFormToPeriode","_visibility","PeriodelisteItem","_ref$meldinger","isInfoPeriode","visPeriodeIPlan","EkspanderbartpanelBase","apen","m","avvikType","renderPeriodeListeInnhold","isAvslåttPeriode","toggleFocusAndOpen","headerButton","document","getElementById","focus","HjerteIkon","fylt","FamiliehendelsedatoDisplay","barn","getTekst","isAdoptertBarn","formaterDatoUtenDag","isFødtBarn","Periodeliste","uttaksplan","meldingerPerPeriode","barnFraNesteSak","openPeriodeId","setOpenPeriodeId","indexOfFørstePeriodeEtterFødsel","getIndexOfFørstePeriodeEtterFødsel","findIndex","p","erAllePerioderIPlanenFørFødsel","indexOfSistePeriodeFørNyStøndasperiodeNyttBarn","getIndexOfSistePeriodeFørDato","startdatoFørsteStønadsperiode","datoStønadsperiodeNyttBarn","getAnnenForelderSamtidigUttakPeriode","Planlegger","setSlettUttaksplanModalOpen","setResetUttaksplanModalOpen","nyPeriodeFormIsVisible","_useState4","setIsUtsettelse","Periodene","getFørsteUttaksdagEtterSistePeriode","annenForelderErOppgitMenHarIkkeRett","harRettPåForeldrepengerINorge","InfoBlock","Systemtittel","backgroundColor","padding","ForelderIkon","scale","scaledWidth","scaledHeight","getForeldreparIkon","finnAntallDagerÅTrekke","Perioden","periodeErGradert","periodeErSamtidigUttak","getAllePerioderMedUttaksinfoFraUttaksplan","perioder","getUttakFraOppholdsperioder","getUttakFraOverføringsperioder","getUttakFraInfoperioder","getUttakFraAvslåttePerioder","beregnGjenståendeUttaksdager","tilgjengeligeStønadskontoer","beregnDagerBrukt","alleUttakIUttaksplan","uttaksplanPerioder","floor","ceil","beregnBrukteUttaksdager","oppholdsperioder","opphold","overføringer","overføring","oppholdAnnenPart","infotype","PeriodeInfoType","avslåttPeriodeType","kontoType","isMorsPeriode","isFarsPeriode","isFellesperiodeKvote","isMorsKvote","isFarMedmorsKvote","summerBrukteUttaksdager","u","getBrukteDagerForForelder","perioderFørTermin","getPerioderFørFamiliehendelsesdato","perioderEtterTermin","getPerioderEtterFamiliehendelsesdato","førTermin","etterTermin","alle","dagerTotalt","isMor","dagerEgneKvoter","dagerOverført","dagerFellesperiode","dagerAnnenForeldersKvote","getBrukteDager","perioderMedUttak","getUttaksstatus","harKomplettUttaksplan","gjelderDagerBrukt","kontouttak","injectIntl","Kontostatus","kontoErOvertrukket","TilesList","_ref$columns","columns","child","OversiktPerForelder","brukteDagerPerForelder","foreldreparSituasjon","søkerErMor","svgInfo","getSituasjonForelderSvg","Personkort","OversiktPerKvote","uttaksstatus","uttakÅVise","filtrerBortAnnenPartsKonto","uttakskontoer","antall","idx","OversiktKvoter","annenForelderHarRettINorge","søker","useSøkerinfo","søknad","useSøknad","isFarEllerMedmor","søkersituasjon","rolle","getNavnPåForeldre","inneholderUttaksplanPerioderTest","grunnlag","passerer","isPeriodeUtenUttak","isHull","getInformasjonOmTaptUttakVedUttakEtterSeksUkerFarMedmor","morErUfør","søkerErFarEllerMedmorOgAnnenForelderKanIkkeOppgis","søkerErFarEllerMedmorOgErAleneOmOmsorgen","førstePeriode","getFørstePerioderEtterFamiliehendelsesdato","førsteRegistrerteUttaksdag","antallUttaksdager","antallUttaksdagerTapt","getUgyldigUttakMor","flerbarnsFødsel","ugyldigUttakRegelFørsteDato","ugyldigUttakRegelSisteDato","leggTil","førsteUttaksdagEtterÅtteUker","ugyldigPeriode","erPeriodeFørDato","ugyldigeUtsettelser","getUtsettelser","gradertePerioder","getUttak","flernbarnsPerioder","fellesPerioder","samtidigUttaksperioder","erFarsUttakFørsteSeksUkerGyldig","unntak","unntakFarFørsteSeksUker","erMorForSykDeFørsteSeksUker","erFlerbarnsukerOgUttakAvFlerbarnsdagerEllerFedrekvote","harMorSøktUgyldigUttakFørsteSeksUkerTest","ugyldigePerioder","intlKey","stønadskontoInneholderForMyeUttakKunSøkerTest","søkerErAleneOmOmsorg","stønadskontoerMedForMyeUttak","harFarMedmorSøktUgyldigUttakEllerUtsettelseFørsteSeksUkerTest","wlbReglerGjelder","getUgyldigUttakFørsteSeksUkerForFarMedmor","farsPerioderInnenforSeksFørsteUker","ugyldigeUttak","ugyldigeOverføringer","getOverføringer","utsettelse","erPeriodeInnvilget","erUttaksplanBareOppholdTest","uttaksplanErBareOpphold","slutterUttaksplanMedOppholdTest","uttaksplanSlutterMedOpphold","starterUttaksplanMedOppholdTest","uttaksplanStarterMedOpphold","uttaksplanGraderingStørreEnnSamtidigUttak","erUttaksplanGraderingStørreEnnSamtidigUttakTest","tilleggsopplysningerMaxLength","tilleggsopplysningerErGyldig","begrunnelse","maxLengthIsGreaterThanOrEqualToStringLength","erTilleggsopplysningerGyldigTest","begrunnelseForSenEndring","tilleggsopplysninger","begrunnelseTekst","harTilleggsopplysningerGyldigeCharsTest","validateTextHasLegalChars","ugyldigeTegn","getIllegalChars","harUttaksplanForMangeFlerbarnsdagerTest","uttaksplanHarForMangeFlerbarnsdager","inneholderUttaksplanDatoSomIkkeErUttaksdag","_ref$tidsperiode","erUttaksdag","harPerioderManglendeVedleggTest","manglendeVedlegg","findMissingAttachmentsForPerioder","førsteUttaksEllerUttsettelsesPeriode","sorterPerioder","shift","regelTekst","inneholderSenUtsettelsePgaFerieTest","seneUtsettelsePgaFerie","eksisterendeSak","erSenUtsettelsePgaFerieEllerArbeid","inneholderTapteDagerTest","infoOmTaptUttakVedUttakEtterSeksUkerFarMedmor","planInneholderTapteDager","getHull","planInneholderAnnetEnnAktivitetsfriKvote","some","inneholderBareUtsettelserTest","sisteDag","formaterDato","inneholderSenUtsettelsePgaArbeidTest","seneUtsettelserPgaArbeid","RegelAlvorlighet","overskriverEndringerAnnenPartsPerioder","eksisterendeUttaksplan","fornavnAnnenForelder","perioderSomOverlapper","perioderSomSkalSendesInn","finnOverlappendePerioder","perioderSomOverlapperUtenSamtidigUttak","_periode","renderAsHtml","formaterStringKort","forelders","strong","_intl","overlapperPeriodeAndrePerioder","perioderUtenUttakAnnenPart","perioderSomHarOverlapp","getPeriodeForelderNavn","PeriodeValiderRegelKey","getRegelIntlKey","regel","intlRegelPrefix","alvorlighet","alvorlighetSortOrder","_alvorlighetSortOrder","FEIL","ADVARSEL","INFO","sorterAvvik","a1","a2","ensureRegelAvvikIntlKey","overstyresAvFilter","avvik","_idx","alleAvvik","overstyresAvRegel","b2","overstyrerAndreFilter","rb","overstyrerRegler","rbo","isRegelFeil","regelAvvik","getRegelIntlValues","newValues","valueOrFunc","hasValueRule","failText","test","getStillingsprosentRegler","stillingsprosentIsMoreThan0","samtidigUttakProsentIsMax100","stillingsprosentIsLessThan100","gradertUttaksperiodeErUgyldig","erGyldig","allValidatorsPass","validators","runValidators","inputName","tests","valid","results","validator","verdict","erUtfyltTest","erUttaksdagTest","slutterInnenforGyldigPermisjonsperiode","starterInnenforGyldigAntallUkerFørTermin","uttakTidsperiodeErGyldig","uttaksperiode","skalIkkeHaUttak","getUttakTidsperiodeValidatorer","fraDatoErGyldig","tilDatoErGyldig","utsettelseTidsperiodeErGyldig","utsettelesperiode","getUtsettelseTidsperiodeValidatorer","laTilPeriodeEtterFørsteStønadsdagPåfølgendeBarn","førsteUttaksdagForPåfølgendeBarn","uttaksperiodeHarGyldigGradering","harUttaksperiodeGyldigGradering","skjulesIOppsummering","periodeHarGyldigTidsperiode","harPeriodeGyldigTidsperiode","perioderMedUgyldigTidsperiode","starterUttaksperiodeRundtFødselEtter2UkerFørFødsel","gjelderWLBReglerFarMedmorRundtFødsel","perioderFarMedmorSomStarterFør2UkerFørFødsel","isUttaksperiodeFarMedmorMedValgForUttakRundtFødsel","starterTidsperiodeEtter2UkerFørFødsel","førsteUttaksdagToUkerFørFødsel","slutterUttaksperiodeRundtFødselInnen6UkerEtterFødsel","perioderFarMedmorSomIkkeSlutterFør6UkerEtterFødsel","slutterTidsperiodeInnen6UkerEtterFødsel","sisteUttaksdagSeksUkerEtterFødsel","uttaksperiodeHarStønadskonto","harUttaksperiodeStønadskonto","uttaksperioderUtenStønadskonto","periodeDeFørsteSeksUkeneHarUlovligUttakBFHR","perioderDeFørsteSeksUkeneMedUlovligUttakBFHR","erSamtidigUttakGyldig","samtidigUttaksperiodeErUgyldig","erUtsettelseEtterFamiliehendelsesdato","harBekreftet100ProsentArbeidIUtsettelsePgaArbeid","utsettelserPgaArbeidUtenBekreftelse","forSenUttakVedPåfølgendeBarn","familiehendelsesdatoNesteSak","førsteUttaksdagNesteBarnsSak","minsterettUkerToTette","harSøktOmFerieUtenArbeidsforhold","isUtsettelsePgaFerie","inneholderForMyeFerie","ferieUtsettelser","ferieDager","sumFerieDager","ukerOgDager","kanIkkeSlutteMedUtsettelseDersomStønadsdagerErTomme","gjenståendeDager","sistePeriodeErIkkeUtsettelse","resterendeFellesperiode","find","resterendeMødrekvote","resterendeFedrekvote","resterendeForeldrepenger","erUttaksmengdeForFarMedmorForHøy","farEllerMedmor","erUttaksmengdeForFarMedmorForHøyTest","burdeKanskjeSøkeGraderingTest","kunSøkersPerioder","vekslerArbeidOgUttakTest","vekslendeArbeidOgUttakTest","firstArbeidsperiodeIndex","antallPerioderEtterFørsteUtsettelseGrunnetArbeid","veklserPerioderUtenUttakOgUttaktest","vekslendePeriodeUtenUttakOgUttakTest","firstPeriodeUtenUttakIndex","antallPerioderEtterFørstePeriodeUtenUttak","infoTekstKey","ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindatoTest","isUfødtBarn","fraDato","tilDato","inneholderPerioderUtenAktivitetskrav","perioderUtenAktivitetskrav","farMedmorBrukerForeldrepengerMedAktivitetskravRundtFødselOgMorIkkeErSyk","inneholderUtsettelserUtenÅrsak","utsettelserUtenÅrsak","UttaksplanRegelKey","farMedmorHarSøktUgyldigAntallDagerUttakRundtFødselTest","perioderUttakRundtFødsel","getFarMedmorUttakRundtFødsel","antallDagerForMye","overskridelseUttakRundtFødselAntallDager","perioderRundtFødsel","sisteUttak6UkerEtterFødsel","perioderAvkortetTilÅSlutte6UkerEtterFødsel","isAfter","getSumUttaksdagerÅTrekkeIPeriodene","ANTALL_UTTAKSDAGER_FAR_MEDMOR_RUNDT_FØDSEL","slutterEnAvPeriodeneForSent","dagerForMye","harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUkerTest","sisteUttaksdagEtterSeksUker","farMedMorHarRettPåUttakRundtFødselTest","tattUtForMangeDagerIPlanen","dagerIgjenRundtFødsel","førsteUttaksdag2UkerFørFødsel","antallUttaksdagerRundtFødsel","erMerEnn3månederSidenFamiliehendelse","round","getBareFarHarRettFlerbarnsdagerUker","flerbarnsUker","Dekningsgrad","getBareFarHarRettAntallUkerPåÅTaUtDagerUtenAktivitetskravFørWLB","farMedmorHarRettPåForeldrepengerUtenAktivitetskravTest","kontoUtenAktivitetskravUker","getBareFarHarRettKontoUtenAktivitetskravUker","morUførUker","flerbarnsukerSomDelAvMinsterett","testPasserer","antallUker","antallUkerÅTaUtDagerUtenAktivitet","inneholderUttaksperioderMedUbesvartGradering","perioderMedUbesvartGradering","inneholderUttaksperiodeMedUbservartSpmOmFlerbarnsdagerTest","uttaksperioder","perioderMedUbesvartSpmOmFlerbarnsdager","farMedmorHarRettPåFlerbarnsdagerTest","antallUkerÅTaUtFlerbarnsdager","overstigerMinsterettVedToTette","perioderEtterFørsteStønadsperiodeNyttBarn","perioderFørFørsteStønadsperiodeNyttBarn","minsterettMaxAntallUker","minsterettMaxAntallDager","brukteDagerPerForelderFørFørsteStønadsdagNyttBarn","dagerIgjenÅBrukePåMinsteretten","brukteDagerPerForelderEtterFørsteStønadsdagNyttBarn","dagerIgjenAvMinsterett","forMyeUttak","harPerioderEtterFørsteStønadsdagNesteBarnDerToTette","tekstKey","uttaksplanRegler","familiehendelsesDato","uttaksplanValideringRegler","planenInneholderIngenPerioder","stønadskontoInneholderForMyeUttakKunSøker","morHarSøktUgyldigUttakFørsteSeksUker","farMedmorHarSøktUgyldigUttakEllerUtsettelseFørsteSeksUker","farMedmorHarSøktUgyldigAntallDagerUttakRundtFødsel","harMorSøktMindreEnn100ProsentSamtidigUttakDeFørsteSeksUker","uttaksmengdeForFarMedmorErForHøy","begrunnelseVedForSenEndringErUgyldig","begrunnelseVedForSenEndringHarUgyldigeChars","uttaksplanInneholderDatoSomIkkeErUttaksdag","perioderManglerVedlegg","slåsSammenVedOppsummering","inneholderSenUtsettelsePgaFerie","inneholderSenUtsettelsePgaArbeid","farMedMorHarRettPåUttakRundtFødsel","skjulesIPeriode","farMedmorHarRettPåForeldrepengerUtenAktivitetskrav","farMedmorHarRettPåFlerbarnsdager","inneholderTapteDager","inneholderBareUtsettelser","endringerOverskriverAnnenPartsPerioder","periodeOverlapperAndrePerioder","burdeKanskjeSøkeGradering","ferieEllerArbeidInnenforDeFørsteÅtteUkeneEtterTermindato","periodevalideringsregler","sjekkUttaksplanOppMotRegler","valideringsgrunnlag","resultat","regelPasserer","regelHarAvvik","mapInfoToRegelAvvik","validerUttaksplan","søknadsinfo","getRegelAvvik","flatten","avvikPerPeriode","groupBy","harFeil","hasRegelFeil","VeilederInfo","messages","_ref$kompakt","kompakt","_ref$paneltype","paneltype","_ref$veilederStil","veilederStil","ariaTittel","harAdvarsler","Veileder","getUttaksplanVeilederinfo","grupperAvvik","trimRelaterteRegelAvvik","uniqBy","mapAvvikTilMessage","tittelIntlKey","harTittel","intlHasKey","formatContentAsHTML","getLabel","margin","OppgiTilleggsopplysninger","_this","_assertThisInitialized","onBegrunnelseTekstChange","setState","throttledOnChange","throttle","Textarea","handleBegrunnelseChange","SlettUttaksplanModal","onClose","handleSlettUttaksplanModalBekreft","innhold1Id","innhold2Id","slettPeriode","slettetPeriode","harAktivitetskravIPeriodeUtenUttak","erAdopsjon","res","getPeriodeHullEllerPeriodeUtenUttak","leggTilPeriodeOgBuild","bevegeligePerioder","fastePerioder","nyPeriode","annenPartsUttak","nyePerioder","slåSammenLikePerioder","leggTilPeriode","fastPeriode","finnOgSettInnHull","settInnAnnenPartsUttak","oppdaterPeriodeOgBuild","endretPeriode","originalPeriode","oppdatertePerioder","fjernUnødvendigeHull","oppdaterPeriode","perioderSlettetEndretPeriode","slettPeriodeOgBuild","getFastePerioder","starterUttaksperiodeFørFødsel","getBevegeligePerioder","getAnnenPartsUttak","Uttaksplanbuilder","opprinneligPlan","perioderUtenAnnenPart","leggTilPerioder","nyAnnenPartsUttak","nyFastePerioder","nyBevegeligePerioder","oppdaterPerioder","UttaksplanFormField","UttaksplanFormComponents","getUttaksplanFormInitialValues","ønskerAutomatiskJustering","AutomatiskJusteringForm","perioderMedUttakRundtFødsel","uttaksdagPåEllerEtterTermin","infoTekstId","brukerSvarteJaPåAutoJustering","isSame","handleOnChange","ønskerJustertUttakVedFødsel","mapUttaksplanFormValueToState","paddingTop","paddingBottom","afterOnChange","ResetUttaksplanModal","handleResetUttaksplanModalBekreft","Uttaksplan","foreldreSituasjon","handleOnPlanChange","setUttaksplanErGyldig","handleSlettUttaksplan","handleResetUttaksplan","visAutomatiskJusteringForm","familiehendelsesdatoDate","periodeErGyldig","slettUttaksplanModalOpen","_useState6","resetUttaksplanModalOpen","getHarAktivitetskravIPeriodeUtenUttak","uttaksplanUtenAnnenPartsSamtidigUttak","toTetteReglerGjelder","getToTetteReglerGjelder","builder","årsakTilSenEndring","getSeneEndringerSomKreverBegrunnelse","uttaksplanValidering","uttaksplanVeilederInfo","getPeriodelisteMeldinger","veilederinfo","InfoOmSøknaden","erIUttaksplanenSteg","oppdatertPeriode","farMedmorsTidsperiodeSkalSplittesPåFamiliehendelsesdato","splittUttaksperiodePåFamiliehendelsesdato","tidperiodeOverlapperDato","_perioder","splittPeriodePåDato","_perioder2","SenEndringÅrsak","handleBegrunnelseTekstChange","handleSlettUttaksplanModalClose","handleResetUttaksplanModalClose","useDebounce","debouncedValue","setDebouncedValue","handler","clearTimeout","VilDuGåTilbakeModal","setIsOpen","navigate","useNavigate","ModalWrapper","SøknadRoutes","getKanPeriodenRundtFødselJusteres","periodeRundtFødsel","UttaksplanFormConfig","includeAutomatiskJusteringSpørsmål","UttaksplanStep","gåTilbakeIsOpen","setGåTilbakeIsOpen","uttaksplanErGyldig","submitIsClicked","setSubmitIsClicked","_useState8","endringstidspunkt","setEndringstidspunkt","_useState10","setPerioderSomSkalSendesInn","nextRoute","uttaksplanInfo","harUttaksplanBlittSlettet","annenPartsUttakErLagtTilIPlan","debouncedState","annenForelderKjønn","getKjønnFromFnr","morErAleneOmOmsorg","getMorErAleneOmOmsorg","farMedmorErAleneOmOmsorg","getFarMedmorErAleneOmOmsorg","forelderVedAleneomsorg","getFamiliehendelsedato","getErMorUfør","getMorHarRettPåForeldrepengerINorgeEllerEØS","morsSisteDag","getMorsSisteDag","getTermindato","annenForelderFnr","utenlandskFnr","annenForelderFnrNesteSak","førsteBarnFraNesteSakFnr","familieHendelseDatoNesteSak","barnFnr","eksisterendeSakAnnenPartRequestIsSuspended","useSaveLoadedRoute","_Api$useGetAnnenParts","eksisterendeSakAnnenPartData","eksisterendeSakAnnenPartError","eksisterendeSakAnnenPartRequestStatus","eksisterendeVedtakAnnenPart","useMemo","mapAnnenPartsEksisterendeSakFromDTO","saksgrunnlagsTermindato","getTermindatoSomSkalBrukesFraSaksgrunnlagBeggeParter","saksgrunnlagsAntallBarn","getAntallBarnSomSkalBrukesFraSaksgrunnlagBeggeParter","søknadMedOppdatertAntallBarn","nesteBarnsSakAnnenPartRequestIsSuspended","RequestStatus","_Api$useGetAnnenParts2","nesteSakAnnenPartData","nesteSakAnnenPartError","nesteSakAnnenPartRequestStatus","førsteUttaksdagAnnenPart","getStartdatoFørstePeriodeAnnenPart","oppdatertBarnNesteSak","overlappendePerioderAnnenPart","uttaksplanMedAnnenPart","eksisterendeSakMedAnnenPartsPlan","ekstraInformasjon","opplysninger","periodeAngittAvAnnenPart","angittAvAnnenPart","tidspunktForEndring","perioderForÅSendeInn","getPerioderSomSkalSendesInn","_useOnValidSubmit","useOnValidSubmit","onValidSubmitHandler","cleanedTilleggsopplysninger","cleanupInvisibleCharsFromTilleggsopplysninger","storeAppState","handleSubmit","getPerioderMedUttakRundtFødsel","getVisAutomatiskJusteringForm","kanJustereAutomatiskVedFødsel","getKanJustereAutomatiskVedFødsel","BarnType","clickHandler","erTomEndringssøknad","setØnskerJustertUttakVedFødselTilUndefinedHvisUgyldig","ønskerJustertUttakVedFødselErBesvart","ønskerAutomatiskJusteringSvar","onAvbrytSøknad","useAvbrytSøknad","onFortsettSøknadSenere","useFortsettSøknadSenere","getForeldreparSituasjon","kjønn","kontoRequestIsSuspended","_Api$useGetUttakskont","getStønadskontoParams","stønadskontoer100","tilgjengeligeStønadskontoerData","tilgjengeligeStønadskontoerError","stønadskontoer80","nyPlan","getEndringstidspunkt","sendErrorMessageToSentry","NavFrontendSpinner","getValgtStønadskontoFor80Og100Prosent","getAntallUkerMinsterett","minsteretter","toTette","valgteStønadskontoer","slettetPlanUtenomFpFørFødsel","isUttakAvForeldrepengerFørFødsel","innerRef","uttaksplanQuestionsConfig","Step","bannerTitle","backLinkHref","getPreviousStepHref","backLinkOnClick","_href","activeStepId","pageTitle","stepTitle","onContinueLater","steps","stepConfig","getAktiveArbeidsforhold","textAlignCenter","spinner","isAvailable","route","harGodkjentVilkår","uttaksplanInneholderPerioderUtenKonto","ForeldrepengesøknadRoutes","onChangeLocale","currentRoute","useLocation","erMyndig","isFirstTimeLoadingApp","setIsFirstTimeLoadingApp","pathname","Routes","Route","path","Velkommen","saker","renderSøknadRoutes","søkerErMyndig","Oppsummering","SøknadSendt","Søkersituasjon","OmBarnet","AnnenForelder","UttaksplanInfo","Utenlandsopphold","Inntektsinformasjon","Navigate","to","shouldApplyStorage","storedState","isEndringssøknadRoute","version","Foreldrepengesøknad","_Api$useSøkerinfo","søkerinfoData","søkerinfoError","_Api$useGetSaker","sakerData","sakerError","storageData","mapSøkerinfoDTOToSøkerinfo","foreldrepenger","BrowserRouter","renderSpinner","ErrorBoundary","hasError","componentDidCatch","errorInfo","Sentry","scope","setExtras","_this$state$error","feilPgaForMangeVedlegg","FOR_MANGE_VEDLEGG_ERROR","feilsideTittel","localeFromSessionStorage","getLocaleFromSessionStorage","AppContainer","setLocale","ForeldrepengesøknadContextProvider","IntlProvider","ByttBrowserModal","activeLocale","setLocaleInSessionStorage","component","VisApp","Template","apiMock","MockAdapter","AxiosInstance","onGet","reply","annenPartVedtak","storageKvittering","onPost","onDelete","bind","__namedExportsOrder","DinePlikter","shouldChangeBrowser","browserInfo","detect","ByttBrowserModalImpl","skalEndreNettleser","_React$useState2","cls","AdvarselIkon","DinePersonopplysningerModal","Ingress","isDinePersonopplysningerModalOpen","setDinePersonopplysningerModalOpen","registrerteBarn","selectableBarn","getSelectableBarnOptions","sortedSelectableBarn","sorterSelectableBarnEtterYngst","valgteBarn","SelectableBarnOptions","sb","vilSøkeOmEndring","kanSøkeOmEndring","valgtEksisterendeSak","sak","_valgteBarn$sak","saksnummer","actionsToDispatch","harForståttRettigheterOgPlikter","getBarnFraNesteSak","endringssøknad","nySøknadPåAlleredeSøktBarn","nySøknadPåValgteRegistrerteBarn","mapSøkerensEksisterendeSakFromDTO","_søknad","opprettSøknadFraEksisterendeSak","annenPart","_søknad2","opprettSøknadFraValgteBarnMedSak","_søknad3","opprettSøknadFraValgteBarn","VelkommenFormComponents","getInitialVelkommenValues","velkommenFormQuestions","valgtBarnId","valgtBarn","knapptekst","l","VelkommenFormField","BarnVelger","validateHarForståttRettigheterOgPlikter","SøkersituasjonFormField","initialSøkersituasjonValues","_initialSøkersituasjo","getInitialSøkerSituasjonValues","stateValues","SøkersituasjonFormComponents","VelgRolle","SøkersituasjonFormConfig","_SøkersituasjonFormCo","søkerKjønn","mapSøkersituasjonFormDataToState","formData","søkersituasjonQuestionsConfig","allQuestionsAnswered","UtenlandsoppholdFieldNames","initialUtenlandsoppholdFormData","_initialUtenlandsopph","harBoddINorgeSiste12Mnd","utenlandsoppholdSiste12Mnd","skalBoINorgeNeste12Mnd","utenlandsoppholdNeste12Mnd","UtenlandsoppholdFormComponents","BostedUtlandFormFields","UtenlandsoppholdFormConfig","_UtenlandsoppholdForm","isOptional","utenlandsoppholdFormQuestions","mapBostedToFormValues","bosted","landkode","BostedUtlandForm","erFremtidigOpphold","onFormikSubmit","updatedBosted","isValidBostedUtland","CountrySelect","country","validateRequiredField","useAlpha3Code","BostedUtlandList","bosteder","onEdit","ItemList","getItemId","getItemTitle","getCountryName","labelRenderer","renderBostedUtlandLabel","formatDateExtended","items","BostedUtlandListAndDialog","labels","FormikModalFormAndList","dialogWidth","sortFunc","sortItemsByFom","formRenderer","item","listRenderer","BostedUtlandListe","mapUtenlandsoppholdTilBostedUtland","land","getInitialUtenlandsoppholdValuesFromState","init","iNorgeSiste12Mnd","iNorgeNeste12Mnd","senereOpphold","tidligereOpphold","mapBostedUtlandToUtenlandsopphold","bostedUtland","validateUtenlandsoppholdNeste12Mnd","utenlandsopphold","dateRanges","from","dateRangesCollide","dateRangesExceedsRange","date1YearFromNow","validateUtenlandsoppholdSiste12Mnd","date1YearAgo","informasjonOmUtenlandsopphold","mapUtenlandsoppholdFormDataToState","includeValidationSummary","yes","no","validateYesOrNoIsAnswered","dateToday","addLabel","modalTitle"],"sourceRoot":""}