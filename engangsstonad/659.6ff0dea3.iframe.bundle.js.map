{"version":3,"file":"659.6ff0dea3.iframe.bundle.js","mappings":"0lEAIA,IAAMA,4BAAgGC,gBAAAC,sBAAG,CAAC,EACrGC,0BAAAA,GAAAA,8BAA2D,CACxDC,WAAY,SAAAA,WAAAC,MAAgC,OAAAA,KAA7BC,gCAAsEC,yBAAAA,GAAAA,UAAkB,EACvGC,WAAY,SAAAA,aAAA,OAAM,CAAI,EACtBC,iBAAkB,SAAAA,iBAAAC,OAA+B,OAAAA,MAA5BC,+BAAoEJ,yBAAAA,GAAAA,UAAkB,IAC9GN,gBAAAC,sBACAC,0BAAAA,GAAAA,2BAAwD,CACrDC,WAAY,SAAAA,WAAAQ,OAA6B,OAAAA,MAA1BC,2BAA4DC,OAAS,CAAC,EACrFC,WAAY,SAAAA,aAAA,OAAM,CAAI,EACtBP,WAAY,SAAAA,WAAAQ,OAAgC,OAAAA,MAA7BV,gCAAsEC,yBAAAA,GAAAA,GAAW,IACnGN,gBAAAC,sBACAC,0BAAAA,GAAAA,6BAA0D,CACvDC,WAAY,SAAAA,WAAAa,OAA+B,OAAAA,MAA5BN,+BAAoEJ,yBAAAA,GAAAA,UAAkB,EACrGC,WAAY,SAAAA,aAAA,OAAM,CAAI,IACzBP,gBAAAC,sBACAC,0BAAAA,GAAAA,2BAAwD,CACrDC,WAAY,SAAAA,WAAAc,OAA6B,OAAAA,MAA1BC,2BAA4DL,OAAS,CAAC,EACrFC,WAAY,SAAAA,aAAA,OAAM,CAAI,EACtBP,WAAY,SAAAA,WAAAY,OAA+B,OAAAA,MAA5BT,+BAAoEJ,yBAAAA,GAAAA,GAAW,IACjGL,uBAGQmB,+BAAgCC,EAAAA,+BAAAA,IACzCtB,4B,qhBCdJuB,oBAAAA,OAAaC,qBAEb,IAIMC,oBAAsB,SAAtBA,oBACFC,KACAC,KACAC,QACAC,QACAC,WAEA,YAAaC,IAATJ,KACIG,WACOE,EAAAA,IAAAA,WAAUN,KAAM,4CAGpBM,EAAAA,IAAAA,WAAUN,KAAM,2CAhBL,SAApBO,kBAAqBN,KAAYC,QAAeC,SAClD,OAAON,oBAAMI,MAAMH,UAAUI,QAASC,QAAS,MAAO,KAC1D,CAiBSI,CAAkBN,KAAMC,QAASC,cAAtC,GACWG,EAAAA,IAAAA,WAAUN,KAAM,mCAAoC,CACvDQ,KAAKC,EAAAA,IAAAA,oBAAmBP,SACxBQ,KAAKD,EAAAA,IAAAA,oBAAmBN,UAKpC,EAwBaQ,mCAXU,SAAjBC,eAAkBZ,KAAiBC,KAAwBC,QAAeC,QAAeU,UAC3F,IAAMC,MAAQf,oBAAoBC,KAAMC,KAAMC,QAASC,SAAS,GAChE,YAAcE,IAAVS,MACOA,MAEPD,UAAYhB,oBAAMI,MAAMc,SAASF,SAAU,QACpCP,EAAAA,IAAAA,WAAUN,KAAM,sDAD3B,CAIJ,EAEaW,qCAtBY,SAAnBK,iBAAoBhB,KAAiBC,KAAwBC,QAAeC,QAAec,QAC7F,IAAMH,MAAQf,oBAAoBC,KAAMC,KAAMC,QAASC,SAAS,GAChE,YAAcE,IAAVS,MACOA,MAEPG,QAAUpB,oBAAMI,MAAMiB,QAAQD,OAAQ,QAC/BX,EAAAA,IAAAA,WAAUN,KAAM,oDAD3B,CAIJ,E,q6DC5CO,IAuBFmB,wBAAsB,SAAtBA,wBAAAA,uBAAsB,UAAtBA,uBAAsB,UAAtBA,uBAAsB,qBAAtBA,yBAAAA,uBAAsB,KAY3B,IAAMC,MAAOC,EAAAA,yBAAAA,MAEPC,sBAAwB,SAAxBA,sBAAyBC,QAC3B,MAAO,CACHf,IAAKe,OAAOf,IACZE,IAAKa,OAAOb,IACZc,SAAUD,OAAOC,SAEzB,EA+GA,iDA7GyD,SAAnDC,iBAAgD9C,MAOhD,IANFwB,QAAOxB,KAAPwB,QACAD,QAAOvB,KAAPuB,QACAqB,OAAM5C,KAAN4C,OACAG,SAAQ/C,KAAR+C,SACAC,SAAQhD,KAARgD,SACAC,mBAAkBjD,KAAlBiD,mBAEM5B,MAAO6B,EAAAA,QAAAA,KAeb,OACIC,MAAAA,cAACV,KAAKW,cAAa,CACfC,cAAeT,OAASD,sBAAsBC,QAAU,CAAC,EACzDG,SAjBe,SAAjBO,eAAkBC,YACpB,IAAMC,cAAoCC,cAAAA,cAAA,GACnCb,QAAM,IACTf,IAAK0B,WAAW1B,IAChBE,IAAKwB,WAAWxB,IAChBc,SAAUU,WAAWV,WAEzB,IC/D2B,SAAtBa,oBAAuBd,QAChC,IAAQf,IAAuBe,OAAvBf,IAAKgB,SAAkBD,OAAlBC,SAAUd,IAAQa,OAARb,IACvB,YAAeL,IAARG,UAAkCH,IAAbmB,eAAkCnB,IAARK,GAC1D,CD4DY2B,CAAoBF,eAGpB,MAAM,IAAIG,MAAM,uEAFhBZ,SAASS,cAIjB,EAMQI,WAAY,SAAAA,WAAAvD,OAAgB,IAAbwD,OAAMxD,MAANwD,OACX,OACIV,MAAAA,cAACV,KAAKA,KAAI,CAACO,UACPG,MAAAA,cAACW,QAAAA,EAAO,CAACC,KAAK,UACVZ,MAAAA,cAACa,QAAAA,EAAgB,CAACC,GAAI,qDAE1Bd,MAAAA,cAACe,IAAAA,MAAK,KACFf,MAAAA,cAACV,KAAK0B,mBAAkB,CACpBC,QAAQC,EAAAA,UAAAA,GAAWhD,KAAM,oDACzBiD,oBAAqB,CACjBC,KAAM/B,uBAAuBX,IAC7B2C,OAAOH,EAAAA,UAAAA,GAAWhD,KAAM,qDACxBoD,mBAAmB,EACnBC,YAAa,aACbnD,QACAoD,mBAAoB,0CACpBnD,SAASoD,EAAAA,yBAAAA,IAAgBf,OAAO9B,MAAQP,QACxCqD,SAAU,SAAAA,SAACC,OAAK,OACZ9C,qCACIX,MACAuD,EAAAA,yBAAAA,IAAgBE,OAChBvD,QACAC,SACAoD,EAAAA,yBAAAA,IAAgBf,OAAO9B,KAC1B,GAETgD,kBAAmB,CACfR,KAAM/B,uBAAuBT,IAC7ByC,OAAOH,EAAAA,UAAAA,GAAWhD,KAAM,qDACxBoD,mBAAmB,EACnBC,YAAa,aACbnD,SAASqD,EAAAA,yBAAAA,IAAgBf,OAAOhC,MAAQN,QACxCC,QACAmD,mBAAoB,0CACpBE,SAAU,SAAAA,SAACC,OAAK,OACZ9C,mCACIX,MACAuD,EAAAA,yBAAAA,IAAgBE,OAChBvD,QACAC,SACAoD,EAAAA,yBAAAA,IAAgBf,OAAOhC,KAC1B,MAIjBsB,MAAAA,cAACe,IAAAA,MAAK,CAACc,OAAO,MACV7B,MAAAA,cAACV,KAAKwC,cAAa,CACfV,KAAM/B,uBAAuBK,SAC7B2B,MACIvB,oBACMoB,EAAAA,UAAAA,GACIhD,KACA,2EAEJgD,EAAAA,UAAAA,GACIhD,KACA,2EAGdwD,SAAU,SAAAA,SAACK,SACP,GAAgB,KAAZA,UAAmBA,QACnB,OAAOjC,oBACDtB,EAAAA,IAAAA,WACIN,KACA,kEAEJM,EAAAA,IAAAA,WACIN,KACA,gEAGlB,EACA8D,eAAe,KAKnC,GAGZ,EEjJA,IAAMC,KAAMC,EAAAA,IAAAA,UAAS,oBAgCrB,iDA9ByD,SAAnDC,iBAAgDtF,MAAuC,IAAjCuF,SAAQvF,KAARuF,SAAUC,SAAQxF,KAARwF,SAAUC,OAAMzF,KAANyF,OACtEpE,MAAO6B,EAAAA,QAAAA,KAiBb,OACIC,MAAAA,cAACuC,IAAAA,SAAQ,CACLC,UAAW,SAAAA,UAACC,SAAqB,OAAKA,QAAQ3B,EAAE,EAChD4B,aAAc,SAAAA,aAACD,SAAqB,OAAKE,EAAAA,yBAAAA,IAAeF,QAAQ/C,SAAUxB,KAAK0E,OAAO,EACtFP,SACAC,OACAO,cAtBwB,SAA1BC,wBAA2BL,SAC7B,IAAMM,MAAOJ,EAAAA,yBAAAA,IAAeF,QAAQ/C,SAAUxB,KAAK0E,QACnD,OACI5C,MAAAA,cAAA,OAAKgD,UAAWf,IAAIgB,QAAQ,UACxBjD,MAAAA,cAAA,QAAMgD,UAAWf,IAAIgB,QAAQ,SACxBX,QAAUtC,MAAAA,cAACkD,IAAAA,WAAU,CAACC,QAAS,SAAAA,UAAA,OAAMb,OAAOG,QAAQ,GAAGM,OACtDT,QAAUtC,MAAAA,cAAA,YAAO+C,OAEvB/C,MAAAA,cAAA,QAAMgD,UAAWf,IAAIgB,QAAQ,UACxBtE,EAAAA,IAAAA,oBAAmBZ,oBAAM0E,QAAQ/D,KAAKS,UAAU,KAAG,KACnDR,EAAAA,IAAAA,oBAAmBZ,oBAAM0E,QAAQ7D,KAAKO,WAIvD,EASQiE,MAAOhB,UAGnB,ECGA,0DAjCA,SAASiB,0BAAyBxG,MAOZ,IANlBuE,KAAIvE,KAAJuE,KACAhD,QAAOvB,KAAPuB,QACAC,QAAOxB,KAAPwB,QACAqD,SAAQ7E,KAAR6E,SACA4B,OAAMzG,KAANyG,OACAxD,mBAAkBjD,KAAlBiD,mBAEA,OACIE,MAAAA,cAACuD,yBAAAA,GAAsB,CACnBnC,KACAkC,OACA5B,SACA8B,YAAY,SACZC,SAAUC,IAAAA,eACVC,aAAc,SAAAA,aAAAzG,OAAA,IAAG0C,SAAQ1C,MAAR0C,SAAUC,SAAQ3C,MAAR2C,SAAU+D,KAAI1G,MAAJ0G,KAAI,OACrC5D,MAAAA,cAACL,2CAAgB,CACbF,OAAQmE,KACRxF,QACAC,QACAuB,SACAC,SACAC,oBACF,EAEN+D,aAAc,SAAAA,aAAAzG,OAAA,IAAGgG,MAAKhG,MAALgG,MAAOd,OAAMlF,MAANkF,OAAQD,SAAQjF,MAARiF,SAAQ,OACpCrC,MAAAA,cAAC8D,2CAAiB,CAAC1B,SAAUgB,MAAOd,OAAgBD,UAAsB,EAE9E0B,2BAA2B,GAGvC,EC5CO,I,wjBC0MP,wCAxKkD,SAA5CC,mBACF,IAAM9F,MAAO6B,EAAAA,QAAAA,KACPkC,KAAMC,EAAAA,IAAAA,UAAS,oBACf+B,UAAWC,EAAAA,KAAAA,MAEjBC,uBAA4BC,EAAAA,wBAAAA,KAApBC,MAAKF,sBAALE,MAAOC,SAAQH,sBAARG,SACTpE,cAAgBmE,MAAME,OAAOC,kBAEnCC,EAAAA,UAAAA,GAAkB,cAAe,CAC7BC,IAAK,kBACLC,KAAM,iBACNC,QAASC,SAAAA,EAAAA,mBAeb,OACI7E,MAAAA,cAAC8E,0BAAAA,GAAAA,cAA4C,CACzC5E,cACAN,SAAU,SAAAA,SAACc,QAAM,OAfH,SAAhBqE,cAAiBrE,QACnB4D,SACIU,cAAAA,EAAAA,oBAAkC,CAC9B7H,6BAA8BuD,OAAOvD,6BACrCL,8BAA+B4D,OAAO5D,8BACtCa,2BAA4B+C,OAAO/C,4BAA8B,GACjEN,2BAA4BqD,OAAOrD,4BAA8B,MAGzE4G,SAAS,uBACb,CAK8Bc,CAAcrE,OAAO,EAC3CD,WAAY,SAAAA,WAAA5D,MAA4B,IAAjBuD,WAAUvD,KAAlB6D,OAELuE,WAAapH,8BAA8BqH,aAAa9E,YACxD+E,qBAAuBF,WAAWG,0BACxC,OACIpF,MAAAA,cAACqF,IAAAA,KAAI,CACDC,aAAapE,EAAAA,UAAAA,GAAWhD,KAAM,sBAC9BqH,aAAa,mBACbC,WAAWtE,EAAAA,UAAAA,GAAWhD,KAAM,2BAC5BuH,WAAWvE,EAAAA,UAAAA,GAAWhD,KAAM,2BAC5BwH,cAAcC,EAAAA,WAAAA,GAAoB,oBAClC9F,SAAU,SAAAA,WAAA,OAAM+F,EAAAA,WAAAA,GAAetB,SAAUL,SAAS,EAClD4B,MAAOC,WAAAA,EACPC,SAAS,GAET/F,MAAAA,cAAC8E,0BAAAA,GAAAA,KAAmC,CAChCkB,gBAAgB,EAChBC,0BAA0B,EAC1BC,QAAS,SAAAA,QAACxF,QAAM,ODlFD,SAA9ByF,4BAA+B/F,YACxC,IACItD,8BAIAsD,WAJAtD,8BACAK,6BAGAiD,WAHAjD,6BACAQ,2BAEAyC,WAFAzC,2BACAN,2BACA+C,WADA/C,2BAGJ,MAAO,CACHP,8BACAK,6BACAQ,2BAA4BR,+BAAiCJ,yBAAAA,GAAAA,IAAcY,2BAA6B,GACxGN,2BAA4BP,gCAAkCC,yBAAAA,GAAAA,IAAcM,2BAA6B,GAEjH,CCoEiD8I,CAA4BzF,OAAO,EACxD0F,yBACIjB,0BACM5G,EACA,kBACIyB,MAAAA,cAACqG,yBAAAA,GAAuB,MACnB7H,EAAAA,IAAAA,WAAUN,KAAM,oCACK,GAIxC8B,MAAAA,cAAA,OAAKgD,UAAWf,IAAIqE,OACfrB,WAAWsB,UAAU5J,0BAAAA,GAAAA,+BAClBqD,MAAAA,cAACe,IAAAA,MAAK,CAACyF,UAAU,KACbxG,MAAAA,cAAC8E,0BAAAA,GAAAA,gBAA8C,CAC3C7D,QAAQzC,EAAAA,IAAAA,WAAUN,KAAM,4CACxBkD,KAAMzE,0BAAAA,GAAAA,6BACN2G,OAAQ,CACJmD,IAAIjI,EAAAA,IAAAA,WACAN,KACA,mEAEJwI,KAAKlI,EAAAA,IAAAA,WACDN,KACA,uEAGRwD,SAAUiF,IAAAA,4BAEd3G,MAAAA,cAAC4G,IAAAA,mBAAkB,CACfC,WAAWrI,EAAAA,IAAAA,WACPN,KACA,wDAGHM,EAAAA,IAAAA,WAAUN,KAAM,6CAEpB+G,WAAWsB,UACR5J,0BAAAA,GAAAA,6BAEAqD,MAAAA,cAACe,IAAAA,MAAK,CAACyF,UAAU,KACbxG,MAAAA,cAACqD,oDAAyB,CACtBjC,KAAMzE,0BAAAA,GAAAA,2BACNyB,QAAS0I,IAAAA,UACTzI,QAAS0I,IAAAA,iBACTzD,OAAQ,CACJ0D,UAAUxI,EAAAA,IAAAA,WAAUN,KAAM,sCAC1B+I,WAAY,qCAEhBnH,oBAAoB,EACpB4B,SAAU,SAAAA,SAACC,OAAqB,ONhElC,SAArCuF,mCAAsC1C,iBAAkCtG,MACjF,GAAgC,IAA5BsG,iBAAiBlH,OACjB,OAAOkB,EAAAA,IAAAA,WAAUN,KAAM,kEAG3B,IAAMiJ,WAAa3C,iBAAiB4C,KAAI,SAACC,GAAC,MAAM,CAAEC,KAAMvJ,oBAAMsJ,EAAE3I,KAAKS,SAAUoI,GAAIxJ,oBAAMsJ,EAAEzI,KAAKO,SAAU,IAE1G,OAAIqI,EAAAA,IAAAA,mBAAkBL,aACX3I,EAAAA,IAAAA,WAAUN,KAAM,8CAEvBuJ,EAAAA,IAAAA,wBAAuBN,WAAY,CAAEG,KAAM,IAAII,KAAQH,GAAIR,IAAAA,oBACpDvI,EAAAA,IAAAA,WAAUN,KAAM,uDAD3B,CAIJ,CMmDwDgJ,CAAmCvF,MAAOzD,KAAK,MAQtE+G,WAAWsB,UAAU5J,0BAAAA,GAAAA,gCAClBqD,MAAAA,cAACe,IAAAA,MAAK,CAACc,OAAO,MACV7B,MAAAA,cAAC8E,0BAAAA,GAAAA,gBAA8C,CAC3C7D,QAAQzC,EAAAA,IAAAA,WAAUN,KAAM,4CACxBkD,KAAMzE,0BAAAA,GAAAA,8BACN2G,OAAQ,CACJmD,IAAIjI,EAAAA,IAAAA,WACAN,KACA,mEAEJwI,KAAKlI,EAAAA,IAAAA,WACDN,KACA,uEAGRwD,SAAUiF,IAAAA,4BAEd3G,MAAAA,cAAC4G,IAAAA,mBAAkB,CACfC,WAAWrI,EAAAA,IAAAA,WACPN,KACA,wDAGHM,EAAAA,IAAAA,WAAUN,KAAM,6CAEpB+G,WAAWsB,UACR5J,0BAAAA,GAAAA,6BAEAqD,MAAAA,cAACe,IAAAA,MAAK,CAACyF,UAAU,MACbxG,MAAAA,cAACqD,oDAAyB,CACtBjF,QAASuJ,IAAAA,aACTtJ,QAASyI,IAAAA,UACT1F,KAAMzE,0BAAAA,GAAAA,2BACN2G,OAAQ,CACJ0D,UAAUxI,EAAAA,IAAAA,WAAUN,KAAM,sCAC1B+I,WAAY,qCAEhBnH,oBAAoB,EACpB4B,SAAU,SAAAA,SAACC,OAAqB,ON/FlC,SAArCiG,mCAAsCpD,iBAAkCtG,MACjF,GAAgC,IAA5BsG,iBAAiBlH,OACjB,OAAOkB,EAAAA,IAAAA,WAAUN,KAAM,kEAG3B,IAAMiJ,WAAa3C,iBAAiB4C,KAAI,SAACC,GAAC,MAAM,CAAEC,KAAMvJ,oBAAMsJ,EAAE3I,KAAKS,SAAUoI,GAAIxJ,oBAAMsJ,EAAEzI,KAAKO,SAAU,IAE1G,OAAIqI,EAAAA,IAAAA,mBAAkBL,aACX3I,EAAAA,IAAAA,WAAUN,KAAM,8CAEvBuJ,EAAAA,IAAAA,wBAAuBN,WAAY,CAAEG,KAAMK,IAAAA,aAAcJ,GAAI,IAAIG,QAC1DlJ,EAAAA,IAAAA,WAAUN,KAAM,uDAD3B,CAKJ,CMiFwD0J,CAAmCjG,MAAOzD,KAAK,MAQtEiH,sBACGnF,MAAAA,cAACe,IAAAA,MAAK,CAACc,OAAO,KAAKgG,iBAAiB,GAChC7H,MAAAA,cAAC8H,OAAAA,EAAM,CAACC,KAAK,WAAU7G,EAAAA,UAAAA,GAAWhD,KAAM,uBAOpE,GAGZ,C","sources":["webpack://engangsstonad/./src/app/steps/utenlandsopphold/utenlandsoppholdFormQuestions.ts","webpack://engangsstonad/./src/app/steps/utenlandsopphold/utenlandsoppholdValidering.ts","webpack://engangsstonad/./src/app/steps/utenlandsopphold/bostedUtlandListAndDialog/BostedUtlandForm.tsx","webpack://engangsstonad/./src/app/steps/utenlandsopphold/bostedUtlandListAndDialog/types.ts","webpack://engangsstonad/./src/app/steps/utenlandsopphold/bostedUtlandListAndDialog/BostedUtlandList.tsx","webpack://engangsstonad/./src/app/steps/utenlandsopphold/bostedUtlandListAndDialog/BostedUtlandListAndDialog.tsx","webpack://engangsstonad/./src/app/steps/utenlandsopphold/utenlandsoppholdFormUtils.ts","webpack://engangsstonad/./src/app/steps/utenlandsopphold/Utenlandsopphold.tsx"],"sourcesContent":["import { QuestionConfig, Questions } from '@navikt/sif-common-question-config';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\nimport { UtenlandsoppholdFormData, UtenlandsoppholdFieldNames } from './utenlandsoppholdFormTypes';\n\nconst UtenlandsoppholdFormConfig: QuestionConfig<UtenlandsoppholdFormData, UtenlandsoppholdFieldNames> = {\n    [UtenlandsoppholdFieldNames.harBoddUtenforNorgeSiste12Mnd]: {\n        isAnswered: ({ harBoddUtenforNorgeSiste12Mnd }) => harBoddUtenforNorgeSiste12Mnd !== YesOrNo.UNANSWERED,\n        isIncluded: () => true,\n        visibilityFilter: ({ skalBoUtenforNorgeNeste12Mnd }) => skalBoUtenforNorgeNeste12Mnd !== YesOrNo.UNANSWERED,\n    },\n    [UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd]: {\n        isAnswered: ({ utenlandsoppholdSiste12Mnd }) => utenlandsoppholdSiste12Mnd.length > 0,\n        isOptional: () => true,\n        isIncluded: ({ harBoddUtenforNorgeSiste12Mnd }) => harBoddUtenforNorgeSiste12Mnd === YesOrNo.YES,\n    },\n    [UtenlandsoppholdFieldNames.skalBoUtenforNorgeNeste12Mnd]: {\n        isAnswered: ({ skalBoUtenforNorgeNeste12Mnd }) => skalBoUtenforNorgeNeste12Mnd !== YesOrNo.UNANSWERED,\n        isIncluded: () => true,\n    },\n    [UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd]: {\n        isAnswered: ({ utenlandsoppholdNeste12Mnd }) => utenlandsoppholdNeste12Mnd.length > 0,\n        isOptional: () => true,\n        isIncluded: ({ skalBoUtenforNorgeNeste12Mnd }) => skalBoUtenforNorgeNeste12Mnd === YesOrNo.YES,\n    },\n};\n\nexport const utenlandsoppholdFormQuestions = Questions<UtenlandsoppholdFormData, UtenlandsoppholdFieldNames>(\n    UtenlandsoppholdFormConfig\n);\n","import {\n    date1YearAgo,\n    date1YearFromNow,\n    dateRangesCollide,\n    dateRangesExceedsRange,\n    formatDateExtended,\n    intlUtils,\n} from '@navikt/fp-common';\nimport dayjs from 'dayjs';\nimport { BostedUtland } from './bostedUtlandListAndDialog/types';\nimport isBetween from 'dayjs/plugin/isBetween';\nimport { IntlShape } from 'react-intl';\n\ndayjs.extend(isBetween);\n\nconst dateIsWithinRange = (date: Date, minDate: Date, maxDate: Date) => {\n    return dayjs(date).isBetween(minDate, maxDate, 'day', '[]');\n};\n\nconst validateDateInRange = (\n    intl: IntlShape,\n    date: Date | undefined,\n    minDate: Date,\n    maxDate: Date,\n    isFomDate: boolean\n) => {\n    if (date === undefined) {\n        if (isFomDate) {\n            return intlUtils(intl, 'valideringsfeil.fraOgMedDato.gyldigDato');\n        }\n\n        return intlUtils(intl, 'valideringsfeil.tilOgMedDato.gyldigDato');\n    }\n\n    if (!dateIsWithinRange(date, minDate, maxDate)) {\n        return intlUtils(intl, 'valideringsfeil.dateOutsideRange', {\n            fom: formatDateExtended(minDate),\n            tom: formatDateExtended(maxDate),\n        });\n    }\n\n    return undefined;\n};\n\nconst validateFromDate = (intl: IntlShape, date: Date | undefined, minDate: Date, maxDate: Date, toDate?: Date) => {\n    const error = validateDateInRange(intl, date, minDate, maxDate, true);\n    if (error !== undefined) {\n        return error;\n    }\n    if (toDate && dayjs(date).isAfter(toDate, 'day')) {\n        return intlUtils(intl, 'valideringsfeil.utenlandsopphold.førTilDato');\n    }\n    return undefined;\n};\n\nconst validateToDate = (intl: IntlShape, date: Date | undefined, minDate: Date, maxDate: Date, fromDate?: Date) => {\n    const error = validateDateInRange(intl, date, minDate, maxDate, false);\n    if (error !== undefined) {\n        return error;\n    }\n    if (fromDate && dayjs(date).isBefore(fromDate, 'day')) {\n        return intlUtils(intl, 'valideringsfeil.utenlandsopphold.etterFraDato');\n    }\n    return undefined;\n};\n\nexport const dateRangeValidation = {\n    validateToDate,\n    validateFromDate,\n};\n\nexport const validateUtenlandsoppholdNeste12Mnd = (utenlandsopphold: BostedUtland[], intl: IntlShape) => {\n    if (utenlandsopphold.length === 0) {\n        return intlUtils(intl, 'valideringsfeil.utenlandsopphold.neste12Måneder.ikkeRegistrert');\n    }\n\n    const dateRanges = utenlandsopphold.map((u) => ({ from: dayjs(u.fom).toDate(), to: dayjs(u.tom).toDate() }));\n\n    if (dateRangesCollide(dateRanges)) {\n        return intlUtils(intl, 'valideringsfeil.utenlandsopphold.overlapp');\n    }\n    if (dateRangesExceedsRange(dateRanges, { from: new Date(), to: date1YearFromNow })) {\n        return intlUtils(intl, 'valideringsfeil.utenlandsoppholdUtenforPeriode');\n    }\n    return undefined;\n};\n\nexport const validateUtenlandsoppholdSiste12Mnd = (utenlandsopphold: BostedUtland[], intl: IntlShape) => {\n    if (utenlandsopphold.length === 0) {\n        return intlUtils(intl, 'valideringsfeil.utenlandsopphold.siste12Måneder.ikkeRegistrert');\n    }\n\n    const dateRanges = utenlandsopphold.map((u) => ({ from: dayjs(u.fom).toDate(), to: dayjs(u.tom).toDate() }));\n\n    if (dateRangesCollide(dateRanges)) {\n        return intlUtils(intl, 'valideringsfeil.utenlandsopphold.overlapp');\n    }\n    if (dateRangesExceedsRange(dateRanges, { from: date1YearAgo, to: new Date() })) {\n        return intlUtils(intl, 'valideringsfeil.utenlandsoppholdUtenforPeriode');\n    }\n\n    return undefined;\n};\n","import React from 'react';\nimport { FormattedMessage, IntlShape, useIntl } from 'react-intl';\nimport { getTypedFormComponents, ISOStringToDate } from '@navikt/sif-common-formik-ds/lib';\nimport getMessage from 'common/util/i18nUtils';\nimport { BostedUtland, isValidBostedUtland } from './types';\nimport { Block, intlUtils } from '@navikt/fp-common';\nimport { dateRangeValidation } from '../utenlandsoppholdValidering';\nimport { Heading } from '@navikt/ds-react';\n\nexport const commonFieldErrorRenderer = (intl: IntlShape, error: any): any => {\n    if (typeof error === 'object' && error.key !== undefined) {\n        return intl.formatMessage({ id: error.key }, error.values);\n    }\n    if (typeof error === 'string') {\n        return error;\n    }\n    return error !== undefined;\n};\n\nexport interface BostedUtlandFormLabels {\n    tittel: string;\n}\n\ninterface Props {\n    minDate: Date;\n    maxDate: Date;\n    bosted?: BostedUtland;\n    onSubmit: (values: BostedUtland) => void;\n    onCancel: () => void;\n    erFremtidigOpphold: boolean;\n}\n\nenum BostedUtlandFormFields {\n    fom = 'fom',\n    tom = 'tom',\n    landkode = 'landkode',\n}\n\ntype FormValues = Partial<{\n    [BostedUtlandFormFields.fom]: string;\n    [BostedUtlandFormFields.tom]: string;\n    [BostedUtlandFormFields.landkode]: string;\n}>;\n\nconst Form = getTypedFormComponents<BostedUtlandFormFields, FormValues>();\n\nconst mapBostedToFormValues = (bosted: BostedUtland): FormValues => {\n    return {\n        fom: bosted.fom,\n        tom: bosted.tom,\n        landkode: bosted.landkode,\n    };\n};\n\nconst BostedUtlandForm: React.FunctionComponent<Props> = ({\n    maxDate,\n    minDate,\n    bosted,\n    onSubmit,\n    onCancel,\n    erFremtidigOpphold,\n}) => {\n    const intl = useIntl();\n    const onFormikSubmit = (formValues: FormValues) => {\n        const updatedBosted: Partial<BostedUtland> = {\n            ...bosted,\n            fom: formValues.fom,\n            tom: formValues.tom,\n            landkode: formValues.landkode,\n        };\n        if (isValidBostedUtland(updatedBosted)) {\n            onSubmit(updatedBosted);\n        } else {\n            throw new Error('BostedUtlandForm: Formvalues is not a valid BostedUtland on submit.');\n        }\n    };\n\n    return (\n        <Form.FormikWrapper\n            initialValues={bosted ? mapBostedToFormValues(bosted) : {}}\n            onSubmit={onFormikSubmit}\n            renderForm={({ values }) => {\n                return (\n                    <Form.Form onCancel={onCancel}>\n                        <Heading size=\"medium\">\n                            <FormattedMessage id={'utenlandsopphold.leggTilUtenlandsopphold.tittel'} />\n                        </Heading>\n                        <Block>\n                            <Form.DateIntervalPicker\n                                legend={getMessage(intl, 'utenlandsopphold.leggTilUtenlandsopphold.tidsrom')}\n                                fromDatepickerProps={{\n                                    name: BostedUtlandFormFields.fom,\n                                    label: getMessage(intl, 'utenlandsopphold.leggTilUtenlandsopphold.fraogmed'),\n                                    fullscreenOverlay: true,\n                                    placeholder: 'dd.mm.åååå',\n                                    minDate,\n                                    invalidFormatError: 'valideringsfeil.fraOgMedDato.gyldigDato',\n                                    maxDate: ISOStringToDate(values.tom) || maxDate,\n                                    validate: (value) =>\n                                        dateRangeValidation.validateFromDate(\n                                            intl,\n                                            ISOStringToDate(value),\n                                            minDate,\n                                            maxDate,\n                                            ISOStringToDate(values.tom)\n                                        ),\n                                }}\n                                toDatepickerProps={{\n                                    name: BostedUtlandFormFields.tom,\n                                    label: getMessage(intl, 'utenlandsopphold.leggTilUtenlandsopphold.tilogmed'),\n                                    fullscreenOverlay: true,\n                                    placeholder: 'dd.mm.åååå',\n                                    minDate: ISOStringToDate(values.fom) || minDate,\n                                    maxDate,\n                                    invalidFormatError: 'valideringsfeil.tilOgMedDato.gyldigDato',\n                                    validate: (value) =>\n                                        dateRangeValidation.validateToDate(\n                                            intl,\n                                            ISOStringToDate(value),\n                                            minDate,\n                                            maxDate,\n                                            ISOStringToDate(values.fom)\n                                        ),\n                                }}\n                            />\n                        </Block>\n                        <Block margin=\"xl\">\n                            <Form.CountrySelect\n                                name={BostedUtlandFormFields.landkode}\n                                label={\n                                    erFremtidigOpphold\n                                        ? getMessage(\n                                              intl,\n                                              'utenlandsopphold.leggTilUtenlandsopphold.spørsmål.hvilketLandSkalDuBoI'\n                                          )\n                                        : getMessage(\n                                              intl,\n                                              'utenlandsopphold.leggTilUtenlandsopphold.spørsmål.hvilketLandHarDuBoddI'\n                                          )\n                                }\n                                validate={(country) => {\n                                    if (country === '' || !country) {\n                                        return erFremtidigOpphold\n                                            ? intlUtils(\n                                                  intl,\n                                                  'valideringsfeil.leggTilUtenlandsopphold.landDuSkalBoIPåkreved'\n                                              )\n                                            : intlUtils(\n                                                  intl,\n                                                  'valideringsfeil.leggTilUtenlandsopphold.landDuHarBoddIPåkrevd'\n                                              );\n                                    }\n                                }}\n                                useAlpha3Code={false}\n                            />\n                        </Block>\n                    </Form.Form>\n                );\n            }}\n        />\n    );\n};\n\nexport default BostedUtlandForm;\n","export interface BostedUtland {\n    id?: string;\n    fom: string;\n    tom: string;\n    landkode: string;\n}\n\nexport const isValidBostedUtland = (bosted: Partial<BostedUtland>): bosted is BostedUtland => {\n    const { fom, landkode, tom } = bosted;\n    return fom !== undefined && landkode !== undefined && tom !== undefined;\n};\n","import React from 'react';\nimport { useIntl } from 'react-intl';\nimport { getCountryName } from '@navikt/sif-common-formik-ds';\nimport { BostedUtland } from './types';\nimport { ActionLink, bemUtils, formatDateExtended, ItemList } from '@navikt/fp-common';\n\nimport dayjs from 'dayjs';\n\nimport './bostedUtlandList.less';\n\ninterface Props {\n    bosteder: BostedUtland[];\n    onEdit?: (opphold: BostedUtland) => void;\n    onDelete?: (opphold: BostedUtland) => void;\n}\n\nconst bem = bemUtils('bostedUtlandList');\n\nconst BostedUtlandList: React.FunctionComponent<Props> = ({ bosteder, onDelete, onEdit }) => {\n    const intl = useIntl();\n    const renderBostedUtlandLabel = (opphold: BostedUtland): React.ReactNode => {\n        const navn = getCountryName(opphold.landkode, intl.locale);\n        return (\n            <div className={bem.element('label')}>\n                <span className={bem.element('land')}>\n                    {onEdit && <ActionLink onClick={() => onEdit(opphold)}>{navn}</ActionLink>}\n                    {!onEdit && <span>{navn}</span>}\n                </span>\n                <span className={bem.element('dato')}>\n                    {formatDateExtended(dayjs(opphold.fom).toDate())} -{' '}\n                    {formatDateExtended(dayjs(opphold.tom).toDate())}\n                </span>\n            </div>\n        );\n    };\n\n    return (\n        <ItemList<BostedUtland>\n            getItemId={(opphold: BostedUtland) => opphold.id}\n            getItemTitle={(opphold: BostedUtland) => getCountryName(opphold.landkode, intl.locale)}\n            onDelete={onDelete}\n            onEdit={onEdit}\n            labelRenderer={renderBostedUtlandLabel}\n            items={bosteder}\n        />\n    );\n};\n\nexport default BostedUtlandList;\n","import React from 'react';\nimport { FormikModalFormAndList, ModalFormAndListLabels } from '@navikt/sif-common-formik-ds';\nimport BostedUtlandForm from './BostedUtlandForm';\nimport BostedUtlandListe from './BostedUtlandList';\nimport { BostedUtland } from './types';\nimport { sortItemsByFom } from '@navikt/fp-common';\n\ninterface Props<FieldNames> {\n    name: FieldNames;\n    validate?: any;\n    minDate: Date;\n    maxDate: Date;\n    labels: ModalFormAndListLabels;\n    erFremtidigOpphold: boolean;\n}\n\nfunction BostedUtlandListAndDialog<FieldNames>({\n    name,\n    minDate,\n    maxDate,\n    validate,\n    labels,\n    erFremtidigOpphold,\n}: Props<FieldNames>) {\n    return (\n        <FormikModalFormAndList<FieldNames, BostedUtland, string>\n            name={name}\n            labels={labels}\n            validate={validate}\n            dialogWidth=\"narrow\"\n            sortFunc={sortItemsByFom}\n            formRenderer={({ onSubmit, onCancel, item }) => (\n                <BostedUtlandForm\n                    bosted={item}\n                    minDate={minDate}\n                    maxDate={maxDate}\n                    onSubmit={onSubmit}\n                    onCancel={onCancel}\n                    erFremtidigOpphold={erFremtidigOpphold}\n                />\n            )}\n            listRenderer={({ items, onEdit, onDelete }) => (\n                <BostedUtlandListe bosteder={items} onEdit={onEdit} onDelete={onDelete} />\n            )}\n            shouldCloseOnOverlayClick={true}\n        />\n    );\n}\n\nexport default BostedUtlandListAndDialog;\n","import { UtenlandsoppholdFormData } from './utenlandsoppholdFormTypes';\nimport { YesOrNo } from '@navikt/sif-common-formik-ds/lib';\n\nexport const utenlandsoppholdFormCleanup = (formValues: UtenlandsoppholdFormData): UtenlandsoppholdFormData => {\n    const {\n        harBoddUtenforNorgeSiste12Mnd,\n        skalBoUtenforNorgeNeste12Mnd,\n        utenlandsoppholdNeste12Mnd,\n        utenlandsoppholdSiste12Mnd,\n    } = formValues;\n\n    return {\n        harBoddUtenforNorgeSiste12Mnd,\n        skalBoUtenforNorgeNeste12Mnd,\n        utenlandsoppholdNeste12Mnd: skalBoUtenforNorgeNeste12Mnd === YesOrNo.YES ? utenlandsoppholdNeste12Mnd : [],\n        utenlandsoppholdSiste12Mnd: harBoddUtenforNorgeSiste12Mnd === YesOrNo.YES ? utenlandsoppholdSiste12Mnd : [],\n    };\n};\n","import React from 'react';\nimport {\n    bemUtils,\n    Block,\n    date1YearAgo,\n    date1YearFromNow,\n    dateToday,\n    intlUtils,\n    Step,\n    UtvidetInformasjon,\n    validateYesOrNoIsAnswered,\n} from '@navikt/fp-common';\nimport { UnansweredQuestionsInfo } from '@navikt/sif-common-formik-ds/lib';\nimport {\n    UtenlandsoppholdFieldNames,\n    UtenlandsoppholdFormComponents,\n    UtenlandsoppholdFormData,\n} from './utenlandsoppholdFormTypes';\nimport { useIntl } from 'react-intl';\nimport actionCreator from 'app/context/action/actionCreator';\nimport stepConfig, { getPreviousStepHref } from 'app/step-config/stepConfig';\nimport { utenlandsoppholdFormQuestions } from './utenlandsoppholdFormQuestions';\nimport BostedUtlandListAndDialog from './bostedUtlandListAndDialog/BostedUtlandListAndDialog';\nimport { utenlandsoppholdFormCleanup } from './utenlandsoppholdFormUtils';\nimport { useEngangsstønadContext } from 'app/context/hooks/useEngangsstønadContext';\nimport { onAvbrytSøknad } from 'app/util/globalUtil';\nimport getMessage from 'common/util/i18nUtils';\nimport { validateUtenlandsoppholdNeste12Mnd, validateUtenlandsoppholdSiste12Mnd } from './utenlandsoppholdValidering';\n\nimport { logAmplitudeEvent } from 'app/amplitude/amplitude';\nimport { PageKeys } from 'app/types/PageKeys';\nimport { useNavigate } from 'react-router-dom';\nimport { BostedUtland } from './bostedUtlandListAndDialog/types';\n\nimport './utenlandsopphold.less';\nimport { Button } from '@navikt/ds-react';\n\nconst Utenlandsopphold: React.FunctionComponent = () => {\n    const intl = useIntl();\n    const bem = bemUtils('utenlandsopphold');\n    const navigate = useNavigate();\n\n    const { state, dispatch } = useEngangsstønadContext();\n    const initialValues = state.søknad.utenlandsopphold;\n\n    logAmplitudeEvent('sidevisning', {\n        app: 'engangsstonadny',\n        team: 'foreldrepenger',\n        pageKey: PageKeys.Utenlandsopphold,\n    });\n\n    const onValidSubmit = (values: Partial<UtenlandsoppholdFormData>) => {\n        dispatch(\n            actionCreator.setUtenlandsopphold({\n                skalBoUtenforNorgeNeste12Mnd: values.skalBoUtenforNorgeNeste12Mnd!,\n                harBoddUtenforNorgeSiste12Mnd: values.harBoddUtenforNorgeSiste12Mnd!,\n                utenlandsoppholdNeste12Mnd: values.utenlandsoppholdNeste12Mnd || [],\n                utenlandsoppholdSiste12Mnd: values.utenlandsoppholdSiste12Mnd || [],\n            })\n        );\n        navigate('/soknad/oppsummering');\n    };\n\n    return (\n        <UtenlandsoppholdFormComponents.FormikWrapper\n            initialValues={initialValues}\n            onSubmit={(values) => onValidSubmit(values)}\n            renderForm={({ values: formValues }) => {\n                // @ts-ignore Fiks denne\n                const visibility = utenlandsoppholdFormQuestions.getVisbility(formValues);\n                const allQuestionsAnswered = visibility.areAllQuestionsAnswered();\n                return (\n                    <Step\n                        bannerTitle={getMessage(intl, 'søknad.pageheading')}\n                        activeStepId=\"utenlandsopphold\"\n                        pageTitle={getMessage(intl, 'søknad.utenlandsopphold')}\n                        stepTitle={getMessage(intl, 'søknad.utenlandsopphold')}\n                        backLinkHref={getPreviousStepHref('utenlandsopphold')}\n                        onCancel={() => onAvbrytSøknad(dispatch, navigate)}\n                        steps={stepConfig}\n                        kompakt={true}\n                    >\n                        <UtenlandsoppholdFormComponents.Form\n                            includeButtons={false}\n                            includeValidationSummary={true}\n                            cleanup={(values) => utenlandsoppholdFormCleanup(values)}\n                            noButtonsContentRenderer={\n                                allQuestionsAnswered\n                                    ? undefined\n                                    : () => (\n                                          <UnansweredQuestionsInfo>\n                                              {intlUtils(intl, 'søknad.footer.spørsmålMåBesvares')}\n                                          </UnansweredQuestionsInfo>\n                                      )\n                            }\n                        >\n                            <div className={bem.block}>\n                                {visibility.isVisible(UtenlandsoppholdFieldNames.skalBoUtenforNorgeNeste12Mnd) && (\n                                    <Block padBottom=\"l\">\n                                        <UtenlandsoppholdFormComponents.YesOrNoQuestion\n                                            legend={intlUtils(intl, 'utenlandsopphold.neste12Måneder.spørsmål')}\n                                            name={UtenlandsoppholdFieldNames.skalBoUtenforNorgeNeste12Mnd}\n                                            labels={{\n                                                no: intlUtils(\n                                                    intl,\n                                                    'utenlandsopphold.neste12MånederInfotekst.radiobutton.boddINorge'\n                                                ),\n                                                yes: intlUtils(\n                                                    intl,\n                                                    'utenlandsopphold.neste12MånederInfotekst.radiobutton.boddIUtlandet'\n                                                ),\n                                            }}\n                                            validate={validateYesOrNoIsAnswered}\n                                        />\n                                        <UtvidetInformasjon\n                                            apneLabel={intlUtils(\n                                                intl,\n                                                'utenlandsopphold.neste12MånederInfotekst.apneLabel'\n                                            )}\n                                        >\n                                            {intlUtils(intl, 'utenlandsopphold.neste12MånederInfotekst')}\n                                        </UtvidetInformasjon>\n                                        {visibility.isVisible(\n                                            UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd\n                                        ) && (\n                                            <Block padBottom=\"l\">\n                                                <BostedUtlandListAndDialog<UtenlandsoppholdFieldNames>\n                                                    name={UtenlandsoppholdFieldNames.utenlandsoppholdNeste12Mnd}\n                                                    minDate={dateToday}\n                                                    maxDate={date1YearFromNow}\n                                                    labels={{\n                                                        addLabel: intlUtils(intl, 'utenlandsopphold.knapp.leggTilLand'),\n                                                        modalTitle: 'Utenlandsopphold neste 12 måneder',\n                                                    }}\n                                                    erFremtidigOpphold={true}\n                                                    validate={(value: BostedUtland[]) =>\n                                                        validateUtenlandsoppholdNeste12Mnd(value, intl)\n                                                    }\n                                                />\n                                            </Block>\n                                        )}\n                                    </Block>\n                                )}\n\n                                {visibility.isVisible(UtenlandsoppholdFieldNames.harBoddUtenforNorgeSiste12Mnd) && (\n                                    <Block margin=\"xl\">\n                                        <UtenlandsoppholdFormComponents.YesOrNoQuestion\n                                            legend={intlUtils(intl, 'utenlandsopphold.siste12Måneder.spørsmål')}\n                                            name={UtenlandsoppholdFieldNames.harBoddUtenforNorgeSiste12Mnd}\n                                            labels={{\n                                                no: intlUtils(\n                                                    intl,\n                                                    'utenlandsopphold.siste12MånederInfotekst.radiobutton.boddINorge'\n                                                ),\n                                                yes: intlUtils(\n                                                    intl,\n                                                    'utenlandsopphold.siste12MånederInfotekst.radiobutton.boddIUtlandet'\n                                                ),\n                                            }}\n                                            validate={validateYesOrNoIsAnswered}\n                                        />\n                                        <UtvidetInformasjon\n                                            apneLabel={intlUtils(\n                                                intl,\n                                                'utenlandsopphold.siste12MånederInfotekst.apneLabel'\n                                            )}\n                                        >\n                                            {intlUtils(intl, 'utenlandsopphold.siste12MånederInfotekst')}\n                                        </UtvidetInformasjon>\n                                        {visibility.isVisible(\n                                            UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd\n                                        ) && (\n                                            <Block padBottom=\"xl\">\n                                                <BostedUtlandListAndDialog<UtenlandsoppholdFieldNames>\n                                                    minDate={date1YearAgo}\n                                                    maxDate={dateToday}\n                                                    name={UtenlandsoppholdFieldNames.utenlandsoppholdSiste12Mnd}\n                                                    labels={{\n                                                        addLabel: intlUtils(intl, 'utenlandsopphold.knapp.leggTilLand'),\n                                                        modalTitle: 'Utenlandsopphold siste 12 måneder',\n                                                    }}\n                                                    erFremtidigOpphold={false}\n                                                    validate={(value: BostedUtland[]) =>\n                                                        validateUtenlandsoppholdSiste12Mnd(value, intl)\n                                                    }\n                                                />\n                                            </Block>\n                                        )}\n                                    </Block>\n                                )}\n\n                                {allQuestionsAnswered && (\n                                    <Block margin=\"xl\" textAlignCenter={true}>\n                                        <Button type=\"submit\">{getMessage(intl, 'søknad.gåVidere')}</Button>\n                                    </Block>\n                                )}\n                            </div>\n                        </UtenlandsoppholdFormComponents.Form>\n                    </Step>\n                );\n            }}\n        />\n    );\n};\n\nexport default Utenlandsopphold;\n"],"names":["UtenlandsoppholdFormConfig","_defineProperty","_UtenlandsoppholdForm","UtenlandsoppholdFieldNames","isAnswered","_ref","harBoddUtenforNorgeSiste12Mnd","YesOrNo","isIncluded","visibilityFilter","_ref2","skalBoUtenforNorgeNeste12Mnd","_ref3","utenlandsoppholdSiste12Mnd","length","isOptional","_ref4","_ref5","_ref6","utenlandsoppholdNeste12Mnd","_ref7","utenlandsoppholdFormQuestions","Questions","dayjs","isBetween","validateDateInRange","intl","date","minDate","maxDate","isFomDate","undefined","intlUtils","dateIsWithinRange","fom","formatDateExtended","tom","dateRangeValidation","validateToDate","fromDate","error","isBefore","validateFromDate","toDate","isAfter","BostedUtlandFormFields","Form","getTypedFormComponents","mapBostedToFormValues","bosted","landkode","BostedUtlandForm","onSubmit","onCancel","erFremtidigOpphold","useIntl","React","FormikWrapper","initialValues","onFormikSubmit","formValues","updatedBosted","_objectSpread","isValidBostedUtland","Error","renderForm","values","Heading","size","FormattedMessage","id","Block","DateIntervalPicker","legend","getMessage","fromDatepickerProps","name","label","fullscreenOverlay","placeholder","invalidFormatError","ISOStringToDate","validate","value","toDatepickerProps","margin","CountrySelect","country","useAlpha3Code","bem","bemUtils","BostedUtlandList","bosteder","onDelete","onEdit","ItemList","getItemId","opphold","getItemTitle","getCountryName","locale","labelRenderer","renderBostedUtlandLabel","navn","className","element","ActionLink","onClick","items","BostedUtlandListAndDialog","labels","FormikModalFormAndList","dialogWidth","sortFunc","sortItemsByFom","formRenderer","item","listRenderer","BostedUtlandListe","shouldCloseOnOverlayClick","Utenlandsopphold","navigate","useNavigate","_useEngangsstønadCont","useEngangsstønadContext","state","dispatch","søknad","utenlandsopphold","logAmplitudeEvent","app","team","pageKey","PageKeys","UtenlandsoppholdFormComponents","onValidSubmit","actionCreator","visibility","getVisbility","allQuestionsAnswered","areAllQuestionsAnswered","Step","bannerTitle","activeStepId","pageTitle","stepTitle","backLinkHref","getPreviousStepHref","onAvbrytSøknad","steps","stepConfig","kompakt","includeButtons","includeValidationSummary","cleanup","utenlandsoppholdFormCleanup","noButtonsContentRenderer","UnansweredQuestionsInfo","block","isVisible","padBottom","no","yes","validateYesOrNoIsAnswered","UtvidetInformasjon","apneLabel","dateToday","date1YearFromNow","addLabel","modalTitle","validateUtenlandsoppholdNeste12Mnd","dateRanges","map","u","from","to","dateRangesCollide","dateRangesExceedsRange","Date","date1YearAgo","validateUtenlandsoppholdSiste12Mnd","textAlignCenter","Button","type"],"sourceRoot":""}