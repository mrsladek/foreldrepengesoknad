{"version":3,"file":"steps-sokersituasjon-Sokersituasjon-stories.58025d35.iframe.bundle.js","mappings":"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","sources":["webpack://engangsstonad/../../node_modules/.pnpm/@navikt+sif-common-question-config@0.0.7/node_modules/@navikt/sif-common-question-config/lib/index.js","webpack://engangsstonad/./src/app/steps/sokersituasjon/Sokersituasjon.stories.tsx","webpack://engangsstonad/./src/app/steps/sokersituasjon/søkersituasjonQuestionsConfig.ts","webpack://engangsstonad/./src/app/steps/sokersituasjon/Søkersituasjon.tsx","webpack://engangsstonad/./src/app/steps/sokersituasjon/søkersituasjonUtils.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.questionValueIsOk = (value) => {\n    return value !== undefined && value !== '';\n};\nconst isQuestionVisible = (questions, question, payload) => {\n    const config = questions[question];\n    if (!config) {\n        return false;\n    }\n    if (config.isIncluded && config.isIncluded(payload) === false) {\n        return false;\n    }\n    if (config.visibilityFilter && config.visibilityFilter(payload) === false) {\n        return false;\n    }\n    if (config.parentQuestion !== undefined) {\n        const parentQuestion = questions[config.parentQuestion];\n        return isQuestionVisible(questions, config.parentQuestion, payload) && parentQuestion.isAnswered(payload);\n    }\n    return true;\n};\nconst isQuestionAnswered = (questions, question, payload) => {\n    const config = questions[question];\n    if (!config || !config.isAnswered) {\n        return false;\n    }\n    return config.isAnswered(payload);\n};\nconst isQuestionIncluded = (questions, question, payload) => {\n    const config = questions[question];\n    if (!config) {\n        return false;\n    }\n    return config.isIncluded ? config.isIncluded(payload) : true;\n};\nconst areAllQuestionsAnswered = (questions, payload) => {\n    let allQuestionsHasAnswers = true;\n    Object.keys(questions).forEach((key) => {\n        const question = questions[key];\n        if (isQuestionVisible(questions, key, payload)) {\n            const isOptional = question.isOptional !== undefined ? question.isOptional(payload) === true : false;\n            allQuestionsHasAnswers = allQuestionsHasAnswers === true && (question.isAnswered(payload) || isOptional);\n        }\n    });\n    return allQuestionsHasAnswers;\n};\nconst getIncludedQuestions = (questions, payload) => {\n    const keys = Object.keys(questions).filter((key) => {\n        return isQuestionIncluded(questions, key, payload);\n    });\n    return keys;\n};\nconst validateQuestion = (value, questions, question, payload) => {\n    const config = questions[question];\n    if (!config || !config.validate) {\n        return undefined;\n    }\n    return config.validate(payload);\n};\nexports.Questions = (questions) => ({\n    getVisbility: (payload) => ({\n        validate: (key) => (value) => validateQuestion(value, questions, key, payload),\n        isVisible: (key) => isQuestionVisible(questions, key, payload),\n        isAnswered: (key) => isQuestionAnswered(questions, key, payload),\n        isIncluded: (key) => isQuestionIncluded(questions, key, payload),\n        areAllQuestionsAnswered: () => areAllQuestionsAnswered(questions, payload),\n        getIncludedQuestions: () => getIncludedQuestions(questions, payload),\n    }),\n    getQuestionVisbilityInfo: (key, payload) => {\n        const info = {\n            validate: (value) => validateQuestion(value, questions, key, payload),\n            isVisible: () => isQuestionVisible(questions, key, payload),\n            isAnswered: () => isQuestionAnswered(questions, key, payload),\n        };\n        return info;\n    },\n});\n","import React from 'react';\nimport { Story } from '@storybook/react';\nimport { withRouter } from 'storybook-addon-react-router-v6';\nimport EngangsstønadContextProvider from '../../context/EngangsstønadContext';\nimport Søkersituasjon from './Søkersituasjon';\nimport IntlProvider from 'intl/IntlProvider';\n\nimport '@navikt/ds-css';\nimport '../../styles/globals.less';\n\nexport default {\n  title: 'Søkersituasjon',\n  component: Søkersituasjon,\n  decorators: [withRouter],\n};\n\nconst Template: Story<any> = () => {\n  return (\n    <EngangsstønadContextProvider>\n      <IntlProvider språkkode=\"nb\">\n        <Søkersituasjon />\n      </IntlProvider>\n    </EngangsstønadContextProvider>\n  )\n  };\n\nexport const VisSide = Template.bind({});\n","import { QuestionConfig, Questions } from '@navikt/sif-common-question-config/lib';\nimport { SøkersituasjonFormData, SøkersituasjonFormField } from './søkersituasjonFormConfig';\n\nconst SøkersituasjonFormConfig: QuestionConfig<SøkersituasjonFormData, SøkersituasjonFormField> = {\n    [SøkersituasjonFormField.situasjon]: {\n        isIncluded: () => true,\n        isAnswered: ({ situasjon }) => situasjon !== undefined,\n    },\n};\n\nconst søkersituasjonQuestionsConfig = Questions<SøkersituasjonFormData, SøkersituasjonFormField>(\n    SøkersituasjonFormConfig\n);\n\nexport default søkersituasjonQuestionsConfig;\n","import { bemUtils, Block, intlUtils, Step } from '@navikt/fp-common';\nimport stepConfig from 'app/step-config/stepConfig';\nimport getMessage from 'common/util/i18nUtils';\nimport React from 'react';\nimport { Button } from '@navikt/ds-react';\nimport { useIntl } from 'react-intl';\nimport actionCreator from 'app/context/action/actionCreator';\nimport {\n    SøkersituasjonFormComponents,\n    SøkersituasjonFormData,\n    SøkersituasjonFormField,\n} from './søkersituasjonFormConfig';\nimport { useEngangsstønadContext } from 'app/context/hooks/useEngangsstønadContext';\n\nimport { cleanupSøkersituasjon } from './søkersituasjonUtils';\nimport { UnansweredQuestionsInfo } from '@navikt/sif-common-formik-ds/lib';\nimport søkersituasjonQuestionsConfig from './søkersituasjonQuestionsConfig';\nimport { useNavigate } from 'react-router-dom';\nimport { onAvbrytSøknad } from 'app/util/globalUtil';\n\nconst Søkersituasjon: React.FunctionComponent = () => {\n    const intl = useIntl();\n    const bem = bemUtils('søkersituasjon');\n    const navigate = useNavigate();\n    const { state, dispatch } = useEngangsstønadContext();\n    const søkersituasjonValues = state.søknad.søkersituasjon;\n\n    const onValidSubmit = (values: Partial<SøkersituasjonFormData>) => {\n        dispatch(\n            actionCreator.setSøkersituasjon({\n                situasjon: values.situasjon,\n            })\n        );\n        navigate('/soknad/om-barnet');\n    };\n\n    return (\n        <SøkersituasjonFormComponents.FormikWrapper\n            initialValues={søkersituasjonValues}\n            onSubmit={(values) => onValidSubmit(values)}\n            renderForm={({ values: formValues }) => {\n                const visibility = søkersituasjonQuestionsConfig.getVisbility(formValues);\n                const allQuestionsAnswered = visibility.areAllQuestionsAnswered();\n                return (\n                    <Step\n                        bannerTitle={getMessage(intl, 'søknad.pageheading')}\n                        activeStepId=\"søkersituasjon\"\n                        pageTitle={getMessage(intl, 'søknad.søkersituasjon')}\n                        stepTitle={getMessage(intl, 'søknad.søkersituasjon')}\n                        onCancel={() => onAvbrytSøknad(dispatch, navigate)}\n                        steps={stepConfig}\n                        kompakt={true}\n                    >\n                        <SøkersituasjonFormComponents.Form\n                            includeButtons={false}\n                            cleanup={() => cleanupSøkersituasjon(formValues)}\n                            noButtonsContentRenderer={\n                                allQuestionsAnswered\n                                    ? undefined\n                                    : () => (\n                                          <UnansweredQuestionsInfo>\n                                              {intlUtils(intl, 'søknad.footer.spørsmålMåBesvares')}\n                                          </UnansweredQuestionsInfo>\n                                      )\n                            }\n                        >\n                            <div className={bem.block}>\n                                <Block margin=\"xl\">\n                                    <SøkersituasjonFormComponents.RadioGroup\n                                        name={SøkersituasjonFormField.situasjon}\n                                        radios={[\n                                            {\n                                                label: intlUtils(intl, 'søkersituasjon.radiobutton.fødsel'),\n                                                value: 'fødsel',\n                                            },\n                                            {\n                                                label: intlUtils(intl, 'søkersituasjon.radiobutton.adopsjon'),\n                                                value: 'adopsjon',\n                                            },\n                                        ]}\n                                        legend={getMessage(intl, 'søkersituasjon.text.situasjon')}\n                                    />\n                                </Block>\n                                {allQuestionsAnswered && (\n                                    <Block margin=\"xl\" textAlignCenter={true}>\n                                        <Button type=\"submit\">{getMessage(intl, 'søknad.gåVidere')}</Button>\n                                    </Block>\n                                )}\n                            </div>\n                        </SøkersituasjonFormComponents.Form>\n                    </Step>\n                );\n            }}\n        />\n    );\n};\nexport default Søkersituasjon;\n","import { SøkersituasjonFormData } from './søkersituasjonFormConfig';\n\nexport const cleanupSøkersituasjon = (formData: SøkersituasjonFormData): SøkersituasjonFormData => {\n    const cleanedData: Partial<SøkersituasjonFormData> = {};\n    cleanedData.situasjon = formData.situasjon;\n\n    return cleanedData as SøkersituasjonFormData;\n};\n"],"names":["isQuestionVisible","questions","question","payload","config","isIncluded","visibilityFilter","undefined","parentQuestion","isAnswered","isQuestionAnswered","isQuestionIncluded","validateQuestion","value","validate","exports","getVisbility","key","isVisible","areAllQuestionsAnswered","allQuestionsHasAnswers","Object","keys","forEach","isOptional","getIncludedQuestions","filter","getQuestionVisbilityInfo","title","component","Søkersituasjon","decorators","withRouter","VisSide","Template","React","EngangsstønadContextProvider","IntlProvider","språkkode","bind","SøkersituasjonFormConfig","_defineProperty","SøkersituasjonFormField","_ref","situasjon","Questions","intl","useIntl","bem","bemUtils","navigate","useNavigate","_useEngangsstønadCont","useEngangsstønadContext","state","dispatch","søkersituasjonValues","søknad","søkersituasjon","SøkersituasjonFormComponents","initialValues","onSubmit","values","onValidSubmit","actionCreator","renderForm","formValues","allQuestionsAnswered","søkersituasjonQuestionsConfig","Step","bannerTitle","getMessage","activeStepId","pageTitle","stepTitle","onCancel","onAvbrytSøknad","steps","stepConfig","kompakt","includeButtons","cleanup","cleanupSøkersituasjon","formData","cleanedData","noButtonsContentRenderer","UnansweredQuestionsInfo","intlUtils","className","block","Block","margin","name","radios","label","legend","textAlignCenter","Button","type"],"sourceRoot":""}